classes/class_gpuparticlescollisionheightfield3d
-----------------------------------------------------------
GPUParticlesCollisionHeightField3D Inherits: GPUParticlesCollision3D < VisualInstance3D < Node3D < Node < Object A real-time heightmap-shaped 3D particle collision shape affecting GPUParticles3D nodes.  Description A real-time heightmap-shaped 3D particle collision shape affecting GPUParticles3D nodes. Heightmap shapes allow for efficiently representing collisions for convex and concave objects with a single "floor" (such as terrain). This is less flexible than GPUParticlesCollisionSDF3D, but it doesn't require a baking step. GPUParticlesCollisionHeightField3D can also be regenerated in real-time when it is moved, when the camera moves, or even continuously. This makes GPUParticlesCollisionHeightField3D a good choice for weather effects such as rain and snow and games with highly dynamic geometry. However, this class is limited since heightmaps cannot represent overhangs (e.g. indoors or caves). Note: ParticleProcessMaterial.collision_mode must be true on the GPUParticles3D's process material for collision to work. Note: Particle collision only affects GPUParticles3D, not CPUParticles3D.   Properties  
bool follow_camera_enabled false  
Resolution resolution 2  
Vector3 size Vector3(2, 2, 2)  
UpdateMode update_mode 0     Enumerations enum Resolution: 
Resolution RESOLUTION_256 = 0
 Generate a 256Ã—256 heightmap. Intended for small-scale scenes, or larger scenes with no distant particles. 
Resolution RESOLUTION_512 = 1
 Generate a 512Ã—512 heightmap. Intended for medium-scale scenes, or larger scenes with no distant particles. 
Resolution RESOLUTION_1024 = 2
 Generate a 1024Ã—1024 heightmap. Intended for large scenes with distant particles. 
Resolution RESOLUTION_2048 = 3
 Generate a 2048Ã—2048 heightmap. Intended for very large scenes with distant particles. 
Resolution RESOLUTION_4096 = 4
 Generate a 4096Ã—4096 heightmap. Intended for huge scenes with distant particles. 
Resolution RESOLUTION_8192 = 5
 Generate a 8192Ã—8192 heightmap. Intended for gigantic scenes with distant particles. 
Resolution RESOLUTION_MAX = 6
 Represents the size of the Resolution enum. enum UpdateMode: 
UpdateMode UPDATE_MODE_WHEN_MOVED = 0
 Only update the heightmap when the GPUParticlesCollisionHeightField3D node is moved, or when the camera moves if follow_camera_enabled is true. An update can be forced by slightly moving the GPUParticlesCollisionHeightField3D in any direction, or by calling RenderingServer.particles_collision_height_field_update. 
UpdateMode UPDATE_MODE_ALWAYS = 1
 Update the heightmap every frame. This has a significant performance cost. This update should only be used when geometry that particles can collide with changes significantly during gameplay.   Property Descriptions 
bool follow_camera_enabled = false
  void set_follow_camera_enabled ( bool value )
 
bool is_follow_camera_enabled ( )
  If true, the GPUParticlesCollisionHeightField3D will follow the current camera in global space. The GPUParticlesCollisionHeightField3D does not need to be a child of the Camera3D node for this to work. Following the camera has a performance cost, as it will force the heightmap to update whenever the camera moves. Consider lowering resolution to improve performance if follow_camera_enabled is true. 
Resolution resolution = 2
  void set_resolution ( Resolution value )
 
Resolution get_resolution ( )
  Higher resolutions can represent small details more accurately in large scenes, at the cost of lower performance. If update_mode is UPDATE_MODE_ALWAYS, consider using the lowest resolution possible. 
Vector3 size = Vector3(2, 2, 2)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The collision heightmap's size in 3D units. To improve heightmap quality, size should be set as small as possible while covering the parts of the scene you need. 
UpdateMode update_mode = 0
  void set_update_mode ( UpdateMode value )
 
UpdateMode get_update_mode ( )
  The update policy to use for the generated heightmap.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gpuparticlescollisionheightfield3d.html


classes/class_canvasitem
-----------------------------------------------------------
CanvasItem Inherits: Node < Object Inherited By: Control, Node2D Abstract base class for everything in 2D space.  Description Abstract base class for everything in 2D space. Canvas items are laid out in a tree; children inherit and extend their parent's transform. CanvasItem is extended by Control for GUI-related nodes, and by Node2D for 2D game objects. Any CanvasItem can draw. For this, queue_redraw is called by the engine, then NOTIFICATION_DRAW will be received on idle time to request a redraw. Because of this, canvas items don't need to be redrawn on every frame, improving the performance significantly. Several functions for drawing on the CanvasItem are provided (see draw_* functions). However, they can only be used inside _draw, its corresponding Object._notification or methods connected to the draw signal. Canvas items are drawn in tree order on their canvas layer. By default, children are on top of their parents, so a root CanvasItem will be drawn behind everything. This behavior can be changed on a per-item basis. A CanvasItem can be hidden, which will also hide its children. By adjusting various other properties of a CanvasItem, you can also modulate its color (via modulate or self_modulate), change its Z-index, blend mode, and more.   Tutorials  Viewport and canvas transforms Custom drawing in 2D Audio Spectrum Demo    Properties  
ClipChildrenMode clip_children 0  
int light_mask 1  
Material material   
Color modulate Color(1, 1, 1, 1)  
Color self_modulate Color(1, 1, 1, 1)  
bool show_behind_parent false  
TextureFilter texture_filter 0  
TextureRepeat texture_repeat 0  
bool top_level false  
bool use_parent_material false  
int visibility_layer 1  
bool visible true  
bool y_sort_enabled false  
bool z_as_relative true  
int z_index 0     Methods  
void _draw ( ) virtual  
void draw_animation_slice ( float animation_length, float slice_begin, float slice_end, float offset=0.0 )  
void draw_arc ( Vector2 center, float radius, float start_angle, float end_angle, int point_count, Color color, float width=-1.0, bool antialiased=false )  
void draw_char ( Font font, Vector2 pos, String char, int font_size=16, Color modulate=Color(1, 1, 1, 1) ) const  
void draw_char_outline ( Font font, Vector2 pos, String char, int font_size=16, int size=-1, Color modulate=Color(1, 1, 1, 1) ) const  
void draw_circle ( Vector2 position, float radius, Color color )  
void draw_colored_polygon ( PackedVector2Array points, Color color, PackedVector2Array uvs=PackedVector2Array(), Texture2D texture=null )  
void draw_dashed_line ( Vector2 from, Vector2 to, Color color, float width=-1.0, float dash=2.0, bool aligned=true )  
void draw_end_animation ( )  
void draw_lcd_texture_rect_region ( Texture2D texture, Rect2 rect, Rect2 src_rect, Color modulate=Color(1, 1, 1, 1) )  
void draw_line ( Vector2 from, Vector2 to, Color color, float width=-1.0, bool antialiased=false )  
void draw_mesh ( Mesh mesh, Texture2D texture, Transform2D transform=Transform2D(1, 0, 0, 1, 0, 0), Color modulate=Color(1, 1, 1, 1) )  
void draw_msdf_texture_rect_region ( Texture2D texture, Rect2 rect, Rect2 src_rect, Color modulate=Color(1, 1, 1, 1), float outline=0.0, float pixel_range=4.0, float scale=1.0 )  
void draw_multiline ( PackedVector2Array points, Color color, float width=-1.0 )  
void draw_multiline_colors ( PackedVector2Array points, PackedColorArray colors, float width=-1.0 )  
void draw_multiline_string ( Font font, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int max_lines=-1, Color modulate=Color(1, 1, 1, 1), BitField<LineBreakFlag> brk_flags=3, BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const  
void draw_multiline_string_outline ( Font font, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int max_lines=-1, int size=1, Color modulate=Color(1, 1, 1, 1), BitField<LineBreakFlag> brk_flags=3, BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const  
void draw_multimesh ( MultiMesh multimesh, Texture2D texture )  
void draw_polygon ( PackedVector2Array points, PackedColorArray colors, PackedVector2Array uvs=PackedVector2Array(), Texture2D texture=null )  
void draw_polyline ( PackedVector2Array points, Color color, float width=-1.0, bool antialiased=false )  
void draw_polyline_colors ( PackedVector2Array points, PackedColorArray colors, float width=-1.0, bool antialiased=false )  
void draw_primitive ( PackedVector2Array points, PackedColorArray colors, PackedVector2Array uvs, Texture2D texture=null )  
void draw_rect ( Rect2 rect, Color color, bool filled=true, float width=-1.0 )  
void draw_set_transform ( Vector2 position, float rotation=0.0, Vector2 scale=Vector2(1, 1) )  
void draw_set_transform_matrix ( Transform2D xform )  
void draw_string ( Font font, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, Color modulate=Color(1, 1, 1, 1), BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const  
void draw_string_outline ( Font font, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int size=1, Color modulate=Color(1, 1, 1, 1), BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const  
void draw_style_box ( StyleBox style_box, Rect2 rect )  
void draw_texture ( Texture2D texture, Vector2 position, Color modulate=Color(1, 1, 1, 1) )  
void draw_texture_rect ( Texture2D texture, Rect2 rect, bool tile, Color modulate=Color(1, 1, 1, 1), bool transpose=false )  
void draw_texture_rect_region ( Texture2D texture, Rect2 rect, Rect2 src_rect, Color modulate=Color(1, 1, 1, 1), bool transpose=false, bool clip_uv=true )  
void force_update_transform ( )  
RID get_canvas ( ) const  
RID get_canvas_item ( ) const  
Transform2D get_canvas_transform ( ) const  
Vector2 get_global_mouse_position ( ) const  
Transform2D get_global_transform ( ) const  
Transform2D get_global_transform_with_canvas ( ) const  
Vector2 get_local_mouse_position ( ) const  
Transform2D get_screen_transform ( ) const  
Transform2D get_transform ( ) const  
Rect2 get_viewport_rect ( ) const  
Transform2D get_viewport_transform ( ) const  
bool get_visibility_layer_bit ( int layer ) const  
World2D get_world_2d ( ) const  
void hide ( )  
bool is_local_transform_notification_enabled ( ) const  
bool is_transform_notification_enabled ( ) const  
bool is_visible_in_tree ( ) const  
Vector2 make_canvas_position_local ( Vector2 screen_point ) const  
InputEvent make_input_local ( InputEvent event ) const  
void move_to_front ( )  
void queue_redraw ( )  
void set_notify_local_transform ( bool enable )  
void set_notify_transform ( bool enable )  
void set_visibility_layer_bit ( int layer, bool enabled )  
void show ( )     Signals draw ( ) Emitted when the CanvasItem must redraw, after the related NOTIFICATION_DRAW notification, and before _draw is called. Note: Deferred connections do not allow drawing through the draw_* methods. hidden ( ) Emitted when becoming hidden. item_rect_changed ( ) Emitted when the item's Rect2 boundaries (position or size) have changed, or when an action is taking place that may have impacted these boundaries (e.g. changing Sprite2D.texture). visibility_changed ( ) Emitted when the visibility (hidden/visible) changes.   Enumerations enum TextureFilter: 
TextureFilter TEXTURE_FILTER_PARENT_NODE = 0
 The CanvasItem will inherit the filter from its parent. 
TextureFilter TEXTURE_FILTER_NEAREST = 1
 The texture filter reads from the nearest pixel only. This makes the texture look pixelated from up close, and grainy from a distance (due to mipmaps not being sampled). 
TextureFilter TEXTURE_FILTER_LINEAR = 2
 The texture filter blends between the nearest 4 pixels. This makes the texture look smooth from up close, and grainy from a distance (due to mipmaps not being sampled). 
TextureFilter TEXTURE_FILTER_NEAREST_WITH_MIPMAPS = 3
 The texture filter reads from the nearest pixel and blends between the nearest 2 mipmaps (or uses the nearest mipmap if ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter is true). This makes the texture look pixelated from up close, and smooth from a distance. Use this for non-pixel art textures that may be viewed at a low scale (e.g. due to Camera2D zoom or sprite scaling), as mipmaps are important to smooth out pixels that are smaller than on-screen pixels. 
TextureFilter TEXTURE_FILTER_LINEAR_WITH_MIPMAPS = 4
 The texture filter blends between the nearest 4 pixels and between the nearest 2 mipmaps (or uses the nearest mipmap if ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter is true). This makes the texture look smooth from up close, and smooth from a distance. Use this for non-pixel art textures that may be viewed at a low scale (e.g. due to Camera2D zoom or sprite scaling), as mipmaps are important to smooth out pixels that are smaller than on-screen pixels. 
TextureFilter TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC = 5
 The texture filter reads from the nearest pixel and blends between 2 mipmaps (or uses the nearest mipmap if ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter is true) based on the angle between the surface and the camera view. This makes the texture look pixelated from up close, and smooth from a distance. Anisotropic filtering improves texture quality on surfaces that are almost in line with the camera, but is slightly slower. The anisotropic filtering level can be changed by adjusting ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level. Note: This texture filter is rarely useful in 2D projects. TEXTURE_FILTER_NEAREST_WITH_MIPMAPS is usually more appropriate in this case. 
TextureFilter TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC = 6
 The texture filter blends between the nearest 4 pixels and blends between 2 mipmaps (or uses the nearest mipmap if ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter is true) based on the angle between the surface and the camera view. This makes the texture look smooth from up close, and smooth from a distance. Anisotropic filtering improves texture quality on surfaces that are almost in line with the camera, but is slightly slower. The anisotropic filtering level can be changed by adjusting ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level. Note: This texture filter is rarely useful in 2D projects. TEXTURE_FILTER_LINEAR_WITH_MIPMAPS is usually more appropriate in this case. 
TextureFilter TEXTURE_FILTER_MAX = 7
 Represents the size of the TextureFilter enum. enum TextureRepeat: 
TextureRepeat TEXTURE_REPEAT_PARENT_NODE = 0
 The CanvasItem will inherit the filter from its parent. 
TextureRepeat TEXTURE_REPEAT_DISABLED = 1
 Texture will not repeat. 
TextureRepeat TEXTURE_REPEAT_ENABLED = 2
 Texture will repeat normally. 
TextureRepeat TEXTURE_REPEAT_MIRROR = 3
 Texture will repeat in a 2x2 tiled mode, where elements at even positions are mirrored. 
TextureRepeat TEXTURE_REPEAT_MAX = 4
 Represents the size of the TextureRepeat enum. enum ClipChildrenMode: 
ClipChildrenMode CLIP_CHILDREN_DISABLED = 0
 Child draws over parent and is not clipped. 
ClipChildrenMode CLIP_CHILDREN_ONLY = 1
 Parent is used for the purposes of clipping only. Child is clipped to the parent's visible area, parent is not drawn. 
ClipChildrenMode CLIP_CHILDREN_AND_DRAW = 2
 Parent is used for clipping child, but parent is also drawn underneath child as normal before clipping child to its visible area. 
ClipChildrenMode CLIP_CHILDREN_MAX = 3
 Represents the size of the ClipChildrenMode enum.   Constants NOTIFICATION_TRANSFORM_CHANGED = 2000
 The CanvasItem's global transform has changed. This notification is only received if enabled by set_notify_transform. NOTIFICATION_LOCAL_TRANSFORM_CHANGED = 35
 The CanvasItem's local transform has changed. This notification is only received if enabled by set_notify_local_transform. NOTIFICATION_DRAW = 30
 The CanvasItem is requested to draw (see _draw). NOTIFICATION_VISIBILITY_CHANGED = 31
 The CanvasItem's visibility has changed. NOTIFICATION_ENTER_CANVAS = 32
 The CanvasItem has entered the canvas. NOTIFICATION_EXIT_CANVAS = 33
 The CanvasItem has exited the canvas. NOTIFICATION_WORLD_2D_CHANGED = 36
 The CanvasItem's active World2D changed.   Property Descriptions 
ClipChildrenMode clip_children = 0
  void set_clip_children_mode ( ClipChildrenMode value )
 
ClipChildrenMode get_clip_children_mode ( )
  Allows the current node to clip child nodes, essentially acting as a mask. 
int light_mask = 1
  void set_light_mask ( int value )
 
int get_light_mask ( )
  The rendering layers in which this CanvasItem responds to Light2D nodes. 
Material material  void set_material ( Material value )
 
Material get_material ( )
  The material applied to this CanvasItem. 
Color modulate = Color(1, 1, 1, 1)
  void set_modulate ( Color value )
 
Color get_modulate ( )
  The color applied to this CanvasItem. This property does affect child CanvasItems, unlike self_modulate which only affects the node itself. 
Color self_modulate = Color(1, 1, 1, 1)
  void set_self_modulate ( Color value )
 
Color get_self_modulate ( )
  The color applied to this CanvasItem. This property does not affect child CanvasItems, unlike modulate which affects both the node itself and its children. Note: Internal children (e.g. sliders in ColorPicker or tab bar in TabContainer) are also not affected by this property (see include_internal parameter of Node.get_child and other similar methods). 
bool show_behind_parent = false
  void set_draw_behind_parent ( bool value )
 
bool is_draw_behind_parent_enabled ( )
  If true, the object draws behind its parent. 
TextureFilter texture_filter = 0
  void set_texture_filter ( TextureFilter value )
 
TextureFilter get_texture_filter ( )
  The texture filtering mode to use on this CanvasItem. 
TextureRepeat texture_repeat = 0
  void set_texture_repeat ( TextureRepeat value )
 
TextureRepeat get_texture_repeat ( )
  The texture repeating mode to use on this CanvasItem. 
bool top_level = false
  void set_as_top_level ( bool value )
 
bool is_set_as_top_level ( )
  If true, this CanvasItem will not inherit its transform from parent CanvasItems. Its draw order will also be changed to make it draw on top of other CanvasItems that do not have top_level set to true. The CanvasItem will effectively act as if it was placed as a child of a bare Node. 
bool use_parent_material = false
  void set_use_parent_material ( bool value )
 
bool get_use_parent_material ( )
  If true, the parent CanvasItem's material property is used as this one's material. 
int visibility_layer = 1
  void set_visibility_layer ( int value )
 
int get_visibility_layer ( )
  The rendering layer in which this CanvasItem is rendered by Viewport nodes. A Viewport will render a CanvasItem if it and all its parents share a layer with the Viewport's canvas cull mask. 
bool visible = true
  void set_visible ( bool value )
 
bool is_visible ( )
  If true, this CanvasItem is drawn. The node is only visible if all of its ancestors are visible as well (in other words, is_visible_in_tree must return true). Note: For controls that inherit Popup, the correct way to make them visible is to call one of the multiple popup*() functions instead. 
bool y_sort_enabled = false
  void set_y_sort_enabled ( bool value )
 
bool is_y_sort_enabled ( )
  If true, child nodes with the lowest Y position are drawn before those with a higher Y position. If false, Y-sorting is disabled. Y-sorting only affects children that inherit from CanvasItem. You can nest nodes with Y-sorting. Child Y-sorted nodes are sorted in the same space as the parent Y-sort. This feature allows you to organize a scene better or divide it into multiple ones without changing your scene tree. 
bool z_as_relative = true
  void set_z_as_relative ( bool value )
 
bool is_z_relative ( )
  If true, the node's Z index is relative to its parent's Z index. If this node's Z index is 2 and its parent's effective Z index is 3, then this node's effective Z index will be 2 + 3 = 5. 
int z_index = 0
  void set_z_index ( int value )
 
int get_z_index ( )
  Z index. Controls the order in which the nodes render. A node with a higher Z index will display in front of others. Must be between RenderingServer.CANVAS_ITEM_Z_MIN and RenderingServer.CANVAS_ITEM_Z_MAX (inclusive). Note: Changing the Z index of a Control only affects the drawing order, not the order in which input events are handled. This can be useful to implement certain UI animations, e.g. a menu where hovered items are scaled and should overlap others.   Method Descriptions void _draw ( ) virtual
 Called when CanvasItem has been requested to redraw (after queue_redraw is called, either manually or by the engine). Corresponds to the NOTIFICATION_DRAW notification in Object._notification. void draw_animation_slice ( float animation_length, float slice_begin, float slice_end, float offset=0.0 ) Subsequent drawing commands will be ignored unless they fall within the specified animation slice. This is a faster way to implement animations that loop on background rather than redrawing constantly. void draw_arc ( Vector2 center, float radius, float start_angle, float end_angle, int point_count, Color color, float width=-1.0, bool antialiased=false ) Draws an unfilled arc between the given angles with a uniform color and width and optional antialiasing (supported only for positive width). The larger the value of point_count, the smoother the curve. See also draw_circle. If width is negative, it will be ignored and the arc will be drawn using RenderingServer.PRIMITIVE_LINE_STRIP. This means that when the CanvasItem is scaled, the arc will remain thin. If this behavior is not desired, then pass a positive width like 1.0. The arc is drawn from start_angle towards the value of end_angle so in clockwise direction if start_angle < end_angle and counter-clockwise otherwise. Passing the same angles but in reversed order will produce the same arc. If absolute difference of start_angle and end_angle is greater than @GDScript.TAU radians, then a full circle arc is drawn (i.e. arc will not overlap itself). void draw_char ( Font font, Vector2 pos, String char, int font_size=16, Color modulate=Color(1, 1, 1, 1) ) const
 Draws a string first character using a custom font. void draw_char_outline ( Font font, Vector2 pos, String char, int font_size=16, int size=-1, Color modulate=Color(1, 1, 1, 1) ) const
 Draws a string first character outline using a custom font. void draw_circle ( Vector2 position, float radius, Color color ) Draws a colored, filled circle. See also draw_arc, draw_polyline and draw_polygon. void draw_colored_polygon ( PackedVector2Array points, Color color, PackedVector2Array uvs=PackedVector2Array(), Texture2D texture=null ) Draws a colored polygon of any number of points, convex or concave. Unlike draw_polygon, a single color must be specified for the whole polygon. void draw_dashed_line ( Vector2 from, Vector2 to, Color color, float width=-1.0, float dash=2.0, bool aligned=true ) Draws a dashed line from a 2D point to another, with a given color and width. See also draw_multiline and draw_polyline. If width is negative, then a two-point primitives will be drawn instead of a four-point ones. This means that when the CanvasItem is scaled, the line parts will remain thin. If this behavior is not desired, then pass a positive width like 1.0. void draw_end_animation ( ) After submitting all animations slices via draw_animation_slice, this function can be used to revert drawing to its default state (all subsequent drawing commands will be visible). If you don't care about this particular use case, usage of this function after submitting the slices is not required. void draw_lcd_texture_rect_region ( Texture2D texture, Rect2 rect, Rect2 src_rect, Color modulate=Color(1, 1, 1, 1) ) Draws a textured rectangle region of the font texture with LCD subpixel anti-aliasing at a given position, optionally modulated by a color. Texture is drawn using the following blend operation, blend mode of the CanvasItemMaterial is ignored: dst.r = texture.r * modulate.r * modulate.a + dst.r * (1.0 - texture.r * modulate.a);
dst.g = texture.g * modulate.g * modulate.a + dst.g * (1.0 - texture.g * modulate.a);
dst.b = texture.b * modulate.b * modulate.a + dst.b * (1.0 - texture.b * modulate.a);
dst.a = modulate.a + dst.a * (1.0 - modulate.a);
 void draw_line ( Vector2 from, Vector2 to, Color color, float width=-1.0, bool antialiased=false ) Draws a line from a 2D point to another, with a given color and width. It can be optionally antialiased. See also draw_multiline and draw_polyline. If width is negative, then a two-point primitive will be drawn instead of a four-point one. This means that when the CanvasItem is scaled, the line will remain thin. If this behavior is not desired, then pass a positive width like 1.0. void draw_mesh ( Mesh mesh, Texture2D texture, Transform2D transform=Transform2D(1, 0, 0, 1, 0, 0), Color modulate=Color(1, 1, 1, 1) ) Draws a Mesh in 2D, using the provided texture. See MeshInstance2D for related documentation. void draw_msdf_texture_rect_region ( Texture2D texture, Rect2 rect, Rect2 src_rect, Color modulate=Color(1, 1, 1, 1), float outline=0.0, float pixel_range=4.0, float scale=1.0 ) Draws a textured rectangle region of the multi-channel signed distance field texture at a given position, optionally modulated by a color. See FontFile.multichannel_signed_distance_field for more information and caveats about MSDF font rendering. If outline is positive, each alpha channel value of pixel in region is set to maximum value of true distance in the outline radius. Value of the pixel_range should the same that was used during distance field texture generation. void draw_multiline ( PackedVector2Array points, Color color, float width=-1.0 ) Draws multiple disconnected lines with a uniform width and color. Each line is defined by two consecutive points from points array, i.e. i-th segment consists of points[2 * i], points[2 * i + 1] endpoints. When drawing large amounts of lines, this is faster than using individual draw_line calls. To draw interconnected lines, use draw_polyline instead. If width is negative, then two-point primitives will be drawn instead of a four-point ones. This means that when the CanvasItem is scaled, the lines will remain thin. If this behavior is not desired, then pass a positive width like 1.0. void draw_multiline_colors ( PackedVector2Array points, PackedColorArray colors, float width=-1.0 ) Draws multiple disconnected lines with a uniform width and segment-by-segment coloring. Each segment is defined by two consecutive points from points array and a corresponding color from colors array, i.e. i-th segment consists of points[2 * i], points[2 * i + 1] endpoints and has colors[i] color. When drawing large amounts of lines, this is faster than using individual draw_line calls. To draw interconnected lines, use draw_polyline_colors instead. If width is negative, then two-point primitives will be drawn instead of a four-point ones. This means that when the CanvasItem is scaled, the lines will remain thin. If this behavior is not desired, then pass a positive width like 1.0. void draw_multiline_string ( Font font, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int max_lines=-1, Color modulate=Color(1, 1, 1, 1), BitField<LineBreakFlag> brk_flags=3, BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const
 Breaks text into lines and draws it using the specified font at the pos (top-left corner). The text will have its color multiplied by modulate. If width is greater than or equal to 0, the text will be clipped if it exceeds the specified width. void draw_multiline_string_outline ( Font font, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int max_lines=-1, int size=1, Color modulate=Color(1, 1, 1, 1), BitField<LineBreakFlag> brk_flags=3, BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const
 Breaks text to the lines and draws text outline using the specified font at the pos (top-left corner). The text will have its color multiplied by modulate. If width is greater than or equal to 0, the text will be clipped if it exceeds the specified width. void draw_multimesh ( MultiMesh multimesh, Texture2D texture ) Draws a MultiMesh in 2D with the provided texture. See MultiMeshInstance2D for related documentation. void draw_polygon ( PackedVector2Array points, PackedColorArray colors, PackedVector2Array uvs=PackedVector2Array(), Texture2D texture=null ) Draws a solid polygon of any number of points, convex or concave. Unlike draw_colored_polygon, each point's color can be changed individually. See also draw_polyline and draw_polyline_colors. If you need more flexibility (such as being able to use bones), use RenderingServer.canvas_item_add_triangle_array instead. void draw_polyline ( PackedVector2Array points, Color color, float width=-1.0, bool antialiased=false ) Draws interconnected line segments with a uniform color and width and optional antialiasing (supported only for positive width). When drawing large amounts of lines, this is faster than using individual draw_line calls. To draw disconnected lines, use draw_multiline instead. See also draw_polygon. If width is negative, it will be ignored and the polyline will be drawn using RenderingServer.PRIMITIVE_LINE_STRIP. This means that when the CanvasItem is scaled, the polyline will remain thin. If this behavior is not desired, then pass a positive width like 1.0. void draw_polyline_colors ( PackedVector2Array points, PackedColorArray colors, float width=-1.0, bool antialiased=false ) Draws interconnected line segments with a uniform width, point-by-point coloring, and optional antialiasing (supported only for positive width). Colors assigned to line points match by index between points and colors, i.e. each line segment is filled with a gradient between the colors of the endpoints. When drawing large amounts of lines, this is faster than using individual draw_line calls. To draw disconnected lines, use draw_multiline_colors instead. See also draw_polygon. If width is negative, it will be ignored and the polyline will be drawn using RenderingServer.PRIMITIVE_LINE_STRIP. This means that when the CanvasItem is scaled, the polyline will remain thin. If this behavior is not desired, then pass a positive width like 1.0. void draw_primitive ( PackedVector2Array points, PackedColorArray colors, PackedVector2Array uvs, Texture2D texture=null ) Draws a custom primitive. 1 point for a point, 2 points for a line, 3 points for a triangle, and 4 points for a quad. If 0 points or more than 4 points are specified, nothing will be drawn and an error message will be printed. See also draw_line, draw_polyline, draw_polygon, and draw_rect. void draw_rect ( Rect2 rect, Color color, bool filled=true, float width=-1.0 ) Draws a rectangle. If filled is true, the rectangle will be filled with the color specified. If filled is false, the rectangle will be drawn as a stroke with the color and width specified. See also draw_texture_rect. If width is negative, then two-point primitives will be drawn instead of a four-point ones. This means that when the CanvasItem is scaled, the lines will remain thin. If this behavior is not desired, then pass a positive width like 1.0. Note: width is only effective if filled is false. Note: Unfilled rectangles drawn with a negative width may not display perfectly. For example, corners may be missing or brighter due to overlapping lines (for a translucent color). void draw_set_transform ( Vector2 position, float rotation=0.0, Vector2 scale=Vector2(1, 1) ) Sets a custom transform for drawing via components. Anything drawn afterwards will be transformed by this. Note: FontFile.oversampling does not take scale into account. This means that scaling up/down will cause bitmap fonts and rasterized (non-MSDF) dynamic fonts to appear blurry or pixelated. To ensure text remains crisp regardless of scale, you can enable MSDF font rendering by enabling ProjectSettings.gui/theme/default_font_multichannel_signed_distance_field (applies to the default project font only), or enabling Multichannel Signed Distance Field in the import options of a DynamicFont for custom fonts. On system fonts, SystemFont.multichannel_signed_distance_field can be enabled in the inspector. void draw_set_transform_matrix ( Transform2D xform ) Sets a custom transform for drawing via matrix. Anything drawn afterwards will be transformed by this. void draw_string ( Font font, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, Color modulate=Color(1, 1, 1, 1), BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const
 Draws text using the specified font at the pos (bottom-left corner using the baseline of the font). The text will have its color multiplied by modulate. If width is greater than or equal to 0, the text will be clipped if it exceeds the specified width. Example using the default project font:  GDScript# If using this method in a script that redraws constantly, move the
# `default_font` declaration to a member variable assigned in `_ready()`
# so the Control is only created once.
var default_font = ThemeDB.fallback_font
var default_font_size = ThemeDB.fallback_font_size
draw_string(default_font, Vector2(64, 64), "Hello world", HORIZONTAL_ALIGNMENT_LEFT, -1, default_font_size)
 C#// If using this method in a script that redraws constantly, move the
// `default_font` declaration to a member variable assigned in `_Ready()`
// so the Control is only created once.
Font defaultFont = ThemeDB.FallbackFont;
int defaultFontSize = ThemeDB.FallbackFontSize;
DrawString(defaultFont, new Vector2(64, 64), "Hello world", HORIZONTAL_ALIGNMENT_LEFT, -1, defaultFontSize);
  See also Font.draw_string. void draw_string_outline ( Font font, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int size=1, Color modulate=Color(1, 1, 1, 1), BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const
 Draws text outline using the specified font at the pos (bottom-left corner using the baseline of the font). The text will have its color multiplied by modulate. If width is greater than or equal to 0, the text will be clipped if it exceeds the specified width. void draw_style_box ( StyleBox style_box, Rect2 rect ) Draws a styled rectangle. void draw_texture ( Texture2D texture, Vector2 position, Color modulate=Color(1, 1, 1, 1) ) Draws a texture at a given position. void draw_texture_rect ( Texture2D texture, Rect2 rect, bool tile, Color modulate=Color(1, 1, 1, 1), bool transpose=false ) Draws a textured rectangle at a given position, optionally modulated by a color. If transpose is true, the texture will have its X and Y coordinates swapped. See also draw_rect and draw_texture_rect_region. void draw_texture_rect_region ( Texture2D texture, Rect2 rect, Rect2 src_rect, Color modulate=Color(1, 1, 1, 1), bool transpose=false, bool clip_uv=true ) Draws a textured rectangle from a texture's region (specified by src_rect) at a given position, optionally modulated by a color. If transpose is true, the texture will have its X and Y coordinates swapped. See also draw_texture_rect. void force_update_transform ( ) Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations. 
RID get_canvas ( ) const
 Returns the RID of the World2D canvas where this item is in. 
RID get_canvas_item ( ) const
 Returns the canvas item RID used by RenderingServer for this item. 
Transform2D get_canvas_transform ( ) const
 Returns the transform from the coordinate system of the canvas, this item is in, to the Viewports coordinate system. 
Vector2 get_global_mouse_position ( ) const
 Returns the mouse's position in the CanvasLayer that this CanvasItem is in using the coordinate system of the CanvasLayer. Note: For screen-space coordinates (e.g. when using a non-embedded Popup), you can use DisplayServer.mouse_get_position. 
Transform2D get_global_transform ( ) const
 Returns the global transform matrix of this item, i.e. the combined transform up to the topmost CanvasItem node. The topmost item is a CanvasItem that either has no parent, has non-CanvasItem parent or it has top_level enabled. 
Transform2D get_global_transform_with_canvas ( ) const
 Returns the transform from the local coordinate system of this CanvasItem to the Viewports coordinate system. 
Vector2 get_local_mouse_position ( ) const
 Returns the mouse's position in this CanvasItem using the local coordinate system of this CanvasItem. 
Transform2D get_screen_transform ( ) const
 Returns the transform of this CanvasItem in global screen coordinates (i.e. taking window position into account). Mostly useful for editor plugins. Equals to get_global_transform if the window is embedded (see Viewport.gui_embed_subwindows). 
Transform2D get_transform ( ) const
 Returns the transform matrix of this item. 
Rect2 get_viewport_rect ( ) const
 Returns the viewport's boundaries as a Rect2. 
Transform2D get_viewport_transform ( ) const
 Returns the transform from the coordinate system of the canvas, this item is in, to the Viewports embedders coordinate system. 
bool get_visibility_layer_bit ( int layer ) const
 Returns an individual bit on the rendering visibility layer. 
World2D get_world_2d ( ) const
 Returns the World2D where this item is in. void hide ( ) Hide the CanvasItem if it's currently visible. This is equivalent to setting visible to false. 
bool is_local_transform_notification_enabled ( ) const
 Returns true if local transform notifications are communicated to children. 
bool is_transform_notification_enabled ( ) const
 Returns true if global transform notifications are communicated to children. 
bool is_visible_in_tree ( ) const
 Returns true if the node is present in the SceneTree, its visible property is true and all its ancestors are also visible. If any ancestor is hidden, this node will not be visible in the scene tree, and is therefore not drawn (see _draw). 
Vector2 make_canvas_position_local ( Vector2 screen_point ) const
 Assigns screen_point as this node's new local transform. 
InputEvent make_input_local ( InputEvent event ) const
 Transformations issued by event's inputs are applied in local space instead of global space. void move_to_front ( ) Moves this node to display on top of its siblings. Internally, the node is moved to the bottom of parent's child list. The method has no effect on nodes without a parent. void queue_redraw ( ) Queues the CanvasItem to redraw. During idle time, if CanvasItem is visible, NOTIFICATION_DRAW is sent and _draw is called. This only occurs once per frame, even if this method has been called multiple times. void set_notify_local_transform ( bool enable ) If enable is true, this node will receive NOTIFICATION_LOCAL_TRANSFORM_CHANGED when its local transform changes. void set_notify_transform ( bool enable ) If enable is true, this node will receive NOTIFICATION_TRANSFORM_CHANGED when its global transform changes. void set_visibility_layer_bit ( int layer, bool enabled ) Set/clear individual bits on the rendering visibility layer. This simplifies editing this CanvasItem's visibility layer. void show ( ) Show the CanvasItem if it's currently hidden. This is equivalent to setting visible to true. For controls that inherit Popup, the correct way to make them visible is to call one of the multiple popup*() functions instead.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_canvasitem.html


classes/class_camera3d
-----------------------------------------------------------
Camera3D Inherits: Node3D < Node < Object Inherited By: XRCamera3D Camera node, displays from a point of view.  Description Camera3D is a special node that displays what is visible from its current location. Cameras register themselves in the nearest Viewport node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport. In other words, a camera just provides 3D display capabilities to a Viewport, and, without one, a scene registered in that Viewport (or higher viewports) can't be displayed.   Tutorials  Third Person Shooter Demo    Properties  
CameraAttributes attributes   
int cull_mask 1048575  
bool current false  
DopplerTracking doppler_tracking 0  
Environment environment   
float far 4000.0  
float fov 75.0  
Vector2 frustum_offset Vector2(0, 0)  
float h_offset 0.0  
KeepAspect keep_aspect 1  
float near 0.05  
ProjectionType projection 0  
float size 1.0  
float v_offset 0.0     Methods  
void clear_current ( bool enable_next=true )  
Projection get_camera_projection ( ) const  
RID get_camera_rid ( ) const  
Transform3D get_camera_transform ( ) const  
bool get_cull_mask_value ( int layer_number ) const  
Plane[] get_frustum ( ) const  
RID get_pyramid_shape_rid ( )  
bool is_position_behind ( Vector3 world_point ) const  
bool is_position_in_frustum ( Vector3 world_point ) const  
void make_current ( )  
Vector3 project_local_ray_normal ( Vector2 screen_point ) const  
Vector3 project_position ( Vector2 screen_point, float z_depth ) const  
Vector3 project_ray_normal ( Vector2 screen_point ) const  
Vector3 project_ray_origin ( Vector2 screen_point ) const  
void set_cull_mask_value ( int layer_number, bool value )  
void set_frustum ( float size, Vector2 offset, float z_near, float z_far )  
void set_orthogonal ( float size, float z_near, float z_far )  
void set_perspective ( float fov, float z_near, float z_far )  
Vector2 unproject_position ( Vector3 world_point ) const     Enumerations enum ProjectionType: 
ProjectionType PROJECTION_PERSPECTIVE = 0
 Perspective projection. Objects on the screen becomes smaller when they are far away. 
ProjectionType PROJECTION_ORTHOGONAL = 1
 Orthogonal projection, also known as orthographic projection. Objects remain the same size on the screen no matter how far away they are. 
ProjectionType PROJECTION_FRUSTUM = 2
 Frustum projection. This mode allows adjusting frustum_offset to create "tilted frustum" effects. enum KeepAspect: 
KeepAspect KEEP_WIDTH = 0
 Preserves the horizontal aspect ratio; also known as Vert- scaling. This is usually the best option for projects running in portrait mode, as taller aspect ratios will benefit from a wider vertical FOV. 
KeepAspect KEEP_HEIGHT = 1
 Preserves the vertical aspect ratio; also known as Hor+ scaling. This is usually the best option for projects running in landscape mode, as wider aspect ratios will automatically benefit from a wider horizontal FOV. enum DopplerTracking: 
DopplerTracking DOPPLER_TRACKING_DISABLED = 0
 Disables Doppler effect simulation (default). 
DopplerTracking DOPPLER_TRACKING_IDLE_STEP = 1
 Simulate Doppler effect by tracking positions of objects that are changed in _process. Changes in the relative velocity of this camera compared to those objects affect how audio is perceived (changing the audio's AudioStreamPlayer3D.pitch_scale). 
DopplerTracking DOPPLER_TRACKING_PHYSICS_STEP = 2
 Simulate Doppler effect by tracking positions of objects that are changed in _physics_process. Changes in the relative velocity of this camera compared to those objects affect how audio is perceived (changing the audio's AudioStreamPlayer3D.pitch_scale).   Property Descriptions 
CameraAttributes attributes  void set_attributes ( CameraAttributes value )
 
CameraAttributes get_attributes ( )
  The CameraAttributes to use for this camera. 
int cull_mask = 1048575
  void set_cull_mask ( int value )
 
int get_cull_mask ( )
  The culling mask that describes which VisualInstance3D.layers are rendered by this camera. By default, all 20 user-visible layers are rendered. Note: Since the cull_mask allows for 32 layers to be stored in total, there are an additional 12 layers that are only used internally by the engine and aren't exposed in the editor. Setting cull_mask using a script allows you to toggle those reserved layers, which can be useful for editor plugins. To adjust cull_mask more easily using a script, use get_cull_mask_value and set_cull_mask_value. Note: VoxelGI, SDFGI and LightmapGI will always take all layers into account to determine what contributes to global illumination. If this is an issue, set GeometryInstance3D.gi_mode to GeometryInstance3D.GI_MODE_DISABLED for meshes and Light3D.light_bake_mode to Light3D.BAKE_DISABLED for lights to exclude them from global illumination. 
bool current = false
  void set_current ( bool value )
 
bool is_current ( )
  If true, the ancestor Viewport is currently using this camera. If multiple cameras are in the scene, one will always be made current. For example, if two Camera3D nodes are present in the scene and only one is current, setting one camera's current to false will cause the other camera to be made current. 
DopplerTracking doppler_tracking = 0
  void set_doppler_tracking ( DopplerTracking value )
 
DopplerTracking get_doppler_tracking ( )
  If not DOPPLER_TRACKING_DISABLED, this camera will simulate the Doppler effect for objects changed in particular _process methods. See DopplerTracking for possible values. 
Environment environment  void set_environment ( Environment value )
 
Environment get_environment ( )
  The Environment to use for this camera. 
float far = 4000.0
  void set_far ( float value )
 
float get_far ( )
  The distance to the far culling boundary for this camera relative to its local Z axis. Higher values allow the camera to see further away, while decreasing far can improve performance if it results in objects being partially or fully culled. 
float fov = 75.0
  void set_fov ( float value )
 
float get_fov ( )
  The camera's field of view angle (in degrees). Only applicable in perspective mode. Since keep_aspect locks one axis, fov sets the other axis' field of view angle. For reference, the default vertical field of view value (75.0) is equivalent to a horizontal FOV of:  ~91.31 degrees in a 4:3 viewport ~101.67 degrees in a 16:10 viewport ~107.51 degrees in a 16:9 viewport ~121.63 degrees in a 21:9 viewport  
Vector2 frustum_offset = Vector2(0, 0)
  void set_frustum_offset ( Vector2 value )
 
Vector2 get_frustum_offset ( )
  The camera's frustum offset. This can be changed from the default to create "tilted frustum" effects such as Y-shearing. Note: Only effective if projection is PROJECTION_FRUSTUM. 
float h_offset = 0.0
  void set_h_offset ( float value )
 
float get_h_offset ( )
  The horizontal (X) offset of the camera viewport. 
KeepAspect keep_aspect = 1
  void set_keep_aspect_mode ( KeepAspect value )
 
KeepAspect get_keep_aspect_mode ( )
  The axis to lock during fov/size adjustments. Can be either KEEP_WIDTH or KEEP_HEIGHT. 
float near = 0.05
  void set_near ( float value )
 
float get_near ( )
  The distance to the near culling boundary for this camera relative to its local Z axis. Lower values allow the camera to see objects more up close to its origin, at the cost of lower precision across the entire range. Values lower than the default can lead to increased Z-fighting. 
ProjectionType projection = 0
  void set_projection ( ProjectionType value )
 
ProjectionType get_projection ( )
  The camera's projection mode. In PROJECTION_PERSPECTIVE mode, objects' Z distance from the camera's local space scales their perceived size. 
float size = 1.0
  void set_size ( float value )
 
float get_size ( )
  The camera's size in meters measured as the diameter of the width or height, depending on keep_aspect. Only applicable in orthogonal and frustum modes. 
float v_offset = 0.0
  void set_v_offset ( float value )
 
float get_v_offset ( )
  The vertical (Y) offset of the camera viewport.   Method Descriptions void clear_current ( bool enable_next=true ) If this is the current camera, remove it from being current. If enable_next is true, request to make the next camera current, if any. 
Projection get_camera_projection ( ) const
 Returns the projection matrix that this camera uses to render to its associated viewport. The camera must be part of the scene tree to function. 
RID get_camera_rid ( ) const
 Returns the camera's RID from the RenderingServer. 
Transform3D get_camera_transform ( ) const
 Returns the transform of the camera plus the vertical (v_offset) and horizontal (h_offset) offsets; and any other adjustments made to the position and orientation of the camera by subclassed cameras such as XRCamera3D. 
bool get_cull_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the cull_mask is enabled, given a layer_number between 1 and 20. 
Plane[] get_frustum ( ) const
 Returns the camera's frustum planes in world space units as an array of Planes in the following order: near, far, left, top, right, bottom. Not to be confused with frustum_offset. 
RID get_pyramid_shape_rid ( ) Returns the RID of a pyramid shape encompassing the camera's view frustum, ignoring the camera's near plane. The tip of the pyramid represents the position of the camera. 
bool is_position_behind ( Vector3 world_point ) const
 Returns true if the given position is behind the camera (the blue part of the linked diagram). See this diagram for an overview of position query methods. Note: A position which returns false may still be outside the camera's field of view. 
bool is_position_in_frustum ( Vector3 world_point ) const
 Returns true if the given position is inside the camera's frustum (the green part of the linked diagram). See this diagram for an overview of position query methods. void make_current ( ) Makes this camera the current camera for the Viewport (see class description). If the camera node is outside the scene tree, it will attempt to become current once it's added. 
Vector3 project_local_ray_normal ( Vector2 screen_point ) const
 Returns a normal vector from the screen point location directed along the camera. Orthogonal cameras are normalized. Perspective cameras account for perspective, screen width/height, etc. 
Vector3 project_position ( Vector2 screen_point, float z_depth ) const
 Returns the 3D point in world space that maps to the given 2D coordinate in the Viewport rectangle on a plane that is the given z_depth distance into the scene away from the camera. 
Vector3 project_ray_normal ( Vector2 screen_point ) const
 Returns a normal vector in world space, that is the result of projecting a point on the Viewport rectangle by the inverse camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking. 
Vector3 project_ray_origin ( Vector2 screen_point ) const
 Returns a 3D position in world space, that is the result of projecting a point on the Viewport rectangle by the inverse camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking. void set_cull_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the cull_mask, given a layer_number between 1 and 20. void set_frustum ( float size, Vector2 offset, float z_near, float z_far ) Sets the camera projection to frustum mode (see PROJECTION_FRUSTUM), by specifying a size, an offset, and the z_near and z_far clip planes in world space units. See also frustum_offset. void set_orthogonal ( float size, float z_near, float z_far ) Sets the camera projection to orthogonal mode (see PROJECTION_ORTHOGONAL), by specifying a size, and the z_near and z_far clip planes in world space units. (As a hint, 2D games often use this projection, with values specified in pixels.) void set_perspective ( float fov, float z_near, float z_far ) Sets the camera projection to perspective mode (see PROJECTION_PERSPECTIVE), by specifying a fov (field of view) angle in degrees, and the z_near and z_far clip planes in world space units. 
Vector2 unproject_position ( Vector3 world_point ) const
 Returns the 2D coordinate in the Viewport rectangle that maps to the given 3D point in world space. Note: When using this to position GUI elements over a 3D viewport, use is_position_behind to prevent them from appearing if the 3D point is behind the camera: # This code block is part of a script that inherits from Node3D.
# `control` is a reference to a node inheriting from Control.
control.visible = not get_viewport().get_camera_3d().is_position_behind(global_transform.origin)
control.position = get_viewport().get_camera_3d().unproject_position(global_transform.origin)
  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_camera3d.html


classes/class_animationnodestatemachinetransition
-----------------------------------------------------------
AnimationNodeStateMachineTransition Inherits: Resource < RefCounted < Object A transition within an AnimationNodeStateMachine connecting two AnimationRootNodes.  Description The path generated when using AnimationNodeStateMachinePlayback.travel is limited to the nodes connected by AnimationNodeStateMachineTransition. You can set the timing and conditions of the transition in detail.   Tutorials  Using AnimationTree    Properties  
StringName advance_condition &""  
String advance_expression ""  
AdvanceMode advance_mode 1  
int priority 1  
bool reset true  
SwitchMode switch_mode 0  
Curve xfade_curve   
float xfade_time 0.0     Signals advance_condition_changed ( ) Emitted when advance_condition is changed.   Enumerations enum SwitchMode: 
SwitchMode SWITCH_MODE_IMMEDIATE = 0
 Switch to the next state immediately. The current state will end and blend into the beginning of the new one. 
SwitchMode SWITCH_MODE_SYNC = 1
 Switch to the next state immediately, but will seek the new state to the playback position of the old state. 
SwitchMode SWITCH_MODE_AT_END = 2
 Wait for the current state playback to end, then switch to the beginning of the next state animation. enum AdvanceMode: 
AdvanceMode ADVANCE_MODE_DISABLED = 0
 Don't use this transition. 
AdvanceMode ADVANCE_MODE_ENABLED = 1
 Only use this transition during AnimationNodeStateMachinePlayback.travel. 
AdvanceMode ADVANCE_MODE_AUTO = 2
 Automatically use this transition if the advance_condition and advance_expression checks are true (if assigned).   Property Descriptions 
StringName advance_condition = &""
  void set_advance_condition ( StringName value )
 
StringName get_advance_condition ( )
  Turn on auto advance when this condition is set. The provided name will become a boolean parameter on the AnimationTree that can be controlled from code (see Using AnimationTree). For example, if AnimationTree.tree_root is an AnimationNodeStateMachine and advance_condition is set to "idle":  GDScript$animation_tree.set("parameters/conditions/idle", is_on_floor and (linear_velocity.x == 0))
 C#GetNode<AnimationTree>("animation_tree").Set("parameters/conditions/idle", IsOnFloor && (LinearVelocity.X == 0));
  
String advance_expression = ""
  void set_advance_expression ( String value )
 
String get_advance_expression ( )
  Use an expression as a condition for state machine transitions. It is possible to create complex animation advance conditions for switching between states and gives much greater flexibility for creating complex state machines by directly interfacing with the script code. 
AdvanceMode advance_mode = 1
  void set_advance_mode ( AdvanceMode value )
 
AdvanceMode get_advance_mode ( )
  Determines whether the transition should disabled, enabled when using AnimationNodeStateMachinePlayback.travel, or traversed automatically if the advance_condition and advance_expression checks are true (if assigned). 
int priority = 1
  void set_priority ( int value )
 
int get_priority ( )
  Lower priority transitions are preferred when travelling through the tree via AnimationNodeStateMachinePlayback.travel or advance_mode is set to ADVANCE_MODE_AUTO. 
bool reset = true
  void set_reset ( bool value )
 
bool is_reset ( )
  If true, the destination animation is played back from the beginning when switched. 
SwitchMode switch_mode = 0
  void set_switch_mode ( SwitchMode value )
 
SwitchMode get_switch_mode ( )
  The transition type. 
Curve xfade_curve  void set_xfade_curve ( Curve value )
 
Curve get_xfade_curve ( )
  Ease curve for better control over cross-fade between this state and the next. 
float xfade_time = 0.0
  void set_xfade_time ( float value )
 
float get_xfade_time ( )
  The time to cross-fade between this state and the next.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodestatemachinetransition.html


classes/class_script
-----------------------------------------------------------
Script Inherits: Resource < RefCounted < Object Inherited By: CSharpScript, GDScript, ScriptExtension A class stored as a resource.  Description A class stored as a resource. A script extends the functionality of all objects that instantiate it. This is the base class for all scripts and should not be used directly. Trying to create a new script with this class will result in an error. The new method of a script subclass creates a new instance. Object.set_script extends an existing object, if that object's class matches one of the script's base classes.   Tutorials  Scripting documentation index    Properties  
String source_code     Methods  
bool can_instantiate ( ) const  
Script get_base_script ( ) const  
StringName get_instance_base_type ( ) const  
Variant get_property_default_value ( StringName property )  
Dictionary get_script_constant_map ( )  
Dictionary[] get_script_method_list ( )  
Dictionary[] get_script_property_list ( )  
Dictionary[] get_script_signal_list ( )  
bool has_script_signal ( StringName signal_name ) const  
bool has_source_code ( ) const  
bool instance_has ( Object base_object ) const  
bool is_abstract ( ) const  
bool is_tool ( ) const  
Error reload ( bool keep_state=false )     Property Descriptions 
String source_code  void set_source_code ( String value )
 
String get_source_code ( )
  The script source code or an empty string if source code is not available. When set, does not reload the class implementation automatically.   Method Descriptions 
bool can_instantiate ( ) const
 Returns true if the script can be instantiated. 
Script get_base_script ( ) const
 Returns the script directly inherited by this script. 
StringName get_instance_base_type ( ) const
 Returns the script's base type. 
Variant get_property_default_value ( StringName property ) Returns the default value of the specified property. 
Dictionary get_script_constant_map ( ) Returns a dictionary containing constant names and their values. 
Dictionary[] get_script_method_list ( ) Returns the list of methods in this Script. 
Dictionary[] get_script_property_list ( ) Returns the list of properties in this Script. 
Dictionary[] get_script_signal_list ( ) Returns the list of user signals defined in this Script. 
bool has_script_signal ( StringName signal_name ) const
 Returns true if the script, or a base class, defines a signal with the given name. 
bool has_source_code ( ) const
 Returns true if the script contains non-empty source code. 
bool instance_has ( Object base_object ) const
 Returns true if base_object is an instance of this script. 
bool is_abstract ( ) const
 Returns true if the script is an abstract script. An abstract script does not have a constructor and cannot be instantiated. 
bool is_tool ( ) const
 Returns true if the script is a tool script. A tool script can run in the editor. 
Error reload ( bool keep_state=false ) Reloads the script's class implementation. Returns an error code.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_script.html


classes/class_window
-----------------------------------------------------------
Window Inherits: Viewport < Node < Object Inherited By: AcceptDialog, Popup Base class for all windows, dialogs, and popups.  Description A node that creates a window. The window can either be a native system window or embedded inside another Window (see Viewport.gui_embed_subwindows). At runtime, Windows will not close automatically when requested. You need to handle it manually using the close_requested signal (this applies both to pressing the close button and clicking outside of a popup).   Properties  
bool always_on_top false  
bool auto_translate true  
bool borderless false  
ContentScaleAspect content_scale_aspect 0  
float content_scale_factor 1.0  
ContentScaleMode content_scale_mode 0  
Vector2i content_scale_size Vector2i(0, 0)  
ContentScaleStretch content_scale_stretch 0  
int current_screen   
bool exclusive false  
bool extend_to_title false  
WindowInitialPosition initial_position 0  
bool keep_title_visible false  
Vector2i max_size Vector2i(0, 0)  
Vector2i min_size Vector2i(0, 0)  
Mode mode 0  
bool mouse_passthrough false  
PackedVector2Array mouse_passthrough_polygon PackedVector2Array()  
bool popup_window false  
Vector2i position Vector2i(0, 0)  
Vector2i size Vector2i(100, 100)  
Theme theme   
StringName theme_type_variation &""  
String title ""  
bool transient false  
bool transparent false  
bool unfocusable false  
bool unresizable false  
bool visible true  
bool wrap_controls false     Methods  
Vector2 _get_contents_minimum_size ( ) virtual const  
void add_theme_color_override ( StringName name, Color color )  
void add_theme_constant_override ( StringName name, int constant )  
void add_theme_font_override ( StringName name, Font font )  
void add_theme_font_size_override ( StringName name, int font_size )  
void add_theme_icon_override ( StringName name, Texture2D texture )  
void add_theme_stylebox_override ( StringName name, StyleBox stylebox )  
void begin_bulk_theme_override ( )  
bool can_draw ( ) const  
void child_controls_changed ( )  
void end_bulk_theme_override ( )  
Vector2 get_contents_minimum_size ( ) const  
bool get_flag ( Flags flag ) const  
LayoutDirection get_layout_direction ( ) const  
Vector2i get_position_with_decorations ( ) const  
Vector2i get_size_with_decorations ( ) const  
Color get_theme_color ( StringName name, StringName theme_type="" ) const  
int get_theme_constant ( StringName name, StringName theme_type="" ) const  
float get_theme_default_base_scale ( ) const  
Font get_theme_default_font ( ) const  
int get_theme_default_font_size ( ) const  
Font get_theme_font ( StringName name, StringName theme_type="" ) const  
int get_theme_font_size ( StringName name, StringName theme_type="" ) const  
Texture2D get_theme_icon ( StringName name, StringName theme_type="" ) const  
StyleBox get_theme_stylebox ( StringName name, StringName theme_type="" ) const  
int get_window_id ( ) const  
void grab_focus ( )  
bool has_focus ( ) const  
bool has_theme_color ( StringName name, StringName theme_type="" ) const  
bool has_theme_color_override ( StringName name ) const  
bool has_theme_constant ( StringName name, StringName theme_type="" ) const  
bool has_theme_constant_override ( StringName name ) const  
bool has_theme_font ( StringName name, StringName theme_type="" ) const  
bool has_theme_font_override ( StringName name ) const  
bool has_theme_font_size ( StringName name, StringName theme_type="" ) const  
bool has_theme_font_size_override ( StringName name ) const  
bool has_theme_icon ( StringName name, StringName theme_type="" ) const  
bool has_theme_icon_override ( StringName name ) const  
bool has_theme_stylebox ( StringName name, StringName theme_type="" ) const  
bool has_theme_stylebox_override ( StringName name ) const  
void hide ( )  
bool is_embedded ( ) const  
bool is_layout_rtl ( ) const  
bool is_maximize_allowed ( ) const  
bool is_using_font_oversampling ( ) const  
void move_to_center ( )  
void move_to_foreground ( )  
void popup ( Rect2i rect=Rect2i(0, 0, 0, 0) )  
void popup_centered ( Vector2i minsize=Vector2i(0, 0) )  
void popup_centered_clamped ( Vector2i minsize=Vector2i(0, 0), float fallback_ratio=0.75 )  
void popup_centered_ratio ( float ratio=0.8 )  
void popup_exclusive ( Node from_node, Rect2i rect=Rect2i(0, 0, 0, 0) )  
void popup_exclusive_centered ( Node from_node, Vector2i minsize=Vector2i(0, 0) )  
void popup_exclusive_centered_clamped ( Node from_node, Vector2i minsize=Vector2i(0, 0), float fallback_ratio=0.75 )  
void popup_exclusive_centered_ratio ( Node from_node, float ratio=0.8 )  
void popup_exclusive_on_parent ( Node from_node, Rect2i parent_rect )  
void popup_on_parent ( Rect2i parent_rect )  
void remove_theme_color_override ( StringName name )  
void remove_theme_constant_override ( StringName name )  
void remove_theme_font_override ( StringName name )  
void remove_theme_font_size_override ( StringName name )  
void remove_theme_icon_override ( StringName name )  
void remove_theme_stylebox_override ( StringName name )  
void request_attention ( )  
void reset_size ( )  
void set_flag ( Flags flag, bool enabled )  
void set_ime_active ( bool active )  
void set_ime_position ( Vector2i position )  
void set_layout_direction ( LayoutDirection direction )  
void set_unparent_when_invisible ( bool unparent )  
void set_use_font_oversampling ( bool enable )  
void show ( )     Theme Properties  
Color title_color Color(0.875, 0.875, 0.875, 1)  
Color title_outline_modulate Color(1, 1, 1, 1)  
int close_h_offset 18  
int close_v_offset 24  
int resize_margin 4  
int title_height 36  
int title_outline_size 0  
Font title_font   
int title_font_size   
Texture2D close   
Texture2D close_pressed   
StyleBox embedded_border   
StyleBox embedded_unfocused_border      Signals about_to_popup ( ) Emitted right after popup call, before the Window appears or does anything. close_requested ( ) Emitted when the Window's close button is pressed or when popup_window is enabled and user clicks outside the window. This signal can be used to handle window closing, e.g. by connecting it to hide. dpi_changed ( ) Emitted when the Window's DPI changes as a result of OS-level changes (e.g. moving the window from a Retina display to a lower resolution one). Note: Only implemented on macOS. files_dropped ( PackedStringArray files ) Emitted when files are dragged from the OS file manager and dropped in the game window. The argument is a list of file paths. Note that this method only works with native windows, i.e. the main window and Window-derived nodes when Viewport.gui_embed_subwindows is disabled in the main viewport. Example usage: func _ready():
    get_viewport().files_dropped.connect(on_files_dropped)
func on_files_dropped(files):
    print(files)
 focus_entered ( ) Emitted when the Window gains focus. focus_exited ( ) Emitted when the Window loses its focus. go_back_requested ( ) Emitted when a go back request is sent (e.g. pressing the "Back" button on Android), right after Node.NOTIFICATION_WM_GO_BACK_REQUEST. mouse_entered ( ) Emitted when the mouse cursor enters the Window's visible area, that is not occluded behind other Controls or windows, provided its Viewport.gui_disable_input is false and regardless if it's currently focused or not. mouse_exited ( ) Emitted when the mouse cursor leaves the Window's visible area, that is not occluded behind other Controls or windows, provided its Viewport.gui_disable_input is false and regardless if it's currently focused or not. theme_changed ( ) Emitted when the NOTIFICATION_THEME_CHANGED notification is sent. titlebar_changed ( ) Emitted when window title bar decorations are changed, e.g. macOS window enter/exit full screen mode, or extend-to-title flag is changed. visibility_changed ( ) Emitted when Window is made visible or disappears. window_input ( InputEvent event ) Emitted when the Window is currently focused and receives any input, passing the received event as an argument. The event's position, if present, is in the embedder's coordinate system.   Enumerations enum Mode: 
Mode MODE_WINDOWED = 0
 Windowed mode, i.e. Window doesn't occupy the whole screen (unless set to the size of the screen). 
Mode MODE_MINIMIZED = 1
 Minimized window mode, i.e. Window is not visible and available on window manager's window list. Normally happens when the minimize button is pressed. 
Mode MODE_MAXIMIZED = 2
 Maximized window mode, i.e. Window will occupy whole screen area except task bar and still display its borders. Normally happens when the maximize button is pressed. 
Mode MODE_FULLSCREEN = 3
 Full screen mode with full multi-window support. Full screen window covers the entire display area of a screen and has no decorations. The display's video mode is not changed. On Windows: Multi-window full-screen mode has a 1px border of the ProjectSettings.rendering/environment/defaults/default_clear_color color. On macOS: A new desktop is used to display the running project. Note: Regardless of the platform, enabling full screen will change the window size to match the monitor's size. Therefore, make sure your project supports multiple resolutions when enabling full screen mode. 
Mode MODE_EXCLUSIVE_FULLSCREEN = 4
 A single window full screen mode. This mode has less overhead, but only one window can be open on a given screen at a time (opening a child window or application switching will trigger a full screen transition). Full screen window covers the entire display area of a screen and has no border or decorations. The display's video mode is not changed. On Windows: Depending on video driver, full screen transition might cause screens to go black for a moment. On macOS: A new desktop is used to display the running project. Exclusive full screen mode prevents Dock and Menu from showing up when the mouse pointer is hovering the edge of the screen. On Linux (X11): Exclusive full screen mode bypasses compositor. Note: Regardless of the platform, enabling full screen will change the window size to match the monitor's size. Therefore, make sure your project supports multiple resolutions when enabling full screen mode. enum Flags: 
Flags FLAG_RESIZE_DISABLED = 0
 The window can't be resized by dragging its resize grip. It's still possible to resize the window using size. This flag is ignored for full screen windows. Set with unresizable. 
Flags FLAG_BORDERLESS = 1
 The window do not have native title bar and other decorations. This flag is ignored for full-screen windows. Set with borderless. 
Flags FLAG_ALWAYS_ON_TOP = 2
 The window is floating on top of all other windows. This flag is ignored for full-screen windows. Set with always_on_top. 
Flags FLAG_TRANSPARENT = 3
 The window background can be transparent. Set with transparent. Note: This flag has no effect if either ProjectSettings.display/window/per_pixel_transparency/allowed, or the window's Viewport.transparent_bg is set to false. 
Flags FLAG_NO_FOCUS = 4
 The window can't be focused. No-focus window will ignore all input, except mouse clicks. Set with unfocusable. 
Flags FLAG_POPUP = 5
 Window is part of menu or OptionButton dropdown. This flag can't be changed when the window is visible. An active popup window will exclusively receive all input, without stealing focus from its parent. Popup windows are automatically closed when uses click outside it, or when an application is switched. Popup window must have transient parent set (see transient). Note: This flag has no effect in embedded windows (unless said window is a Popup). 
Flags FLAG_EXTEND_TO_TITLE = 6
 Window content is expanded to the full size of the window. Unlike borderless window, the frame is left intact and can be used to resize the window, title bar is transparent, but have minimize/maximize/close buttons. Set with extend_to_title. Note: This flag is implemented only on macOS. Note: This flag has no effect in embedded windows. 
Flags FLAG_MOUSE_PASSTHROUGH = 7
 All mouse events are passed to the underlying window of the same application. Note: This flag has no effect in embedded windows. 
Flags FLAG_MAX = 8
 Max value of the Flags. enum ContentScaleMode: 
ContentScaleMode CONTENT_SCALE_MODE_DISABLED = 0
 The content will not be scaled to match the Window's size. 
ContentScaleMode CONTENT_SCALE_MODE_CANVAS_ITEMS = 1
 The content will be rendered at the target size. This is more performance-expensive than CONTENT_SCALE_MODE_VIEWPORT, but provides better results. 
ContentScaleMode CONTENT_SCALE_MODE_VIEWPORT = 2
 The content will be rendered at the base size and then scaled to the target size. More performant than CONTENT_SCALE_MODE_CANVAS_ITEMS, but results in pixelated image. enum ContentScaleAspect: 
ContentScaleAspect CONTENT_SCALE_ASPECT_IGNORE = 0
 The aspect will be ignored. Scaling will simply stretch the content to fit the target size. 
ContentScaleAspect CONTENT_SCALE_ASPECT_KEEP = 1
 The content's aspect will be preserved. If the target size has different aspect from the base one, the image will be centered and black bars will appear on left and right sides. 
ContentScaleAspect CONTENT_SCALE_ASPECT_KEEP_WIDTH = 2
 The content can be expanded vertically. Scaling horizontally will result in keeping the width ratio and then black bars on left and right sides. 
ContentScaleAspect CONTENT_SCALE_ASPECT_KEEP_HEIGHT = 3
 The content can be expanded horizontally. Scaling vertically will result in keeping the height ratio and then black bars on top and bottom sides. 
ContentScaleAspect CONTENT_SCALE_ASPECT_EXPAND = 4
 The content's aspect will be preserved. If the target size has different aspect from the base one, the content will stay in the top-left corner and add an extra visible area in the stretched space. enum ContentScaleStretch: 
ContentScaleStretch CONTENT_SCALE_STRETCH_FRACTIONAL = 0
 The content will be stretched according to a fractional factor. This fills all the space available in the window, but allows "pixel wobble" to occur due to uneven pixel scaling. 
ContentScaleStretch CONTENT_SCALE_STRETCH_INTEGER = 1
 The content will be stretched only according to an integer factor, preserving sharp pixels. This may leave a black background visible on the window's edges depending on the window size. enum LayoutDirection: 
LayoutDirection LAYOUT_DIRECTION_INHERITED = 0
 Automatic layout direction, determined from the parent window layout direction. 
LayoutDirection LAYOUT_DIRECTION_LOCALE = 1
 Automatic layout direction, determined from the current locale. 
LayoutDirection LAYOUT_DIRECTION_LTR = 2
 Left-to-right layout direction. 
LayoutDirection LAYOUT_DIRECTION_RTL = 3
 Right-to-left layout direction. enum WindowInitialPosition: 
WindowInitialPosition WINDOW_INITIAL_POSITION_ABSOLUTE = 0
 Initial window position is determined by position. 
WindowInitialPosition WINDOW_INITIAL_POSITION_CENTER_PRIMARY_SCREEN = 1
 Initial window position is the center of the primary screen. 
WindowInitialPosition WINDOW_INITIAL_POSITION_CENTER_MAIN_WINDOW_SCREEN = 2
 Initial window position is the center of the main window screen. 
WindowInitialPosition WINDOW_INITIAL_POSITION_CENTER_OTHER_SCREEN = 3
 Initial window position is the center of current_screen screen. 
WindowInitialPosition WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_MOUSE_FOCUS = 4
 Initial window position is the center of the screen containing the mouse pointer. 
WindowInitialPosition WINDOW_INITIAL_POSITION_CENTER_SCREEN_WITH_KEYBOARD_FOCUS = 5
 Initial window position is the center of the screen containing the window with the keyboard focus.   Constants NOTIFICATION_VISIBILITY_CHANGED = 30
 Emitted when Window's visibility changes, right before visibility_changed. NOTIFICATION_THEME_CHANGED = 32
 Sent when the node needs to refresh its theme items. This happens in one of the following cases:  The theme property is changed on this node or any of its ancestors. The theme_type_variation property is changed on this node. The node enters the scene tree.  Note: As an optimization, this notification won't be sent from changes that occur while this node is outside of the scene tree. Instead, all of the theme item updates can be applied at once when the node enters the scene tree.   Property Descriptions 
bool always_on_top = false
  void set_flag ( Flags flag, bool enabled )
 
bool get_flag ( Flags flag ) const
  If true, the window will be on top of all other windows. Does not work if transient is enabled. 
bool auto_translate = true
  void set_auto_translate ( bool value )
 
bool is_auto_translating ( )
  Toggles if any text should automatically change to its translated version depending on the current locale. 
bool borderless = false
  void set_flag ( Flags flag, bool enabled )
 
bool get_flag ( Flags flag ) const
  If true, the window will have no borders. 
ContentScaleAspect content_scale_aspect = 0
  void set_content_scale_aspect ( ContentScaleAspect value )
 
ContentScaleAspect get_content_scale_aspect ( )
  Specifies how the content's aspect behaves when the Window is resized. The base aspect is determined by content_scale_size. 
float content_scale_factor = 1.0
  void set_content_scale_factor ( float value )
 
float get_content_scale_factor ( )
  Specifies the base scale of Window's content when its size is equal to content_scale_size. 
ContentScaleMode content_scale_mode = 0
  void set_content_scale_mode ( ContentScaleMode value )
 
ContentScaleMode get_content_scale_mode ( )
  Specifies how the content is scaled when the Window is resized. 
Vector2i content_scale_size = Vector2i(0, 0)
  void set_content_scale_size ( Vector2i value )
 
Vector2i get_content_scale_size ( )
  Base size of the content (i.e. nodes that are drawn inside the window). If non-zero, Window's content will be scaled when the window is resized to a different size. 
ContentScaleStretch content_scale_stretch = 0
  void set_content_scale_stretch ( ContentScaleStretch value )
 
ContentScaleStretch get_content_scale_stretch ( )
  The policy to use to determine the final scale factor for 2D elements. This affects how content_scale_factor is applied, in addition to the automatic scale factor determined by content_scale_size. 
int current_screen  void set_current_screen ( int value )
 
int get_current_screen ( )
  The screen the window is currently on. 
bool exclusive = false
  void set_exclusive ( bool value )
 
bool is_exclusive ( )
  If true, the Window will be in exclusive mode. Exclusive windows are always on top of their parent and will block all input going to the parent Window. Needs transient enabled to work. 
bool extend_to_title = false
  void set_flag ( Flags flag, bool enabled )
 
bool get_flag ( Flags flag ) const
  If true, the Window contents is expanded to the full size of the window, window title bar is transparent. Note: This property is implemented only on macOS. Note: This property only works with native windows. 
WindowInitialPosition initial_position = 0
  void set_initial_position ( WindowInitialPosition value )
 
WindowInitialPosition get_initial_position ( )
  Specifies the initial type of position for the Window. See WindowInitialPosition constants. 
bool keep_title_visible = false
  void set_keep_title_visible ( bool value )
 
bool get_keep_title_visible ( )
  If true, the Window width is expanded to keep the title bar text fully visible. 
Vector2i max_size = Vector2i(0, 0)
  void set_max_size ( Vector2i value )
 
Vector2i get_max_size ( )
  If non-zero, the Window can't be resized to be bigger than this size. Note: This property will be ignored if the value is lower than min_size. 
Vector2i min_size = Vector2i(0, 0)
  void set_min_size ( Vector2i value )
 
Vector2i get_min_size ( )
  If non-zero, the Window can't be resized to be smaller than this size. Note: This property will be ignored in favor of get_contents_minimum_size if wrap_controls is enabled and if its size is bigger. 
Mode mode = 0
  void set_mode ( Mode value )
 
Mode get_mode ( )
  Set's the window's current mode. Note: Fullscreen mode is not exclusive full screen on Windows and Linux. Note: This method only works with native windows, i.e. the main window and Window-derived nodes when Viewport.gui_embed_subwindows is disabled in the main viewport. 
bool mouse_passthrough = false
  void set_flag ( Flags flag, bool enabled )
 
bool get_flag ( Flags flag ) const
  If true, all mouse events will be passed to the underlying window of the same application. See also mouse_passthrough_polygon. Note: This property is implemented on Linux (X11), macOS and Windows. Note: This property only works with native windows. 
PackedVector2Array mouse_passthrough_polygon = PackedVector2Array()
  void set_mouse_passthrough_polygon ( PackedVector2Array value )
 
PackedVector2Array get_mouse_passthrough_polygon ( )
  Sets a polygonal region of the window which accepts mouse events. Mouse events outside the region will be passed through. Passing an empty array will disable passthrough support (all mouse events will be intercepted by the window, which is the default behavior).  GDScript# Set region, using Path2D node.
$Window.mouse_passthrough_polygon = $Path2D.curve.get_baked_points()
# Set region, using Polygon2D node.
$Window.mouse_passthrough_polygon = $Polygon2D.polygon
# Reset region to default.
$Window.mouse_passthrough_polygon = []
 C#// Set region, using Path2D node.
GetNode<Window>("Window").MousePassthrough = GetNode<Path2D>("Path2D").Curve.GetBakedPoints();
// Set region, using Polygon2D node.
GetNode<Window>("Window").MousePassthrough = GetNode<Polygon2D>("Polygon2D").Polygon;
// Reset region to default.
GetNode<Window>("Window").MousePassthrough = new Vector2[] {};
  Note: This property is ignored if mouse_passthrough is set to true. Note: On Windows, the portion of a window that lies outside the region is not drawn, while on Linux (X11) and macOS it is. Note: This property is implemented on Linux (X11), macOS and Windows. 
bool popup_window = false
  void set_flag ( Flags flag, bool enabled )
 
bool get_flag ( Flags flag ) const
  If true, the Window will be considered a popup. Popups are sub-windows that don't show as separate windows in system's window manager's window list and will send close request when anything is clicked outside of them (unless exclusive is enabled). 
Vector2i position = Vector2i(0, 0)
  void set_position ( Vector2i value )
 
Vector2i get_position ( )
  The window's position in pixels. If ProjectSettings.display/window/subwindows/embed_subwindows is false, the position is in absolute screen coordinates. This typically applies to editor plugins. If the setting is true, the window's position is in the coordinates of its parent Viewport. Note: This property only works if initial_position is set to WINDOW_INITIAL_POSITION_ABSOLUTE. 
Vector2i size = Vector2i(100, 100)
  void set_size ( Vector2i value )
 
Vector2i get_size ( )
  The window's size in pixels. 
Theme theme  void set_theme ( Theme value )
 
Theme get_theme ( )
  The Theme resource this node and all its Control and Window children use. If a child node has its own Theme resource set, theme items are merged with child's definitions having higher priority. Note: Window styles will have no effect unless the window is embedded. 
StringName theme_type_variation = &""
  void set_theme_type_variation ( StringName value )
 
StringName get_theme_type_variation ( )
  The name of a theme type variation used by this Window to look up its own theme items. See Control.theme_type_variation for more details. 
String title = ""
  void set_title ( String value )
 
String get_title ( )
  The window's title. If the Window is native, title styles set in Theme will have no effect. 
bool transient = false
  void set_transient ( bool value )
 
bool is_transient ( )
  If true, the Window is transient, i.e. it's considered a child of another Window. The transient window will be destroyed with its transient parent and will return focus to their parent when closed. The transient window is displayed on top of a non-exclusive full-screen parent window. Transient windows can't enter full-screen mode. Note that behavior might be different depending on the platform. 
bool transparent = false
  void set_flag ( Flags flag, bool enabled )
 
bool get_flag ( Flags flag ) const
  If true, the Window's background can be transparent. This is best used with embedded windows. Note: Transparency support is implemented on Linux, macOS and Windows, but availability might vary depending on GPU driver, display manager, and compositor capabilities. Note: This property has no effect if either ProjectSettings.display/window/per_pixel_transparency/allowed, or the window's Viewport.transparent_bg is set to false. 
bool unfocusable = false
  void set_flag ( Flags flag, bool enabled )
 
bool get_flag ( Flags flag ) const
  If true, the Window can't be focused nor interacted with. It can still be visible. 
bool unresizable = false
  void set_flag ( Flags flag, bool enabled )
 
bool get_flag ( Flags flag ) const
  If true, the window can't be resized. Minimize and maximize buttons are disabled. 
bool visible = true
  void set_visible ( bool value )
 
bool is_visible ( )
  If true, the window is visible. 
bool wrap_controls = false
  void set_wrap_controls ( bool value )
 
bool is_wrapping_controls ( )
  If true, the window's size will automatically update when a child node is added or removed, ignoring min_size if the new size is bigger. If false, you need to call child_controls_changed manually.   Method Descriptions 
Vector2 _get_contents_minimum_size ( ) virtual const
 Virtual method to be implemented by the user. Overrides the value returned by get_contents_minimum_size. void add_theme_color_override ( StringName name, Color color ) Creates a local override for a theme Color with the specified name. Local overrides always take precedence when fetching theme items for the control. An override can be removed with remove_theme_color_override. See also get_theme_color and Control.add_theme_color_override for more details. void add_theme_constant_override ( StringName name, int constant ) Creates a local override for a theme constant with the specified name. Local overrides always take precedence when fetching theme items for the control. An override can be removed with remove_theme_constant_override. See also get_theme_constant. void add_theme_font_override ( StringName name, Font font ) Creates a local override for a theme Font with the specified name. Local overrides always take precedence when fetching theme items for the control. An override can be removed with remove_theme_font_override. See also get_theme_font. void add_theme_font_size_override ( StringName name, int font_size ) Creates a local override for a theme font size with the specified name. Local overrides always take precedence when fetching theme items for the control. An override can be removed with remove_theme_font_size_override. See also get_theme_font_size. void add_theme_icon_override ( StringName name, Texture2D texture ) Creates a local override for a theme icon with the specified name. Local overrides always take precedence when fetching theme items for the control. An override can be removed with remove_theme_icon_override. See also get_theme_icon. void add_theme_stylebox_override ( StringName name, StyleBox stylebox ) Creates a local override for a theme StyleBox with the specified name. Local overrides always take precedence when fetching theme items for the control. An override can be removed with remove_theme_stylebox_override. See also get_theme_stylebox and Control.add_theme_stylebox_override for more details. void begin_bulk_theme_override ( ) Prevents *_theme_*_override methods from emitting NOTIFICATION_THEME_CHANGED until end_bulk_theme_override is called. 
bool can_draw ( ) const
 Returns whether the window is being drawn to the screen. void child_controls_changed ( ) Requests an update of the Window size to fit underlying Control nodes. void end_bulk_theme_override ( ) Ends a bulk theme override update. See begin_bulk_theme_override. 
Vector2 get_contents_minimum_size ( ) const
 Returns the combined minimum size from the child Control nodes of the window. Use child_controls_changed to update it when child nodes have changed. The value returned by this method can be overridden with _get_contents_minimum_size. 
bool get_flag ( Flags flag ) const
 Returns true if the flag is set. 
LayoutDirection get_layout_direction ( ) const
 Returns layout direction and text writing direction. 
Vector2i get_position_with_decorations ( ) const
 Returns the window's position including its border. 
Vector2i get_size_with_decorations ( ) const
 Returns the window's size including its border. 
Color get_theme_color ( StringName name, StringName theme_type="" ) const
 Returns a Color from the first matching Theme in the tree if that Theme has a color item with the specified name and theme_type. See Control.get_theme_color for more details. 
int get_theme_constant ( StringName name, StringName theme_type="" ) const
 Returns a constant from the first matching Theme in the tree if that Theme has a constant item with the specified name and theme_type. See Control.get_theme_color for more details. 
float get_theme_default_base_scale ( ) const
 Returns the default base scale value from the first matching Theme in the tree if that Theme has a valid Theme.default_base_scale value. See Control.get_theme_color for details. 
Font get_theme_default_font ( ) const
 Returns the default font from the first matching Theme in the tree if that Theme has a valid Theme.default_font value. See Control.get_theme_color for details. 
int get_theme_default_font_size ( ) const
 Returns the default font size value from the first matching Theme in the tree if that Theme has a valid Theme.default_font_size value. See Control.get_theme_color for details. 
Font get_theme_font ( StringName name, StringName theme_type="" ) const
 Returns a Font from the first matching Theme in the tree if that Theme has a font item with the specified name and theme_type. See Control.get_theme_color for details. 
int get_theme_font_size ( StringName name, StringName theme_type="" ) const
 Returns a font size from the first matching Theme in the tree if that Theme has a font size item with the specified name and theme_type. See Control.get_theme_color for details. 
Texture2D get_theme_icon ( StringName name, StringName theme_type="" ) const
 Returns an icon from the first matching Theme in the tree if that Theme has an icon item with the specified name and theme_type. See Control.get_theme_color for details. 
StyleBox get_theme_stylebox ( StringName name, StringName theme_type="" ) const
 Returns a StyleBox from the first matching Theme in the tree if that Theme has a stylebox item with the specified name and theme_type. See Control.get_theme_color for details. 
int get_window_id ( ) const
 Returns the ID of the window. void grab_focus ( ) Causes the window to grab focus, allowing it to receive user input. 
bool has_focus ( ) const
 Returns true if the window is focused. 
bool has_theme_color ( StringName name, StringName theme_type="" ) const
 Returns true if there is a matching Theme in the tree that has a color item with the specified name and theme_type. See Control.get_theme_color for details. 
bool has_theme_color_override ( StringName name ) const
 Returns true if there is a local override for a theme Color with the specified name in this Control node. See add_theme_color_override. 
bool has_theme_constant ( StringName name, StringName theme_type="" ) const
 Returns true if there is a matching Theme in the tree that has a constant item with the specified name and theme_type. See Control.get_theme_color for details. 
bool has_theme_constant_override ( StringName name ) const
 Returns true if there is a local override for a theme constant with the specified name in this Control node. See add_theme_constant_override. 
bool has_theme_font ( StringName name, StringName theme_type="" ) const
 Returns true if there is a matching Theme in the tree that has a font item with the specified name and theme_type. See Control.get_theme_color for details. 
bool has_theme_font_override ( StringName name ) const
 Returns true if there is a local override for a theme Font with the specified name in this Control node. See add_theme_font_override. 
bool has_theme_font_size ( StringName name, StringName theme_type="" ) const
 Returns true if there is a matching Theme in the tree that has a font size item with the specified name and theme_type. See Control.get_theme_color for details. 
bool has_theme_font_size_override ( StringName name ) const
 Returns true if there is a local override for a theme font size with the specified name in this Control node. See add_theme_font_size_override. 
bool has_theme_icon ( StringName name, StringName theme_type="" ) const
 Returns true if there is a matching Theme in the tree that has an icon item with the specified name and theme_type. See Control.get_theme_color for details. 
bool has_theme_icon_override ( StringName name ) const
 Returns true if there is a local override for a theme icon with the specified name in this Control node. See add_theme_icon_override. 
bool has_theme_stylebox ( StringName name, StringName theme_type="" ) const
 Returns true if there is a matching Theme in the tree that has a stylebox item with the specified name and theme_type. See Control.get_theme_color for details. 
bool has_theme_stylebox_override ( StringName name ) const
 Returns true if there is a local override for a theme StyleBox with the specified name in this Control node. See add_theme_stylebox_override. void hide ( ) Hides the window. This is not the same as minimized state. Hidden window can't be interacted with and needs to be made visible with show. 
bool is_embedded ( ) const
 Returns true if the window is currently embedded in another window. 
bool is_layout_rtl ( ) const
 Returns true if layout is right-to-left. 
bool is_maximize_allowed ( ) const
 Returns true if the window can be maximized (the maximize button is enabled). 
bool is_using_font_oversampling ( ) const
 Returns true if font oversampling is enabled. See set_use_font_oversampling. void move_to_center ( ) Centers a native window on the current screen and an embedded window on its embedder Viewport. void move_to_foreground ( ) Moves the Window on top of other windows and focuses it. void popup ( Rect2i rect=Rect2i(0, 0, 0, 0) ) Shows the Window and makes it transient (see transient). If rect is provided, it will be set as the Window's size. Fails if called on the main window. void popup_centered ( Vector2i minsize=Vector2i(0, 0) ) Popups the Window at the center of the current screen, with optionally given minimum size. If the Window is embedded, it will be centered in the parent Viewport instead. Note: Calling it with the default value of minsize is equivalent to calling it with size. void popup_centered_clamped ( Vector2i minsize=Vector2i(0, 0), float fallback_ratio=0.75 ) Popups the Window centered inside its parent Window. fallback_ratio determines the maximum size of the Window, in relation to its parent. Note: Calling it with the default value of minsize is equivalent to calling it with size. void popup_centered_ratio ( float ratio=0.8 ) If Window is embedded, popups the Window centered inside its embedder and sets its size as a ratio of embedder's size. If Window is a native window, popups the Window centered inside the screen of its parent Window and sets its size as a ratio of the screen size. void popup_exclusive ( Node from_node, Rect2i rect=Rect2i(0, 0, 0, 0) ) Attempts to parent this dialog to the last exclusive window relative to from_node, and then calls popup on it. The dialog must have no current parent, otherwise the method fails. See also set_unparent_when_invisible and Node.get_last_exclusive_window. void popup_exclusive_centered ( Node from_node, Vector2i minsize=Vector2i(0, 0) ) Attempts to parent this dialog to the last exclusive window relative to from_node, and then calls popup_centered on it. The dialog must have no current parent, otherwise the method fails. See also set_unparent_when_invisible and Node.get_last_exclusive_window. void popup_exclusive_centered_clamped ( Node from_node, Vector2i minsize=Vector2i(0, 0), float fallback_ratio=0.75 ) Attempts to parent this dialog to the last exclusive window relative to from_node, and then calls popup_centered_clamped on it. The dialog must have no current parent, otherwise the method fails. See also set_unparent_when_invisible and Node.get_last_exclusive_window. void popup_exclusive_centered_ratio ( Node from_node, float ratio=0.8 ) Attempts to parent this dialog to the last exclusive window relative to from_node, and then calls popup_centered_ratio on it. The dialog must have no current parent, otherwise the method fails. See also set_unparent_when_invisible and Node.get_last_exclusive_window. void popup_exclusive_on_parent ( Node from_node, Rect2i parent_rect ) Attempts to parent this dialog to the last exclusive window relative to from_node, and then calls popup_on_parent on it. The dialog must have no current parent, otherwise the method fails. See also set_unparent_when_invisible and Node.get_last_exclusive_window. void popup_on_parent ( Rect2i parent_rect ) Popups the Window with a position shifted by parent Window's position. If the Window is embedded, has the same effect as popup. void remove_theme_color_override ( StringName name ) Removes a local override for a theme Color with the specified name previously added by add_theme_color_override or via the Inspector dock. void remove_theme_constant_override ( StringName name ) Removes a local override for a theme constant with the specified name previously added by add_theme_constant_override or via the Inspector dock. void remove_theme_font_override ( StringName name ) Removes a local override for a theme Font with the specified name previously added by add_theme_font_override or via the Inspector dock. void remove_theme_font_size_override ( StringName name ) Removes a local override for a theme font size with the specified name previously added by add_theme_font_size_override or via the Inspector dock. void remove_theme_icon_override ( StringName name ) Removes a local override for a theme icon with the specified name previously added by add_theme_icon_override or via the Inspector dock. void remove_theme_stylebox_override ( StringName name ) Removes a local override for a theme StyleBox with the specified name previously added by add_theme_stylebox_override or via the Inspector dock. void request_attention ( ) Tells the OS that the Window needs an attention. This makes the window stand out in some way depending on the system, e.g. it might blink on the task bar. void reset_size ( ) Resets the size to the minimum size, which is the max of min_size and (if wrap_controls is enabled) get_contents_minimum_size. This is equivalent to calling set_size(Vector2i()) (or any size below the minimum). void set_flag ( Flags flag, bool enabled ) Sets a specified window flag. void set_ime_active ( bool active ) If active is true, enables system's native IME (Input Method Editor). void set_ime_position ( Vector2i position ) Moves IME to the given position. void set_layout_direction ( LayoutDirection direction ) Sets layout direction and text writing direction. Right-to-left layouts are necessary for certain languages (e.g. Arabic and Hebrew). void set_unparent_when_invisible ( bool unparent ) If unparent is true, the window is automatically unparented when going invisible. Note: Make sure to keep a reference to the node, otherwise it will be orphaned. You also need to manually call Node.queue_free to free the window if it's not parented. void set_use_font_oversampling ( bool enable ) Enables font oversampling. This makes fonts look better when they are scaled up. void show ( ) Makes the Window appear. This enables interactions with the Window and doesn't change any of its property other than visibility (unlike e.g. popup).   Theme Property Descriptions 
Color title_color = Color(0.875, 0.875, 0.875, 1)
 The color of the title's text. 
Color title_outline_modulate = Color(1, 1, 1, 1)
 The color of the title's text outline. 
int close_h_offset = 18
 Horizontal position offset of the close button. 
int close_v_offset = 24
 Vertical position offset of the close button. 
int resize_margin = 4
 Defines the outside margin at which the window border can be grabbed with mouse and resized. 
int title_height = 36
 Height of the title bar. 
int title_outline_size = 0
 The size of the title outline. 
Font title_font The font used to draw the title. 
int title_font_size The size of the title font. 
Texture2D close The icon for the close button. 
Texture2D close_pressed The icon for the close button when it's being pressed. 
StyleBox embedded_border The background style used when the Window is embedded. Note that this is drawn only under the window's content, excluding the title. For proper borders and title bar style, you can use expand_margin_* properties of StyleBoxFlat. Note: The content background will not be visible unless transparent is enabled. 
StyleBox embedded_unfocused_border The background style used when the Window is embedded and unfocused.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_window.html


classes/class_reflectionprobe
-----------------------------------------------------------
ReflectionProbe Inherits: VisualInstance3D < Node3D < Node < Object Captures its surroundings to create fast, accurate reflections from a given point.  Description Captures its surroundings as a cubemap, and stores versions of it with increasing levels of blur to simulate different material roughnesses. The ReflectionProbe is used to create high-quality reflections at a low performance cost (when update_mode is UPDATE_ONCE). ReflectionProbes can be blended together and with the rest of the scene smoothly. ReflectionProbes can also be combined with VoxelGI, SDFGI (Environment.sdfgi_enabled) and screen-space reflections (Environment.ssr_enabled) to get more accurate reflections in specific areas. ReflectionProbes render all objects within their cull_mask, so updating them can be quite expensive. It is best to update them once with the important static objects and then leave them as-is. Note: Unlike VoxelGI and SDFGI, ReflectionProbes only source their environment from a WorldEnvironment node. If you specify an Environment resource within a Camera3D node, it will be ignored by the ReflectionProbe. This can lead to incorrect lighting within the ReflectionProbe. Note: Reflection probes are only supported in the Forward+ and Mobile rendering methods, not Compatibility. When using the Mobile rendering method, only 8 reflection probes can be displayed on each mesh resource. Attempting to display more than 8 reflection probes on a single mesh resource will result in reflection probes flickering in and out as the camera moves. Note: When using the Mobile rendering method, reflection probes will only correctly affect meshes whose visibility AABB intersects with the reflection probe's AABB. If using a shader to deform the mesh in a way that makes it go outside its AABB, GeometryInstance3D.extra_cull_margin must be increased on the mesh. Otherwise, the reflection probe may not be visible on the mesh.   Tutorials  Reflection probes    Properties  
Color ambient_color Color(0, 0, 0, 1)  
float ambient_color_energy 1.0  
AmbientMode ambient_mode 1  
bool box_projection false  
int cull_mask 1048575  
bool enable_shadows false  
float intensity 1.0  
bool interior false  
float max_distance 0.0  
float mesh_lod_threshold 1.0  
Vector3 origin_offset Vector3(0, 0, 0)  
Vector3 size Vector3(20, 20, 20)  
UpdateMode update_mode 0     Enumerations enum UpdateMode: 
UpdateMode UPDATE_ONCE = 0
 Update the probe once on the next frame (recommended for most objects). The corresponding radiance map will be generated over the following six frames. This takes more time to update than UPDATE_ALWAYS, but it has a lower performance cost and can result in higher-quality reflections. The ReflectionProbe is updated when its transform changes, but not when nearby geometry changes. You can force a ReflectionProbe update by moving the ReflectionProbe slightly in any direction. 
UpdateMode UPDATE_ALWAYS = 1
 Update the probe every frame. This provides better results for fast-moving dynamic objects (such as cars). However, it has a significant performance cost. Due to the cost, it's recommended to only use one ReflectionProbe with UPDATE_ALWAYS at most per scene. For all other use cases, use UPDATE_ONCE. enum AmbientMode: 
AmbientMode AMBIENT_DISABLED = 0
 Do not apply any ambient lighting inside the ReflectionProbe's box defined by its size. 
AmbientMode AMBIENT_ENVIRONMENT = 1
 Apply automatically-sourced environment lighting inside the ReflectionProbe's box defined by its size. 
AmbientMode AMBIENT_COLOR = 2
 Apply custom ambient lighting inside the ReflectionProbe's box defined by its size. See ambient_color and ambient_color_energy.   Property Descriptions 
Color ambient_color = Color(0, 0, 0, 1)
  void set_ambient_color ( Color value )
 
Color get_ambient_color ( )
  The custom ambient color to use within the ReflectionProbe's box defined by its size. Only effective if ambient_mode is AMBIENT_COLOR. 
float ambient_color_energy = 1.0
  void set_ambient_color_energy ( float value )
 
float get_ambient_color_energy ( )
  The custom ambient color energy to use within the ReflectionProbe's box defined by its size. Only effective if ambient_mode is AMBIENT_COLOR. 
AmbientMode ambient_mode = 1
  void set_ambient_mode ( AmbientMode value )
 
AmbientMode get_ambient_mode ( )
  The ambient color to use within the ReflectionProbe's box defined by its size. The ambient color will smoothly blend with other ReflectionProbes and the rest of the scene (outside the ReflectionProbe's box defined by its size). 
bool box_projection = false
  void set_enable_box_projection ( bool value )
 
bool is_box_projection_enabled ( )
  If true, enables box projection. This makes reflections look more correct in rectangle-shaped rooms by offsetting the reflection center depending on the camera's location. Note: To better fit rectangle-shaped rooms that are not aligned to the grid, you can rotate the ReflectionProbe node. 
int cull_mask = 1048575
  void set_cull_mask ( int value )
 
int get_cull_mask ( )
  Sets the cull mask which determines what objects are drawn by this probe. Every VisualInstance3D with a layer included in this cull mask will be rendered by the probe. To improve performance, it is best to only include large objects which are likely to take up a lot of space in the reflection. 
bool enable_shadows = false
  void set_enable_shadows ( bool value )
 
bool are_shadows_enabled ( )
  If true, computes shadows in the reflection probe. This makes the reflection probe slower to render; you may want to disable this if using the UPDATE_ALWAYS update_mode. 
float intensity = 1.0
  void set_intensity ( float value )
 
float get_intensity ( )
  Defines the reflection intensity. Intensity modulates the strength of the reflection. 
bool interior = false
  void set_as_interior ( bool value )
 
bool is_set_as_interior ( )
  If true, reflections will ignore sky contribution. 
float max_distance = 0.0
  void set_max_distance ( float value )
 
float get_max_distance ( )
  The maximum distance away from the ReflectionProbe an object can be before it is culled. Decrease this to improve performance, especially when using the UPDATE_ALWAYS update_mode. Note: The maximum reflection distance is always at least equal to the probe's extents. This means that decreasing max_distance will not always cull objects from reflections, especially if the reflection probe's box defined by its size is already large. 
float mesh_lod_threshold = 1.0
  void set_mesh_lod_threshold ( float value )
 
float get_mesh_lod_threshold ( )
  The automatic LOD bias to use for meshes rendered within the ReflectionProbe (this is analog to Viewport.mesh_lod_threshold). Higher values will use less detailed versions of meshes that have LOD variations generated. If set to 0.0, automatic LOD is disabled. Increase mesh_lod_threshold to improve performance at the cost of geometry detail, especially when using the UPDATE_ALWAYS update_mode. Note: mesh_lod_threshold does not affect GeometryInstance3D visibility ranges (also known as "manual" LOD or hierarchical LOD). 
Vector3 origin_offset = Vector3(0, 0, 0)
  void set_origin_offset ( Vector3 value )
 
Vector3 get_origin_offset ( )
  Sets the origin offset to be used when this ReflectionProbe is in box_projection mode. This can be set to a non-zero value to ensure a reflection fits a rectangle-shaped room, while reducing the number of objects that "get in the way" of the reflection. 
Vector3 size = Vector3(20, 20, 20)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The size of the reflection probe. The larger the size, the more space covered by the probe, which will lower the perceived resolution. It is best to keep the size only as large as you need it. Note: To better fit areas that are not aligned to the grid, you can rotate the ReflectionProbe node. 
UpdateMode update_mode = 0
  void set_update_mode ( UpdateMode value )
 
UpdateMode get_update_mode ( )
  Sets how frequently the ReflectionProbe is updated. Can be UPDATE_ONCE or UPDATE_ALWAYS.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_reflectionprobe.html


classes/class_json
-----------------------------------------------------------
JSON Inherits: Resource < RefCounted < Object Helper class for creating and parsing JSON data.  Description The JSON enables all data types to be converted to and from a JSON string. This useful for serializing data to save to a file or send over the network. stringify is used to convert any data type into a JSON string. parse is used to convert any existing JSON data into a Variant that can be used within Godot. If successfully parsed, use data to retrieve the Variant, and use typeof to check if the Variant's type is what you expect. JSON Objects are converted into a Dictionary, but JSON data can be used to store Arrays, numbers, Strings and even just a boolean. Example var data_to_send = ["a", "b", "c"]
var json_string = JSON.stringify(data_to_send)
# Save data
# ...
# Retrieve data
var json = JSON.new()
var error = json.parse(json_string)
if error == OK:
    var data_received = json.data
    if typeof(data_received) == TYPE_ARRAY:
        print(data_received) # Prints array
    else:
        print("Unexpected data")
else:
    print("JSON Parse Error: ", json.get_error_message(), " in ", json_string, " at line ", json.get_error_line())
 Alternatively, you can parse string using the static parse_string method, but it doesn't allow to handle errors. var data = JSON.parse_string(json_string) # Returns null if parsing failed.
 Note: Both parse methods do not fully comply with the JSON specification:  Trailing commas in arrays or objects are ignored, instead of causing a parser error. New line and tab characters are accepted in string literals, and are treated like their corresponding escape sequences 
 and \t. Numbers are parsed using String.to_float which is generally more lax than the JSON specification. Certain errors, such as invalid Unicode sequences, do not cause a parser error. Instead, the string is cleansed and an error is logged to the console.    Properties  
Variant data null     Methods  
int get_error_line ( ) const  
String get_error_message ( ) const  
String get_parsed_text ( ) const  
Error parse ( String json_text, bool keep_text=false )  
Variant parse_string ( String json_string ) static  
String stringify ( Variant data, String indent="", bool sort_keys=true, bool full_precision=false ) static     Property Descriptions 
Variant data = null
  void set_data ( Variant value )
 
Variant get_data ( )
  Contains the parsed JSON data in Variant form.   Method Descriptions 
int get_error_line ( ) const
 Returns 0 if the last call to parse was successful, or the line number where the parse failed. 
String get_error_message ( ) const
 Returns an empty string if the last call to parse was successful, or the error message if it failed. 
String get_parsed_text ( ) const
 Return the text parsed by parse as long as the function is instructed to keep it. 
Error parse ( String json_text, bool keep_text=false ) Attempts to parse the json_text provided. Returns an Error. If the parse was successful, it returns @GlobalScope.OK and the result can be retrieved using data. If unsuccessful, use get_error_line and get_error_message for identifying the source of the failure. Non-static variant of parse_string, if you want custom error handling. The optional keep_text argument instructs the parser to keep a copy of the original text. This text can be obtained later by using the get_parsed_text function and is used when saving the resource (instead of generating new text from data). 
Variant parse_string ( String json_string ) static
 Attempts to parse the json_string provided and returns the parsed data. Returns null if parse failed. 
String stringify ( Variant data, String indent="", bool sort_keys=true, bool full_precision=false ) static
 Converts a Variant var to JSON text and returns the result. Useful for serializing data to store or send over the network. Note: The JSON specification does not define integer or float types, but only a number type. Therefore, converting a Variant to JSON text will convert all numerical values to float types. Note: If full_precision is true, when stringifying floats, the unreliable digits are stringified in addition to the reliable digits to guarantee exact decoding. The indent parameter controls if and how something is indented, the string used for this parameter will be used where there should be an indent in the output, even spaces like "Â Â  " will work. \t and 
 can also be used for a tab indent, or to make a newline for each indent respectively. Example output: ## JSON.stringify(my_dictionary)
{"name":"my_dictionary","version":"1.0.0","entities":[{"name":"entity_0","value":"value_0"},{"name":"entity_1","value":"value_1"}]}
## JSON.stringify(my_dictionary, "\t")
{
    "name": "my_dictionary",
    "version": "1.0.0",
    "entities": [
        {
            "name": "entity_0",
            "value": "value_0"
        },
        {
            "name": "entity_1",
            "value": "value_1"
        }
    ]
}
## JSON.stringify(my_dictionary, "...")
{
..."name": "my_dictionary",
..."version": "1.0.0",
..."entities": [
......{
........."name": "entity_0",
........."value": "value_0"
......},
......{
........."name": "entity_1",
........."value": "value_1"
......}
...]
}
  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_json.html


classes/class_gpuparticles3d
-----------------------------------------------------------
GPUParticles3D Inherits: GeometryInstance3D < VisualInstance3D < Node3D < Node < Object A 3D particle emitter.  Description 3D particle node used to create a variety of particle systems and effects. GPUParticles3D features an emitter that generates some number of particles at a given rate. Use process_material to add a ParticleProcessMaterial to configure particle appearance and behavior. Alternatively, you can add a ShaderMaterial which will be applied to all particles.   Tutorials  Particle systems (3D) Controlling thousands of fish with Particles Third Person Shooter Demo    Properties  
int amount 8  
float amount_ratio 1.0  
float collision_base_size 0.01  
DrawOrder draw_order 0  
Mesh draw_pass_1   
Mesh draw_pass_2   
Mesh draw_pass_3   
Mesh draw_pass_4   
int draw_passes 1  
Skin draw_skin   
bool emitting true  
float explosiveness 0.0  
int fixed_fps 30  
bool fract_delta true  
float interp_to_end 0.0  
bool interpolate true  
float lifetime 1.0  
bool local_coords false  
bool one_shot false  
float preprocess 0.0  
Material process_material   
float randomness 0.0  
float speed_scale 1.0  
NodePath sub_emitter NodePath("")  
bool trail_enabled false  
float trail_lifetime 0.3  
TransformAlign transform_align 0  
AABB visibility_aabb AABB(-4, -4, -4, 8, 8, 8)     Methods  
AABB capture_aabb ( ) const  
void convert_from_particles ( Node particles )  
void emit_particle ( Transform3D xform, Vector3 velocity, Color color, Color custom, int flags )  
Mesh get_draw_pass_mesh ( int pass ) const  
void restart ( )  
void set_draw_pass_mesh ( int pass, Mesh mesh )     Signals finished ( ) Emitted when all active particles have finished processing. When one_shot is disabled, particles will process continuously, so this is never emitted. Note: Due to the particles being computed on the GPU there might be a delay before the signal gets emitted.   Enumerations enum DrawOrder: 
DrawOrder DRAW_ORDER_INDEX = 0
 Particles are drawn in the order emitted. 
DrawOrder DRAW_ORDER_LIFETIME = 1
 Particles are drawn in order of remaining lifetime. In other words, the particle with the highest lifetime is drawn at the front. 
DrawOrder DRAW_ORDER_REVERSE_LIFETIME = 2
 Particles are drawn in reverse order of remaining lifetime. In other words, the particle with the lowest lifetime is drawn at the front. 
DrawOrder DRAW_ORDER_VIEW_DEPTH = 3
 Particles are drawn in order of depth. enum EmitFlags: 
EmitFlags EMIT_FLAG_POSITION = 1
 Particle starts at the specified position. 
EmitFlags EMIT_FLAG_ROTATION_SCALE = 2
 Particle starts with specified rotation and scale. 
EmitFlags EMIT_FLAG_VELOCITY = 4
 Particle starts with the specified velocity vector, which defines the emission direction and speed. 
EmitFlags EMIT_FLAG_COLOR = 8
 Particle starts with specified color. 
EmitFlags EMIT_FLAG_CUSTOM = 16
 Particle starts with specified CUSTOM data. enum TransformAlign: 
TransformAlign TRANSFORM_ALIGN_DISABLED = 0
 
TransformAlign TRANSFORM_ALIGN_Z_BILLBOARD = 1
 
TransformAlign TRANSFORM_ALIGN_Y_TO_VELOCITY = 2
 
TransformAlign TRANSFORM_ALIGN_Z_BILLBOARD_Y_TO_VELOCITY = 3
   Constants MAX_DRAW_PASSES = 4
 Maximum number of draw passes supported.   Property Descriptions 
int amount = 8
  void set_amount ( int value )
 
int get_amount ( )
  The number of particles to emit in one emission cycle. The effective emission rate is (amount * amount_ratio) / lifetime particles per second. Higher values will increase GPU requirements, even if not all particles are visible at a given time or if amount_ratio is decreased. Note: Changing this value will cause the particle system to restart. To avoid this, change amount_ratio instead. 
float amount_ratio = 1.0
  void set_amount_ratio ( float value )
 
float get_amount_ratio ( )
  The ratio of particles that should actually be emitted. If set to a value lower than 1.0, this will set the amount of emitted particles throughout the lifetime to amount * amount_ratio. Unlike changing amount, changing amount_ratio while emitting does not affect already-emitted particles and doesn't cause the particle system to restart. amount_ratio can be used to create effects that make the number of emitted particles vary over time. Note: Reducing the amount_ratio has no performance benefit, since resources need to be allocated and processed for the total amount of particles regardless of the amount_ratio. If you don't intend to change the number of particles emitted while the particles are emitting, make sure amount_ratio is set to 1 and change amount to your liking instead. 
float collision_base_size = 0.01
  void set_collision_base_size ( float value )
 
float get_collision_base_size ( )
  The base diameter for particle collision in meters. If particles appear to sink into the ground when colliding, increase this value. If particles appear to float when colliding, decrease this value. Only effective if ParticleProcessMaterial.collision_mode is ParticleProcessMaterial.COLLISION_RIGID or ParticleProcessMaterial.COLLISION_HIDE_ON_CONTACT. Note: Particles always have a spherical collision shape. 
DrawOrder draw_order = 0
  void set_draw_order ( DrawOrder value )
 
DrawOrder get_draw_order ( )
  Particle draw order. Uses DrawOrder values. Note: DRAW_ORDER_INDEX is the only option that supports motion vectors for effects like TAA. It is suggested to use this draw order if the particles are opaque to fix ghosting artifacts. 
Mesh draw_pass_1  void set_draw_pass_mesh ( int pass, Mesh mesh )
 
Mesh get_draw_pass_mesh ( int pass ) const
  Mesh that is drawn for the first draw pass. 
Mesh draw_pass_2  void set_draw_pass_mesh ( int pass, Mesh mesh )
 
Mesh get_draw_pass_mesh ( int pass ) const
  Mesh that is drawn for the second draw pass. 
Mesh draw_pass_3  void set_draw_pass_mesh ( int pass, Mesh mesh )
 
Mesh get_draw_pass_mesh ( int pass ) const
  Mesh that is drawn for the third draw pass. 
Mesh draw_pass_4  void set_draw_pass_mesh ( int pass, Mesh mesh )
 
Mesh get_draw_pass_mesh ( int pass ) const
  Mesh that is drawn for the fourth draw pass. 
int draw_passes = 1
  void set_draw_passes ( int value )
 
int get_draw_passes ( )
  The number of draw passes when rendering particles. 
Skin draw_skin  void set_skin ( Skin value )
 
Skin get_skin ( )
   There is currently no description for this property. Please help us by contributing one!  
bool emitting = true
  void set_emitting ( bool value )
 
bool is_emitting ( )
  If true, particles are being emitted. emitting can be used to start and stop particles from emitting. However, if one_shot is true setting emitting to true will not restart the emission cycle until after all active particles finish processing. You can use the finished signal to be notified once all active particles finish processing. 
float explosiveness = 0.0
  void set_explosiveness_ratio ( float value )
 
float get_explosiveness_ratio ( )
  Time ratio between each emission. If 0, particles are emitted continuously. If 1, all particles are emitted simultaneously. 
int fixed_fps = 30
  void set_fixed_fps ( int value )
 
int get_fixed_fps ( )
  The particle system's frame rate is fixed to a value. For example, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself. 
bool fract_delta = true
  void set_fractional_delta ( bool value )
 
bool get_fractional_delta ( )
  If true, results in fractional delta calculation which has a smoother particles display effect. 
float interp_to_end = 0.0
  void set_interp_to_end ( float value )
 
float get_interp_to_end ( )
  Causes all the particles in this node to interpolate towards the end of their lifetime. Note: This only works when used with a ParticleProcessMaterial. It needs to be manually implemented for custom process shaders. 
bool interpolate = true
  void set_interpolate ( bool value )
 
bool get_interpolate ( )
  Enables particle interpolation, which makes the particle movement smoother when their fixed_fps is lower than the screen refresh rate. 
float lifetime = 1.0
  void set_lifetime ( float value )
 
float get_lifetime ( )
  The amount of time each particle will exist (in seconds). The effective emission rate is (amount * amount_ratio) / lifetime particles per second. 
bool local_coords = false
  void set_use_local_coordinates ( bool value )
 
bool get_use_local_coordinates ( )
  If true, particles use the parent node's coordinate space (known as local coordinates). This will cause particles to move and rotate along the GPUParticles3D node (and its parents) when it is moved or rotated. If false, particles use global coordinates; they will not move or rotate along the GPUParticles3D node (and its parents) when it is moved or rotated. 
bool one_shot = false
  void set_one_shot ( bool value )
 
bool get_one_shot ( )
  If true, only the number of particles equal to amount will be emitted. 
float preprocess = 0.0
  void set_pre_process_time ( float value )
 
float get_pre_process_time ( )
  Amount of time to preprocess the particles before animation starts. Lets you start the animation some time after particles have started emitting. 
Material process_material  void set_process_material ( Material value )
 
Material get_process_material ( )
  Material for processing particles. Can be a ParticleProcessMaterial or a ShaderMaterial. 
float randomness = 0.0
  void set_randomness_ratio ( float value )
 
float get_randomness_ratio ( )
  Emission randomness ratio. 
float speed_scale = 1.0
  void set_speed_scale ( float value )
 
float get_speed_scale ( )
  Speed scaling ratio. A value of 0 can be used to pause the particles. 
NodePath sub_emitter = NodePath("")
  void set_sub_emitter ( NodePath value )
 
NodePath get_sub_emitter ( )
  Path to another GPUParticles3D node that will be used as a subemitter (see ParticleProcessMaterial.sub_emitter_mode). Subemitters can be used to achieve effects such as fireworks, sparks on collision, bubbles popping into water drops, and more. Note: When sub_emitter is set, the target GPUParticles3D node will no longer emit particles on its own. 
bool trail_enabled = false
  void set_trail_enabled ( bool value )
 
bool is_trail_enabled ( )
  If true, enables particle trails using a mesh skinning system. Designed to work with RibbonTrailMesh and TubeTrailMesh. Note: BaseMaterial3D.use_particle_trails must also be enabled on the particle mesh's material. Otherwise, setting trail_enabled to true will have no effect. Note: Unlike GPUParticles2D, the number of trail sections and subdivisions is set in the RibbonTrailMesh or the TubeTrailMesh's properties. 
float trail_lifetime = 0.3
  void set_trail_lifetime ( float value )
 
float get_trail_lifetime ( )
  The amount of time the particle's trail should represent (in seconds). Only effective if trail_enabled is true. 
TransformAlign transform_align = 0
  void set_transform_align ( TransformAlign value )
 
TransformAlign get_transform_align ( )
   There is currently no description for this property. Please help us by contributing one!  
AABB visibility_aabb = AABB(-4, -4, -4, 8, 8, 8)
  void set_visibility_aabb ( AABB value )
 
AABB get_visibility_aabb ( )
  The AABB that determines the node's region which needs to be visible on screen for the particle system to be active. GeometryInstance3D.extra_cull_margin is added on each of the AABB's axes. Particle collisions and attraction will only occur within this area. Grow the box if particles suddenly appear/disappear when the node enters/exits the screen. The AABB can be grown via code or with the Particles â†’ Generate AABB editor tool. Note: visibility_aabb is overridden by GeometryInstance3D.custom_aabb if that property is set to a non-default value.   Method Descriptions 
AABB capture_aabb ( ) const
 Returns the axis-aligned bounding box that contains all the particles that are active in the current frame. void convert_from_particles ( Node particles ) Sets this node's properties to match a given CPUParticles3D node. void emit_particle ( Transform3D xform, Vector3 velocity, Color color, Color custom, int flags ) Emits a single particle. Whether xform, velocity, color and custom are applied depends on the value of flags. See EmitFlags. 
Mesh get_draw_pass_mesh ( int pass ) const
 Returns the Mesh that is drawn at index pass. void restart ( ) Restarts the particle emission, clearing existing particles. void set_draw_pass_mesh ( int pass, Mesh mesh ) Sets the Mesh that is drawn at index pass.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gpuparticles3d.html


classes/class_navigationregion3d
-----------------------------------------------------------
NavigationRegion3D Inherits: Node3D < Node < Object A traversable 3D region that NavigationAgent3Ds can use for pathfinding.  Description A traversable 3D region based on a NavigationMesh that NavigationAgent3Ds can use for pathfinding. Two regions can be connected to each other if they share a similar edge. You can set the minimum distance between two vertices required to connect two edges by using NavigationServer3D.map_set_edge_connection_margin. Note: Overlapping two regions' navigation meshes is not enough for connecting two regions. They must share a similar edge. The cost of entering this region from another region can be controlled with the enter_cost value. Note: This value is not added to the path cost when the start position is already inside this region. The cost of traveling distances inside this region can be controlled with the travel_cost multiplier. Note: This node caches changes to its properties, so if you make changes to the underlying region RID in NavigationServer3D, they will not be reflected in this node's properties.   Tutorials  Using NavigationRegions    Properties  
bool enabled true  
float enter_cost 0.0  
int navigation_layers 1  
NavigationMesh navigation_mesh   
float travel_cost 1.0  
bool use_edge_connections true     Methods  
void bake_navigation_mesh ( bool on_thread=true )  
bool get_navigation_layer_value ( int layer_number ) const  
RID get_navigation_map ( ) const  
RID get_region_rid ( ) const  
RID get_rid ( ) const  
void set_navigation_layer_value ( int layer_number, bool value )  
void set_navigation_map ( RID navigation_map )     Signals bake_finished ( ) Notifies when the navigation mesh bake operation is completed. navigation_mesh_changed ( ) Notifies when the NavigationMesh has changed.   Property Descriptions 
bool enabled = true
  void set_enabled ( bool value )
 
bool is_enabled ( )
  Determines if the NavigationRegion3D is enabled or disabled. 
float enter_cost = 0.0
  void set_enter_cost ( float value )
 
float get_enter_cost ( )
  When pathfinding enters this region's navigation mesh from another regions navigation mesh the enter_cost value is added to the path distance for determining the shortest path. 
int navigation_layers = 1
  void set_navigation_layers ( int value )
 
int get_navigation_layers ( )
  A bitfield determining all navigation layers the region belongs to. These navigation layers can be checked upon when requesting a path with NavigationServer3D.map_get_path. 
NavigationMesh navigation_mesh  void set_navigation_mesh ( NavigationMesh value )
 
NavigationMesh get_navigation_mesh ( )
  The NavigationMesh resource to use. 
float travel_cost = 1.0
  void set_travel_cost ( float value )
 
float get_travel_cost ( )
  When pathfinding moves inside this region's navigation mesh the traveled distances are multiplied with travel_cost for determining the shortest path. 
bool use_edge_connections = true
  void set_use_edge_connections ( bool value )
 
bool get_use_edge_connections ( )
  If enabled the navigation region will use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.   Method Descriptions void bake_navigation_mesh ( bool on_thread=true ) Bakes the NavigationMesh. If on_thread is set to true (default), the baking is done on a separate thread. Baking on separate thread is useful because navigation baking is not a cheap operation. When it is completed, it automatically sets the new NavigationMesh. Please note that baking on separate thread may be very slow if geometry is parsed from meshes as async access to each mesh involves heavy synchronization. Also, please note that baking on a separate thread is automatically disabled on operating systems that cannot use threads (such as Web with threads disabled). 
bool get_navigation_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the navigation_layers bitmask is enabled, given a layer_number between 1 and 32. 
RID get_navigation_map ( ) const
 Returns the current navigation map RID used by this region. 
RID get_region_rid ( ) const
 Returns the RID of this region on the NavigationServer3D. Deprecated. Use get_rid instead. 
RID get_rid ( ) const
 Returns the RID of this region on the NavigationServer3D. Combined with NavigationServer3D.map_get_closest_point_owner can be used to identify the NavigationRegion3D closest to a point on the merged navigation map. void set_navigation_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the navigation_layers bitmask, given a layer_number between 1 and 32. void set_navigation_map ( RID navigation_map ) Sets the RID of the navigation map this region should use. By default the region will automatically join the World3D default navigation map so this function is only required to override the default map.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_navigationregion3d.html


classes/class_mesh
-----------------------------------------------------------
Mesh Inherits: Resource < RefCounted < Object Inherited By: ArrayMesh, ImmediateMesh, PlaceholderMesh, PrimitiveMesh A Resource that contains vertex array-based geometry.  Description Mesh is a type of Resource that contains vertex array-based geometry, divided in surfaces. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials.   Tutorials  3D Material Testers Demo 3D Kinematic Character Demo 3D Platformer Demo Third Person Shooter Demo    Properties  
Vector2i lightmap_size_hint Vector2i(0, 0)     Methods  
AABB _get_aabb ( ) virtual const  
int _get_blend_shape_count ( ) virtual const  
StringName _get_blend_shape_name ( int index ) virtual const  
int _get_surface_count ( ) virtual const  
void _set_blend_shape_name ( int index, StringName name ) virtual  
int _surface_get_array_index_len ( int index ) virtual const  
int _surface_get_array_len ( int index ) virtual const  
Array _surface_get_arrays ( int index ) virtual const  
Array[] _surface_get_blend_shape_arrays ( int index ) virtual const  
int _surface_get_format ( int index ) virtual const  
Dictionary _surface_get_lods ( int index ) virtual const  
Material _surface_get_material ( int index ) virtual const  
int _surface_get_primitive_type ( int index ) virtual const  
void _surface_set_material ( int index, Material material ) virtual  
ConvexPolygonShape3D create_convex_shape ( bool clean=true, bool simplify=false ) const  
Mesh create_outline ( float margin ) const  
Resource create_placeholder ( ) const  
ConcavePolygonShape3D create_trimesh_shape ( ) const  
TriangleMesh generate_triangle_mesh ( ) const  
AABB get_aabb ( ) const  
PackedVector3Array get_faces ( ) const  
int get_surface_count ( ) const  
Array surface_get_arrays ( int surf_idx ) const  
Array[] surface_get_blend_shape_arrays ( int surf_idx ) const  
Material surface_get_material ( int surf_idx ) const  
void surface_set_material ( int surf_idx, Material material )     Enumerations enum PrimitiveType: 
PrimitiveType PRIMITIVE_POINTS = 0
 Render array as points (one vertex equals one point). 
PrimitiveType PRIMITIVE_LINES = 1
 Render array as lines (every two vertices a line is created). 
PrimitiveType PRIMITIVE_LINE_STRIP = 2
 Render array as line strip. 
PrimitiveType PRIMITIVE_TRIANGLES = 3
 Render array as triangles (every three vertices a triangle is created). 
PrimitiveType PRIMITIVE_TRIANGLE_STRIP = 4
 Render array as triangle strips. enum ArrayType: 
ArrayType ARRAY_VERTEX = 0
 PackedVector3Array, PackedVector2Array, or Array of vertex positions. 
ArrayType ARRAY_NORMAL = 1
 PackedVector3Array of vertex normals. 
ArrayType ARRAY_TANGENT = 2
 PackedFloat32Array of vertex tangents. Each element in groups of 4 floats, first 3 floats determine the tangent, and the last the binormal direction as -1 or 1. 
ArrayType ARRAY_COLOR = 3
 PackedColorArray of vertex colors. 
ArrayType ARRAY_TEX_UV = 4
 PackedVector2Array for UV coordinates. 
ArrayType ARRAY_TEX_UV2 = 5
 PackedVector2Array for second UV coordinates. 
ArrayType ARRAY_CUSTOM0 = 6
 Contains custom color channel 0. PackedByteArray if (format >> Mesh.ARRAY_FORMAT_CUSTOM0_SHIFT) & Mesh.ARRAY_FORMAT_CUSTOM_MASK is ARRAY_CUSTOM_RGBA8_UNORM, ARRAY_CUSTOM_RGBA8_SNORM, ARRAY_CUSTOM_RG_HALF, or ARRAY_CUSTOM_RGBA_HALF. PackedFloat32Array otherwise. 
ArrayType ARRAY_CUSTOM1 = 7
 Contains custom color channel 1. PackedByteArray if (format >> Mesh.ARRAY_FORMAT_CUSTOM1_SHIFT) & Mesh.ARRAY_FORMAT_CUSTOM_MASK is ARRAY_CUSTOM_RGBA8_UNORM, ARRAY_CUSTOM_RGBA8_SNORM, ARRAY_CUSTOM_RG_HALF, or ARRAY_CUSTOM_RGBA_HALF. PackedFloat32Array otherwise. 
ArrayType ARRAY_CUSTOM2 = 8
 Contains custom color channel 2. PackedByteArray if (format >> Mesh.ARRAY_FORMAT_CUSTOM2_SHIFT) & Mesh.ARRAY_FORMAT_CUSTOM_MASK is ARRAY_CUSTOM_RGBA8_UNORM, ARRAY_CUSTOM_RGBA8_SNORM, ARRAY_CUSTOM_RG_HALF, or ARRAY_CUSTOM_RGBA_HALF. PackedFloat32Array otherwise. 
ArrayType ARRAY_CUSTOM3 = 9
 Contains custom color channel 3. PackedByteArray if (format >> Mesh.ARRAY_FORMAT_CUSTOM3_SHIFT) & Mesh.ARRAY_FORMAT_CUSTOM_MASK is ARRAY_CUSTOM_RGBA8_UNORM, ARRAY_CUSTOM_RGBA8_SNORM, ARRAY_CUSTOM_RG_HALF, or ARRAY_CUSTOM_RGBA_HALF. PackedFloat32Array otherwise. 
ArrayType ARRAY_BONES = 10
 PackedFloat32Array or PackedInt32Array of bone indices. Contains either 4 or 8 numbers per vertex depending on the presence of the ARRAY_FLAG_USE_8_BONE_WEIGHTS flag. 
ArrayType ARRAY_WEIGHTS = 11
 PackedFloat32Array or PackedFloat64Array of bone weights in the range 0.0 to 1.0 (inclusive). Contains either 4 or 8 numbers per vertex depending on the presence of the ARRAY_FLAG_USE_8_BONE_WEIGHTS flag. 
ArrayType ARRAY_INDEX = 12
 PackedInt32Array of integers used as indices referencing vertices, colors, normals, tangents, and textures. All of those arrays must have the same number of elements as the vertex array. No index can be beyond the vertex array size. When this index array is present, it puts the function into "index mode," where the index selects the i'th vertex, normal, tangent, color, UV, etc. This means if you want to have different normals or colors along an edge, you have to duplicate the vertices. For triangles, the index array is interpreted as triples, referring to the vertices of each triangle. For lines, the index array is in pairs indicating the start and end of each line. 
ArrayType ARRAY_MAX = 13
 Represents the size of the ArrayType enum. enum ArrayCustomFormat: 
ArrayCustomFormat ARRAY_CUSTOM_RGBA8_UNORM = 0
 Indicates this custom channel contains unsigned normalized byte colors from 0 to 1, encoded as PackedByteArray. 
ArrayCustomFormat ARRAY_CUSTOM_RGBA8_SNORM = 1
 Indicates this custom channel contains signed normalized byte colors from -1 to 1, encoded as PackedByteArray. 
ArrayCustomFormat ARRAY_CUSTOM_RG_HALF = 2
 Indicates this custom channel contains half precision float colors, encoded as PackedByteArray. Only red and green channels are used. 
ArrayCustomFormat ARRAY_CUSTOM_RGBA_HALF = 3
 Indicates this custom channel contains half precision float colors, encoded as PackedByteArray. 
ArrayCustomFormat ARRAY_CUSTOM_R_FLOAT = 4
 Indicates this custom channel contains full float colors, in a PackedFloat32Array. Only the red channel is used. 
ArrayCustomFormat ARRAY_CUSTOM_RG_FLOAT = 5
 Indicates this custom channel contains full float colors, in a PackedFloat32Array. Only red and green channels are used. 
ArrayCustomFormat ARRAY_CUSTOM_RGB_FLOAT = 6
 Indicates this custom channel contains full float colors, in a PackedFloat32Array. Only red, green and blue channels are used. 
ArrayCustomFormat ARRAY_CUSTOM_RGBA_FLOAT = 7
 Indicates this custom channel contains full float colors, in a PackedFloat32Array. 
ArrayCustomFormat ARRAY_CUSTOM_MAX = 8
 Represents the size of the ArrayCustomFormat enum. flags ArrayFormat: 
ArrayFormat ARRAY_FORMAT_VERTEX = 1
 Mesh array contains vertices. All meshes require a vertex array so this should always be present. 
ArrayFormat ARRAY_FORMAT_NORMAL = 2
 Mesh array contains normals. 
ArrayFormat ARRAY_FORMAT_TANGENT = 4
 Mesh array contains tangents. 
ArrayFormat ARRAY_FORMAT_COLOR = 8
 Mesh array contains colors. 
ArrayFormat ARRAY_FORMAT_TEX_UV = 16
 Mesh array contains UVs. 
ArrayFormat ARRAY_FORMAT_TEX_UV2 = 32
 Mesh array contains second UV. 
ArrayFormat ARRAY_FORMAT_CUSTOM0 = 64
 Mesh array contains custom channel index 0. 
ArrayFormat ARRAY_FORMAT_CUSTOM1 = 128
 Mesh array contains custom channel index 1. 
ArrayFormat ARRAY_FORMAT_CUSTOM2 = 256
 Mesh array contains custom channel index 2. 
ArrayFormat ARRAY_FORMAT_CUSTOM3 = 512
 Mesh array contains custom channel index 3. 
ArrayFormat ARRAY_FORMAT_BONES = 1024
 Mesh array contains bones. 
ArrayFormat ARRAY_FORMAT_WEIGHTS = 2048
 Mesh array contains bone weights. 
ArrayFormat ARRAY_FORMAT_INDEX = 4096
 Mesh array uses indices. 
ArrayFormat ARRAY_FORMAT_BLEND_SHAPE_MASK = 7
 Mask of mesh channels permitted in blend shapes. 
ArrayFormat ARRAY_FORMAT_CUSTOM_BASE = 13
 Shift of first custom channel. 
ArrayFormat ARRAY_FORMAT_CUSTOM_BITS = 3
 Number of format bits per custom channel. See ArrayCustomFormat. 
ArrayFormat ARRAY_FORMAT_CUSTOM0_SHIFT = 13
 Amount to shift ArrayCustomFormat for custom channel index 0. 
ArrayFormat ARRAY_FORMAT_CUSTOM1_SHIFT = 16
 Amount to shift ArrayCustomFormat for custom channel index 1. 
ArrayFormat ARRAY_FORMAT_CUSTOM2_SHIFT = 19
 Amount to shift ArrayCustomFormat for custom channel index 2. 
ArrayFormat ARRAY_FORMAT_CUSTOM3_SHIFT = 22
 Amount to shift ArrayCustomFormat for custom channel index 3. 
ArrayFormat ARRAY_FORMAT_CUSTOM_MASK = 7
 Mask of custom format bits per custom channel. Must be shifted by one of the SHIFT constants. See ArrayCustomFormat. 
ArrayFormat ARRAY_COMPRESS_FLAGS_BASE = 25
 Shift of first compress flag. Compress flags should be passed to ArrayMesh.add_surface_from_arrays and SurfaceTool.commit. 
ArrayFormat ARRAY_FLAG_USE_2D_VERTICES = 33554432
 Flag used to mark that the array contains 2D vertices. 
ArrayFormat ARRAY_FLAG_USE_DYNAMIC_UPDATE = 67108864
 Flag indices that the mesh data will use GL_DYNAMIC_DRAW on GLES. Unused on Vulkan. 
ArrayFormat ARRAY_FLAG_USE_8_BONE_WEIGHTS = 134217728
 Flag used to mark that the mesh contains up to 8 bone influences per vertex. This flag indicates that ARRAY_BONES and ARRAY_WEIGHTS elements will have double length. 
ArrayFormat ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY = 268435456
 Flag used to mark that the mesh intentionally contains no vertex array. 
ArrayFormat ARRAY_FLAG_COMPRESS_ATTRIBUTES = 536870912
 Flag used to mark that a mesh is using compressed attributes (vertices, normals, tangents, UVs). When this form of compression is enabled, vertex positions will be packed into an RGBA16UNORM attribute and scaled in the vertex shader. The normal and tangent will be packed into an RG16UNORM representing an axis, and a 16-bit float stored in the A-channel of the vertex. UVs will use 16-bit normalized floats instead of full 32-bit signed floats. When using this compression mode you must use either vertices, normals, and tangents or only vertices. You cannot use normals without tangents. Importers will automatically enable this compression if they can. enum BlendShapeMode: 
BlendShapeMode BLEND_SHAPE_MODE_NORMALIZED = 0
 Blend shapes are normalized. 
BlendShapeMode BLEND_SHAPE_MODE_RELATIVE = 1
 Blend shapes are relative to base weight.   Property Descriptions 
Vector2i lightmap_size_hint = Vector2i(0, 0)
  void set_lightmap_size_hint ( Vector2i value )
 
Vector2i get_lightmap_size_hint ( )
  Sets a hint to be used for lightmap resolution.   Method Descriptions 
AABB _get_aabb ( ) virtual const
 Virtual method to override the AABB for a custom class extending Mesh. 
int _get_blend_shape_count ( ) virtual const
 Virtual method to override the number of blend shapes for a custom class extending Mesh. 
StringName _get_blend_shape_name ( int index ) virtual const
 Virtual method to override the retrieval of blend shape names for a custom class extending Mesh. 
int _get_surface_count ( ) virtual const
 Virtual method to override the surface count for a custom class extending Mesh. void _set_blend_shape_name ( int index, StringName name ) virtual
 Virtual method to override the names of blend shapes for a custom class extending Mesh. 
int _surface_get_array_index_len ( int index ) virtual const
 Virtual method to override the surface array index length for a custom class extending Mesh. 
int _surface_get_array_len ( int index ) virtual const
 Virtual method to override the surface array length for a custom class extending Mesh. 
Array _surface_get_arrays ( int index ) virtual const
 Virtual method to override the surface arrays for a custom class extending Mesh. 
Array[] _surface_get_blend_shape_arrays ( int index ) virtual const
 Virtual method to override the blend shape arrays for a custom class extending Mesh. 
int _surface_get_format ( int index ) virtual const
 Virtual method to override the surface format for a custom class extending Mesh. 
Dictionary _surface_get_lods ( int index ) virtual const
 Virtual method to override the surface LODs for a custom class extending Mesh. 
Material _surface_get_material ( int index ) virtual const
 Virtual method to override the surface material for a custom class extending Mesh. 
int _surface_get_primitive_type ( int index ) virtual const
 Virtual method to override the surface primitive type for a custom class extending Mesh. void _surface_set_material ( int index, Material material ) virtual
 Virtual method to override the setting of a material at the given index for a custom class extending Mesh. 
ConvexPolygonShape3D create_convex_shape ( bool clean=true, bool simplify=false ) const
 Calculate a ConvexPolygonShape3D from the mesh. If clean is true (default), duplicate and interior vertices are removed automatically. You can set it to false to make the process faster if not needed. If simplify is true, the geometry can be further simplified to reduce the number of vertices. Disabled by default. 
Mesh create_outline ( float margin ) const
 Calculate an outline mesh at a defined offset (margin) from the original mesh. Note: This method typically returns the vertices in reverse order (e.g. clockwise to counterclockwise). 
Resource create_placeholder ( ) const
 Creates a placeholder version of this resource (PlaceholderMesh). 
ConcavePolygonShape3D create_trimesh_shape ( ) const
 Calculate a ConcavePolygonShape3D from the mesh. 
TriangleMesh generate_triangle_mesh ( ) const
 Generate a TriangleMesh from the mesh. Considers only surfaces using one of these primitive types: PRIMITIVE_TRIANGLES, PRIMITIVE_TRIANGLE_STRIP. 
AABB get_aabb ( ) const
 Returns the smallest AABB enclosing this mesh in local space. Not affected by custom_aabb. Note: This is only implemented for ArrayMesh and PrimitiveMesh. 
PackedVector3Array get_faces ( ) const
 Returns all the vertices that make up the faces of the mesh. Each three vertices represent one triangle. 
int get_surface_count ( ) const
 Returns the number of surfaces that the Mesh holds. This is equivalent to MeshInstance3D.get_surface_override_material_count. 
Array surface_get_arrays ( int surf_idx ) const
 Returns the arrays for the vertices, normals, UVs, etc. that make up the requested surface (see ArrayMesh.add_surface_from_arrays). 
Array[] surface_get_blend_shape_arrays ( int surf_idx ) const
 Returns the blend shape arrays for the requested surface. 
Material surface_get_material ( int surf_idx ) const
 Returns a Material in a given surface. Surface is rendered using this material. Note: This returns the material within the Mesh resource, not the Material associated to the MeshInstance3D's Surface Material Override properties. To get the Material associated to the MeshInstance3D's Surface Material Override properties, use MeshInstance3D.get_surface_override_material instead. void surface_set_material ( int surf_idx, Material material ) Sets a Material for a given surface. Surface will be rendered using this material. Note: This assigns the material within the Mesh resource, not the Material associated to the MeshInstance3D's Surface Material Override properties. To set the Material associated to the MeshInstance3D's Surface Material Override properties, use MeshInstance3D.set_surface_override_material instead.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_mesh.html


classes/class_raycast2d
-----------------------------------------------------------
RayCast2D Inherits: Node2D < CanvasItem < Node < Object A ray in 2D space, used to find the first CollisionObject2D it intersects.  Description A raycast represents a ray from its origin to its target_position that finds the closest CollisionObject2D along its path, if it intersects any. This is useful for a lot of things, such as RayCast2D can ignore some objects by adding them to an exception list, by making its detection reporting ignore Area2Ds (collide_with_areas) or PhysicsBody2Ds (collide_with_bodies), or by configuring physics layers. RayCast2D calculates intersection every physics frame, and it holds the result until the next physics frame. For an immediate raycast, or if you want to configure a RayCast2D multiple times within the same physics frame, use force_raycast_update. To sweep over a region of 2D space, you can approximate the region with multiple RayCast2Ds or use ShapeCast2D.   Tutorials  Ray-casting    Properties  
bool collide_with_areas false  
bool collide_with_bodies true  
int collision_mask 1  
bool enabled true  
bool exclude_parent true  
bool hit_from_inside false  
Vector2 target_position Vector2(0, 50)     Methods  
void add_exception ( CollisionObject2D node )  
void add_exception_rid ( RID rid )  
void clear_exceptions ( )  
void force_raycast_update ( )  
Object get_collider ( ) const  
RID get_collider_rid ( ) const  
int get_collider_shape ( ) const  
bool get_collision_mask_value ( int layer_number ) const  
Vector2 get_collision_normal ( ) const  
Vector2 get_collision_point ( ) const  
bool is_colliding ( ) const  
void remove_exception ( CollisionObject2D node )  
void remove_exception_rid ( RID rid )  
void set_collision_mask_value ( int layer_number, bool value )     Property Descriptions 
bool collide_with_areas = false
  void set_collide_with_areas ( bool value )
 
bool is_collide_with_areas_enabled ( )
  If true, collisions with Area2Ds will be reported. 
bool collide_with_bodies = true
  void set_collide_with_bodies ( bool value )
 
bool is_collide_with_bodies_enabled ( )
  If true, collisions with PhysicsBody2Ds will be reported. 
int collision_mask = 1
  void set_collision_mask ( int value )
 
int get_collision_mask ( )
  The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected. See Collision layers and masks in the documentation for more information. 
bool enabled = true
  void set_enabled ( bool value )
 
bool is_enabled ( )
  If true, collisions will be reported. 
bool exclude_parent = true
  void set_exclude_parent_body ( bool value )
 
bool get_exclude_parent_body ( )
  If true, the parent node will be excluded from collision detection. 
bool hit_from_inside = false
  void set_hit_from_inside ( bool value )
 
bool is_hit_from_inside_enabled ( )
  If true, the ray will detect a hit when starting inside shapes. In this case the collision normal will be Vector2(0, 0). Does not affect concave polygon shapes. 
Vector2 target_position = Vector2(0, 50)
  void set_target_position ( Vector2 value )
 
Vector2 get_target_position ( )
  The ray's destination point, relative to the RayCast's position.   Method Descriptions void add_exception ( CollisionObject2D node ) Adds a collision exception so the ray does not report collisions with the specified CollisionObject2D node. void add_exception_rid ( RID rid ) Adds a collision exception so the ray does not report collisions with the specified RID. void clear_exceptions ( ) Removes all collision exceptions for this ray. void force_raycast_update ( ) Updates the collision information for the ray immediately, without waiting for the next _physics_process call. Use this method, for example, when the ray or its parent has changed state. Note: enabled does not need to be true for this to work. 
Object get_collider ( ) const
 Returns the first object that the ray intersects, or null if no object is intersecting the ray (i.e. is_colliding returns false). 
RID get_collider_rid ( ) const
 Returns the RID of the first object that the ray intersects, or an empty RID if no object is intersecting the ray (i.e. is_colliding returns false). 
int get_collider_shape ( ) const
 Returns the shape ID of the first object that the ray intersects, or 0 if no object is intersecting the ray (i.e. is_colliding returns false). To get the intersected shape node, for a CollisionObject2D target, use:  GDScriptvar target = get_collider() # A CollisionObject2D.
var shape_id = get_collider_shape() # The shape index in the collider.
var owner_id = target.shape_find_owner(shape_id) # The owner ID in the collider.
var shape = target.shape_owner_get_owner(owner_id)
 C#var target = (CollisionObject2D)GetCollider(); // A CollisionObject2D.
var shapeId = GetColliderShape(); // The shape index in the collider.
var ownerId = target.ShapeFindOwner(shapeId); // The owner ID in the collider.
var shape = target.ShapeOwnerGetOwner(ownerId);
  
bool get_collision_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_mask is enabled, given a layer_number between 1 and 32. 
Vector2 get_collision_normal ( ) const
 Returns the normal of the intersecting object's shape at the collision point, or Vector2(0, 0) if the ray starts inside the shape and hit_from_inside is true. 
Vector2 get_collision_point ( ) const
 Returns the collision point at which the ray intersects the closest object. If hit_from_inside is true and the ray starts inside of a collision shape, this function will return the origin point of the ray. Note: This point is in the global coordinate system. 
bool is_colliding ( ) const
 Returns whether any object is intersecting with the ray's vector (considering the vector length). void remove_exception ( CollisionObject2D node ) Removes a collision exception so the ray does report collisions with the specified CollisionObject2D node. void remove_exception_rid ( RID rid ) Removes a collision exception so the ray does report collisions with the specified RID. void set_collision_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_mask, given a layer_number between 1 and 32.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_raycast2d.html


classes/class_fastnoiselite
-----------------------------------------------------------
FastNoiseLite Inherits: Noise < Resource < RefCounted < Object Generates noise using the FastNoiseLite library.  Description This class generates noise using the FastNoiseLite library, which is a collection of several noise algorithms including Cellular, Perlin, Value, and more. Most generated noise values are in the range of [-1, 1], but not always. Some of the cellular noise algorithms return results above 1.   Properties  
CellularDistanceFunction cellular_distance_function 0  
float cellular_jitter 1.0  
CellularReturnType cellular_return_type 1  
float domain_warp_amplitude 30.0  
bool domain_warp_enabled false  
float domain_warp_fractal_gain 0.5  
float domain_warp_fractal_lacunarity 6.0  
int domain_warp_fractal_octaves 5  
DomainWarpFractalType domain_warp_fractal_type 1  
float domain_warp_frequency 0.05  
DomainWarpType domain_warp_type 0  
float fractal_gain 0.5  
float fractal_lacunarity 2.0  
int fractal_octaves 5  
float fractal_ping_pong_strength 2.0  
FractalType fractal_type 1  
float fractal_weighted_strength 0.0  
float frequency 0.01  
NoiseType noise_type 1  
Vector3 offset Vector3(0, 0, 0)  
int seed 0     Enumerations enum NoiseType: 
NoiseType TYPE_VALUE = 5
 A lattice of points are assigned random values then interpolated based on neighboring values. 
NoiseType TYPE_VALUE_CUBIC = 4
 Similar to Value noise, but slower. Has more variance in peaks and valleys. Cubic noise can be used to avoid certain artifacts when using value noise to create a bumpmap. In general, you should always use this mode if the value noise is being used for a heightmap or bumpmap. 
NoiseType TYPE_PERLIN = 3
 A lattice of random gradients. Their dot products are interpolated to obtain values in between the lattices. 
NoiseType TYPE_CELLULAR = 2
 Cellular includes both Worley noise and Voronoi diagrams which creates various regions of the same value. 
NoiseType TYPE_SIMPLEX = 0
 As opposed to TYPE_PERLIN, gradients exist in a simplex lattice rather than a grid lattice, avoiding directional artifacts. 
NoiseType TYPE_SIMPLEX_SMOOTH = 1
 Modified, higher quality version of TYPE_SIMPLEX, but slower. enum FractalType: 
FractalType FRACTAL_NONE = 0
 No fractal noise. 
FractalType FRACTAL_FBM = 1
 Method using Fractional Brownian Motion to combine octaves into a fractal. 
FractalType FRACTAL_RIDGED = 2
 Method of combining octaves into a fractal resulting in a "ridged" look. 
FractalType FRACTAL_PING_PONG = 3
 Method of combining octaves into a fractal with a ping pong effect. enum CellularDistanceFunction: 
CellularDistanceFunction DISTANCE_EUCLIDEAN = 0
 Euclidean distance to the nearest point. 
CellularDistanceFunction DISTANCE_EUCLIDEAN_SQUARED = 1
 Squared Euclidean distance to the nearest point. 
CellularDistanceFunction DISTANCE_MANHATTAN = 2
 Manhattan distance (taxicab metric) to the nearest point. 
CellularDistanceFunction DISTANCE_HYBRID = 3
 Blend of DISTANCE_EUCLIDEAN and DISTANCE_MANHATTAN to give curved cell boundaries enum CellularReturnType: 
CellularReturnType RETURN_CELL_VALUE = 0
 The cellular distance function will return the same value for all points within a cell. 
CellularReturnType RETURN_DISTANCE = 1
 The cellular distance function will return a value determined by the distance to the nearest point. 
CellularReturnType RETURN_DISTANCE2 = 2
 The cellular distance function returns the distance to the second-nearest point. 
CellularReturnType RETURN_DISTANCE2_ADD = 3
 The distance to the nearest point is added to the distance to the second-nearest point. 
CellularReturnType RETURN_DISTANCE2_SUB = 4
 The distance to the nearest point is subtracted from the distance to the second-nearest point. 
CellularReturnType RETURN_DISTANCE2_MUL = 5
 The distance to the nearest point is multiplied with the distance to the second-nearest point. 
CellularReturnType RETURN_DISTANCE2_DIV = 6
 The distance to the nearest point is divided by the distance to the second-nearest point. enum DomainWarpType: 
DomainWarpType DOMAIN_WARP_SIMPLEX = 0
 The domain is warped using the simplex noise algorithm. 
DomainWarpType DOMAIN_WARP_SIMPLEX_REDUCED = 1
 The domain is warped using a simplified version of the simplex noise algorithm. 
DomainWarpType DOMAIN_WARP_BASIC_GRID = 2
 The domain is warped using a simple noise grid (not as smooth as the other methods, but more performant). enum DomainWarpFractalType: 
DomainWarpFractalType DOMAIN_WARP_FRACTAL_NONE = 0
 No fractal noise for warping the space. 
DomainWarpFractalType DOMAIN_WARP_FRACTAL_PROGRESSIVE = 1
 Warping the space progressively, octave for octave, resulting in a more "liquified" distortion. 
DomainWarpFractalType DOMAIN_WARP_FRACTAL_INDEPENDENT = 2
 Warping the space independently for each octave, resulting in a more chaotic distortion.   Property Descriptions 
CellularDistanceFunction cellular_distance_function = 0
  void set_cellular_distance_function ( CellularDistanceFunction value )
 
CellularDistanceFunction get_cellular_distance_function ( )
  Determines how the distance to the nearest/second-nearest point is computed. See CellularDistanceFunction for options. 
float cellular_jitter = 1.0
  void set_cellular_jitter ( float value )
 
float get_cellular_jitter ( )
  Maximum distance a point can move off of its grid position. Set to 0 for an even grid. 
CellularReturnType cellular_return_type = 1
  void set_cellular_return_type ( CellularReturnType value )
 
CellularReturnType get_cellular_return_type ( )
  Return type from cellular noise calculations. See CellularReturnType. 
float domain_warp_amplitude = 30.0
  void set_domain_warp_amplitude ( float value )
 
float get_domain_warp_amplitude ( )
  Sets the maximum warp distance from the origin. 
bool domain_warp_enabled = false
  void set_domain_warp_enabled ( bool value )
 
bool is_domain_warp_enabled ( )
  If enabled, another FastNoiseLite instance is used to warp the space, resulting in a distortion of the noise. 
float domain_warp_fractal_gain = 0.5
  void set_domain_warp_fractal_gain ( float value )
 
float get_domain_warp_fractal_gain ( )
  Determines the strength of each subsequent layer of the noise which is used to warp the space. A low value places more emphasis on the lower frequency base layers, while a high value puts more emphasis on the higher frequency layers. 
float domain_warp_fractal_lacunarity = 6.0
  void set_domain_warp_fractal_lacunarity ( float value )
 
float get_domain_warp_fractal_lacunarity ( )
  Octave lacunarity of the fractal noise which warps the space. Increasing this value results in higher octaves producing noise with finer details and a rougher appearance. 
int domain_warp_fractal_octaves = 5
  void set_domain_warp_fractal_octaves ( int value )
 
int get_domain_warp_fractal_octaves ( )
  The number of noise layers that are sampled to get the final value for the fractal noise which warps the space. 
DomainWarpFractalType domain_warp_fractal_type = 1
  void set_domain_warp_fractal_type ( DomainWarpFractalType value )
 
DomainWarpFractalType get_domain_warp_fractal_type ( )
  The method for combining octaves into a fractal which is used to warp the space. See DomainWarpFractalType. 
float domain_warp_frequency = 0.05
  void set_domain_warp_frequency ( float value )
 
float get_domain_warp_frequency ( )
  Frequency of the noise which warps the space. Low frequency results in smooth noise while high frequency results in rougher, more granular noise. 
DomainWarpType domain_warp_type = 0
  void set_domain_warp_type ( DomainWarpType value )
 
DomainWarpType get_domain_warp_type ( )
  Sets the warp algorithm. See DomainWarpType. 
float fractal_gain = 0.5
  void set_fractal_gain ( float value )
 
float get_fractal_gain ( )
  Determines the strength of each subsequent layer of noise in fractal noise. A low value places more emphasis on the lower frequency base layers, while a high value puts more emphasis on the higher frequency layers. 
float fractal_lacunarity = 2.0
  void set_fractal_lacunarity ( float value )
 
float get_fractal_lacunarity ( )
  Frequency multiplier between subsequent octaves. Increasing this value results in higher octaves producing noise with finer details and a rougher appearance. 
int fractal_octaves = 5
  void set_fractal_octaves ( int value )
 
int get_fractal_octaves ( )
  The number of noise layers that are sampled to get the final value for fractal noise types. 
float fractal_ping_pong_strength = 2.0
  void set_fractal_ping_pong_strength ( float value )
 
float get_fractal_ping_pong_strength ( )
  Sets the strength of the fractal ping pong type. 
FractalType fractal_type = 1
  void set_fractal_type ( FractalType value )
 
FractalType get_fractal_type ( )
  The method for combining octaves into a fractal. See FractalType. 
float fractal_weighted_strength = 0.0
  void set_fractal_weighted_strength ( float value )
 
float get_fractal_weighted_strength ( )
  Higher weighting means higher octaves have less impact if lower octaves have a large impact. 
float frequency = 0.01
  void set_frequency ( float value )
 
float get_frequency ( )
  The frequency for all noise types. Low frequency results in smooth noise while high frequency results in rougher, more granular noise. 
NoiseType noise_type = 1
  void set_noise_type ( NoiseType value )
 
NoiseType get_noise_type ( )
  The noise algorithm used. See NoiseType. 
Vector3 offset = Vector3(0, 0, 0)
  void set_offset ( Vector3 value )
 
Vector3 get_offset ( )
  Translate the noise input coordinates by the given Vector3. 
int seed = 0
  void set_seed ( int value )
 
int get_seed ( )
  The random number seed for all noise types.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_fastnoiselite.html


classes/class_navigationmesh
-----------------------------------------------------------
NavigationMesh Inherits: Resource < RefCounted < Object A navigation mesh that defines traversable areas and obstacles.  Description A navigation mesh is a collection of polygons that define which areas of an environment are traversable to aid agents in pathfinding through complicated spaces.   Tutorials  Using NavigationMeshes 3D Navmesh Demo    Properties  
float agent_height 1.5  
float agent_max_climb 0.25  
float agent_max_slope 45.0  
float agent_radius 0.5  
float cell_height 0.25  
float cell_size 0.25  
float detail_sample_distance 6.0  
float detail_sample_max_error 1.0  
float edge_max_error 1.3  
float edge_max_length 0.0  
AABB filter_baking_aabb AABB(0, 0, 0, 0, 0, 0)  
Vector3 filter_baking_aabb_offset Vector3(0, 0, 0)  
bool filter_ledge_spans false  
bool filter_low_hanging_obstacles false  
bool filter_walkable_low_height_spans false  
int geometry_collision_mask 4294967295  
ParsedGeometryType geometry_parsed_geometry_type 0  
SourceGeometryMode geometry_source_geometry_mode 0  
StringName geometry_source_group_name &"navigation_mesh_source_group"  
float region_merge_size 20.0  
float region_min_size 2.0  
SamplePartitionType sample_partition_type 0  
float vertices_per_polygon 6.0     Methods  
void add_polygon ( PackedInt32Array polygon )  
void clear ( )  
void clear_polygons ( )  
void create_from_mesh ( Mesh mesh )  
bool get_collision_mask_value ( int layer_number ) const  
PackedInt32Array get_polygon ( int idx )  
int get_polygon_count ( ) const  
PackedVector3Array get_vertices ( ) const  
void set_collision_mask_value ( int layer_number, bool value )  
void set_vertices ( PackedVector3Array vertices )     Enumerations enum SamplePartitionType: 
SamplePartitionType SAMPLE_PARTITION_WATERSHED = 0
 Watershed partitioning. Generally the best choice if you precompute the navigation mesh, use this if you have large open areas. 
SamplePartitionType SAMPLE_PARTITION_MONOTONE = 1
 Monotone partitioning. Use this if you want fast navigation mesh generation. 
SamplePartitionType SAMPLE_PARTITION_LAYERS = 2
 Layer partitioning. Good choice to use for tiled navigation mesh with medium and small sized tiles. 
SamplePartitionType SAMPLE_PARTITION_MAX = 3
 Represents the size of the SamplePartitionType enum. enum ParsedGeometryType: 
ParsedGeometryType PARSED_GEOMETRY_MESH_INSTANCES = 0
 Parses mesh instances as geometry. This includes MeshInstance3D, CSGShape3D, and GridMap nodes. 
ParsedGeometryType PARSED_GEOMETRY_STATIC_COLLIDERS = 1
 Parses StaticBody3D colliders as geometry. The collider should be in any of the layers specified by geometry_collision_mask. 
ParsedGeometryType PARSED_GEOMETRY_BOTH = 2
 Both PARSED_GEOMETRY_MESH_INSTANCES and PARSED_GEOMETRY_STATIC_COLLIDERS. 
ParsedGeometryType PARSED_GEOMETRY_MAX = 3
 Represents the size of the ParsedGeometryType enum. enum SourceGeometryMode: 
SourceGeometryMode SOURCE_GEOMETRY_ROOT_NODE_CHILDREN = 0
 Scans the child nodes of the root node recursively for geometry. 
SourceGeometryMode SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN = 1
 Scans nodes in a group and their child nodes recursively for geometry. The group is specified by geometry_source_group_name. 
SourceGeometryMode SOURCE_GEOMETRY_GROUPS_EXPLICIT = 2
 Uses nodes in a group for geometry. The group is specified by geometry_source_group_name. 
SourceGeometryMode SOURCE_GEOMETRY_MAX = 3
 Represents the size of the SourceGeometryMode enum.   Property Descriptions 
float agent_height = 1.5
  void set_agent_height ( float value )
 
float get_agent_height ( )
  The minimum floor to ceiling height that will still allow the floor area to be considered walkable. Note: While baking, this value will be rounded up to the nearest multiple of cell_height. 
float agent_max_climb = 0.25
  void set_agent_max_climb ( float value )
 
float get_agent_max_climb ( )
  The minimum ledge height that is considered to still be traversable. Note: While baking, this value will be rounded down to the nearest multiple of cell_height. 
float agent_max_slope = 45.0
  void set_agent_max_slope ( float value )
 
float get_agent_max_slope ( )
  The maximum slope that is considered walkable, in degrees. 
float agent_radius = 0.5
  void set_agent_radius ( float value )
 
float get_agent_radius ( )
  The distance to erode/shrink the walkable area of the heightfield away from obstructions. Note: While baking, this value will be rounded up to the nearest multiple of cell_size. 
float cell_height = 0.25
  void set_cell_height ( float value )
 
float get_cell_height ( )
  The cell height used to rasterize the navigation mesh vertices on the Y axis. Must match with the cell height on the navigation map. 
float cell_size = 0.25
  void set_cell_size ( float value )
 
float get_cell_size ( )
  The cell size used to rasterize the navigation mesh vertices on the XZ plane. Must match with the cell size on the navigation map. 
float detail_sample_distance = 6.0
  void set_detail_sample_distance ( float value )
 
float get_detail_sample_distance ( )
  The sampling distance to use when generating the detail mesh, in cell unit. 
float detail_sample_max_error = 1.0
  void set_detail_sample_max_error ( float value )
 
float get_detail_sample_max_error ( )
  The maximum distance the detail mesh surface should deviate from heightfield, in cell unit. 
float edge_max_error = 1.3
  void set_edge_max_error ( float value )
 
float get_edge_max_error ( )
  The maximum distance a simplified contour's border edges should deviate the original raw contour. 
float edge_max_length = 0.0
  void set_edge_max_length ( float value )
 
float get_edge_max_length ( )
  The maximum allowed length for contour edges along the border of the mesh. A value of 0.0 disables this feature. Note: While baking, this value will be rounded up to the nearest multiple of cell_size. 
AABB filter_baking_aabb = AABB(0, 0, 0, 0, 0, 0)
  void set_filter_baking_aabb ( AABB value )
 
AABB get_filter_baking_aabb ( )
  If the baking AABB has a volume the navigation mesh baking will be restricted to its enclosing area. 
Vector3 filter_baking_aabb_offset = Vector3(0, 0, 0)
  void set_filter_baking_aabb_offset ( Vector3 value )
 
Vector3 get_filter_baking_aabb_offset ( )
  The position offset applied to the filter_baking_aabb AABB. 
bool filter_ledge_spans = false
  void set_filter_ledge_spans ( bool value )
 
bool get_filter_ledge_spans ( )
  If true, marks spans that are ledges as non-walkable. 
bool filter_low_hanging_obstacles = false
  void set_filter_low_hanging_obstacles ( bool value )
 
bool get_filter_low_hanging_obstacles ( )
  If true, marks non-walkable spans as walkable if their maximum is within agent_max_climb of a walkable neighbor. 
bool filter_walkable_low_height_spans = false
  void set_filter_walkable_low_height_spans ( bool value )
 
bool get_filter_walkable_low_height_spans ( )
  If true, marks walkable spans as not walkable if the clearance above the span is less than agent_height. 
int geometry_collision_mask = 4294967295
  void set_collision_mask ( int value )
 
int get_collision_mask ( )
  The physics layers to scan for static colliders. Only used when geometry_parsed_geometry_type is PARSED_GEOMETRY_STATIC_COLLIDERS or PARSED_GEOMETRY_BOTH. 
ParsedGeometryType geometry_parsed_geometry_type = 0
  void set_parsed_geometry_type ( ParsedGeometryType value )
 
ParsedGeometryType get_parsed_geometry_type ( )
  Determines which type of nodes will be parsed as geometry. See ParsedGeometryType for possible values. 
SourceGeometryMode geometry_source_geometry_mode = 0
  void set_source_geometry_mode ( SourceGeometryMode value )
 
SourceGeometryMode get_source_geometry_mode ( )
  The source of the geometry used when baking. See SourceGeometryMode for possible values. 
StringName geometry_source_group_name = &"navigation_mesh_source_group"
  void set_source_group_name ( StringName value )
 
StringName get_source_group_name ( )
  The name of the group to scan for geometry. Only used when geometry_source_geometry_mode is SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN or SOURCE_GEOMETRY_GROUPS_EXPLICIT. 
float region_merge_size = 20.0
  void set_region_merge_size ( float value )
 
float get_region_merge_size ( )
  Any regions with a size smaller than this will be merged with larger regions if possible. Note: This value will be squared to calculate the number of cells. For example, a value of 20 will set the number of cells to 400. 
float region_min_size = 2.0
  void set_region_min_size ( float value )
 
float get_region_min_size ( )
  The minimum size of a region for it to be created. Note: This value will be squared to calculate the minimum number of cells allowed to form isolated island areas. For example, a value of 8 will set the number of cells to 64. 
SamplePartitionType sample_partition_type = 0
  void set_sample_partition_type ( SamplePartitionType value )
 
SamplePartitionType get_sample_partition_type ( )
  Partitioning algorithm for creating the navigation mesh polys. See SamplePartitionType for possible values. 
float vertices_per_polygon = 6.0
  void set_vertices_per_polygon ( float value )
 
float get_vertices_per_polygon ( )
  The maximum number of vertices allowed for polygons generated during the contour to polygon conversion process.   Method Descriptions void add_polygon ( PackedInt32Array polygon ) Adds a polygon using the indices of the vertices you get when calling get_vertices. void clear ( ) Clears the internal arrays for vertices and polygon indices. void clear_polygons ( ) Clears the array of polygons, but it doesn't clear the array of vertices. void create_from_mesh ( Mesh mesh ) Initializes the navigation mesh by setting the vertices and indices according to a Mesh. Note: The given mesh must be of type Mesh.PRIMITIVE_TRIANGLES and have an index array. 
bool get_collision_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the geometry_collision_mask is enabled, given a layer_number between 1 and 32. 
PackedInt32Array get_polygon ( int idx ) Returns a PackedInt32Array containing the indices of the vertices of a created polygon. 
int get_polygon_count ( ) const
 Returns the number of polygons in the navigation mesh. 
PackedVector3Array get_vertices ( ) const
 Returns a PackedVector3Array containing all the vertices being used to create the polygons. void set_collision_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the geometry_collision_mask, given a layer_number between 1 and 32. void set_vertices ( PackedVector3Array vertices ) Sets the vertices that can be then indexed to create polygons with the add_polygon method.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_navigationmesh.html


classes/class_textmesh
-----------------------------------------------------------
TextMesh Inherits: PrimitiveMesh < Mesh < Resource < RefCounted < Object Generate an PrimitiveMesh from the text.  Description Generate an PrimitiveMesh from the text. TextMesh can be generated only when using dynamic fonts with vector glyph contours. Bitmap fonts (including bitmap data in the TrueType/OpenType containers, like color emoji fonts) are not supported. The UV layout is arranged in 4 horizontal strips, top to bottom: 40% of the height for the front face, 40% for the back face, 10% for the outer edges and 10% for the inner edges.   Tutorials  3D text    Properties  
AutowrapMode autowrap_mode 0  
float curve_step 0.5  
float depth 0.05  
Font font   
int font_size 16  
HorizontalAlignment horizontal_alignment 1  
BitField<JustificationFlag> justification_flags 163  
String language ""  
float line_spacing 0.0  
Vector2 offset Vector2(0, 0)  
float pixel_size 0.01  
StructuredTextParser structured_text_bidi_override 0  
Array structured_text_bidi_override_options []  
String text ""  
Direction text_direction 0  
bool uppercase false  
VerticalAlignment vertical_alignment 1  
float width 500.0     Property Descriptions 
AutowrapMode autowrap_mode = 0
  void set_autowrap_mode ( AutowrapMode value )
 
AutowrapMode get_autowrap_mode ( )
  If set to something other than TextServer.AUTOWRAP_OFF, the text gets wrapped inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text. To see how each mode behaves, see AutowrapMode. 
float curve_step = 0.5
  void set_curve_step ( float value )
 
float get_curve_step ( )
  Step (in pixels) used to approximate BÃ©zier curves. 
float depth = 0.05
  void set_depth ( float value )
 
float get_depth ( )
  Depths of the mesh, if set to 0.0 only front surface, is generated, and UV layout is changed to use full texture for the front face only. 
Font font  void set_font ( Font value )
 
Font get_font ( )
  Font configuration used to display text. 
int font_size = 16
  void set_font_size ( int value )
 
int get_font_size ( )
  Font size of the TextMesh's text. 
HorizontalAlignment horizontal_alignment = 1
  void set_horizontal_alignment ( HorizontalAlignment value )
 
HorizontalAlignment get_horizontal_alignment ( )
  Controls the text's horizontal alignment. Supports left, center, right, and fill, or justify. Set it to one of the HorizontalAlignment constants. 
BitField<JustificationFlag> justification_flags = 163
  void set_justification_flags ( BitField<JustificationFlag> value )
 
BitField<JustificationFlag> get_justification_flags ( )
  Line fill alignment rules. For more info see JustificationFlag. 
String language = ""
  void set_language ( String value )
 
String get_language ( )
  Language code used for text shaping algorithms, if left empty current locale is used instead. 
float line_spacing = 0.0
  void set_line_spacing ( float value )
 
float get_line_spacing ( )
  Vertical space between lines in multiline TextMesh. 
Vector2 offset = Vector2(0, 0)
  void set_offset ( Vector2 value )
 
Vector2 get_offset ( )
  The text drawing offset (in pixels). 
float pixel_size = 0.01
  void set_pixel_size ( float value )
 
float get_pixel_size ( )
  The size of one pixel's width on the text to scale it in 3D. 
StructuredTextParser structured_text_bidi_override = 0
  void set_structured_text_bidi_override ( StructuredTextParser value )
 
StructuredTextParser get_structured_text_bidi_override ( )
  Set BiDi algorithm override for the structured text. 
Array structured_text_bidi_override_options = []
  void set_structured_text_bidi_override_options ( Array value )
 
Array get_structured_text_bidi_override_options ( )
  Set additional options for BiDi override. 
String text = ""
  void set_text ( String value )
 
String get_text ( )
  The text to generate mesh from. 
Direction text_direction = 0
  void set_text_direction ( Direction value )
 
Direction get_text_direction ( )
  Base text writing direction. 
bool uppercase = false
  void set_uppercase ( bool value )
 
bool is_uppercase ( )
  If true, all the text displays as UPPERCASE. 
VerticalAlignment vertical_alignment = 1
  void set_vertical_alignment ( VerticalAlignment value )
 
VerticalAlignment get_vertical_alignment ( )
  Controls the text's vertical alignment. Supports top, center, bottom. Set it to one of the VerticalAlignment constants. 
float width = 500.0
  void set_width ( float value )
 
float get_width ( )
  Text width (in pixels), used for fill alignment.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_textmesh.html


classes/class_audiostreamplayer2d
-----------------------------------------------------------
AudioStreamPlayer2D Inherits: Node2D < CanvasItem < Node < Object Plays positional sound in 2D space.  Description Plays audio that is attenuated with distance to the listener. By default, audio is heard from the screen center. This can be changed by adding an AudioListener2D node to the scene and enabling it by calling AudioListener2D.make_current on it. See also AudioStreamPlayer to play a sound non-positionally. Note: Hiding an AudioStreamPlayer2D node does not disable its audio output. To temporarily disable an AudioStreamPlayer2D's audio output, set volume_db to a very low value like -100 (which isn't audible to human hearing).   Tutorials  Audio streams    Properties  
int area_mask 1  
float attenuation 1.0  
bool autoplay false  
StringName bus &"Master"  
float max_distance 2000.0  
int max_polyphony 1  
float panning_strength 1.0  
float pitch_scale 1.0  
bool playing false  
AudioStream stream   
bool stream_paused false  
float volume_db 0.0     Methods  
float get_playback_position ( )  
AudioStreamPlayback get_stream_playback ( )  
bool has_stream_playback ( )  
void play ( float from_position=0.0 )  
void seek ( float to_position )  
void stop ( )     Signals finished ( ) Emitted when the audio stops playing.   Property Descriptions 
int area_mask = 1
  void set_area_mask ( int value )
 
int get_area_mask ( )
  Determines which Area2D layers affect the sound for reverb and audio bus effects. Areas can be used to redirect AudioStreams so that they play in a certain audio bus. An example of how you might use this is making a "water" area so that sounds played in the water are redirected through an audio bus to make them sound like they are being played underwater. 
float attenuation = 1.0
  void set_attenuation ( float value )
 
float get_attenuation ( )
  The volume is attenuated over distance with this as an exponent. 
bool autoplay = false
  void set_autoplay ( bool value )
 
bool is_autoplay_enabled ( )
  If true, audio plays when added to scene tree. 
StringName bus = &"Master"
  void set_bus ( StringName value )
 
StringName get_bus ( )
  Bus on which this audio is playing. Note: When setting this property, keep in mind that no validation is performed to see if the given name matches an existing bus. This is because audio bus layouts might be loaded after this property is set. If this given name can't be resolved at runtime, it will fall back to "Master". 
float max_distance = 2000.0
  void set_max_distance ( float value )
 
float get_max_distance ( )
  Maximum distance from which audio is still hearable. 
int max_polyphony = 1
  void set_max_polyphony ( int value )
 
int get_max_polyphony ( )
  The maximum number of sounds this node can play at the same time. Playing additional sounds after this value is reached will cut off the oldest sounds. 
float panning_strength = 1.0
  void set_panning_strength ( float value )
 
float get_panning_strength ( )
  Scales the panning strength for this node by multiplying the base ProjectSettings.audio/general/2d_panning_strength with this factor. Higher values will pan audio from left to right more dramatically than lower values. 
float pitch_scale = 1.0
  void set_pitch_scale ( float value )
 
float get_pitch_scale ( )
  The pitch and the tempo of the audio, as a multiplier of the audio sample's sample rate. 
bool playing = false
  
bool is_playing ( )
  If true, audio is playing or is queued to be played (see play). 
AudioStream stream  void set_stream ( AudioStream value )
 
AudioStream get_stream ( )
  The AudioStream object to be played. 
bool stream_paused = false
  void set_stream_paused ( bool value )
 
bool get_stream_paused ( )
  If true, the playback is paused. You can resume it by setting stream_paused to false. 
float volume_db = 0.0
  void set_volume_db ( float value )
 
float get_volume_db ( )
  Base volume before attenuation.   Method Descriptions 
float get_playback_position ( ) Returns the position in the AudioStream. 
AudioStreamPlayback get_stream_playback ( ) Returns the AudioStreamPlayback object associated with this AudioStreamPlayer2D. 
bool has_stream_playback ( ) Returns whether the AudioStreamPlayer can return the AudioStreamPlayback object or not. void play ( float from_position=0.0 ) Queues the audio to play on the next physics frame, from the given position from_position, in seconds. void seek ( float to_position ) Sets the position from which audio will be played, in seconds. void stop ( ) Stops the audio.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiostreamplayer2d.html


classes/class_lineedit
-----------------------------------------------------------
LineEdit Inherits: Control < CanvasItem < Node < Object An input field for single-line text.  Description LineEdit provides an input field for editing a single line of text. It features many built-in shortcuts that are always available (Ctrl here maps to Cmd on macOS):  
Ctrl + C: Copy 
Ctrl + X: Cut 
Ctrl + V or Ctrl + Y: Paste/"yank" 
Ctrl + Z: Undo 
Ctrl + ~: Swap input direction. 
Ctrl + Shift + Z: Redo 
Ctrl + U: Delete text from the caret position to the beginning of the line 
Ctrl + K: Delete text from the caret position to the end of the line 
Ctrl + A: Select all text 
Up Arrow/Down Arrow: Move the caret to the beginning/end of the line  On macOS, some extra keyboard shortcuts are available:  
Cmd + F: Same as Right Arrow, move the caret one character right 
Cmd + B: Same as Left Arrow, move the caret one character left 
Cmd + P: Same as Up Arrow, move the caret to the previous line 
Cmd + N: Same as Down Arrow, move the caret to the next line 
Cmd + D: Same as Delete, delete the character on the right side of caret 
Cmd + H: Same as Backspace, delete the character on the left side of the caret 
Cmd + A: Same as Home, move the caret to the beginning of the line 
Cmd + E: Same as End, move the caret to the end of the line 
Cmd + Left Arrow: Same as Home, move the caret to the beginning of the line 
Cmd + Right Arrow: Same as End, move the caret to the end of the line    Properties  
HorizontalAlignment alignment 0  
bool caret_blink false  
float caret_blink_interval 0.65  
int caret_column 0  
bool caret_force_displayed false  
bool caret_mid_grapheme false  
bool clear_button_enabled false  
bool context_menu_enabled true  
bool deselect_on_focus_loss_enabled true  
bool drag_and_drop_selection_enabled true  
bool draw_control_chars false  
bool editable true  
bool expand_to_text_length false  
bool flat false  
FocusMode focus_mode 2 (overrides Control)  
String language ""  
int max_length 0  
bool middle_mouse_paste_enabled true  
CursorShape mouse_default_cursor_shape 1 (overrides Control)  
String placeholder_text ""  
Texture2D right_icon   
bool secret false  
String secret_character "â€¢"  
bool select_all_on_focus false  
bool selecting_enabled true  
bool shortcut_keys_enabled true  
StructuredTextParser structured_text_bidi_override 0  
Array structured_text_bidi_override_options []  
String text ""  
TextDirection text_direction 0  
bool virtual_keyboard_enabled true  
VirtualKeyboardType virtual_keyboard_type 0     Methods  
void clear ( )  
void delete_char_at_caret ( )  
void delete_text ( int from_column, int to_column )  
void deselect ( )  
PopupMenu get_menu ( ) const  
float get_scroll_offset ( ) const  
String get_selected_text ( )  
int get_selection_from_column ( ) const  
int get_selection_to_column ( ) const  
bool has_selection ( ) const  
void insert_text_at_caret ( String text )  
bool is_menu_visible ( ) const  
void menu_option ( int option )  
void select ( int from=0, int to=-1 )  
void select_all ( )     Theme Properties  
Color caret_color Color(0.95, 0.95, 0.95, 1)  
Color clear_button_color Color(0.875, 0.875, 0.875, 1)  
Color clear_button_color_pressed Color(1, 1, 1, 1)  
Color font_color Color(0.875, 0.875, 0.875, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
Color font_placeholder_color Color(0.875, 0.875, 0.875, 0.6)  
Color font_selected_color Color(1, 1, 1, 1)  
Color font_uneditable_color Color(0.875, 0.875, 0.875, 0.5)  
Color selection_color Color(0.5, 0.5, 0.5, 1)  
int caret_width 1  
int minimum_character_width 4  
int outline_size 0  
Font font   
int font_size   
Texture2D clear   
StyleBox focus   
StyleBox normal   
StyleBox read_only      Signals text_change_rejected ( String rejected_substring ) Emitted when appending text that overflows the max_length. The appended text is truncated to fit max_length, and the part that couldn't fit is passed as the rejected_substring argument. text_changed ( String new_text ) Emitted when the text changes. text_submitted ( String new_text ) Emitted when the user presses @GlobalScope.KEY_ENTER on the LineEdit.   Enumerations enum MenuItems: 
MenuItems MENU_CUT = 0
 Cuts (copies and clears) the selected text. 
MenuItems MENU_COPY = 1
 Copies the selected text. 
MenuItems MENU_PASTE = 2
 Pastes the clipboard text over the selected text (or at the caret's position). Non-printable escape characters are automatically stripped from the OS clipboard via String.strip_escapes. 
MenuItems MENU_CLEAR = 3
 Erases the whole LineEdit text. 
MenuItems MENU_SELECT_ALL = 4
 Selects the whole LineEdit text. 
MenuItems MENU_UNDO = 5
 Undoes the previous action. 
MenuItems MENU_REDO = 6
 Reverse the last undo action. 
MenuItems MENU_SUBMENU_TEXT_DIR = 7
 ID of "Text Writing Direction" submenu. 
MenuItems MENU_DIR_INHERITED = 8
 Sets text direction to inherited. 
MenuItems MENU_DIR_AUTO = 9
 Sets text direction to automatic. 
MenuItems MENU_DIR_LTR = 10
 Sets text direction to left-to-right. 
MenuItems MENU_DIR_RTL = 11
 Sets text direction to right-to-left. 
MenuItems MENU_DISPLAY_UCC = 12
 Toggles control character display. 
MenuItems MENU_SUBMENU_INSERT_UCC = 13
 ID of "Insert Control Character" submenu. 
MenuItems MENU_INSERT_LRM = 14
 Inserts left-to-right mark (LRM) character. 
MenuItems MENU_INSERT_RLM = 15
 Inserts right-to-left mark (RLM) character. 
MenuItems MENU_INSERT_LRE = 16
 Inserts start of left-to-right embedding (LRE) character. 
MenuItems MENU_INSERT_RLE = 17
 Inserts start of right-to-left embedding (RLE) character. 
MenuItems MENU_INSERT_LRO = 18
 Inserts start of left-to-right override (LRO) character. 
MenuItems MENU_INSERT_RLO = 19
 Inserts start of right-to-left override (RLO) character. 
MenuItems MENU_INSERT_PDF = 20
 Inserts pop direction formatting (PDF) character. 
MenuItems MENU_INSERT_ALM = 21
 Inserts Arabic letter mark (ALM) character. 
MenuItems MENU_INSERT_LRI = 22
 Inserts left-to-right isolate (LRI) character. 
MenuItems MENU_INSERT_RLI = 23
 Inserts right-to-left isolate (RLI) character. 
MenuItems MENU_INSERT_FSI = 24
 Inserts first strong isolate (FSI) character. 
MenuItems MENU_INSERT_PDI = 25
 Inserts pop direction isolate (PDI) character. 
MenuItems MENU_INSERT_ZWJ = 26
 Inserts zero width joiner (ZWJ) character. 
MenuItems MENU_INSERT_ZWNJ = 27
 Inserts zero width non-joiner (ZWNJ) character. 
MenuItems MENU_INSERT_WJ = 28
 Inserts word joiner (WJ) character. 
MenuItems MENU_INSERT_SHY = 29
 Inserts soft hyphen (SHY) character. 
MenuItems MENU_MAX = 30
 Represents the size of the MenuItems enum. enum VirtualKeyboardType: 
VirtualKeyboardType KEYBOARD_TYPE_DEFAULT = 0
 Default text virtual keyboard. 
VirtualKeyboardType KEYBOARD_TYPE_MULTILINE = 1
 Multiline virtual keyboard. 
VirtualKeyboardType KEYBOARD_TYPE_NUMBER = 2
 Virtual number keypad, useful for PIN entry. 
VirtualKeyboardType KEYBOARD_TYPE_NUMBER_DECIMAL = 3
 Virtual number keypad, useful for entering fractional numbers. 
VirtualKeyboardType KEYBOARD_TYPE_PHONE = 4
 Virtual phone number keypad. 
VirtualKeyboardType KEYBOARD_TYPE_EMAIL_ADDRESS = 5
 Virtual keyboard with additional keys to assist with typing email addresses. 
VirtualKeyboardType KEYBOARD_TYPE_PASSWORD = 6
 Virtual keyboard for entering a password. On most platforms, this should disable autocomplete and autocapitalization. Note: This is not supported on Web. Instead, this behaves identically to KEYBOARD_TYPE_DEFAULT. 
VirtualKeyboardType KEYBOARD_TYPE_URL = 7
 Virtual keyboard with additional keys to assist with typing URLs.   Property Descriptions 
HorizontalAlignment alignment = 0
  void set_horizontal_alignment ( HorizontalAlignment value )
 
HorizontalAlignment get_horizontal_alignment ( )
  Text alignment as defined in the HorizontalAlignment enum. 
bool caret_blink = false
  void set_caret_blink_enabled ( bool value )
 
bool is_caret_blink_enabled ( )
  If true, makes the caret blink. 
float caret_blink_interval = 0.65
  void set_caret_blink_interval ( float value )
 
float get_caret_blink_interval ( )
  The interval at which the caret blinks (in seconds). 
int caret_column = 0
  void set_caret_column ( int value )
 
int get_caret_column ( )
  The caret's column position inside the LineEdit. When set, the text may scroll to accommodate it. 
bool caret_force_displayed = false
  void set_caret_force_displayed ( bool value )
 
bool is_caret_force_displayed ( )
  If true, the LineEdit will always show the caret, even if focus is lost. 
bool caret_mid_grapheme = false
  void set_caret_mid_grapheme_enabled ( bool value )
 
bool is_caret_mid_grapheme_enabled ( )
  Allow moving caret, selecting and removing the individual composite character components. Note: Backspace is always removing individual composite character components. 
bool clear_button_enabled = false
  void set_clear_button_enabled ( bool value )
 
bool is_clear_button_enabled ( )
  If true, the LineEdit will show a clear button if text is not empty, which can be used to clear the text quickly. 
bool context_menu_enabled = true
  void set_context_menu_enabled ( bool value )
 
bool is_context_menu_enabled ( )
  If true, the context menu will appear when right-clicked. 
bool deselect_on_focus_loss_enabled = true
  void set_deselect_on_focus_loss_enabled ( bool value )
 
bool is_deselect_on_focus_loss_enabled ( )
  If true, the selected text will be deselected when focus is lost. 
bool drag_and_drop_selection_enabled = true
  void set_drag_and_drop_selection_enabled ( bool value )
 
bool is_drag_and_drop_selection_enabled ( )
  If true, allow drag and drop of selected text. 
bool draw_control_chars = false
  void set_draw_control_chars ( bool value )
 
bool get_draw_control_chars ( )
  If true, control characters are displayed. 
bool editable = true
  void set_editable ( bool value )
 
bool is_editable ( )
  If false, existing text cannot be modified and new text cannot be added. 
bool expand_to_text_length = false
  void set_expand_to_text_length_enabled ( bool value )
 
bool is_expand_to_text_length_enabled ( )
  If true, the LineEdit width will increase to stay longer than the text. It will not compress if the text is shortened. 
bool flat = false
  void set_flat ( bool value )
 
bool is_flat ( )
  If true, the LineEdit doesn't display decoration. 
String language = ""
  void set_language ( String value )
 
String get_language ( )
  Language code used for line-breaking and text shaping algorithms. If left empty, current locale is used instead. 
int max_length = 0
  void set_max_length ( int value )
 
int get_max_length ( )
  Maximum number of characters that can be entered inside the LineEdit. If 0, there is no limit. When a limit is defined, characters that would exceed max_length are truncated. This happens both for existing text contents when setting the max length, or for new text inserted in the LineEdit, including pasting. If any input text is truncated, the text_change_rejected signal is emitted with the truncated substring as parameter. Example:  GDScripttext = "Hello world"
max_length = 5
# `text` becomes "Hello".
max_length = 10
text += " goodbye"
# `text` becomes "Hello good".
# `text_change_rejected` is emitted with "bye" as parameter.
 C#Text = "Hello world";
MaxLength = 5;
// `Text` becomes "Hello".
MaxLength = 10;
Text += " goodbye";
// `Text` becomes "Hello good".
// `text_change_rejected` is emitted with "bye" as parameter.
  
bool middle_mouse_paste_enabled = true
  void set_middle_mouse_paste_enabled ( bool value )
 
bool is_middle_mouse_paste_enabled ( )
  If false, using middle mouse button to paste clipboard will be disabled. Note: This method is only implemented on Linux. 
String placeholder_text = ""
  void set_placeholder ( String value )
 
String get_placeholder ( )
  Text shown when the LineEdit is empty. It is not the LineEdit's default value (see text). 
Texture2D right_icon  void set_right_icon ( Texture2D value )
 
Texture2D get_right_icon ( )
  Sets the icon that will appear in the right end of the LineEdit if there's no text, or always, if clear_button_enabled is set to false. 
bool secret = false
  void set_secret ( bool value )
 
bool is_secret ( )
  If true, every character is replaced with the secret character (see secret_character). 
String secret_character = "â€¢"
  void set_secret_character ( String value )
 
String get_secret_character ( )
  The character to use to mask secret input. Only a single character can be used as the secret character. If it is longer than one character, only the first one will be used. If it is empty, a space will be used instead. 
bool select_all_on_focus = false
  void set_select_all_on_focus ( bool value )
 
bool is_select_all_on_focus ( )
  If true, the LineEdit will select the whole text when it gains focus. 
bool selecting_enabled = true
  void set_selecting_enabled ( bool value )
 
bool is_selecting_enabled ( )
  If false, it's impossible to select the text using mouse nor keyboard. 
bool shortcut_keys_enabled = true
  void set_shortcut_keys_enabled ( bool value )
 
bool is_shortcut_keys_enabled ( )
  If false, using shortcuts will be disabled. 
StructuredTextParser structured_text_bidi_override = 0
  void set_structured_text_bidi_override ( StructuredTextParser value )
 
StructuredTextParser get_structured_text_bidi_override ( )
  Set BiDi algorithm override for the structured text. 
Array structured_text_bidi_override_options = []
  void set_structured_text_bidi_override_options ( Array value )
 
Array get_structured_text_bidi_override_options ( )
  Set additional options for BiDi override. 
String text = ""
  void set_text ( String value )
 
String get_text ( )
  String value of the LineEdit. Note: Changing text using this property won't emit the text_changed signal. 
TextDirection text_direction = 0
  void set_text_direction ( TextDirection value )
 
TextDirection get_text_direction ( )
  Base text writing direction. 
bool virtual_keyboard_enabled = true
  void set_virtual_keyboard_enabled ( bool value )
 
bool is_virtual_keyboard_enabled ( )
  If true, the native virtual keyboard is shown when focused on platforms that support it. 
VirtualKeyboardType virtual_keyboard_type = 0
  void set_virtual_keyboard_type ( VirtualKeyboardType value )
 
VirtualKeyboardType get_virtual_keyboard_type ( )
  Specifies the type of virtual keyboard to show.   Method Descriptions void clear ( ) Erases the LineEdit's text. void delete_char_at_caret ( ) Deletes one character at the caret's current position (equivalent to pressing Delete). void delete_text ( int from_column, int to_column ) Deletes a section of the text going from position from_column to to_column. Both parameters should be within the text's length. void deselect ( ) Clears the current selection. 
PopupMenu get_menu ( ) const
 Returns the PopupMenu of this LineEdit. By default, this menu is displayed when right-clicking on the LineEdit. You can add custom menu items or remove standard ones. Make sure your IDs don't conflict with the standard ones (see MenuItems). For example:  GDScriptfunc _ready():
    var menu = get_menu()
    # Remove all items after "Redo".
    menu.item_count = menu.get_item_index(MENU_REDO) + 1
    # Add custom items.
    menu.add_separator()
    menu.add_item("Insert Date", MENU_MAX + 1)
    # Connect callback.
    menu.id_pressed.connect(_on_item_pressed)
func _on_item_pressed(id):
    if id == MENU_MAX + 1:
        insert_text_at_caret(Time.get_date_string_from_system())
 C#public override void _Ready()
{
    var menu = GetMenu();
    // Remove all items after "Redo".
    menu.ItemCount = menu.GetItemIndex(LineEdit.MenuItems.Redo) + 1;
    // Add custom items.
    menu.AddSeparator();
    menu.AddItem("Insert Date", LineEdit.MenuItems.Max + 1);
    // Add event handler.
    menu.IdPressed += OnItemPressed;
}
public void OnItemPressed(int id)
{
    if (id == LineEdit.MenuItems.Max + 1)
    {
        InsertTextAtCaret(Time.GetDateStringFromSystem());
    }
}
  Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their Window.visible property. 
float get_scroll_offset ( ) const
 Returns the scroll offset due to caret_column, as a number of characters. 
String get_selected_text ( ) Returns the text inside the selection. 
int get_selection_from_column ( ) const
 Returns the selection begin column. 
int get_selection_to_column ( ) const
 Returns the selection end column. 
bool has_selection ( ) const
 Returns true if the user has selected text. void insert_text_at_caret ( String text ) Inserts text at the caret. If the resulting value is longer than max_length, nothing happens. 
bool is_menu_visible ( ) const
 Returns whether the menu is visible. Use this instead of get_menu().visible to improve performance (so the creation of the menu is avoided). void menu_option ( int option ) Executes a given action as defined in the MenuItems enum. void select ( int from=0, int to=-1 ) Selects characters inside LineEdit between from and to. By default, from is at the beginning and to at the end.  GDScripttext = "Welcome"
select() # Will select "Welcome".
select(4) # Will select "ome".
select(2, 5) # Will select "lco".
 C#Text = "Welcome";
Select(); // Will select "Welcome".
Select(4); // Will select "ome".
Select(2, 5); // Will select "lco".
  void select_all ( ) Selects the whole String.   Theme Property Descriptions 
Color caret_color = Color(0.95, 0.95, 0.95, 1)
 Color of the LineEdit's caret (text cursor). This can be set to a fully transparent color to hide the caret entirely. 
Color clear_button_color = Color(0.875, 0.875, 0.875, 1)
 Color used as default tint for the clear button. 
Color clear_button_color_pressed = Color(1, 1, 1, 1)
 Color used for the clear button when it's pressed. 
Color font_color = Color(0.875, 0.875, 0.875, 1)
 Default font color. 
Color font_outline_color = Color(1, 1, 1, 1)
 The tint of text outline of the LineEdit. 
Color font_placeholder_color = Color(0.875, 0.875, 0.875, 0.6)
 Font color for placeholder_text. 
Color font_selected_color = Color(1, 1, 1, 1)
 Font color for selected text (inside the selection rectangle). 
Color font_uneditable_color = Color(0.875, 0.875, 0.875, 0.5)
 Font color when editing is disabled. 
Color selection_color = Color(0.5, 0.5, 0.5, 1)
 Color of the selection rectangle. 
int caret_width = 1
 The caret's width in pixels. Greater values can be used to improve accessibility by ensuring the caret is easily visible, or to ensure consistency with a large font size. 
int minimum_character_width = 4
 Minimum horizontal space for the text (not counting the clear button and content margins). This value is measured in count of 'M' characters (i.e. this number of 'M' characters can be displayed without scrolling). 
int outline_size = 0
 The size of the text outline. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. 
Font font Font used for the text. 
int font_size Font size of the LineEdit's text. 
Texture2D clear Texture for the clear button. See clear_button_enabled. 
StyleBox focus Background used when LineEdit has GUI focus. The focus StyleBox is displayed over the base StyleBox, so a partially transparent StyleBox should be used to ensure the base StyleBox remains visible. A StyleBox that represents an outline or an underline works well for this purpose. To disable the focus visual effect, assign a StyleBoxEmpty resource. Note that disabling the focus visual effect will harm keyboard/controller navigation usability, so this is not recommended for accessibility reasons. 
StyleBox normal Default background for the LineEdit. 
StyleBox read_only Background used when LineEdit is in read-only mode (editable is set to false).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_lineedit.html


classes/class_occluderinstance3d
-----------------------------------------------------------
OccluderInstance3D Inherits: Node3D < Node < Object Provides occlusion culling for 3D nodes, which improves performance in closed areas.  Description Occlusion culling can improve rendering performance in closed/semi-open areas by hiding geometry that is occluded by other objects. The occlusion culling system is mostly static. OccluderInstance3Ds can be moved or hidden at run-time, but doing so will trigger a background recomputation that can take several frames. It is recommended to only move OccluderInstance3Ds sporadically (e.g. for procedural generation purposes), rather than doing so every frame. The occlusion culling system works by rendering the occluders on the CPU in parallel using Embree, drawing the result to a low-resolution buffer then using this to cull 3D nodes individually. In the 3D editor, you can preview the occlusion culling buffer by choosing Perspective > Debug Advanced... > Occlusion Culling Buffer in the top-left corner of the 3D viewport. The occlusion culling buffer quality can be adjusted in the Project Settings. Baking: Select an OccluderInstance3D node, then use the Bake Occluders button at the top of the 3D editor. Only opaque materials will be taken into account; transparent materials (alpha-blended or alpha-tested) will be ignored by the occluder generation. Note: Occlusion culling is only effective if ProjectSettings.rendering/occlusion_culling/use_occlusion_culling is true. Enabling occlusion culling has a cost on the CPU. Only enable occlusion culling if you actually plan to use it. Large open scenes with few or no objects blocking the view will generally not benefit much from occlusion culling. Large open scenes generally benefit more from mesh LOD and visibility ranges (GeometryInstance3D.visibility_range_begin and GeometryInstance3D.visibility_range_end) compared to occlusion culling. Note: Due to memory constraints, occlusion culling is not supported by default in Web export templates. It can be enabled by compiling custom Web export templates with module_raycast_enabled=yes.   Tutorials  Occlusion culling    Properties  
int bake_mask 4294967295  
float bake_simplification_distance 0.1  
Occluder3D occluder      Methods  
bool get_bake_mask_value ( int layer_number ) const  
void set_bake_mask_value ( int layer_number, bool value )     Property Descriptions 
int bake_mask = 4294967295
  void set_bake_mask ( int value )
 
int get_bake_mask ( )
  The visual layers to account for when baking for occluders. Only MeshInstance3Ds whose VisualInstance3D.layers match with this bake_mask will be included in the generated occluder mesh. By default, all objects with opaque materials are taken into account for the occluder baking. To improve performance and avoid artifacts, it is recommended to exclude dynamic objects, small objects and fixtures from the baking process by moving them to a separate visual layer and excluding this layer in bake_mask. 
float bake_simplification_distance = 0.1
  void set_bake_simplification_distance ( float value )
 
float get_bake_simplification_distance ( )
  The simplification distance to use for simplifying the generated occluder polygon (in 3D units). Higher values result in a less detailed occluder mesh, which improves performance but reduces culling accuracy. The occluder geometry is rendered on the CPU, so it is important to keep its geometry as simple as possible. Since the buffer is rendered at a low resolution, less detailed occluder meshes generally still work well. The default value is fairly aggressive, so you may have to decrease it if you run into false negatives (objects being occluded even though they are visible by the camera). A value of 0.01 will act conservatively, and will keep geometry perceptually unaffected in the occlusion culling buffer. Depending on the scene, a value of 0.01 may still simplify the mesh noticeably compared to disabling simplification entirely. Setting this to 0.0 disables simplification entirely, but vertices in the exact same position will still be merged. The mesh will also be re-indexed to reduce both the number of vertices and indices. Note: This uses the meshoptimizer library under the hood, similar to LOD generation. 
Occluder3D occluder  void set_occluder ( Occluder3D value )
 
Occluder3D get_occluder ( )
  The occluder resource for this OccluderInstance3D. You can generate an occluder resource by selecting an OccluderInstance3D node then using the Bake Occluders button at the top of the editor. You can also draw your own 2D occluder polygon by adding a new PolygonOccluder3D resource to the occluder property in the Inspector. Alternatively, you can select a primitive occluder to use: QuadOccluder3D, BoxOccluder3D or SphereOccluder3D.   Method Descriptions 
bool get_bake_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the bake_mask is enabled, given a layer_number between 1 and 32. void set_bake_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the bake_mask, given a layer_number between 1 and 32.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_occluderinstance3d.html


classes/class_area2d
-----------------------------------------------------------
Area2D Inherits: CollisionObject2D < Node2D < CanvasItem < Node < Object A region of 2D space that detects other CollisionObject2Ds entering or exiting it.  Description Area2D is a region of 2D space defined by one or multiple CollisionShape2D or CollisionPolygon2D child nodes. It detects when other CollisionObject2Ds enter or exit it, and it also keeps track of which collision objects haven't exited it yet (i.e. which one are overlapping it). This node can also locally alter or override physics parameters (gravity, damping) and route audio to custom audio buses.   Tutorials  Using Area2D 2D Dodge The Creeps Demo 2D Pong Demo 2D Platformer Demo    Properties  
float angular_damp 1.0  
SpaceOverride angular_damp_space_override 0  
StringName audio_bus_name &"Master"  
bool audio_bus_override false  
float gravity 980.0  
Vector2 gravity_direction Vector2(0, 1)  
bool gravity_point false  
Vector2 gravity_point_center Vector2(0, 1)  
float gravity_point_unit_distance 0.0  
SpaceOverride gravity_space_override 0  
float linear_damp 0.1  
SpaceOverride linear_damp_space_override 0  
bool monitorable true  
bool monitoring true  
int priority 0     Methods  
Area2D[] get_overlapping_areas ( ) const  
Node2D[] get_overlapping_bodies ( ) const  
bool has_overlapping_areas ( ) const  
bool has_overlapping_bodies ( ) const  
bool overlaps_area ( Node area ) const  
bool overlaps_body ( Node body ) const     Signals area_entered ( Area2D area ) Emitted when the received area enters this area. Requires monitoring to be set to true. area_exited ( Area2D area ) Emitted when the received area exits this area. Requires monitoring to be set to true. area_shape_entered ( RID area_rid, Area2D area, int area_shape_index, int local_shape_index ) Emitted when a Shape2D of the received area enters a shape of this area. Requires monitoring to be set to true. local_shape_index and area_shape_index contain indices of the interacting shapes from this area and the other area, respectively. area_rid contains the RID of the other area. These values can be used with the PhysicsServer2D. Example of getting the CollisionShape2D node from the shape index:  GDScriptvar other_shape_owner = area.shape_find_owner(area_shape_index)
var other_shape_node = area.shape_owner_get_owner(other_shape_owner)
var local_shape_owner = shape_find_owner(local_shape_index)
var local_shape_node = shape_owner_get_owner(local_shape_owner)
  area_shape_exited ( RID area_rid, Area2D area, int area_shape_index, int local_shape_index ) Emitted when a Shape2D of the received area exits a shape of this area. Requires monitoring to be set to true. See also area_shape_entered. body_entered ( Node2D body ) Emitted when the received body enters this area. body can be a PhysicsBody2D or a TileMap. TileMaps are detected if their TileSet has collision shapes configured. Requires monitoring to be set to true. body_exited ( Node2D body ) Emitted when the received body exits this area. body can be a PhysicsBody2D or a TileMap. TileMaps are detected if their TileSet has collision shapes configured. Requires monitoring to be set to true. body_shape_entered ( RID body_rid, Node2D body, int body_shape_index, int local_shape_index ) Emitted when a Shape2D of the received body enters a shape of this area. body can be a PhysicsBody2D or a TileMap. TileMaps are detected if their TileSet has collision shapes configured. Requires monitoring to be set to true. local_shape_index and body_shape_index contain indices of the interacting shapes from this area and the interacting body, respectively. body_rid contains the RID of the body. These values can be used with the PhysicsServer2D. Example of getting the CollisionShape2D node from the shape index:  GDScriptvar body_shape_owner = body.shape_find_owner(body_shape_index)
var body_shape_node = body.shape_owner_get_owner(body_shape_owner)
var local_shape_owner = shape_find_owner(local_shape_index)
var local_shape_node = shape_owner_get_owner(local_shape_owner)
  body_shape_exited ( RID body_rid, Node2D body, int body_shape_index, int local_shape_index ) Emitted when a Shape2D of the received body exits a shape of this area. body can be a PhysicsBody2D or a TileMap. TileMaps are detected if their TileSet has collision shapes configured. Requires monitoring to be set to true. See also body_shape_entered.   Enumerations enum SpaceOverride: 
SpaceOverride SPACE_OVERRIDE_DISABLED = 0
 This area does not affect gravity/damping. 
SpaceOverride SPACE_OVERRIDE_COMBINE = 1
 This area adds its gravity/damping values to whatever has been calculated so far (in priority order). 
SpaceOverride SPACE_OVERRIDE_COMBINE_REPLACE = 2
 This area adds its gravity/damping values to whatever has been calculated so far (in priority order), ignoring any lower priority areas. 
SpaceOverride SPACE_OVERRIDE_REPLACE = 3
 This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas. 
SpaceOverride SPACE_OVERRIDE_REPLACE_COMBINE = 4
 This area replaces any gravity/damping calculated so far (in priority order), but keeps calculating the rest of the areas.   Property Descriptions 
float angular_damp = 1.0
  void set_angular_damp ( float value )
 
float get_angular_damp ( )
  The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. See ProjectSettings.physics/2d/default_angular_damp for more details about damping. 
SpaceOverride angular_damp_space_override = 0
  void set_angular_damp_space_override_mode ( SpaceOverride value )
 
SpaceOverride get_angular_damp_space_override_mode ( )
  Override mode for angular damping calculations within this area. See SpaceOverride for possible values. 
StringName audio_bus_name = &"Master"
  void set_audio_bus_name ( StringName value )
 
StringName get_audio_bus_name ( )
  The name of the area's audio bus. 
bool audio_bus_override = false
  void set_audio_bus_override ( bool value )
 
bool is_overriding_audio_bus ( )
  If true, the area's audio bus overrides the default audio bus. 
float gravity = 980.0
  void set_gravity ( float value )
 
float get_gravity ( )
  The area's gravity intensity (in pixels per second squared). This value multiplies the gravity direction. This is useful to alter the force of gravity without altering its direction. 
Vector2 gravity_direction = Vector2(0, 1)
  void set_gravity_direction ( Vector2 value )
 
Vector2 get_gravity_direction ( )
  The area's gravity vector (not normalized). 
bool gravity_point = false
  void set_gravity_is_point ( bool value )
 
bool is_gravity_a_point ( )
  If true, gravity is calculated from a point (set via gravity_point_center). See also gravity_space_override. 
Vector2 gravity_point_center = Vector2(0, 1)
  void set_gravity_point_center ( Vector2 value )
 
Vector2 get_gravity_point_center ( )
  If gravity is a point (see gravity_point), this will be the point of attraction. 
float gravity_point_unit_distance = 0.0
  void set_gravity_point_unit_distance ( float value )
 
float get_gravity_point_unit_distance ( )
  The distance at which the gravity strength is equal to gravity. For example, on a planet 100 pixels in radius with a surface gravity of 4.0 px/sÂ², set the gravity to 4.0 and the unit distance to 100.0. The gravity will have falloff according to the inverse square law, so in the example, at 200 pixels from the center the gravity will be 1.0 px/sÂ² (twice the distance, 1/4th the gravity), at 50 pixels it will be 16.0 px/sÂ² (half the distance, 4x the gravity), and so on. The above is true only when the unit distance is a positive number. When this is set to 0.0, the gravity will be constant regardless of distance. 
SpaceOverride gravity_space_override = 0
  void set_gravity_space_override_mode ( SpaceOverride value )
 
SpaceOverride get_gravity_space_override_mode ( )
  Override mode for gravity calculations within this area. See SpaceOverride for possible values. 
float linear_damp = 0.1
  void set_linear_damp ( float value )
 
float get_linear_damp ( )
  The rate at which objects stop moving in this area. Represents the linear velocity lost per second. See ProjectSettings.physics/2d/default_linear_damp for more details about damping. 
SpaceOverride linear_damp_space_override = 0
  void set_linear_damp_space_override_mode ( SpaceOverride value )
 
SpaceOverride get_linear_damp_space_override_mode ( )
  Override mode for linear damping calculations within this area. See SpaceOverride for possible values. 
bool monitorable = true
  void set_monitorable ( bool value )
 
bool is_monitorable ( )
  If true, other monitoring areas can detect this area. 
bool monitoring = true
  void set_monitoring ( bool value )
 
bool is_monitoring ( )
  If true, the area detects bodies or areas entering and exiting it. 
int priority = 0
  void set_priority ( int value )
 
int get_priority ( )
  The area's priority. Higher priority areas are processed first. The World2D's physics is always processed last, after all areas.   Method Descriptions 
Area2D[] get_overlapping_areas ( ) const
 Returns a list of intersecting Area2Ds. The overlapping area's CollisionObject2D.collision_layer must be part of this area's CollisionObject2D.collision_mask in order to be detected. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead. 
Node2D[] get_overlapping_bodies ( ) const
 Returns a list of intersecting PhysicsBody2Ds and TileMaps. The overlapping body's CollisionObject2D.collision_layer must be part of this area's CollisionObject2D.collision_mask in order to be detected. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead. 
bool has_overlapping_areas ( ) const
 Returns true if intersecting any Area2Ds, otherwise returns false. The overlapping area's CollisionObject2D.collision_layer must be part of this area's CollisionObject2D.collision_mask in order to be detected. For performance reasons (collisions are all processed at the same time) the list of overlapping areas is modified once during the physics step, not immediately after objects are moved. Consider using signals instead. 
bool has_overlapping_bodies ( ) const
 Returns true if intersecting any PhysicsBody2Ds or TileMaps, otherwise returns false. The overlapping body's CollisionObject2D.collision_layer must be part of this area's CollisionObject2D.collision_mask in order to be detected. For performance reasons (collisions are all processed at the same time) the list of overlapping bodies is modified once during the physics step, not immediately after objects are moved. Consider using signals instead. 
bool overlaps_area ( Node area ) const
 Returns true if the given Area2D intersects or overlaps this Area2D, false otherwise. Note: The result of this test is not immediate after moving objects. For performance, the list of overlaps is updated once per frame and before the physics step. Consider using signals instead. 
bool overlaps_body ( Node body ) const
 Returns true if the given physics body intersects or overlaps this Area2D, false otherwise. Note: The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead. The body argument can either be a PhysicsBody2D or a TileMap instance. While TileMaps are not physics bodies themselves, they register their tiles with collision shapes as a virtual physics body.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_area2d.html


classes/class_csgpolygon3d
-----------------------------------------------------------
CSGPolygon3D Inherits: CSGPrimitive3D < CSGShape3D < GeometryInstance3D < VisualInstance3D < Node3D < Node < Object Extrudes a 2D polygon shape to create a 3D mesh.  Description An array of 2D points is extruded to quickly and easily create a variety of 3D meshes. See also CSGMesh3D for using 3D meshes as CSG nodes. Note: CSG nodes are intended to be used for level prototyping. Creating CSG nodes has a significant CPU cost compared to creating a MeshInstance3D with a PrimitiveMesh. Moving a CSG node within another CSG node also has a significant CPU cost, so it should be avoided during gameplay.   Tutorials  Prototyping levels with CSG    Properties  
float depth 1.0  
Material material   
Mode mode 0  
bool path_continuous_u   
float path_interval   
PathIntervalType path_interval_type   
bool path_joined   
bool path_local   
NodePath path_node   
PathRotation path_rotation   
float path_simplify_angle   
float path_u_distance   
PackedVector2Array polygon PackedVector2Array(0, 0, 0, 1, 1, 1, 1, 0)  
bool smooth_faces false  
float spin_degrees   
int spin_sides      Enumerations enum Mode: 
Mode MODE_DEPTH = 0
 The polygon shape is extruded along the negative Z axis. 
Mode MODE_SPIN = 1
 The polygon shape is extruded by rotating it around the Y axis. 
Mode MODE_PATH = 2
 The polygon shape is extruded along the Path3D specified in path_node. enum PathRotation: 
PathRotation PATH_ROTATION_POLYGON = 0
 The polygon shape is not rotated. Note: Requires the path Z coordinates to continually decrease to ensure viable shapes. 
PathRotation PATH_ROTATION_PATH = 1
 The polygon shape is rotated along the path, but it is not rotated around the path axis. Note: Requires the path Z coordinates to continually decrease to ensure viable shapes. 
PathRotation PATH_ROTATION_PATH_FOLLOW = 2
 The polygon shape follows the path and its rotations around the path axis. enum PathIntervalType: 
PathIntervalType PATH_INTERVAL_DISTANCE = 0
 When mode is set to MODE_PATH, path_interval will determine the distance, in meters, each interval of the path will extrude. 
PathIntervalType PATH_INTERVAL_SUBDIVIDE = 1
 When mode is set to MODE_PATH, path_interval will subdivide the polygons along the path.   Property Descriptions 
float depth = 1.0
  void set_depth ( float value )
 
float get_depth ( )
  When mode is MODE_DEPTH, the depth of the extrusion. 
Material material  void set_material ( Material value )
 
Material get_material ( )
  Material to use for the resulting mesh. The UV maps the top half of the material to the extruded shape (U along the length of the extrusions and V around the outline of the polygon), the bottom-left quarter to the front end face, and the bottom-right quarter to the back end face. 
Mode mode = 0
  void set_mode ( Mode value )
 
Mode get_mode ( )
  The mode used to extrude the polygon. 
bool path_continuous_u  void set_path_continuous_u ( bool value )
 
bool is_path_continuous_u ( )
  When mode is MODE_PATH, by default, the top half of the material is stretched along the entire length of the extruded shape. If false the top half of the material is repeated every step of the extrusion. 
float path_interval  void set_path_interval ( float value )
 
float get_path_interval ( )
  When mode is MODE_PATH, the path interval or ratio of path points to extrusions. 
PathIntervalType path_interval_type  void set_path_interval_type ( PathIntervalType value )
 
PathIntervalType get_path_interval_type ( )
  When mode is MODE_PATH, this will determine if the interval should be by distance (PATH_INTERVAL_DISTANCE) or subdivision fractions (PATH_INTERVAL_SUBDIVIDE). 
bool path_joined  void set_path_joined ( bool value )
 
bool is_path_joined ( )
  When mode is MODE_PATH, if true the ends of the path are joined, by adding an extrusion between the last and first points of the path. 
bool path_local  void set_path_local ( bool value )
 
bool is_path_local ( )
  When mode is MODE_PATH, if true the Transform3D of the CSGPolygon3D is used as the starting point for the extrusions, not the Transform3D of the path_node. 
NodePath path_node  void set_path_node ( NodePath value )
 
NodePath get_path_node ( )
  When mode is MODE_PATH, the location of the Path3D object used to extrude the polygon. 
PathRotation path_rotation  void set_path_rotation ( PathRotation value )
 
PathRotation get_path_rotation ( )
  When mode is MODE_PATH, the PathRotation method used to rotate the polygon as it is extruded. 
float path_simplify_angle  void set_path_simplify_angle ( float value )
 
float get_path_simplify_angle ( )
  When mode is MODE_PATH, extrusions that are less than this angle, will be merged together to reduce polygon count. 
float path_u_distance  void set_path_u_distance ( float value )
 
float get_path_u_distance ( )
  When mode is MODE_PATH, this is the distance along the path, in meters, the texture coordinates will tile. When set to 0, texture coordinates will match geometry exactly with no tiling. 
PackedVector2Array polygon = PackedVector2Array(0, 0, 0, 1, 1, 1, 1, 0)
  void set_polygon ( PackedVector2Array value )
 
PackedVector2Array get_polygon ( )
  The point array that defines the 2D polygon that is extruded. This can be a convex or concave polygon with 3 or more points. The polygon must not have any intersecting edges. Otherwise, triangulation will fail and no mesh will be generated. Note: If only 1 or 2 points are defined in polygon, no mesh will be generated. 
bool smooth_faces = false
  void set_smooth_faces ( bool value )
 
bool get_smooth_faces ( )
  If true, applies smooth shading to the extrusions. 
float spin_degrees  void set_spin_degrees ( float value )
 
float get_spin_degrees ( )
  When mode is MODE_SPIN, the total number of degrees the polygon is rotated when extruding. 
int spin_sides  void set_spin_sides ( int value )
 
int get_spin_sides ( )
  When mode is MODE_SPIN, the number of extrusions made.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_csgpolygon3d.html


classes/class_voxelgi
-----------------------------------------------------------
VoxelGI Inherits: VisualInstance3D < Node3D < Node < Object Real-time global illumination (GI) probe.  Description VoxelGIs are used to provide high-quality real-time indirect light and reflections to scenes. They precompute the effect of objects that emit light and the effect of static geometry to simulate the behavior of complex light in real-time. VoxelGIs need to be baked before having a visible effect. However, once baked, dynamic objects will receive light from them. Furthermore, lights can be fully dynamic or baked. Note: VoxelGI is only supported in the Forward+ rendering method, not Mobile or Compatibility. Procedural generation: VoxelGI can be baked in an exported project, which makes it suitable for procedurally generated or user-built levels as long as all the geometry is generated in advance. For games where geometry is generated at any time during gameplay, SDFGI is more suitable (see Environment.sdfgi_enabled). Performance: VoxelGI is relatively demanding on the GPU and is not suited to low-end hardware such as integrated graphics (consider LightmapGI instead). To improve performance, adjust ProjectSettings.rendering/global_illumination/voxel_gi/quality and enable ProjectSettings.rendering/global_illumination/gi/use_half_resolution in the Project Settings. To provide a fallback for low-end hardware, consider adding an option to disable VoxelGI in your project's options menus. A VoxelGI node can be disabled by hiding it. Note: Meshes should have sufficiently thick walls to avoid light leaks (avoid one-sided walls). For interior levels, enclose your level geometry in a sufficiently large box and bridge the loops to close the mesh. To further prevent light leaks, you can also strategically place temporary MeshInstance3D nodes with their GeometryInstance3D.gi_mode set to GeometryInstance3D.GI_MODE_STATIC. These temporary nodes can then be hidden after baking the VoxelGI node.   Tutorials  Using Voxel global illumination Third Person Shooter Demo    Properties  
CameraAttributes camera_attributes   
VoxelGIData data   
Vector3 size Vector3(20, 20, 20)  
Subdiv subdiv 1     Methods  
void bake ( Node from_node=null, bool create_visual_debug=false )  
void debug_bake ( )     Enumerations enum Subdiv: 
Subdiv SUBDIV_64 = 0
 Use 64 subdivisions. This is the lowest quality setting, but the fastest. Use it if you can, but especially use it on lower-end hardware. 
Subdiv SUBDIV_128 = 1
 Use 128 subdivisions. This is the default quality setting. 
Subdiv SUBDIV_256 = 2
 Use 256 subdivisions. 
Subdiv SUBDIV_512 = 3
 Use 512 subdivisions. This is the highest quality setting, but the slowest. On lower-end hardware, this could cause the GPU to stall. 
Subdiv SUBDIV_MAX = 4
 Represents the size of the Subdiv enum.   Property Descriptions 
CameraAttributes camera_attributes  void set_camera_attributes ( CameraAttributes value )
 
CameraAttributes get_camera_attributes ( )
  The CameraAttributes resource that specifies exposure levels to bake at. Auto-exposure and non exposure properties will be ignored. Exposure settings should be used to reduce the dynamic range present when baking. If exposure is too high, the VoxelGI will have banding artifacts or may have over-exposure artifacts. 
VoxelGIData data  void set_probe_data ( VoxelGIData value )
 
VoxelGIData get_probe_data ( )
  The VoxelGIData resource that holds the data for this VoxelGI. 
Vector3 size = Vector3(20, 20, 20)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The size of the area covered by the VoxelGI. If you make the size larger without increasing the subdivisions with subdiv, the size of each cell will increase and result in lower detailed lighting. Note: Size is clamped to 1.0 unit or more on each axis. 
Subdiv subdiv = 1
  void set_subdiv ( Subdiv value )
 
Subdiv get_subdiv ( )
  Number of times to subdivide the grid that the VoxelGI operates on. A higher number results in finer detail and thus higher visual quality, while lower numbers result in better performance.   Method Descriptions void bake ( Node from_node=null, bool create_visual_debug=false ) Bakes the effect from all GeometryInstance3Ds marked with GeometryInstance3D.GI_MODE_STATIC and Light3Ds marked with either Light3D.BAKE_STATIC or Light3D.BAKE_DYNAMIC. If create_visual_debug is true, after baking the light, this will generate a MultiMesh that has a cube representing each solid cell with each cube colored to the cell's albedo color. This can be used to visualize the VoxelGI's data and debug any issues that may be occurring. Note: bake works from the editor and in exported projects. This makes it suitable for procedurally generated or user-built levels. Baking a VoxelGI node generally takes from 5 to 20 seconds in most scenes. Reducing subdiv can speed up baking. Note: GeometryInstance3Ds and Light3Ds must be fully ready before bake is called. If you are procedurally creating those and some meshes or lights are missing from your baked VoxelGI, use call_deferred("bake") instead of calling bake directly. void debug_bake ( ) Calls bake with create_visual_debug enabled.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_voxelgi.html


classes/class_label3d
-----------------------------------------------------------
Label3D Inherits: GeometryInstance3D < VisualInstance3D < Node3D < Node < Object A node for displaying plain text in 3D space.  Description A node for displaying plain text in 3D space. By adjusting various properties of this node, you can configure things such as the text's appearance and whether it always faces the camera.   Tutorials  3D text    Properties  
float alpha_antialiasing_edge 0.0  
AlphaAntiAliasing alpha_antialiasing_mode 0  
AlphaCutMode alpha_cut 0  
float alpha_hash_scale 1.0  
float alpha_scissor_threshold 0.5  
AutowrapMode autowrap_mode 0  
BillboardMode billboard 0  
ShadowCastingSetting cast_shadow 0 (overrides GeometryInstance3D)  
bool double_sided true  
bool fixed_size false  
Font font   
int font_size 32  
GIMode gi_mode 0 (overrides GeometryInstance3D)  
HorizontalAlignment horizontal_alignment 1  
BitField<JustificationFlag> justification_flags 163  
String language ""  
float line_spacing 0.0  
Color modulate Color(1, 1, 1, 1)  
bool no_depth_test false  
Vector2 offset Vector2(0, 0)  
Color outline_modulate Color(0, 0, 0, 1)  
int outline_render_priority -1  
int outline_size 12  
float pixel_size 0.005  
int render_priority 0  
bool shaded false  
StructuredTextParser structured_text_bidi_override 0  
Array structured_text_bidi_override_options []  
String text ""  
Direction text_direction 0  
TextureFilter texture_filter 3  
bool uppercase false  
VerticalAlignment vertical_alignment 1  
float width 500.0     Methods  
TriangleMesh generate_triangle_mesh ( ) const  
bool get_draw_flag ( DrawFlags flag ) const  
void set_draw_flag ( DrawFlags flag, bool enabled )     Enumerations enum DrawFlags: 
DrawFlags FLAG_SHADED = 0
 If set, lights in the environment affect the label. 
DrawFlags FLAG_DOUBLE_SIDED = 1
 If set, text can be seen from the back as well. If not, the text is invisible when looking at it from behind. 
DrawFlags FLAG_DISABLE_DEPTH_TEST = 2
 Disables the depth test, so this object is drawn on top of all others. However, objects drawn after it in the draw order may cover it. 
DrawFlags FLAG_FIXED_SIZE = 3
 Label is scaled by depth so that it always appears the same size on screen. 
DrawFlags FLAG_MAX = 4
 Represents the size of the DrawFlags enum. enum AlphaCutMode: 
AlphaCutMode ALPHA_CUT_DISABLED = 0
 This mode performs standard alpha blending. It can display translucent areas, but transparency sorting issues may be visible when multiple transparent materials are overlapping. GeometryInstance3D.cast_shadow has no effect when this transparency mode is used; the Label3D will never cast shadows. 
AlphaCutMode ALPHA_CUT_DISCARD = 1
 This mode only allows fully transparent or fully opaque pixels. Harsh edges will be visible unless some form of screen-space antialiasing is enabled (see ProjectSettings.rendering/anti_aliasing/quality/screen_space_aa). This mode is also known as alpha testing or 1-bit transparency. Note: This mode might have issues with anti-aliased fonts and outlines, try adjusting alpha_scissor_threshold or using MSDF font. Note: When using text with overlapping glyphs (e.g., cursive scripts), this mode might have transparency sorting issues between the main text and the outline. 
AlphaCutMode ALPHA_CUT_OPAQUE_PREPASS = 2
 This mode draws fully opaque pixels in the depth prepass. This is slower than ALPHA_CUT_DISABLED or ALPHA_CUT_DISCARD, but it allows displaying translucent areas and smooth edges while using proper sorting. Note: When using text with overlapping glyphs (e.g., cursive scripts), this mode might have transparency sorting issues between the main text and the outline. 
AlphaCutMode ALPHA_CUT_HASH = 3
 This mode draws cuts off all values below a spatially-deterministic threshold, the rest will remain opaque.   Property Descriptions 
float alpha_antialiasing_edge = 0.0
  void set_alpha_antialiasing_edge ( float value )
 
float get_alpha_antialiasing_edge ( )
  Threshold at which antialiasing will be applied on the alpha channel. 
AlphaAntiAliasing alpha_antialiasing_mode = 0
  void set_alpha_antialiasing ( AlphaAntiAliasing value )
 
AlphaAntiAliasing get_alpha_antialiasing ( )
  The type of alpha antialiasing to apply. See AlphaAntiAliasing. 
AlphaCutMode alpha_cut = 0
  void set_alpha_cut_mode ( AlphaCutMode value )
 
AlphaCutMode get_alpha_cut_mode ( )
  The alpha cutting mode to use for the sprite. See AlphaCutMode for possible values. 
float alpha_hash_scale = 1.0
  void set_alpha_hash_scale ( float value )
 
float get_alpha_hash_scale ( )
  The hashing scale for Alpha Hash. Recommended values between 0 and 2. 
float alpha_scissor_threshold = 0.5
  void set_alpha_scissor_threshold ( float value )
 
float get_alpha_scissor_threshold ( )
  Threshold at which the alpha scissor will discard values. 
AutowrapMode autowrap_mode = 0
  void set_autowrap_mode ( AutowrapMode value )
 
AutowrapMode get_autowrap_mode ( )
  If set to something other than TextServer.AUTOWRAP_OFF, the text gets wrapped inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text. To see how each mode behaves, see AutowrapMode. 
BillboardMode billboard = 0
  void set_billboard_mode ( BillboardMode value )
 
BillboardMode get_billboard_mode ( )
  The billboard mode to use for the label. See BillboardMode for possible values. 
bool double_sided = true
  void set_draw_flag ( DrawFlags flag, bool enabled )
 
bool get_draw_flag ( DrawFlags flag ) const
  If true, text can be seen from the back as well, if false, it is invisible when looking at it from behind. 
bool fixed_size = false
  void set_draw_flag ( DrawFlags flag, bool enabled )
 
bool get_draw_flag ( DrawFlags flag ) const
  If true, the label is rendered at the same size regardless of distance. 
Font font  void set_font ( Font value )
 
Font get_font ( )
  Font configuration used to display text. 
int font_size = 32
  void set_font_size ( int value )
 
int get_font_size ( )
  Font size of the Label3D's text. To make the font look more detailed when up close, increase font_size while decreasing pixel_size at the same time. Higher font sizes require more time to render new characters, which can cause stuttering during gameplay. 
HorizontalAlignment horizontal_alignment = 1
  void set_horizontal_alignment ( HorizontalAlignment value )
 
HorizontalAlignment get_horizontal_alignment ( )
  Controls the text's horizontal alignment. Supports left, center, right, and fill, or justify. Set it to one of the HorizontalAlignment constants. 
BitField<JustificationFlag> justification_flags = 163
  void set_justification_flags ( BitField<JustificationFlag> value )
 
BitField<JustificationFlag> get_justification_flags ( )
  Line fill alignment rules. For more info see JustificationFlag. 
String language = ""
  void set_language ( String value )
 
String get_language ( )
  Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead. 
float line_spacing = 0.0
  void set_line_spacing ( float value )
 
float get_line_spacing ( )
  Vertical space between lines in multiline Label3D. 
Color modulate = Color(1, 1, 1, 1)
  void set_modulate ( Color value )
 
Color get_modulate ( )
  Text Color of the Label3D. 
bool no_depth_test = false
  void set_draw_flag ( DrawFlags flag, bool enabled )
 
bool get_draw_flag ( DrawFlags flag ) const
  If true, depth testing is disabled and the object will be drawn in render order. 
Vector2 offset = Vector2(0, 0)
  void set_offset ( Vector2 value )
 
Vector2 get_offset ( )
  The text drawing offset (in pixels). 
Color outline_modulate = Color(0, 0, 0, 1)
  void set_outline_modulate ( Color value )
 
Color get_outline_modulate ( )
  The tint of text outline. 
int outline_render_priority = -1
  void set_outline_render_priority ( int value )
 
int get_outline_render_priority ( )
  Sets the render priority for the text outline. Higher priority objects will be sorted in front of lower priority objects. Note: This only applies if alpha_cut is set to ALPHA_CUT_DISABLED (default value). Note: This only applies to sorting of transparent objects. This will not impact how transparent objects are sorted relative to opaque objects. This is because opaque objects are not sorted, while transparent objects are sorted from back to front (subject to priority). 
int outline_size = 12
  void set_outline_size ( int value )
 
int get_outline_size ( )
  Text outline size. 
float pixel_size = 0.005
  void set_pixel_size ( float value )
 
float get_pixel_size ( )
  The size of one pixel's width on the label to scale it in 3D. To make the font look more detailed when up close, increase font_size while decreasing pixel_size at the same time. 
int render_priority = 0
  void set_render_priority ( int value )
 
int get_render_priority ( )
  Sets the render priority for the text. Higher priority objects will be sorted in front of lower priority objects. Note: This only applies if alpha_cut is set to ALPHA_CUT_DISABLED (default value). Note: This only applies to sorting of transparent objects. This will not impact how transparent objects are sorted relative to opaque objects. This is because opaque objects are not sorted, while transparent objects are sorted from back to front (subject to priority). 
bool shaded = false
  void set_draw_flag ( DrawFlags flag, bool enabled )
 
bool get_draw_flag ( DrawFlags flag ) const
  If true, the Light3D in the Environment has effects on the label. 
StructuredTextParser structured_text_bidi_override = 0
  void set_structured_text_bidi_override ( StructuredTextParser value )
 
StructuredTextParser get_structured_text_bidi_override ( )
  Set BiDi algorithm override for the structured text. 
Array structured_text_bidi_override_options = []
  void set_structured_text_bidi_override_options ( Array value )
 
Array get_structured_text_bidi_override_options ( )
  Set additional options for BiDi override. 
String text = ""
  void set_text ( String value )
 
String get_text ( )
  The text to display on screen. 
Direction text_direction = 0
  void set_text_direction ( Direction value )
 
Direction get_text_direction ( )
  Base text writing direction. 
TextureFilter texture_filter = 3
  void set_texture_filter ( TextureFilter value )
 
TextureFilter get_texture_filter ( )
  Filter flags for the texture. See TextureFilter for options. 
bool uppercase = false
  void set_uppercase ( bool value )
 
bool is_uppercase ( )
  If true, all the text displays as UPPERCASE. 
VerticalAlignment vertical_alignment = 1
  void set_vertical_alignment ( VerticalAlignment value )
 
VerticalAlignment get_vertical_alignment ( )
  Controls the text's vertical alignment. Supports top, center, bottom. Set it to one of the VerticalAlignment constants. 
float width = 500.0
  void set_width ( float value )
 
float get_width ( )
  Text width (in pixels), used for autowrap and fill alignment.   Method Descriptions 
TriangleMesh generate_triangle_mesh ( ) const
 Returns a TriangleMesh with the label's vertices following its current configuration (such as its pixel_size). 
bool get_draw_flag ( DrawFlags flag ) const
 Returns the value of the specified flag. void set_draw_flag ( DrawFlags flag, bool enabled ) If true, the specified flag will be enabled. See DrawFlags for a list of flags.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_label3d.html


classes/class_audiostreamgenerator
-----------------------------------------------------------
AudioStreamGenerator Inherits: AudioStream < Resource < RefCounted < Object An audio stream with utilities for procedural sound generation.  Description AudioStreamGenerator is a type of audio stream that does not play back sounds on its own; instead, it expects a script to generate audio data for it. See also AudioStreamGeneratorPlayback. Here's a sample on how to use it to generate a sine wave:  GDScriptvar playback # Will hold the AudioStreamGeneratorPlayback.
@onready var sample_hz = $AudioStreamPlayer.stream.mix_rate
var pulse_hz = 440.0 # The frequency of the sound wave.
func _ready():
    $AudioStreamPlayer.play()
    playback = $AudioStreamPlayer.get_stream_playback()
    fill_buffer()
func fill_buffer():
    var phase = 0.0
    var increment = pulse_hz / sample_hz
    var frames_available = playback.get_frames_available()
    for i in range(frames_available):
        playback.push_frame(Vector2.ONE * sin(phase * TAU))
        phase = fmod(phase + increment, 1.0)
 C#[Export] public AudioStreamPlayer Player { get; set; }
private AudioStreamGeneratorPlayback _playback; // Will hold the AudioStreamGeneratorPlayback.
private float _sampleHz;
private float _pulseHz = 440.0f; // The frequency of the sound wave.
public override void _Ready()
{
    if (Player.Stream is AudioStreamGenerator generator) // Type as a generator to access MixRate.
    {
        _sampleHz = generator.MixRate;
        Player.Play();
        _playback = (AudioStreamGeneratorPlayback)Player.GetStreamPlayback();
        FillBuffer();
    }
}
public void FillBuffer()
{
    double phase = 0.0;
    float increment = _pulseHz / _sampleHz;
    int framesAvailable = _playback.GetFramesAvailable();
    for (int i = 0; i < framesAvailable; i++)
    {
        _playback.PushFrame(Vector2.One * (float)Mathf.Sin(phase * Mathf.Tau));
        phase = Mathf.PosMod(phase + increment, 1.0);
    }
}
  In the example above, the "AudioStreamPlayer" node must use an AudioStreamGenerator as its stream. The fill_buffer function provides audio data for approximating a sine wave. See also AudioEffectSpectrumAnalyzer for performing real-time audio spectrum analysis. Note: Due to performance constraints, this class is best used from C# or from a compiled language via GDExtension. If you still want to use this class from GDScript, consider using a lower mix_rate such as 11,025 Hz or 22,050 Hz.   Tutorials  Audio Generator Demo    Properties  
float buffer_length 0.5  
float mix_rate 44100.0     Property Descriptions 
float buffer_length = 0.5
  void set_buffer_length ( float value )
 
float get_buffer_length ( )
  The length of the buffer to generate (in seconds). Lower values result in less latency, but require the script to generate audio data faster, resulting in increased CPU usage and more risk for audio cracking if the CPU can't keep up. 
float mix_rate = 44100.0
  void set_mix_rate ( float value )
 
float get_mix_rate ( )
  The sample rate to use (in Hz). Higher values are more demanding for the CPU to generate, but result in better quality. In games, common sample rates in use are 11025, 16000, 22050, 32000, 44100, and 48000. According to the Nyquist-Shannon sampling theorem, there is no quality difference to human hearing when going past 40,000 Hz (since most humans can only hear up to ~20,000 Hz, often less). If you are generating lower-pitched sounds such as voices, lower sample rates such as 32000 or 22050 may be usable with no loss in quality.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiostreamgenerator.html


classes/class_label
-----------------------------------------------------------
Label Inherits: Control < CanvasItem < Node < Object A control for displaying plain text.  Description A control for displaying plain text. It gives you control over the horizontal and vertical alignment and can wrap the text inside the node's bounding rectangle. It doesn't support bold, italics, or other rich text formatting. For that, use RichTextLabel instead.   Tutorials  2D Dodge The Creeps Demo    Properties  
AutowrapMode autowrap_mode 0  
bool clip_text false  
HorizontalAlignment horizontal_alignment 0  
BitField<JustificationFlag> justification_flags 163  
LabelSettings label_settings   
String language ""  
int lines_skipped 0  
int max_lines_visible -1  
MouseFilter mouse_filter 2 (overrides Control)  
BitField<SizeFlags> size_flags_vertical 4 (overrides Control)  
StructuredTextParser structured_text_bidi_override 0  
Array structured_text_bidi_override_options []  
PackedFloat32Array tab_stops PackedFloat32Array()  
String text ""  
TextDirection text_direction 0  
OverrunBehavior text_overrun_behavior 0  
bool uppercase false  
VerticalAlignment vertical_alignment 0  
int visible_characters -1  
VisibleCharactersBehavior visible_characters_behavior 0  
float visible_ratio 1.0     Methods  
int get_line_count ( ) const  
int get_line_height ( int line=-1 ) const  
int get_total_character_count ( ) const  
int get_visible_line_count ( ) const     Theme Properties  
Color font_color Color(1, 1, 1, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
Color font_shadow_color Color(0, 0, 0, 0)  
int line_spacing 3  
int outline_size 0  
int shadow_offset_x 1  
int shadow_offset_y 1  
int shadow_outline_size 1  
Font font   
int font_size   
StyleBox normal      Property Descriptions 
AutowrapMode autowrap_mode = 0
  void set_autowrap_mode ( AutowrapMode value )
 
AutowrapMode get_autowrap_mode ( )
  If set to something other than TextServer.AUTOWRAP_OFF, the text gets wrapped inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text. To see how each mode behaves, see AutowrapMode. 
bool clip_text = false
  void set_clip_text ( bool value )
 
bool is_clipping_text ( )
  If true, the Label only shows the text that fits inside its bounding rectangle and will clip text horizontally. 
HorizontalAlignment horizontal_alignment = 0
  void set_horizontal_alignment ( HorizontalAlignment value )
 
HorizontalAlignment get_horizontal_alignment ( )
  Controls the text's horizontal alignment. Supports left, center, right, and fill, or justify. Set it to one of the HorizontalAlignment constants. 
BitField<JustificationFlag> justification_flags = 163
  void set_justification_flags ( BitField<JustificationFlag> value )
 
BitField<JustificationFlag> get_justification_flags ( )
  Line fill alignment rules. For more info see JustificationFlag. 
LabelSettings label_settings  void set_label_settings ( LabelSettings value )
 
LabelSettings get_label_settings ( )
  A LabelSettings resource that can be shared between multiple Label nodes. Takes priority over theme properties. 
String language = ""
  void set_language ( String value )
 
String get_language ( )
  Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead. 
int lines_skipped = 0
  void set_lines_skipped ( int value )
 
int get_lines_skipped ( )
  The number of the lines ignored and not displayed from the start of the text value. 
int max_lines_visible = -1
  void set_max_lines_visible ( int value )
 
int get_max_lines_visible ( )
  Limits the lines of text the node shows on screen. 
StructuredTextParser structured_text_bidi_override = 0
  void set_structured_text_bidi_override ( StructuredTextParser value )
 
StructuredTextParser get_structured_text_bidi_override ( )
  Set BiDi algorithm override for the structured text. 
Array structured_text_bidi_override_options = []
  void set_structured_text_bidi_override_options ( Array value )
 
Array get_structured_text_bidi_override_options ( )
  Set additional options for BiDi override. 
PackedFloat32Array tab_stops = PackedFloat32Array()
  void set_tab_stops ( PackedFloat32Array value )
 
PackedFloat32Array get_tab_stops ( )
  Aligns text to the given tab-stops. 
String text = ""
  void set_text ( String value )
 
String get_text ( )
  The text to display on screen. 
TextDirection text_direction = 0
  void set_text_direction ( TextDirection value )
 
TextDirection get_text_direction ( )
  Base text writing direction. 
OverrunBehavior text_overrun_behavior = 0
  void set_text_overrun_behavior ( OverrunBehavior value )
 
OverrunBehavior get_text_overrun_behavior ( )
  Sets the clipping behavior when the text exceeds the node's bounding rectangle. See OverrunBehavior for a description of all modes. 
bool uppercase = false
  void set_uppercase ( bool value )
 
bool is_uppercase ( )
  If true, all the text displays as UPPERCASE. 
VerticalAlignment vertical_alignment = 0
  void set_vertical_alignment ( VerticalAlignment value )
 
VerticalAlignment get_vertical_alignment ( )
  Controls the text's vertical alignment. Supports top, center, bottom, and fill. Set it to one of the VerticalAlignment constants. 
int visible_characters = -1
  void set_visible_characters ( int value )
 
int get_visible_characters ( )
  The number of characters to display. If set to -1, all characters are displayed. This can be useful when animating the text appearing in a dialog box. Note: Setting this property updates visible_ratio accordingly. 
VisibleCharactersBehavior visible_characters_behavior = 0
  void set_visible_characters_behavior ( VisibleCharactersBehavior value )
 
VisibleCharactersBehavior get_visible_characters_behavior ( )
  Sets the clipping behavior when visible_characters or visible_ratio is set. See VisibleCharactersBehavior for more info. 
float visible_ratio = 1.0
  void set_visible_ratio ( float value )
 
float get_visible_ratio ( )
  The fraction of characters to display, relative to the total number of characters (see get_total_character_count). If set to 1.0, all characters are displayed. If set to 0.5, only half of the characters will be displayed. This can be useful when animating the text appearing in a dialog box. Note: Setting this property updates visible_characters accordingly.   Method Descriptions 
int get_line_count ( ) const
 Returns the number of lines of text the Label has. 
int get_line_height ( int line=-1 ) const
 Returns the height of the line line. If line is set to -1, returns the biggest line height. If there are no lines, returns font size in pixels. 
int get_total_character_count ( ) const
 Returns the total number of printable characters in the text (excluding spaces and newlines). 
int get_visible_line_count ( ) const
 Returns the number of lines shown. Useful if the Label's height cannot currently display all lines.   Theme Property Descriptions 
Color font_color = Color(1, 1, 1, 1)
 Default text Color of the Label. 
Color font_outline_color = Color(1, 1, 1, 1)
 The color of text outline. 
Color font_shadow_color = Color(0, 0, 0, 0)
 Color of the text's shadow effect. 
int line_spacing = 3
 Vertical space between lines in multiline Label. 
int outline_size = 0
 Text outline size. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. Note: Using a value that is larger than half the font size is not recommended, as the font outline may fail to be fully closed in this case. 
int shadow_offset_x = 1
 The horizontal offset of the text's shadow. 
int shadow_offset_y = 1
 The vertical offset of the text's shadow. 
int shadow_outline_size = 1
 The size of the shadow outline. 
Font font Font used for the Label's text. 
int font_size Font size of the Label's text. 
StyleBox normal Background StyleBox for the Label.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_label.html


classes/class_editornode3dgizmoplugin
-----------------------------------------------------------
EditorNode3DGizmoPlugin Inherits: Resource < RefCounted < Object A class used by the editor to define Node3D gizmo types.  Description EditorNode3DGizmoPlugin allows you to define a new type of Gizmo. There are two main ways to do so: extending EditorNode3DGizmoPlugin for the simpler gizmos, or creating a new EditorNode3DGizmo type. See the tutorial in the documentation for more info. To use EditorNode3DGizmoPlugin, register it using the EditorPlugin.add_node_3d_gizmo_plugin method first.   Tutorials  Node3D gizmo plugins    Methods  
void _begin_handle_action ( EditorNode3DGizmo gizmo, int handle_id, bool secondary ) virtual  
bool _can_be_hidden ( ) virtual const  
void _commit_handle ( EditorNode3DGizmo gizmo, int handle_id, bool secondary, Variant restore, bool cancel ) virtual  
void _commit_subgizmos ( EditorNode3DGizmo gizmo, PackedInt32Array ids, Transform3D[] restores, bool cancel ) virtual  
EditorNode3DGizmo _create_gizmo ( Node3D for_node_3d ) virtual const  
String _get_gizmo_name ( ) virtual const  
String _get_handle_name ( EditorNode3DGizmo gizmo, int handle_id, bool secondary ) virtual const  
Variant _get_handle_value ( EditorNode3DGizmo gizmo, int handle_id, bool secondary ) virtual const  
int _get_priority ( ) virtual const  
Transform3D _get_subgizmo_transform ( EditorNode3DGizmo gizmo, int subgizmo_id ) virtual const  
bool _has_gizmo ( Node3D for_node_3d ) virtual const  
bool _is_handle_highlighted ( EditorNode3DGizmo gizmo, int handle_id, bool secondary ) virtual const  
bool _is_selectable_when_hidden ( ) virtual const  
void _redraw ( EditorNode3DGizmo gizmo ) virtual  
void _set_handle ( EditorNode3DGizmo gizmo, int handle_id, bool secondary, Camera3D camera, Vector2 screen_pos ) virtual  
void _set_subgizmo_transform ( EditorNode3DGizmo gizmo, int subgizmo_id, Transform3D transform ) virtual  
PackedInt32Array _subgizmos_intersect_frustum ( EditorNode3DGizmo gizmo, Camera3D camera, Plane[] frustum_planes ) virtual const  
int _subgizmos_intersect_ray ( EditorNode3DGizmo gizmo, Camera3D camera, Vector2 screen_pos ) virtual const  
void add_material ( String name, StandardMaterial3D material )  
void create_handle_material ( String name, bool billboard=false, Texture2D texture=null )  
void create_icon_material ( String name, Texture2D texture, bool on_top=false, Color color=Color(1, 1, 1, 1) )  
void create_material ( String name, Color color, bool billboard=false, bool on_top=false, bool use_vertex_color=false )  
StandardMaterial3D get_material ( String name, EditorNode3DGizmo gizmo=null )     Method Descriptions void _begin_handle_action ( EditorNode3DGizmo gizmo, int handle_id, bool secondary ) virtual
  There is currently no description for this method. Please help us by contributing one!  
bool _can_be_hidden ( ) virtual const
 Override this method to define whether the gizmos handled by this plugin can be hidden or not. Returns true if not overridden. void _commit_handle ( EditorNode3DGizmo gizmo, int handle_id, bool secondary, Variant restore, bool cancel ) virtual
 Override this method to commit a handle being edited (handles must have been previously added by EditorNode3DGizmo.add_handles during _redraw). This usually means creating an UndoRedo action for the change, using the current handle value as "do" and the restore argument as "undo". If the cancel argument is true, the restore value should be directly set, without any UndoRedo action. The secondary argument is true when the committed handle is secondary (see EditorNode3DGizmo.add_handles for more information). Called for this plugin's active gizmos. void _commit_subgizmos ( EditorNode3DGizmo gizmo, PackedInt32Array ids, Transform3D[] restores, bool cancel ) virtual
 Override this method to commit a group of subgizmos being edited (see _subgizmos_intersect_ray and _subgizmos_intersect_frustum). This usually means creating an UndoRedo action for the change, using the current transforms as "do" and the restores transforms as "undo". If the cancel argument is true, the restores transforms should be directly set, without any UndoRedo action. As with all subgizmo methods, transforms are given in local space respect to the gizmo's Node3D. Called for this plugin's active gizmos. 
EditorNode3DGizmo _create_gizmo ( Node3D for_node_3d ) virtual const
 Override this method to return a custom EditorNode3DGizmo for the spatial nodes of your choice, return null for the rest of nodes. See also _has_gizmo. 
String _get_gizmo_name ( ) virtual const
 Override this method to provide the name that will appear in the gizmo visibility menu. 
String _get_handle_name ( EditorNode3DGizmo gizmo, int handle_id, bool secondary ) virtual const
 Override this method to provide gizmo's handle names. The secondary argument is true when the requested handle is secondary (see EditorNode3DGizmo.add_handles for more information). Called for this plugin's active gizmos. 
Variant _get_handle_value ( EditorNode3DGizmo gizmo, int handle_id, bool secondary ) virtual const
 Override this method to return the current value of a handle. This value will be requested at the start of an edit and used as the restore argument in _commit_handle. The secondary argument is true when the requested handle is secondary (see EditorNode3DGizmo.add_handles for more information). Called for this plugin's active gizmos. 
int _get_priority ( ) virtual const
 Override this method to set the gizmo's priority. Gizmos with higher priority will have precedence when processing inputs like handles or subgizmos selection. All built-in editor gizmos return a priority of -1. If not overridden, this method will return 0, which means custom gizmos will automatically get higher priority than built-in gizmos. 
Transform3D _get_subgizmo_transform ( EditorNode3DGizmo gizmo, int subgizmo_id ) virtual const
 Override this method to return the current transform of a subgizmo. As with all subgizmo methods, the transform should be in local space respect to the gizmo's Node3D. This transform will be requested at the start of an edit and used in the restore argument in _commit_subgizmos. Called for this plugin's active gizmos. 
bool _has_gizmo ( Node3D for_node_3d ) virtual const
 Override this method to define which Node3D nodes have a gizmo from this plugin. Whenever a Node3D node is added to a scene this method is called, if it returns true the node gets a generic EditorNode3DGizmo assigned and is added to this plugin's list of active gizmos. 
bool _is_handle_highlighted ( EditorNode3DGizmo gizmo, int handle_id, bool secondary ) virtual const
 Override this method to return true whenever to given handle should be highlighted in the editor. The secondary argument is true when the requested handle is secondary (see EditorNode3DGizmo.add_handles for more information). Called for this plugin's active gizmos. 
bool _is_selectable_when_hidden ( ) virtual const
 Override this method to define whether Node3D with this gizmo should be selectable even when the gizmo is hidden. void _redraw ( EditorNode3DGizmo gizmo ) virtual
 Override this method to add all the gizmo elements whenever a gizmo update is requested. It's common to call EditorNode3DGizmo.clear at the beginning of this method and then add visual elements depending on the node's properties. void _set_handle ( EditorNode3DGizmo gizmo, int handle_id, bool secondary, Camera3D camera, Vector2 screen_pos ) virtual
 Override this method to update the node's properties when the user drags a gizmo handle (previously added with EditorNode3DGizmo.add_handles). The provided screen_pos is the mouse position in screen coordinates and the camera can be used to convert it to raycasts. The secondary argument is true when the edited handle is secondary (see EditorNode3DGizmo.add_handles for more information). Called for this plugin's active gizmos. void _set_subgizmo_transform ( EditorNode3DGizmo gizmo, int subgizmo_id, Transform3D transform ) virtual
 Override this method to update the node properties during subgizmo editing (see _subgizmos_intersect_ray and _subgizmos_intersect_frustum). The transform is given in the Node3D's local coordinate system. Called for this plugin's active gizmos. 
PackedInt32Array _subgizmos_intersect_frustum ( EditorNode3DGizmo gizmo, Camera3D camera, Plane[] frustum_planes ) virtual const
 Override this method to allow selecting subgizmos using mouse drag box selection. Given a camera and frustum_planes, this method should return which subgizmos are contained within the frustums. The frustum_planes argument consists of an array with all the Planes that make up the selection frustum. The returned value should contain a list of unique subgizmo identifiers, these identifiers can have any non-negative value and will be used in other virtual methods like _get_subgizmo_transform or _commit_subgizmos. Called for this plugin's active gizmos. 
int _subgizmos_intersect_ray ( EditorNode3DGizmo gizmo, Camera3D camera, Vector2 screen_pos ) virtual const
 Override this method to allow selecting subgizmos using mouse clicks. Given a camera and a screen_pos in screen coordinates, this method should return which subgizmo should be selected. The returned value should be a unique subgizmo identifier, which can have any non-negative value and will be used in other virtual methods like _get_subgizmo_transform or _commit_subgizmos. Called for this plugin's active gizmos. void add_material ( String name, StandardMaterial3D material ) Adds a new material to the internal material list for the plugin. It can then be accessed with get_material. Should not be overridden. void create_handle_material ( String name, bool billboard=false, Texture2D texture=null ) Creates a handle material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with get_material and used in EditorNode3DGizmo.add_handles. Should not be overridden. You can optionally provide a texture to use instead of the default icon. void create_icon_material ( String name, Texture2D texture, bool on_top=false, Color color=Color(1, 1, 1, 1) ) Creates an icon material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with get_material and used in EditorNode3DGizmo.add_unscaled_billboard. Should not be overridden. void create_material ( String name, Color color, bool billboard=false, bool on_top=false, bool use_vertex_color=false ) Creates an unshaded material with its variants (selected and/or editable) and adds them to the internal material list. They can then be accessed with get_material and used in EditorNode3DGizmo.add_mesh and EditorNode3DGizmo.add_lines. Should not be overridden. 
StandardMaterial3D get_material ( String name, EditorNode3DGizmo gizmo=null ) Gets material from the internal list of materials. If an EditorNode3DGizmo is provided, it will try to get the corresponding variant (selected and/or editable).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editornode3dgizmoplugin.html


classes/class_animatedtexture
-----------------------------------------------------------
AnimatedTexture Inherits: Texture2D < Texture < Resource < RefCounted < Object Proxy texture for simple frame-based animations.  Description AnimatedTexture is a resource format for frame-based animations, where multiple textures can be chained automatically with a predefined delay for each frame. Unlike AnimationPlayer or AnimatedSprite2D, it isn't a Node, but has the advantage of being usable anywhere a Texture2D resource can be used, e.g. in a TileSet. The playback of the animation is controlled by the speed_scale property, as well as each frame's duration (see set_frame_duration). The animation loops, i.e. it will restart at frame 0 automatically after playing the last frame. AnimatedTexture currently requires all frame textures to have the same size, otherwise the bigger ones will be cropped to match the smallest one. Note: AnimatedTexture doesn't support using AtlasTextures. Each frame needs to be a separate Texture2D. Warning: The current implementation is not efficient for the modern renderers. Deprecated. This class is deprecated, and might be removed in a future release.   Properties  
int current_frame   
int frames 1  
bool one_shot false  
bool pause false  
bool resource_local_to_scene false (overrides Resource)  
float speed_scale 1.0     Methods  
float get_frame_duration ( int frame ) const  
Texture2D get_frame_texture ( int frame ) const  
void set_frame_duration ( int frame, float duration )  
void set_frame_texture ( int frame, Texture2D texture )     Constants MAX_FRAMES = 256
 The maximum number of frames supported by AnimatedTexture. If you need more frames in your animation, use AnimationPlayer or AnimatedSprite2D.   Property Descriptions 
int current_frame  void set_current_frame ( int value )
 
int get_current_frame ( )
  Sets the currently visible frame of the texture. Setting this frame while playing resets the current frame time, so the newly selected frame plays for its whole configured frame duration. 
int frames = 1
  void set_frames ( int value )
 
int get_frames ( )
  Number of frames to use in the animation. While you can create the frames independently with set_frame_texture, you need to set this value for the animation to take new frames into account. The maximum number of frames is MAX_FRAMES. 
bool one_shot = false
  void set_one_shot ( bool value )
 
bool get_one_shot ( )
  If true, the animation will only play once and will not loop back to the first frame after reaching the end. Note that reaching the end will not set pause to true. 
bool pause = false
  void set_pause ( bool value )
 
bool get_pause ( )
  If true, the animation will pause where it currently is (i.e. at current_frame). The animation will continue from where it was paused when changing this property to false. 
float speed_scale = 1.0
  void set_speed_scale ( float value )
 
float get_speed_scale ( )
  The animation speed is multiplied by this value. If set to a negative value, the animation is played in reverse.   Method Descriptions 
float get_frame_duration ( int frame ) const
 Returns the given frame's duration, in seconds. 
Texture2D get_frame_texture ( int frame ) const
 Returns the given frame's Texture2D. void set_frame_duration ( int frame, float duration ) Sets the duration of any given frame. The final duration is affected by the speed_scale. If set to 0, the frame is skipped during playback. void set_frame_texture ( int frame, Texture2D texture ) Assigns a Texture2D to the given frame. Frame IDs start at 0, so the first frame has ID 0, and the last frame of the animation has ID frames - 1. You can define any number of textures up to MAX_FRAMES, but keep in mind that only frames from 0 to frames - 1 will be part of the animation.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animatedtexture.html


classes/class_colorpicker
-----------------------------------------------------------
ColorPicker Inherits: VBoxContainer < BoxContainer < Container < Control < CanvasItem < Node < Object A widget that provides an interface for selecting or modifying a color.  Description A widget that provides an interface for selecting or modifying a color. It can optionally provide functionalities like a color sampler (eyedropper), color modes, and presets. Note: This control is the color picker widget itself. You can use a ColorPickerButton instead if you need a button that brings up a ColorPicker in a popup.   Tutorials  Tween Demo    Properties  
bool can_add_swatches true  
Color color Color(1, 1, 1, 1)  
ColorModeType color_mode 0  
bool color_modes_visible true  
bool deferred_mode false  
bool edit_alpha true  
bool hex_visible true  
PickerShapeType picker_shape 0  
bool presets_visible true  
bool sampler_visible true  
bool sliders_visible true     Methods  
void add_preset ( Color color )  
void add_recent_preset ( Color color )  
void erase_preset ( Color color )  
void erase_recent_preset ( Color color )  
PackedColorArray get_presets ( ) const  
PackedColorArray get_recent_presets ( ) const     Theme Properties  
int center_slider_grabbers 1  
int h_width 30  
int label_width 10  
int margin 4  
int sv_height 256  
int sv_width 256  
Texture2D add_preset   
Texture2D bar_arrow   
Texture2D color_hue   
Texture2D color_okhsl_hue   
Texture2D expanded_arrow   
Texture2D folded_arrow   
Texture2D overbright_indicator   
Texture2D picker_cursor   
Texture2D sample_bg   
Texture2D screen_picker   
Texture2D shape_circle   
Texture2D shape_rect   
Texture2D shape_rect_wheel      Signals color_changed ( Color color ) Emitted when the color is changed. preset_added ( Color color ) Emitted when a preset is added. preset_removed ( Color color ) Emitted when a preset is removed.   Enumerations enum ColorModeType: 
ColorModeType MODE_RGB = 0
 Allows editing the color with Red/Green/Blue sliders. 
ColorModeType MODE_HSV = 1
 Allows editing the color with Hue/Saturation/Value sliders. 
ColorModeType MODE_RAW = 2
 Allows the color R, G, B component values to go beyond 1.0, which can be used for certain special operations that require it (like tinting without darkening or rendering sprites in HDR). 
ColorModeType MODE_OKHSL = 3
 Allows editing the color with Hue/Saturation/Lightness sliders. OKHSL is a new color space similar to HSL but that better match perception by leveraging the Oklab color space which is designed to be simple to use, while doing a good job at predicting perceived lightness, chroma and hue. Okhsv and Okhsl color spaces enum PickerShapeType: 
PickerShapeType SHAPE_HSV_RECTANGLE = 0
 HSV Color Model rectangle color space. 
PickerShapeType SHAPE_HSV_WHEEL = 1
 HSV Color Model rectangle color space with a wheel. 
PickerShapeType SHAPE_VHS_CIRCLE = 2
 HSV Color Model circle color space. Use Saturation as a radius. 
PickerShapeType SHAPE_OKHSL_CIRCLE = 3
 HSL OK Color Model circle color space. 
PickerShapeType SHAPE_NONE = 4
 The color space shape and the shape select button are hidden. Can't be selected from the shapes popup.   Property Descriptions 
bool can_add_swatches = true
  void set_can_add_swatches ( bool value )
 
bool are_swatches_enabled ( )
  If true, it's possible to add presets under Swatches. If false, the button to add presets is disabled. 
Color color = Color(1, 1, 1, 1)
  void set_pick_color ( Color value )
 
Color get_pick_color ( )
  The currently selected color. 
ColorModeType color_mode = 0
  void set_color_mode ( ColorModeType value )
 
ColorModeType get_color_mode ( )
  The currently selected color mode. See ColorModeType. 
bool color_modes_visible = true
  void set_modes_visible ( bool value )
 
bool are_modes_visible ( )
  If true, the color mode buttons are visible. 
bool deferred_mode = false
  void set_deferred_mode ( bool value )
 
bool is_deferred_mode ( )
  If true, the color will apply only after the user releases the mouse button, otherwise it will apply immediately even in mouse motion event (which can cause performance issues). 
bool edit_alpha = true
  void set_edit_alpha ( bool value )
 
bool is_editing_alpha ( )
  If true, shows an alpha channel slider (opacity). 
bool hex_visible = true
  void set_hex_visible ( bool value )
 
bool is_hex_visible ( )
  If true, the hex color code input field is visible. 
PickerShapeType picker_shape = 0
  void set_picker_shape ( PickerShapeType value )
 
PickerShapeType get_picker_shape ( )
  The shape of the color space view. See PickerShapeType. 
bool presets_visible = true
  void set_presets_visible ( bool value )
 
bool are_presets_visible ( )
  If true, the Swatches and Recent Colors presets are visible. 
bool sampler_visible = true
  void set_sampler_visible ( bool value )
 
bool is_sampler_visible ( )
  If true, the color sampler and color preview are visible. 
bool sliders_visible = true
  void set_sliders_visible ( bool value )
 
bool are_sliders_visible ( )
  If true, the color sliders are visible.   Method Descriptions void add_preset ( Color color ) Adds the given color to a list of color presets. The presets are displayed in the color picker and the user will be able to select them. Note: The presets list is only for this color picker. void add_recent_preset ( Color color ) Adds the given color to a list of color recent presets so that it can be picked later. Recent presets are the colors that were picked recently, a new preset is automatically created and added to recent presets when you pick a new color. Note: The recent presets list is only for this color picker. void erase_preset ( Color color ) Removes the given color from the list of color presets of this color picker. void erase_recent_preset ( Color color ) Removes the given color from the list of color recent presets of this color picker. 
PackedColorArray get_presets ( ) const
 Returns the list of colors in the presets of the color picker. 
PackedColorArray get_recent_presets ( ) const
 Returns the list of colors in the recent presets of the color picker.   Theme Property Descriptions 
int center_slider_grabbers = 1
 Overrides the Slider.center_grabber theme property of the sliders. 
int h_width = 30
 The width of the hue selection slider. 
int label_width = 10
 The minimum width of the color labels next to sliders. 
int margin = 4
 The margin around the ColorPicker. 
int sv_height = 256
 The height of the saturation-value selection box. 
int sv_width = 256
 The width of the saturation-value selection box. 
Texture2D add_preset The icon for the "Add Preset" button. 
Texture2D bar_arrow The texture for the arrow grabber. 
Texture2D color_hue Custom texture for the hue selection slider on the right. 
Texture2D color_okhsl_hue Custom texture for the H slider in the OKHSL color mode. 
Texture2D expanded_arrow The icon for color preset drop down menu when expanded. 
Texture2D folded_arrow The icon for color preset drop down menu when folded. 
Texture2D overbright_indicator The indicator used to signalize that the color value is outside the 0-1 range. 
Texture2D picker_cursor The image displayed over the color box/circle (depending on the picker_shape), marking the currently selected color. 
Texture2D sample_bg Background panel for the color preview box (visible when the color is translucent). 
Texture2D screen_picker The icon for the screen color picker button. 
Texture2D shape_circle The icon for circular picker shapes. 
Texture2D shape_rect The icon for rectangular picker shapes. 
Texture2D shape_rect_wheel The icon for rectangular wheel picker shapes.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_colorpicker.html


classes/class_physicalskymaterial
-----------------------------------------------------------
PhysicalSkyMaterial Inherits: Material < Resource < RefCounted < Object A material that defines a sky for a Sky resource by a set of physical properties.  Description The PhysicalSkyMaterial uses the Preetham analytic daylight model to draw a sky based on physical properties. This results in a substantially more realistic sky than the ProceduralSkyMaterial, but it is slightly slower and less flexible. The PhysicalSkyMaterial only supports one sun. The color, energy, and direction of the sun are taken from the first DirectionalLight3D in the scene tree. As it is based on a daylight model, the sky fades to black as the sunset ends. If you want a full day/night cycle, you will have to add a night sky by converting this to a ShaderMaterial and adding a night sky directly into the resulting shader.   Properties  
float energy_multiplier 1.0  
Color ground_color Color(0.1, 0.07, 0.034, 1)  
float mie_coefficient 0.005  
Color mie_color Color(0.69, 0.729, 0.812, 1)  
float mie_eccentricity 0.8  
Texture2D night_sky   
float rayleigh_coefficient 2.0  
Color rayleigh_color Color(0.3, 0.405, 0.6, 1)  
float sun_disk_scale 1.0  
float turbidity 10.0  
bool use_debanding true     Property Descriptions 
float energy_multiplier = 1.0
  void set_energy_multiplier ( float value )
 
float get_energy_multiplier ( )
  The sky's overall brightness multiplier. Higher values result in a brighter sky. 
Color ground_color = Color(0.1, 0.07, 0.034, 1)
  void set_ground_color ( Color value )
 
Color get_ground_color ( )
  Modulates the Color on the bottom half of the sky to represent the ground. 
float mie_coefficient = 0.005
  void set_mie_coefficient ( float value )
 
float get_mie_coefficient ( )
  Controls the strength of Mie scattering for the sky. Mie scattering results from light colliding with larger particles (like water). On earth, Mie scattering results in a whitish color around the sun and horizon. 
Color mie_color = Color(0.69, 0.729, 0.812, 1)
  void set_mie_color ( Color value )
 
Color get_mie_color ( )
  Controls the Color of the Mie scattering effect. While not physically accurate, this allows for the creation of alien-looking planets. 
float mie_eccentricity = 0.8
  void set_mie_eccentricity ( float value )
 
float get_mie_eccentricity ( )
  Controls the direction of the Mie scattering. A value of 1 means that when light hits a particle it's passing through straight forward. A value of -1 means that all light is scatter backwards. 
Texture2D night_sky  void set_night_sky ( Texture2D value )
 
Texture2D get_night_sky ( )
  Texture2D for the night sky. This is added to the sky, so if it is bright enough, it may be visible during the day. 
float rayleigh_coefficient = 2.0
  void set_rayleigh_coefficient ( float value )
 
float get_rayleigh_coefficient ( )
  Controls the strength of the Rayleigh scattering. Rayleigh scattering results from light colliding with small particles. It is responsible for the blue color of the sky. 
Color rayleigh_color = Color(0.3, 0.405, 0.6, 1)
  void set_rayleigh_color ( Color value )
 
Color get_rayleigh_color ( )
  Controls the Color of the Rayleigh scattering. While not physically accurate, this allows for the creation of alien-looking planets. For example, setting this to a red Color results in a Mars-looking atmosphere with a corresponding blue sunset. 
float sun_disk_scale = 1.0
  void set_sun_disk_scale ( float value )
 
float get_sun_disk_scale ( )
  Sets the size of the sun disk. Default value is based on Sol's perceived size from Earth. 
float turbidity = 10.0
  void set_turbidity ( float value )
 
float get_turbidity ( )
  Sets the thickness of the atmosphere. High turbidity creates a foggy-looking atmosphere, while a low turbidity results in a clearer atmosphere. 
bool use_debanding = true
  void set_use_debanding ( bool value )
 
bool get_use_debanding ( )
  If true, enables debanding. Debanding adds a small amount of noise which helps reduce banding that appears from the smooth changes in color in the sky.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_physicalskymaterial.html


classes/class_arraymesh
-----------------------------------------------------------
ArrayMesh Inherits: Mesh < Resource < RefCounted < Object Mesh type that provides utility for constructing a surface from arrays.  Description The ArrayMesh is used to construct a Mesh by specifying the attributes as arrays. The most basic example is the creation of a single triangle:  GDScriptvar vertices = PackedVector3Array()
vertices.push_back(Vector3(0, 1, 0))
vertices.push_back(Vector3(1, 0, 0))
vertices.push_back(Vector3(0, 0, 1))
# Initialize the ArrayMesh.
var arr_mesh = ArrayMesh.new()
var arrays = []
arrays.resize(Mesh.ARRAY_MAX)
arrays[Mesh.ARRAY_VERTEX] = vertices
# Create the Mesh.
arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
var m = MeshInstance3D.new()
m.mesh = arr_mesh
 C#var vertices = new Vector3[]
{
    new Vector3(0, 1, 0),
    new Vector3(1, 0, 0),
    new Vector3(0, 0, 1),
};
// Initialize the ArrayMesh.
var arrMesh = new ArrayMesh();
var arrays = new Godot.Collections.Array();
arrays.Resize((int)Mesh.ArrayType.Max);
arrays[(int)Mesh.ArrayType.Vertex] = vertices;
// Create the Mesh.
arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, arrays);
var m = new MeshInstance3D();
m.Mesh = arrMesh;
  The MeshInstance3D is ready to be added to the SceneTree to be shown. See also ImmediateMesh, MeshDataTool and SurfaceTool for procedural geometry generation. Note: Godot uses clockwise winding order for front faces of triangle primitive modes.   Tutorials  Procedural geometry using the ArrayMesh    Properties  
BlendShapeMode blend_shape_mode 1  
AABB custom_aabb AABB(0, 0, 0, 0, 0, 0)  
ArrayMesh shadow_mesh      Methods  
void add_blend_shape ( StringName name )  
void add_surface_from_arrays ( PrimitiveType primitive, Array arrays, Array[] blend_shapes=[], Dictionary lods={}, BitField<ArrayFormat> flags=0 )  
void clear_blend_shapes ( )  
void clear_surfaces ( )  
int get_blend_shape_count ( ) const  
StringName get_blend_shape_name ( int index ) const  
Error lightmap_unwrap ( Transform3D transform, float texel_size )  
void regen_normal_maps ( )  
void set_blend_shape_name ( int index, StringName name )  
int surface_find_by_name ( String name ) const  
int surface_get_array_index_len ( int surf_idx ) const  
int surface_get_array_len ( int surf_idx ) const  
BitField<ArrayFormat> surface_get_format ( int surf_idx ) const  
String surface_get_name ( int surf_idx ) const  
PrimitiveType surface_get_primitive_type ( int surf_idx ) const  
void surface_set_name ( int surf_idx, String name )  
void surface_update_attribute_region ( int surf_idx, int offset, PackedByteArray data )  
void surface_update_skin_region ( int surf_idx, int offset, PackedByteArray data )  
void surface_update_vertex_region ( int surf_idx, int offset, PackedByteArray data )     Property Descriptions 
BlendShapeMode blend_shape_mode = 1
  void set_blend_shape_mode ( BlendShapeMode value )
 
BlendShapeMode get_blend_shape_mode ( )
  Sets the blend shape mode to one of BlendShapeMode. 
AABB custom_aabb = AABB(0, 0, 0, 0, 0, 0)
  void set_custom_aabb ( AABB value )
 
AABB get_custom_aabb ( )
  Overrides the AABB with one defined by user for use with frustum culling. Especially useful to avoid unexpected culling when using a shader to offset vertices. 
ArrayMesh shadow_mesh  void set_shadow_mesh ( ArrayMesh value )
 
ArrayMesh get_shadow_mesh ( )
  An optional mesh which is used for rendering shadows and can be used for the depth prepass. Can be used to increase performance of shadow rendering by using a mesh that only contains vertex position data (without normals, UVs, colors, etc.).   Method Descriptions void add_blend_shape ( StringName name ) Adds name for a blend shape that will be added with add_surface_from_arrays. Must be called before surface is added. void add_surface_from_arrays ( PrimitiveType primitive, Array arrays, Array[] blend_shapes=[], Dictionary lods={}, BitField<ArrayFormat> flags=0 ) Creates a new surface. Mesh.get_surface_count will become the surf_idx for this new surface. Surfaces are created to be rendered using a primitive, which may be any of the values defined in PrimitiveType. The arrays argument is an array of arrays. Each of the Mesh.ARRAY_MAX elements contains an array with some of the mesh data for this surface as described by the corresponding member of ArrayType or null if it is not used by the surface. For example, arrays[0] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this surface into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array (or be an exact multiple of the vertex array's length, when multiple elements of a sub-array correspond to a single vertex) or be empty, except for Mesh.ARRAY_INDEX if it is used. The blend_shapes argument is an array of vertex data for each blend shape. Each element is an array of the same structure as arrays, but Mesh.ARRAY_VERTEX, Mesh.ARRAY_NORMAL, and Mesh.ARRAY_TANGENT are set if and only if they are set in arrays and all other entries are null. The lods argument is a dictionary with float keys and PackedInt32Array values. Each entry in the dictionary represents a LOD level of the surface, where the value is the Mesh.ARRAY_INDEX array to use for the LOD level and the key is roughly proportional to the distance at which the LOD stats being used. I.e., increasing the key of a LOD also increases the distance that the objects has to be from the camera before the LOD is used. The flags argument is the bitwise or of, as required: One value of ArrayCustomFormat left shifted by ARRAY_FORMAT_CUSTOMn_SHIFT for each custom channel in use, Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE, Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS, or Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY. Note: When using indices, it is recommended to only use points, lines, or triangles. void clear_blend_shapes ( ) Removes all blend shapes from this ArrayMesh. void clear_surfaces ( ) Removes all surfaces from this ArrayMesh. 
int get_blend_shape_count ( ) const
 Returns the number of blend shapes that the ArrayMesh holds. 
StringName get_blend_shape_name ( int index ) const
 Returns the name of the blend shape at this index. 
Error lightmap_unwrap ( Transform3D transform, float texel_size ) Performs a UV unwrap on the ArrayMesh to prepare the mesh for lightmapping. void regen_normal_maps ( ) Regenerates tangents for each of the ArrayMesh's surfaces. void set_blend_shape_name ( int index, StringName name ) Sets the name of the blend shape at this index. 
int surface_find_by_name ( String name ) const
 Returns the index of the first surface with this name held within this ArrayMesh. If none are found, -1 is returned. 
int surface_get_array_index_len ( int surf_idx ) const
 Returns the length in indices of the index array in the requested surface (see add_surface_from_arrays). 
int surface_get_array_len ( int surf_idx ) const
 Returns the length in vertices of the vertex array in the requested surface (see add_surface_from_arrays). 
BitField<ArrayFormat> surface_get_format ( int surf_idx ) const
 Returns the format mask of the requested surface (see add_surface_from_arrays). 
String surface_get_name ( int surf_idx ) const
 Gets the name assigned to this surface. 
PrimitiveType surface_get_primitive_type ( int surf_idx ) const
 Returns the primitive type of the requested surface (see add_surface_from_arrays). void surface_set_name ( int surf_idx, String name ) Sets a name for a given surface. void surface_update_attribute_region ( int surf_idx, int offset, PackedByteArray data )  There is currently no description for this method. Please help us by contributing one!  void surface_update_skin_region ( int surf_idx, int offset, PackedByteArray data )  There is currently no description for this method. Please help us by contributing one!  void surface_update_vertex_region ( int surf_idx, int offset, PackedByteArray data )  There is currently no description for this method. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_arraymesh.html


classes/class_textureprogressbar
-----------------------------------------------------------
TextureProgressBar Inherits: Range < Control < CanvasItem < Node < Object Texture-based progress bar. Useful for loading screens and life or stamina bars.  Description TextureProgressBar works like ProgressBar, but uses up to 3 textures instead of Godot's Theme resource. It can be used to create horizontal, vertical and radial progress bars.   Properties  
int fill_mode 0  
MouseFilter mouse_filter 1 (overrides Control)  
bool nine_patch_stretch false  
Vector2 radial_center_offset Vector2(0, 0)  
float radial_fill_degrees 360.0  
float radial_initial_angle 0.0  
BitField<SizeFlags> size_flags_vertical 1 (overrides Control)  
float step 1.0 (overrides Range)  
int stretch_margin_bottom 0  
int stretch_margin_left 0  
int stretch_margin_right 0  
int stretch_margin_top 0  
Texture2D texture_over   
Texture2D texture_progress   
Vector2 texture_progress_offset Vector2(0, 0)  
Texture2D texture_under   
Color tint_over Color(1, 1, 1, 1)  
Color tint_progress Color(1, 1, 1, 1)  
Color tint_under Color(1, 1, 1, 1)     Methods  
int get_stretch_margin ( Side margin ) const  
void set_stretch_margin ( Side margin, int value )     Enumerations enum FillMode: 
FillMode FILL_LEFT_TO_RIGHT = 0
 The texture_progress fills from left to right. 
FillMode FILL_RIGHT_TO_LEFT = 1
 The texture_progress fills from right to left. 
FillMode FILL_TOP_TO_BOTTOM = 2
 The texture_progress fills from top to bottom. 
FillMode FILL_BOTTOM_TO_TOP = 3
 The texture_progress fills from bottom to top. 
FillMode FILL_CLOCKWISE = 4
 Turns the node into a radial bar. The texture_progress fills clockwise. See radial_center_offset, radial_initial_angle and radial_fill_degrees to control the way the bar fills up. 
FillMode FILL_COUNTER_CLOCKWISE = 5
 Turns the node into a radial bar. The texture_progress fills counterclockwise. See radial_center_offset, radial_initial_angle and radial_fill_degrees to control the way the bar fills up. 
FillMode FILL_BILINEAR_LEFT_AND_RIGHT = 6
 The texture_progress fills from the center, expanding both towards the left and the right. 
FillMode FILL_BILINEAR_TOP_AND_BOTTOM = 7
 The texture_progress fills from the center, expanding both towards the top and the bottom. 
FillMode FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE = 8
 Turns the node into a radial bar. The texture_progress fills radially from the center, expanding both clockwise and counterclockwise. See radial_center_offset, radial_initial_angle and radial_fill_degrees to control the way the bar fills up.   Property Descriptions 
int fill_mode = 0
  void set_fill_mode ( int value )
 
int get_fill_mode ( )
  The fill direction. See FillMode for possible values. 
bool nine_patch_stretch = false
  void set_nine_patch_stretch ( bool value )
 
bool get_nine_patch_stretch ( )
  If true, Godot treats the bar's textures like in NinePatchRect. Use the stretch_margin_* properties like stretch_margin_bottom to set up the nine patch's 3Ã—3 grid. When using a radial fill_mode, this setting will enable stretching. 
Vector2 radial_center_offset = Vector2(0, 0)
  void set_radial_center_offset ( Vector2 value )
 
Vector2 get_radial_center_offset ( )
  Offsets texture_progress if fill_mode is FILL_CLOCKWISE or FILL_COUNTER_CLOCKWISE. 
float radial_fill_degrees = 360.0
  void set_fill_degrees ( float value )
 
float get_fill_degrees ( )
  Upper limit for the fill of texture_progress if fill_mode is FILL_CLOCKWISE or FILL_COUNTER_CLOCKWISE. When the node's value is equal to its max_value, the texture fills up to this angle. See Range.value, Range.max_value. 
float radial_initial_angle = 0.0
  void set_radial_initial_angle ( float value )
 
float get_radial_initial_angle ( )
  Starting angle for the fill of texture_progress if fill_mode is FILL_CLOCKWISE or FILL_COUNTER_CLOCKWISE. When the node's value is equal to its min_value, the texture doesn't show up at all. When the value increases, the texture fills and tends towards radial_fill_degrees. 
int stretch_margin_bottom = 0
  void set_stretch_margin ( Side margin, int value )
 
int get_stretch_margin ( Side margin ) const
  The height of the 9-patch's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders. 
int stretch_margin_left = 0
  void set_stretch_margin ( Side margin, int value )
 
int get_stretch_margin ( Side margin ) const
  The width of the 9-patch's left column. 
int stretch_margin_right = 0
  void set_stretch_margin ( Side margin, int value )
 
int get_stretch_margin ( Side margin ) const
  The width of the 9-patch's right column. 
int stretch_margin_top = 0
  void set_stretch_margin ( Side margin, int value )
 
int get_stretch_margin ( Side margin ) const
  The height of the 9-patch's top row. 
Texture2D texture_over  void set_over_texture ( Texture2D value )
 
Texture2D get_over_texture ( )
  Texture2D that draws over the progress bar. Use it to add highlights or an upper-frame that hides part of texture_progress. 
Texture2D texture_progress  void set_progress_texture ( Texture2D value )
 
Texture2D get_progress_texture ( )
  Texture2D that clips based on the node's value and fill_mode. As value increased, the texture fills up. It shows entirely when value reaches max_value. It doesn't show at all if value is equal to min_value. The value property comes from Range. See Range.value, Range.min_value, Range.max_value. 
Vector2 texture_progress_offset = Vector2(0, 0)
  void set_texture_progress_offset ( Vector2 value )
 
Vector2 get_texture_progress_offset ( )
  The offset of texture_progress. Useful for texture_over and texture_under with fancy borders, to avoid transparent margins in your progress texture. 
Texture2D texture_under  void set_under_texture ( Texture2D value )
 
Texture2D get_under_texture ( )
  Texture2D that draws under the progress bar. The bar's background. 
Color tint_over = Color(1, 1, 1, 1)
  void set_tint_over ( Color value )
 
Color get_tint_over ( )
  Multiplies the color of the bar's texture_over texture. The effect is similar to CanvasItem.modulate, except it only affects this specific texture instead of the entire node. 
Color tint_progress = Color(1, 1, 1, 1)
  void set_tint_progress ( Color value )
 
Color get_tint_progress ( )
  Multiplies the color of the bar's texture_progress texture. 
Color tint_under = Color(1, 1, 1, 1)
  void set_tint_under ( Color value )
 
Color get_tint_under ( )
  Multiplies the color of the bar's texture_under texture.   Method Descriptions 
int get_stretch_margin ( Side margin ) const
 Returns the stretch margin with the specified index. See stretch_margin_bottom and related properties. void set_stretch_margin ( Side margin, int value ) Sets the stretch margin with the specified index. See stretch_margin_bottom and related properties.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_textureprogressbar.html


classes/class_textedit
-----------------------------------------------------------
TextEdit Inherits: Control < CanvasItem < Node < Object Inherited By: CodeEdit A multiline text editor.  Description A multiline text editor. It also has limited facilities for editing code, such as syntax highlighting support. For more advanced facilities for editing code, see CodeEdit. Note: Most viewport, caret and edit methods contain a caret_index argument for caret_multiple support. The argument should be one of the following: -1 for all carets, 0 for the main caret, or greater than 0 for secondary carets. Note: When holding down Alt, the vertical scroll wheel will scroll 5 times as fast as it would normally do. This also works in the Godot script editor.   Properties  
AutowrapMode autowrap_mode 3  
bool caret_blink false  
float caret_blink_interval 0.65  
bool caret_draw_when_editable_disabled false  
bool caret_mid_grapheme false  
bool caret_move_on_right_click true  
bool caret_multiple true  
CaretType caret_type 0  
bool context_menu_enabled true  
bool deselect_on_focus_loss_enabled true  
bool drag_and_drop_selection_enabled true  
bool draw_control_chars false  
bool draw_spaces false  
bool draw_tabs false  
bool editable true  
FocusMode focus_mode 2 (overrides Control)  
bool highlight_all_occurrences false  
bool highlight_current_line false  
String language ""  
bool middle_mouse_paste_enabled true  
bool minimap_draw false  
int minimap_width 80  
CursorShape mouse_default_cursor_shape 1 (overrides Control)  
String placeholder_text ""  
bool scroll_fit_content_height false  
int scroll_horizontal 0  
bool scroll_past_end_of_file false  
bool scroll_smooth false  
float scroll_v_scroll_speed 80.0  
float scroll_vertical 0.0  
bool selecting_enabled true  
bool shortcut_keys_enabled true  
StructuredTextParser structured_text_bidi_override 0  
Array structured_text_bidi_override_options []  
SyntaxHighlighter syntax_highlighter   
String text ""  
TextDirection text_direction 0  
bool virtual_keyboard_enabled true  
LineWrappingMode wrap_mode 0     Methods  
void _backspace ( int caret_index ) virtual  
void _copy ( int caret_index ) virtual  
void _cut ( int caret_index ) virtual  
void _handle_unicode_input ( int unicode_char, int caret_index ) virtual  
void _paste ( int caret_index ) virtual  
void _paste_primary_clipboard ( int caret_index ) virtual  
int add_caret ( int line, int col )  
void add_caret_at_carets ( bool below )  
void add_gutter ( int at=-1 )  
void add_selection_for_next_occurrence ( )  
void adjust_carets_after_edit ( int caret, int from_line, int from_col, int to_line, int to_col )  
void adjust_viewport_to_caret ( int caret_index=0 )  
void backspace ( int caret_index=-1 )  
void begin_complex_operation ( )  
void center_viewport_to_caret ( int caret_index=0 )  
void clear ( )  
void clear_undo_history ( )  
void copy ( int caret_index=-1 )  
void cut ( int caret_index=-1 )  
void delete_selection ( int caret_index=-1 )  
void deselect ( int caret_index=-1 )  
void end_action ( )  
void end_complex_operation ( )  
int get_caret_column ( int caret_index=0 ) const  
int get_caret_count ( ) const  
Vector2 get_caret_draw_pos ( int caret_index=0 ) const  
PackedInt32Array get_caret_index_edit_order ( )  
int get_caret_line ( int caret_index=0 ) const  
int get_caret_wrap_index ( int caret_index=0 ) const  
int get_first_non_whitespace_column ( int line ) const  
int get_first_visible_line ( ) const  
int get_gutter_count ( ) const  
String get_gutter_name ( int gutter ) const  
GutterType get_gutter_type ( int gutter ) const  
int get_gutter_width ( int gutter ) const  
HScrollBar get_h_scroll_bar ( ) const  
int get_indent_level ( int line ) const  
int get_last_full_visible_line ( ) const  
int get_last_full_visible_line_wrap_index ( ) const  
int get_last_unhidden_line ( ) const  
String get_line ( int line ) const  
Color get_line_background_color ( int line ) const  
Vector2i get_line_column_at_pos ( Vector2i position, bool allow_out_of_bounds=true ) const  
int get_line_count ( ) const  
Texture2D get_line_gutter_icon ( int line, int gutter ) const  
Color get_line_gutter_item_color ( int line, int gutter ) const  
Variant get_line_gutter_metadata ( int line, int gutter ) const  
String get_line_gutter_text ( int line, int gutter ) const  
int get_line_height ( ) const  
int get_line_width ( int line, int wrap_index=-1 ) const  
int get_line_wrap_count ( int line ) const  
int get_line_wrap_index_at_column ( int line, int column ) const  
PackedStringArray get_line_wrapped_text ( int line ) const  
Vector2 get_local_mouse_pos ( ) const  
PopupMenu get_menu ( ) const  
int get_minimap_line_at_pos ( Vector2i position ) const  
int get_minimap_visible_lines ( ) const  
Vector2i get_next_visible_line_index_offset_from ( int line, int wrap_index, int visible_amount ) const  
int get_next_visible_line_offset_from ( int line, int visible_amount ) const  
Vector2i get_pos_at_line_column ( int line, int column ) const  
Rect2i get_rect_at_line_column ( int line, int column ) const  
int get_saved_version ( ) const  
float get_scroll_pos_for_line ( int line, int wrap_index=0 ) const  
String get_selected_text ( int caret_index=-1 )  
int get_selection_column ( int caret_index=0 ) const  
int get_selection_from_column ( int caret_index=0 ) const  
int get_selection_from_line ( int caret_index=0 ) const  
int get_selection_line ( int caret_index=0 ) const  
SelectionMode get_selection_mode ( ) const  
int get_selection_to_column ( int caret_index=0 ) const  
int get_selection_to_line ( int caret_index=0 ) const  
int get_tab_size ( ) const  
int get_total_gutter_width ( ) const  
int get_total_visible_line_count ( ) const  
VScrollBar get_v_scroll_bar ( ) const  
int get_version ( ) const  
int get_visible_line_count ( ) const  
int get_visible_line_count_in_range ( int from_line, int to_line ) const  
String get_word_at_pos ( Vector2 position ) const  
String get_word_under_caret ( int caret_index=-1 ) const  
bool has_ime_text ( ) const  
bool has_redo ( ) const  
bool has_selection ( int caret_index=-1 ) const  
bool has_undo ( ) const  
void insert_line_at ( int line, String text )  
void insert_text_at_caret ( String text, int caret_index=-1 )  
bool is_caret_visible ( int caret_index=0 ) const  
bool is_dragging_cursor ( ) const  
bool is_gutter_clickable ( int gutter ) const  
bool is_gutter_drawn ( int gutter ) const  
bool is_gutter_overwritable ( int gutter ) const  
bool is_line_gutter_clickable ( int line, int gutter ) const  
bool is_line_wrapped ( int line ) const  
bool is_menu_visible ( ) const  
bool is_mouse_over_selection ( bool edges, int caret_index=-1 ) const  
bool is_overtype_mode_enabled ( ) const  
void menu_option ( int option )  
void merge_gutters ( int from_line, int to_line )  
void merge_overlapping_carets ( )  
void paste ( int caret_index=-1 )  
void paste_primary_clipboard ( int caret_index=-1 )  
void redo ( )  
void remove_caret ( int caret )  
void remove_gutter ( int gutter )  
void remove_secondary_carets ( )  
void remove_text ( int from_line, int from_column, int to_line, int to_column )  
Vector2i search ( String text, int flags, int from_line, int from_colum ) const  
void select ( int from_line, int from_column, int to_line, int to_column, int caret_index=0 )  
void select_all ( )  
void select_word_under_caret ( int caret_index=-1 )  
void set_caret_column ( int column, bool adjust_viewport=true, int caret_index=0 )  
void set_caret_line ( int line, bool adjust_viewport=true, bool can_be_hidden=true, int wrap_index=0, int caret_index=0 )  
void set_gutter_clickable ( int gutter, bool clickable )  
void set_gutter_custom_draw ( int column, Callable draw_callback )  
void set_gutter_draw ( int gutter, bool draw )  
void set_gutter_name ( int gutter, String name )  
void set_gutter_overwritable ( int gutter, bool overwritable )  
void set_gutter_type ( int gutter, GutterType type )  
void set_gutter_width ( int gutter, int width )  
void set_line ( int line, String new_text )  
void set_line_as_center_visible ( int line, int wrap_index=0 )  
void set_line_as_first_visible ( int line, int wrap_index=0 )  
void set_line_as_last_visible ( int line, int wrap_index=0 )  
void set_line_background_color ( int line, Color color )  
void set_line_gutter_clickable ( int line, int gutter, bool clickable )  
void set_line_gutter_icon ( int line, int gutter, Texture2D icon )  
void set_line_gutter_item_color ( int line, int gutter, Color color )  
void set_line_gutter_metadata ( int line, int gutter, Variant metadata )  
void set_line_gutter_text ( int line, int gutter, String text )  
void set_overtype_mode_enabled ( bool enabled )  
void set_search_flags ( int flags )  
void set_search_text ( String search_text )  
void set_selection_mode ( SelectionMode mode, int line=-1, int column=-1, int caret_index=0 )  
void set_tab_size ( int size )  
void set_tooltip_request_func ( Callable callback )  
void start_action ( EditAction action )  
void swap_lines ( int from_line, int to_line )  
void tag_saved_version ( )  
void undo ( )     Theme Properties  
Color background_color Color(0, 0, 0, 0)  
Color caret_background_color Color(0, 0, 0, 1)  
Color caret_color Color(0.875, 0.875, 0.875, 1)  
Color current_line_color Color(0.25, 0.25, 0.26, 0.8)  
Color font_color Color(0.875, 0.875, 0.875, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
Color font_placeholder_color Color(0.875, 0.875, 0.875, 0.6)  
Color font_readonly_color Color(0.875, 0.875, 0.875, 0.5)  
Color font_selected_color Color(0, 0, 0, 0)  
Color search_result_border_color Color(0.3, 0.3, 0.3, 0.4)  
Color search_result_color Color(0.3, 0.3, 0.3, 1)  
Color selection_color Color(0.5, 0.5, 0.5, 1)  
Color word_highlighted_color Color(0.5, 0.5, 0.5, 0.25)  
int caret_width 1  
int line_spacing 4  
int outline_size 0  
Font font   
int font_size   
Texture2D space   
Texture2D tab   
StyleBox focus   
StyleBox normal   
StyleBox read_only      Signals caret_changed ( ) Emitted when the caret changes position. gutter_added ( ) Emitted when a gutter is added. gutter_clicked ( int line, int gutter ) Emitted when a gutter is clicked. gutter_removed ( ) Emitted when a gutter is removed. lines_edited_from ( int from_line, int to_line ) Emitted immediately when the text changes. When text is added from_line will be less than to_line. On a remove to_line will be less than from_line. text_changed ( ) Emitted when the text changes. text_set ( ) Emitted when clear is called or text is set.   Enumerations enum MenuItems: 
MenuItems MENU_CUT = 0
 Cuts (copies and clears) the selected text. 
MenuItems MENU_COPY = 1
 Copies the selected text. 
MenuItems MENU_PASTE = 2
 Pastes the clipboard text over the selected text (or at the cursor's position). 
MenuItems MENU_CLEAR = 3
 Erases the whole TextEdit text. 
MenuItems MENU_SELECT_ALL = 4
 Selects the whole TextEdit text. 
MenuItems MENU_UNDO = 5
 Undoes the previous action. 
MenuItems MENU_REDO = 6
 Redoes the previous action. 
MenuItems MENU_SUBMENU_TEXT_DIR = 7
 ID of "Text Writing Direction" submenu. 
MenuItems MENU_DIR_INHERITED = 8
 Sets text direction to inherited. 
MenuItems MENU_DIR_AUTO = 9
 Sets text direction to automatic. 
MenuItems MENU_DIR_LTR = 10
 Sets text direction to left-to-right. 
MenuItems MENU_DIR_RTL = 11
 Sets text direction to right-to-left. 
MenuItems MENU_DISPLAY_UCC = 12
 Toggles control character display. 
MenuItems MENU_SUBMENU_INSERT_UCC = 13
 ID of "Insert Control Character" submenu. 
MenuItems MENU_INSERT_LRM = 14
 Inserts left-to-right mark (LRM) character. 
MenuItems MENU_INSERT_RLM = 15
 Inserts right-to-left mark (RLM) character. 
MenuItems MENU_INSERT_LRE = 16
 Inserts start of left-to-right embedding (LRE) character. 
MenuItems MENU_INSERT_RLE = 17
 Inserts start of right-to-left embedding (RLE) character. 
MenuItems MENU_INSERT_LRO = 18
 Inserts start of left-to-right override (LRO) character. 
MenuItems MENU_INSERT_RLO = 19
 Inserts start of right-to-left override (RLO) character. 
MenuItems MENU_INSERT_PDF = 20
 Inserts pop direction formatting (PDF) character. 
MenuItems MENU_INSERT_ALM = 21
 Inserts Arabic letter mark (ALM) character. 
MenuItems MENU_INSERT_LRI = 22
 Inserts left-to-right isolate (LRI) character. 
MenuItems MENU_INSERT_RLI = 23
 Inserts right-to-left isolate (RLI) character. 
MenuItems MENU_INSERT_FSI = 24
 Inserts first strong isolate (FSI) character. 
MenuItems MENU_INSERT_PDI = 25
 Inserts pop direction isolate (PDI) character. 
MenuItems MENU_INSERT_ZWJ = 26
 Inserts zero width joiner (ZWJ) character. 
MenuItems MENU_INSERT_ZWNJ = 27
 Inserts zero width non-joiner (ZWNJ) character. 
MenuItems MENU_INSERT_WJ = 28
 Inserts word joiner (WJ) character. 
MenuItems MENU_INSERT_SHY = 29
 Inserts soft hyphen (SHY) character. 
MenuItems MENU_MAX = 30
 Represents the size of the MenuItems enum. enum EditAction: 
EditAction ACTION_NONE = 0
 No current action. 
EditAction ACTION_TYPING = 1
 A typing action. 
EditAction ACTION_BACKSPACE = 2
 A backwards delete action. 
EditAction ACTION_DELETE = 3
 A forward delete action. enum SearchFlags: 
SearchFlags SEARCH_MATCH_CASE = 1
 Match case when searching. 
SearchFlags SEARCH_WHOLE_WORDS = 2
 Match whole words when searching. 
SearchFlags SEARCH_BACKWARDS = 4
 Search from end to beginning. enum CaretType: 
CaretType CARET_TYPE_LINE = 0
 Vertical line caret. 
CaretType CARET_TYPE_BLOCK = 1
 Block caret. enum SelectionMode: 
SelectionMode SELECTION_MODE_NONE = 0
 Not selecting. 
SelectionMode SELECTION_MODE_SHIFT = 1
 Select as if shift is pressed. 
SelectionMode SELECTION_MODE_POINTER = 2
 Select single characters as if the user single clicked. 
SelectionMode SELECTION_MODE_WORD = 3
 Select whole words as if the user double clicked. 
SelectionMode SELECTION_MODE_LINE = 4
 Select whole lines as if the user triple clicked. enum LineWrappingMode: 
LineWrappingMode LINE_WRAPPING_NONE = 0
 Line wrapping is disabled. 
LineWrappingMode LINE_WRAPPING_BOUNDARY = 1
 Line wrapping occurs at the control boundary, beyond what would normally be visible. enum GutterType: 
GutterType GUTTER_TYPE_STRING = 0
 Draw a string. 
GutterType GUTTER_TYPE_ICON = 1
 Draw an icon. 
GutterType GUTTER_TYPE_CUSTOM = 2
 Custom draw.   Property Descriptions 
AutowrapMode autowrap_mode = 3
  void set_autowrap_mode ( AutowrapMode value )
 
AutowrapMode get_autowrap_mode ( )
  If wrap_mode is set to LINE_WRAPPING_BOUNDARY, sets text wrapping mode. To see how each mode behaves, see AutowrapMode. 
bool caret_blink = false
  void set_caret_blink_enabled ( bool value )
 
bool is_caret_blink_enabled ( )
  If true, makes the caret blink. 
float caret_blink_interval = 0.65
  void set_caret_blink_interval ( float value )
 
float get_caret_blink_interval ( )
  The interval at which the caret blinks (in seconds). 
bool caret_draw_when_editable_disabled = false
  void set_draw_caret_when_editable_disabled ( bool value )
 
bool is_drawing_caret_when_editable_disabled ( )
  If true, caret will be visible when editable is disabled. 
bool caret_mid_grapheme = false
  void set_caret_mid_grapheme_enabled ( bool value )
 
bool is_caret_mid_grapheme_enabled ( )
  Allow moving caret, selecting and removing the individual composite character components. Note: Backspace is always removing individual composite character components. 
bool caret_move_on_right_click = true
  void set_move_caret_on_right_click_enabled ( bool value )
 
bool is_move_caret_on_right_click_enabled ( )
  If true, a right-click moves the caret at the mouse position before displaying the context menu. If false, the context menu ignores mouse location. 
bool caret_multiple = true
  void set_multiple_carets_enabled ( bool value )
 
bool is_multiple_carets_enabled ( )
  Sets if multiple carets are allowed. 
CaretType caret_type = 0
  void set_caret_type ( CaretType value )
 
CaretType get_caret_type ( )
  Set the type of caret to draw. 
bool context_menu_enabled = true
  void set_context_menu_enabled ( bool value )
 
bool is_context_menu_enabled ( )
  If true, a right-click displays the context menu. 
bool deselect_on_focus_loss_enabled = true
  void set_deselect_on_focus_loss_enabled ( bool value )
 
bool is_deselect_on_focus_loss_enabled ( )
  If true, the selected text will be deselected when focus is lost. 
bool drag_and_drop_selection_enabled = true
  void set_drag_and_drop_selection_enabled ( bool value )
 
bool is_drag_and_drop_selection_enabled ( )
  If true, allow drag and drop of selected text. 
bool draw_control_chars = false
  void set_draw_control_chars ( bool value )
 
bool get_draw_control_chars ( )
  If true, control characters are displayed. 
bool draw_spaces = false
  void set_draw_spaces ( bool value )
 
bool is_drawing_spaces ( )
  If true, the "space" character will have a visible representation. 
bool draw_tabs = false
  void set_draw_tabs ( bool value )
 
bool is_drawing_tabs ( )
  If true, the "tab" character will have a visible representation. 
bool editable = true
  void set_editable ( bool value )
 
bool is_editable ( )
  If false, existing text cannot be modified and new text cannot be added. 
bool highlight_all_occurrences = false
  void set_highlight_all_occurrences ( bool value )
 
bool is_highlight_all_occurrences_enabled ( )
  If true, all occurrences of the selected text will be highlighted. 
bool highlight_current_line = false
  void set_highlight_current_line ( bool value )
 
bool is_highlight_current_line_enabled ( )
  If true, the line containing the cursor is highlighted. 
String language = ""
  void set_language ( String value )
 
String get_language ( )
  Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead. 
bool middle_mouse_paste_enabled = true
  void set_middle_mouse_paste_enabled ( bool value )
 
bool is_middle_mouse_paste_enabled ( )
  If false, using middle mouse button to paste clipboard will be disabled. Note: This method is only implemented on Linux. 
bool minimap_draw = false
  void set_draw_minimap ( bool value )
 
bool is_drawing_minimap ( )
  If true, a minimap is shown, providing an outline of your source code. 
int minimap_width = 80
  void set_minimap_width ( int value )
 
int get_minimap_width ( )
  The width, in pixels, of the minimap. 
String placeholder_text = ""
  void set_placeholder ( String value )
 
String get_placeholder ( )
  Text shown when the TextEdit is empty. It is not the TextEdit's default value (see text). 
bool scroll_fit_content_height = false
  void set_fit_content_height_enabled ( bool value )
 
bool is_fit_content_height_enabled ( )
  If true, TextEdit will disable vertical scroll and fit minimum height to the number of visible lines. 
int scroll_horizontal = 0
  void set_h_scroll ( int value )
 
int get_h_scroll ( )
  If there is a horizontal scrollbar, this determines the current horizontal scroll value in pixels. 
bool scroll_past_end_of_file = false
  void set_scroll_past_end_of_file_enabled ( bool value )
 
bool is_scroll_past_end_of_file_enabled ( )
  Allow scrolling past the last line into "virtual" space. 
bool scroll_smooth = false
  void set_smooth_scroll_enabled ( bool value )
 
bool is_smooth_scroll_enabled ( )
  Scroll smoothly over the text rather than jumping to the next location. 
float scroll_v_scroll_speed = 80.0
  void set_v_scroll_speed ( float value )
 
float get_v_scroll_speed ( )
  Sets the scroll speed with the minimap or when scroll_smooth is enabled. 
float scroll_vertical = 0.0
  void set_v_scroll ( float value )
 
float get_v_scroll ( )
  If there is a vertical scrollbar, this determines the current vertical scroll value in line numbers, starting at 0 for the top line. 
bool selecting_enabled = true
  void set_selecting_enabled ( bool value )
 
bool is_selecting_enabled ( )
  If true, text can be selected. If false, text can not be selected by the user or by the select or select_all methods. 
bool shortcut_keys_enabled = true
  void set_shortcut_keys_enabled ( bool value )
 
bool is_shortcut_keys_enabled ( )
  If true, shortcut keys for context menu items are enabled, even if the context menu is disabled. 
StructuredTextParser structured_text_bidi_override = 0
  void set_structured_text_bidi_override ( StructuredTextParser value )
 
StructuredTextParser get_structured_text_bidi_override ( )
  Set BiDi algorithm override for the structured text. 
Array structured_text_bidi_override_options = []
  void set_structured_text_bidi_override_options ( Array value )
 
Array get_structured_text_bidi_override_options ( )
  Set additional options for BiDi override. 
SyntaxHighlighter syntax_highlighter  void set_syntax_highlighter ( SyntaxHighlighter value )
 
SyntaxHighlighter get_syntax_highlighter ( )
  Sets the SyntaxHighlighter to use. 
String text = ""
  void set_text ( String value )
 
String get_text ( )
  String value of the TextEdit. 
TextDirection text_direction = 0
  void set_text_direction ( TextDirection value )
 
TextDirection get_text_direction ( )
  Base text writing direction. 
bool virtual_keyboard_enabled = true
  void set_virtual_keyboard_enabled ( bool value )
 
bool is_virtual_keyboard_enabled ( )
  If true, the native virtual keyboard is shown when focused on platforms that support it. 
LineWrappingMode wrap_mode = 0
  void set_line_wrapping_mode ( LineWrappingMode value )
 
LineWrappingMode get_line_wrapping_mode ( )
  Sets the line wrapping mode to use.   Method Descriptions void _backspace ( int caret_index ) virtual
 Override this method to define what happens when the user presses the backspace key. void _copy ( int caret_index ) virtual
 Override this method to define what happens when the user performs a copy operation. void _cut ( int caret_index ) virtual
 Override this method to define what happens when the user performs a cut operation. void _handle_unicode_input ( int unicode_char, int caret_index ) virtual
 Override this method to define what happens when the user types in the provided key unicode_char. void _paste ( int caret_index ) virtual
 Override this method to define what happens when the user performs a paste operation. void _paste_primary_clipboard ( int caret_index ) virtual
 Override this method to define what happens when the user performs a paste operation with middle mouse button. Note: This method is only implemented on Linux. 
int add_caret ( int line, int col ) Adds a new caret at the given location. Returns the index of the new caret, or -1 if the location is invalid. void add_caret_at_carets ( bool below ) Adds an additional caret above or below every caret. If below is true the new caret will be added below and above otherwise. void add_gutter ( int at=-1 ) Register a new gutter to this TextEdit. Use at to have a specific gutter order. A value of -1 appends the gutter to the right. void add_selection_for_next_occurrence ( ) Adds a selection and a caret for the next occurrence of the current selection. If there is no active selection, selects word under caret. void adjust_carets_after_edit ( int caret, int from_line, int from_col, int to_line, int to_col ) Reposition the carets affected by the edit. This assumes edits are applied in edit order, see get_caret_index_edit_order. void adjust_viewport_to_caret ( int caret_index=0 ) Adjust the viewport so the caret is visible. void backspace ( int caret_index=-1 ) Called when the user presses the backspace key. Can be overridden with _backspace. void begin_complex_operation ( ) Starts a multipart edit. All edits will be treated as one action until end_complex_operation is called. void center_viewport_to_caret ( int caret_index=0 ) Centers the viewport on the line the editing caret is at. This also resets the scroll_horizontal value to 0. void clear ( ) Performs a full reset of TextEdit, including undo history. void clear_undo_history ( ) Clears the undo history. void copy ( int caret_index=-1 ) Copies the current text selection. Can be overridden with _copy. void cut ( int caret_index=-1 ) Cut's the current selection. Can be overridden with _cut. void delete_selection ( int caret_index=-1 ) Deletes the selected text. void deselect ( int caret_index=-1 ) Deselects the current selection. void end_action ( ) Marks the end of steps in the current action started with start_action. void end_complex_operation ( ) Ends a multipart edit, started with begin_complex_operation. If called outside a complex operation, the current operation is pushed onto the undo/redo stack. 
int get_caret_column ( int caret_index=0 ) const
 Returns the column the editing caret is at. 
int get_caret_count ( ) const
 Returns the number of carets in this TextEdit. 
Vector2 get_caret_draw_pos ( int caret_index=0 ) const
 Returns the caret pixel draw position. 
PackedInt32Array get_caret_index_edit_order ( ) Returns a list of caret indexes in their edit order, this done from bottom to top. Edit order refers to the way actions such as insert_text_at_caret are applied. 
int get_caret_line ( int caret_index=0 ) const
 Returns the line the editing caret is on. 
int get_caret_wrap_index ( int caret_index=0 ) const
 Returns the wrap index the editing caret is on. 
int get_first_non_whitespace_column ( int line ) const
 Returns the first column containing a non-whitespace character. 
int get_first_visible_line ( ) const
 Returns the first visible line. 
int get_gutter_count ( ) const
 Returns the number of gutters registered. 
String get_gutter_name ( int gutter ) const
 Returns the name of the gutter at the given index. 
GutterType get_gutter_type ( int gutter ) const
 Returns the type of the gutter at the given index. 
int get_gutter_width ( int gutter ) const
 Returns the width of the gutter at the given index. 
HScrollBar get_h_scroll_bar ( ) const
 Returns the HScrollBar used by TextEdit. 
int get_indent_level ( int line ) const
 Returns the number of spaces and tab * tab_size before the first char. 
int get_last_full_visible_line ( ) const
 Returns the last visible line. Use get_last_full_visible_line_wrap_index for the wrap index. 
int get_last_full_visible_line_wrap_index ( ) const
 Returns the last visible wrap index of the last visible line. 
int get_last_unhidden_line ( ) const
 Returns the last unhidden line in the entire TextEdit. 
String get_line ( int line ) const
 Returns the text of a specific line. 
Color get_line_background_color ( int line ) const
 Returns the current background color of the line. Color(0, 0, 0, 0) is returned if no color is set. 
Vector2i get_line_column_at_pos ( Vector2i position, bool allow_out_of_bounds=true ) const
 Returns the line and column at the given position. In the returned vector, x is the column, y is the line. If allow_out_of_bounds is false and the position is not over the text, both vector values will be set to -1. 
int get_line_count ( ) const
 Returns the number of lines in the text. 
Texture2D get_line_gutter_icon ( int line, int gutter ) const
 Returns the icon currently in gutter at line. 
Color get_line_gutter_item_color ( int line, int gutter ) const
 Returns the color currently in gutter at line. 
Variant get_line_gutter_metadata ( int line, int gutter ) const
 Returns the metadata currently in gutter at line. 
String get_line_gutter_text ( int line, int gutter ) const
 Returns the text currently in gutter at line. 
int get_line_height ( ) const
 Returns the maximum value of the line height among all lines. Note: The return value is influenced by line_spacing and font_size. And it will not be less than 1. 
int get_line_width ( int line, int wrap_index=-1 ) const
 Returns the width in pixels of the wrap_index on line. 
int get_line_wrap_count ( int line ) const
 Returns the number of times the given line is wrapped. 
int get_line_wrap_index_at_column ( int line, int column ) const
 Returns the wrap index of the given line column. 
PackedStringArray get_line_wrapped_text ( int line ) const
 Returns an array of Strings representing each wrapped index. 
Vector2 get_local_mouse_pos ( ) const
 Returns the local mouse position adjusted for the text direction. 
PopupMenu get_menu ( ) const
 Returns the PopupMenu of this TextEdit. By default, this menu is displayed when right-clicking on the TextEdit. You can add custom menu items or remove standard ones. Make sure your IDs don't conflict with the standard ones (see MenuItems). For example:  GDScriptfunc _ready():
    var menu = get_menu()
    # Remove all items after "Redo".
    menu.item_count = menu.get_item_index(MENU_REDO) + 1
    # Add custom items.
    menu.add_separator()
    menu.add_item("Insert Date", MENU_MAX + 1)
    # Connect callback.
    menu.id_pressed.connect(_on_item_pressed)
func _on_item_pressed(id):
    if id == MENU_MAX + 1:
        insert_text_at_caret(Time.get_date_string_from_system())
 C#public override void _Ready()
{
    var menu = GetMenu();
    // Remove all items after "Redo".
    menu.ItemCount = menu.GetItemIndex(TextEdit.MenuItems.Redo) + 1;
    // Add custom items.
    menu.AddSeparator();
    menu.AddItem("Insert Date", TextEdit.MenuItems.Max + 1);
    // Add event handler.
    menu.IdPressed += OnItemPressed;
}
public void OnItemPressed(int id)
{
    if (id == TextEdit.MenuItems.Max + 1)
    {
        InsertTextAtCaret(Time.GetDateStringFromSystem());
    }
}
  Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their Window.visible property. 
int get_minimap_line_at_pos ( Vector2i position ) const
 Returns the equivalent minimap line at position. 
int get_minimap_visible_lines ( ) const
 Returns the number of lines that may be drawn on the minimap. 
Vector2i get_next_visible_line_index_offset_from ( int line, int wrap_index, int visible_amount ) const
 Similar to get_next_visible_line_offset_from, but takes into account the line wrap indexes. In the returned vector, x is the line, y is the wrap index. 
int get_next_visible_line_offset_from ( int line, int visible_amount ) const
 Returns the count to the next visible line from line to line + visible_amount. Can also count backwards. For example if a TextEdit has 5 lines with lines 2 and 3 hidden, calling this with line = 1, visible_amount = 1 would return 3. 
Vector2i get_pos_at_line_column ( int line, int column ) const
 Returns the local position for the given line and column. If x or y of the returned vector equal -1, the position is outside of the viewable area of the control. Note: The Y position corresponds to the bottom side of the line. Use get_rect_at_line_column to get the top side position. 
Rect2i get_rect_at_line_column ( int line, int column ) const
 Returns the local position and size for the grapheme at the given line and column. If x or y position of the returned rect equal -1, the position is outside of the viewable area of the control. Note: The Y position of the returned rect corresponds to the top side of the line, unlike get_pos_at_line_column which returns the bottom side. 
int get_saved_version ( ) const
 Returns the last tagged saved version from tag_saved_version. 
float get_scroll_pos_for_line ( int line, int wrap_index=0 ) const
 Returns the scroll position for wrap_index of line. 
String get_selected_text ( int caret_index=-1 ) Returns the text inside the selection of a caret, or all the carets if caret_index is its default value -1. 
int get_selection_column ( int caret_index=0 ) const
 Returns the original start column of the selection. 
int get_selection_from_column ( int caret_index=0 ) const
 Returns the selection begin column. 
int get_selection_from_line ( int caret_index=0 ) const
 Returns the selection begin line. 
int get_selection_line ( int caret_index=0 ) const
 Returns the original start line of the selection. 
SelectionMode get_selection_mode ( ) const
 Returns the current selection mode. 
int get_selection_to_column ( int caret_index=0 ) const
 Returns the selection end column. 
int get_selection_to_line ( int caret_index=0 ) const
 Returns the selection end line. 
int get_tab_size ( ) const
 Returns the TextEdit's' tab size. 
int get_total_gutter_width ( ) const
 Returns the total width of all gutters and internal padding. 
int get_total_visible_line_count ( ) const
 Returns the number of lines that may be drawn. 
VScrollBar get_v_scroll_bar ( ) const
 Returns the VScrollBar of the TextEdit. 
int get_version ( ) const
 Returns the current version of the TextEdit. The version is a count of recorded operations by the undo/redo history. 
int get_visible_line_count ( ) const
 Returns the number of visible lines, including wrapped text. 
int get_visible_line_count_in_range ( int from_line, int to_line ) const
 Returns the total number of visible + wrapped lines between the two lines. 
String get_word_at_pos ( Vector2 position ) const
 Returns the word at position. 
String get_word_under_caret ( int caret_index=-1 ) const
 Returns a String text with the word under the caret's location. 
bool has_ime_text ( ) const
 Returns if the user has IME text. 
bool has_redo ( ) const
 Returns true if a "redo" action is available. 
bool has_selection ( int caret_index=-1 ) const
 Returns true if the user has selected text. 
bool has_undo ( ) const
 Returns true if an "undo" action is available. void insert_line_at ( int line, String text ) Inserts a new line with text at line. void insert_text_at_caret ( String text, int caret_index=-1 ) Insert the specified text at the caret position. 
bool is_caret_visible ( int caret_index=0 ) const
 Returns true if the caret is visible on the screen. 
bool is_dragging_cursor ( ) const
 Returns true if the user is dragging their mouse for scrolling or selecting. 
bool is_gutter_clickable ( int gutter ) const
 Returns whether the gutter is clickable. 
bool is_gutter_drawn ( int gutter ) const
 Returns whether the gutter is currently drawn. 
bool is_gutter_overwritable ( int gutter ) const
 Returns whether the gutter is overwritable. 
bool is_line_gutter_clickable ( int line, int gutter ) const
 Returns whether the gutter on the given line is clickable. 
bool is_line_wrapped ( int line ) const
 Returns if the given line is wrapped. 
bool is_menu_visible ( ) const
 Returns whether the menu is visible. Use this instead of get_menu().visible to improve performance (so the creation of the menu is avoided). 
bool is_mouse_over_selection ( bool edges, int caret_index=-1 ) const
 Returns whether the mouse is over selection. If edges is true, the edges are considered part of the selection. 
bool is_overtype_mode_enabled ( ) const
 Returns whether the user is in overtype mode. void menu_option ( int option ) Executes a given action as defined in the MenuItems enum. void merge_gutters ( int from_line, int to_line ) Merge the gutters from from_line into to_line. Only overwritable gutters will be copied. void merge_overlapping_carets ( ) Merges any overlapping carets. Will favor the newest caret, or the caret with a selection. Note: This is not called when a caret changes position but after certain actions, so it is possible to get into a state where carets overlap. void paste ( int caret_index=-1 ) Paste at the current location. Can be overridden with _paste. void paste_primary_clipboard ( int caret_index=-1 ) Pastes the primary clipboard. void redo ( ) Perform redo operation. void remove_caret ( int caret ) Removes the given caret index. Note: This can result in adjustment of all other caret indices. void remove_gutter ( int gutter ) Removes the gutter from this TextEdit. void remove_secondary_carets ( ) Removes all additional carets. void remove_text ( int from_line, int from_column, int to_line, int to_column ) Removes text between the given positions. Note: This does not adjust the caret or selection, which as a result it can end up in an invalid position. 
Vector2i search ( String text, int flags, int from_line, int from_colum ) const
 Perform a search inside the text. Search flags can be specified in the SearchFlags enum. In the returned vector, x is the column, y is the line. If no results are found, both are equal to -1.  GDScriptvar result = search("print", SEARCH_WHOLE_WORDS, 0, 0)
if result.x != -1:
    # Result found.
    var line_number = result.y
    var column_number = result.x
 C#Vector2I result = Search("print", (uint)TextEdit.SearchFlags.WholeWords, 0, 0);
if (result.X != -1)
{
    // Result found.
    int lineNumber = result.Y;
    int columnNumber = result.X;
}
  void select ( int from_line, int from_column, int to_line, int to_column, int caret_index=0 ) Perform selection, from line/column to line/column. If selecting_enabled is false, no selection will occur. void select_all ( ) Select all the text. If selecting_enabled is false, no selection will occur. void select_word_under_caret ( int caret_index=-1 ) Selects the word under the caret. void set_caret_column ( int column, bool adjust_viewport=true, int caret_index=0 ) Moves the caret to the specified column index. If adjust_viewport is true, the viewport will center at the caret position after the move occurs. Note: If supporting multiple carets this will not check for any overlap. See merge_overlapping_carets. void set_caret_line ( int line, bool adjust_viewport=true, bool can_be_hidden=true, int wrap_index=0, int caret_index=0 ) Moves the caret to the specified line index. If adjust_viewport is true, the viewport will center at the caret position after the move occurs. If can_be_hidden is true, the specified line can be hidden. Note: If supporting multiple carets this will not check for any overlap. See merge_overlapping_carets. void set_gutter_clickable ( int gutter, bool clickable ) Sets the gutter as clickable. This will change the mouse cursor to a pointing hand when hovering over the gutter. void set_gutter_custom_draw ( int column, Callable draw_callback ) Set a custom draw method for the gutter. The callback method must take the following args: line: int, gutter: int, Area: Rect2. void set_gutter_draw ( int gutter, bool draw ) Sets whether the gutter should be drawn. void set_gutter_name ( int gutter, String name ) Sets the name of the gutter. void set_gutter_overwritable ( int gutter, bool overwritable ) Sets the gutter to overwritable. See merge_gutters. void set_gutter_type ( int gutter, GutterType type ) Sets the type of gutter. void set_gutter_width ( int gutter, int width ) Set the width of the gutter. void set_line ( int line, String new_text ) Sets the text for a specific line. void set_line_as_center_visible ( int line, int wrap_index=0 ) Positions the wrap_index of line at the center of the viewport. void set_line_as_first_visible ( int line, int wrap_index=0 ) Positions the wrap_index of line at the top of the viewport. void set_line_as_last_visible ( int line, int wrap_index=0 ) Positions the wrap_index of line at the bottom of the viewport. void set_line_background_color ( int line, Color color ) Sets the current background color of the line. Set to Color(0, 0, 0, 0) for no color. void set_line_gutter_clickable ( int line, int gutter, bool clickable ) If clickable is true, makes the gutter on line clickable. See gutter_clicked. void set_line_gutter_icon ( int line, int gutter, Texture2D icon ) Sets the icon for gutter on line to icon. void set_line_gutter_item_color ( int line, int gutter, Color color ) Sets the color for gutter on line to color. void set_line_gutter_metadata ( int line, int gutter, Variant metadata ) Sets the metadata for gutter on line to metadata. void set_line_gutter_text ( int line, int gutter, String text ) Sets the text for gutter on line to text. void set_overtype_mode_enabled ( bool enabled ) If true, sets the user into overtype mode. When the user types in this mode, it will override existing text. void set_search_flags ( int flags ) Sets the search flags. This is used with set_search_text to highlight occurrences of the searched text. Search flags can be specified from the SearchFlags enum. void set_search_text ( String search_text ) Sets the search text. See set_search_flags. void set_selection_mode ( SelectionMode mode, int line=-1, int column=-1, int caret_index=0 ) Sets the current selection mode. void set_tab_size ( int size ) Sets the tab size for the TextEdit to use. void set_tooltip_request_func ( Callable callback ) Provide custom tooltip text. The callback method must take the following args: hovered_word: String. void start_action ( EditAction action ) Starts an action, will end the current action if action is different. An action will also end after a call to end_action, after ProjectSettings.gui/timers/text_edit_idle_detect_sec is triggered or a new undoable step outside the start_action and end_action calls. void swap_lines ( int from_line, int to_line ) Swaps the two lines. void tag_saved_version ( ) Tag the current version as saved. void undo ( ) Perform undo operation.   Theme Property Descriptions 
Color background_color = Color(0, 0, 0, 0)
 Sets the background Color of this TextEdit. 
Color caret_background_color = Color(0, 0, 0, 1)
 Color of the text behind the caret when using a block caret. 
Color caret_color = Color(0.875, 0.875, 0.875, 1)
 Color of the caret. This can be set to a fully transparent color to hide the caret entirely. 
Color current_line_color = Color(0.25, 0.25, 0.26, 0.8)
 Background Color of the line containing the caret. 
Color font_color = Color(0.875, 0.875, 0.875, 1)
 Sets the font Color. 
Color font_outline_color = Color(1, 1, 1, 1)
 The tint of text outline of the TextEdit. 
Color font_placeholder_color = Color(0.875, 0.875, 0.875, 0.6)
 Font color for placeholder_text. 
Color font_readonly_color = Color(0.875, 0.875, 0.875, 0.5)
 Sets the font Color when editable is disabled. 
Color font_selected_color = Color(0, 0, 0, 0)
 Sets the Color of the selected text. If equal to Color(0, 0, 0, 0), it will be ignored. 
Color search_result_border_color = Color(0.3, 0.3, 0.3, 0.4)
 Color of the border around text that matches the search query. 
Color search_result_color = Color(0.3, 0.3, 0.3, 1)
 Color behind the text that matches the search query. 
Color selection_color = Color(0.5, 0.5, 0.5, 1)
 Sets the highlight Color of text selections. 
Color word_highlighted_color = Color(0.5, 0.5, 0.5, 0.25)
 Sets the highlight Color of multiple occurrences. highlight_all_occurrences has to be enabled. 
int caret_width = 1
 The caret's width in pixels. Greater values can be used to improve accessibility by ensuring the caret is easily visible, or to ensure consistency with a large font size. If set to 0 or lower, the caret width is automatically set to 1 pixel and multiplied by the display scaling factor. 
int line_spacing = 4
 Sets the spacing between the lines. 
int outline_size = 0
 The size of the text outline. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. 
Font font Sets the default Font. 
int font_size Sets default font size. 
Texture2D space Sets a custom Texture2D for space text characters. 
Texture2D tab Sets a custom Texture2D for tab text characters. 
StyleBox focus Sets the StyleBox when in focus. The focus StyleBox is displayed over the base StyleBox, so a partially transparent StyleBox should be used to ensure the base StyleBox remains visible. A StyleBox that represents an outline or an underline works well for this purpose. To disable the focus visual effect, assign a StyleBoxEmpty resource. Note that disabling the focus visual effect will harm keyboard/controller navigation usability, so this is not recommended for accessibility reasons. 
StyleBox normal Sets the StyleBox of this TextEdit. 
StyleBox read_only Sets the StyleBox of this TextEdit when editable is disabled.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_textedit.html


classes/class_image
-----------------------------------------------------------
Image Inherits: Resource < RefCounted < Object Image datatype.  Description Native image datatype. Contains image data which can be converted to an ImageTexture and provides commonly used image processing methods. The maximum width and height for an Image are MAX_WIDTH and MAX_HEIGHT. An Image cannot be assigned to a texture property of an object directly (such as Sprite2D.texture), and has to be converted manually to an ImageTexture first. Note: The maximum image size is 16384Ã—16384 pixels due to graphics hardware limitations. Larger images may fail to import.   Tutorials  Importing images Runtime file loading and saving    Properties  
Dictionary data { "data": PackedByteArray(), "format": "Lum8", "height": 0, "mipmaps": false, "width": 0 }     Methods  
void adjust_bcs ( float brightness, float contrast, float saturation )  
void blend_rect ( Image src, Rect2i src_rect, Vector2i dst )  
void blend_rect_mask ( Image src, Image mask, Rect2i src_rect, Vector2i dst )  
void blit_rect ( Image src, Rect2i src_rect, Vector2i dst )  
void blit_rect_mask ( Image src, Image mask, Rect2i src_rect, Vector2i dst )  
void bump_map_to_normal_map ( float bump_scale=1.0 )  
void clear_mipmaps ( )  
Error compress ( CompressMode mode, CompressSource source=0, ASTCFormat astc_format=0 )  
Error compress_from_channels ( CompressMode mode, UsedChannels channels, ASTCFormat astc_format=0 )  
Dictionary compute_image_metrics ( Image compared_image, bool use_luma )  
void convert ( Format format )  
void copy_from ( Image src )  
Image create ( int width, int height, bool use_mipmaps, Format format ) static  
Image create_from_data ( int width, int height, bool use_mipmaps, Format format, PackedByteArray data ) static  
void crop ( int width, int height )  
Error decompress ( )  
AlphaMode detect_alpha ( ) const  
UsedChannels detect_used_channels ( CompressSource source=0 ) const  
void fill ( Color color )  
void fill_rect ( Rect2i rect, Color color )  
void fix_alpha_edges ( )  
void flip_x ( )  
void flip_y ( )  
Error generate_mipmaps ( bool renormalize=false )  
PackedByteArray get_data ( ) const  
Format get_format ( ) const  
int get_height ( ) const  
int get_mipmap_count ( ) const  
int get_mipmap_offset ( int mipmap ) const  
Color get_pixel ( int x, int y ) const  
Color get_pixelv ( Vector2i point ) const  
Image get_region ( Rect2i region ) const  
Vector2i get_size ( ) const  
Rect2i get_used_rect ( ) const  
int get_width ( ) const  
bool has_mipmaps ( ) const  
bool is_compressed ( ) const  
bool is_empty ( ) const  
bool is_invisible ( ) const  
Error load ( String path )  
Error load_bmp_from_buffer ( PackedByteArray buffer )  
Image load_from_file ( String path ) static  
Error load_jpg_from_buffer ( PackedByteArray buffer )  
Error load_ktx_from_buffer ( PackedByteArray buffer )  
Error load_png_from_buffer ( PackedByteArray buffer )  
Error load_svg_from_buffer ( PackedByteArray buffer, float scale=1.0 )  
Error load_svg_from_string ( String svg_str, float scale=1.0 )  
Error load_tga_from_buffer ( PackedByteArray buffer )  
Error load_webp_from_buffer ( PackedByteArray buffer )  
void normal_map_to_xy ( )  
void premultiply_alpha ( )  
void resize ( int width, int height, Interpolation interpolation=1 )  
void resize_to_po2 ( bool square=false, Interpolation interpolation=1 )  
Image rgbe_to_srgb ( )  
void rotate_90 ( ClockDirection direction )  
void rotate_180 ( )  
Error save_exr ( String path, bool grayscale=false ) const  
PackedByteArray save_exr_to_buffer ( bool grayscale=false ) const  
Error save_jpg ( String path, float quality=0.75 ) const  
PackedByteArray save_jpg_to_buffer ( float quality=0.75 ) const  
Error save_png ( String path ) const  
PackedByteArray save_png_to_buffer ( ) const  
Error save_webp ( String path, bool lossy=false, float quality=0.75 ) const  
PackedByteArray save_webp_to_buffer ( bool lossy=false, float quality=0.75 ) const  
void set_data ( int width, int height, bool use_mipmaps, Format format, PackedByteArray data )  
void set_pixel ( int x, int y, Color color )  
void set_pixelv ( Vector2i point, Color color )  
void shrink_x2 ( )  
void srgb_to_linear ( )     Enumerations enum Format: 
Format FORMAT_L8 = 0
 Texture format with a single 8-bit depth representing luminance. 
Format FORMAT_LA8 = 1
 OpenGL texture format with two values, luminance and alpha each stored with 8 bits. 
Format FORMAT_R8 = 2
 OpenGL texture format RED with a single component and a bitdepth of 8. 
Format FORMAT_RG8 = 3
 OpenGL texture format RG with two components and a bitdepth of 8 for each. 
Format FORMAT_RGB8 = 4
 OpenGL texture format RGB with three components, each with a bitdepth of 8. Note: When creating an ImageTexture, an sRGB to linear color space conversion is performed. 
Format FORMAT_RGBA8 = 5
 OpenGL texture format RGBA with four components, each with a bitdepth of 8. Note: When creating an ImageTexture, an sRGB to linear color space conversion is performed. 
Format FORMAT_RGBA4444 = 6
 OpenGL texture format RGBA with four components, each with a bitdepth of 4. 
Format FORMAT_RGB565 = 7
 OpenGL texture format RGB with three components. Red and blue have a bitdepth of 5, and green has a bitdepth of 6. 
Format FORMAT_RF = 8
 OpenGL texture format GL_R32F where there's one component, a 32-bit floating-point value. 
Format FORMAT_RGF = 9
 OpenGL texture format GL_RG32F where there are two components, each a 32-bit floating-point values. 
Format FORMAT_RGBF = 10
 OpenGL texture format GL_RGB32F where there are three components, each a 32-bit floating-point values. 
Format FORMAT_RGBAF = 11
 OpenGL texture format GL_RGBA32F where there are four components, each a 32-bit floating-point values. 
Format FORMAT_RH = 12
 OpenGL texture format GL_R16F where there's one component, a 16-bit "half-precision" floating-point value. 
Format FORMAT_RGH = 13
 OpenGL texture format GL_RG16F where there are two components, each a 16-bit "half-precision" floating-point value. 
Format FORMAT_RGBH = 14
 OpenGL texture format GL_RGB16F where there are three components, each a 16-bit "half-precision" floating-point value. 
Format FORMAT_RGBAH = 15
 OpenGL texture format GL_RGBA16F where there are four components, each a 16-bit "half-precision" floating-point value. 
Format FORMAT_RGBE9995 = 16
 A special OpenGL texture format where the three color components have 9 bits of precision and all three share a single 5-bit exponent. 
Format FORMAT_DXT1 = 17
 The S3TC texture format that uses Block Compression 1, and is the smallest variation of S3TC, only providing 1 bit of alpha and color data being premultiplied with alpha. Note: When creating an ImageTexture, an sRGB to linear color space conversion is performed. 
Format FORMAT_DXT3 = 18
 The S3TC texture format that uses Block Compression 2, and color data is interpreted as not having been premultiplied by alpha. Well suited for images with sharp alpha transitions between translucent and opaque areas. Note: When creating an ImageTexture, an sRGB to linear color space conversion is performed. 
Format FORMAT_DXT5 = 19
 The S3TC texture format also known as Block Compression 3 or BC3 that contains 64 bits of alpha channel data followed by 64 bits of DXT1-encoded color data. Color data is not premultiplied by alpha, same as DXT3. DXT5 generally produces superior results for transparent gradients compared to DXT3. Note: When creating an ImageTexture, an sRGB to linear color space conversion is performed. 
Format FORMAT_RGTC_R = 20
 Texture format that uses Red Green Texture Compression, normalizing the red channel data using the same compression algorithm that DXT5 uses for the alpha channel. 
Format FORMAT_RGTC_RG = 21
 Texture format that uses Red Green Texture Compression, normalizing the red and green channel data using the same compression algorithm that DXT5 uses for the alpha channel. 
Format FORMAT_BPTC_RGBA = 22
 Texture format that uses BPTC compression with unsigned normalized RGBA components. Note: When creating an ImageTexture, an sRGB to linear color space conversion is performed. 
Format FORMAT_BPTC_RGBF = 23
 Texture format that uses BPTC compression with signed floating-point RGB components. 
Format FORMAT_BPTC_RGBFU = 24
 Texture format that uses BPTC compression with unsigned floating-point RGB components. 
Format FORMAT_ETC = 25
 Ericsson Texture Compression format 1, also referred to as "ETC1", and is part of the OpenGL ES graphics standard. This format cannot store an alpha channel. 
Format FORMAT_ETC2_R11 = 26
 Ericsson Texture Compression format 2 (R11_EAC variant), which provides one channel of unsigned data. 
Format FORMAT_ETC2_R11S = 27
 Ericsson Texture Compression format 2 (SIGNED_R11_EAC variant), which provides one channel of signed data. 
Format FORMAT_ETC2_RG11 = 28
 Ericsson Texture Compression format 2 (RG11_EAC variant), which provides two channels of unsigned data. 
Format FORMAT_ETC2_RG11S = 29
 Ericsson Texture Compression format 2 (SIGNED_RG11_EAC variant), which provides two channels of signed data. 
Format FORMAT_ETC2_RGB8 = 30
 Ericsson Texture Compression format 2 (RGB8 variant), which is a follow-up of ETC1 and compresses RGB888 data. Note: When creating an ImageTexture, an sRGB to linear color space conversion is performed. 
Format FORMAT_ETC2_RGBA8 = 31
 Ericsson Texture Compression format 2 (RGBA8variant), which compresses RGBA8888 data with full alpha support. Note: When creating an ImageTexture, an sRGB to linear color space conversion is performed. 
Format FORMAT_ETC2_RGB8A1 = 32
 Ericsson Texture Compression format 2 (RGB8_PUNCHTHROUGH_ALPHA1 variant), which compresses RGBA data to make alpha either fully transparent or fully opaque. Note: When creating an ImageTexture, an sRGB to linear color space conversion is performed. 
Format FORMAT_ETC2_RA_AS_RG = 33
 Ericsson Texture Compression format 2 (RGBA8 variant), which compresses RA data and interprets it as two channels (red and green). See also FORMAT_ETC2_RGBA8. 
Format FORMAT_DXT5_RA_AS_RG = 34
 The S3TC texture format also known as Block Compression 3 or BC3, which compresses RA data and interprets it as two channels (red and green). See also FORMAT_DXT5. 
Format FORMAT_ASTC_4x4 = 35
 Adaptive Scalable Texture Compression. This implements the 4x4 (high quality) mode. 
Format FORMAT_ASTC_4x4_HDR = 36
 Same format as FORMAT_ASTC_4x4, but with the hint to let the GPU know it is used for HDR. 
Format FORMAT_ASTC_8x8 = 37
 Adaptive Scalable Texture Compression. This implements the 8x8 (low quality) mode. 
Format FORMAT_ASTC_8x8_HDR = 38
 Same format as FORMAT_ASTC_8x8, but with the hint to let the GPU know it is used for HDR. 
Format FORMAT_MAX = 39
 Represents the size of the Format enum. enum Interpolation: 
Interpolation INTERPOLATE_NEAREST = 0
 Performs nearest-neighbor interpolation. If the image is resized, it will be pixelated. 
Interpolation INTERPOLATE_BILINEAR = 1
 Performs bilinear interpolation. If the image is resized, it will be blurry. This mode is faster than INTERPOLATE_CUBIC, but it results in lower quality. 
Interpolation INTERPOLATE_CUBIC = 2
 Performs cubic interpolation. If the image is resized, it will be blurry. This mode often gives better results compared to INTERPOLATE_BILINEAR, at the cost of being slower. 
Interpolation INTERPOLATE_TRILINEAR = 3
 Performs bilinear separately on the two most-suited mipmap levels, then linearly interpolates between them. It's slower than INTERPOLATE_BILINEAR, but produces higher-quality results with far fewer aliasing artifacts. If the image does not have mipmaps, they will be generated and used internally, but no mipmaps will be generated on the resulting image. Note: If you intend to scale multiple copies of the original image, it's better to call generate_mipmaps] on it in advance, to avoid wasting processing power in generating them again and again. On the other hand, if the image already has mipmaps, they will be used, and a new set will be generated for the resulting image. 
Interpolation INTERPOLATE_LANCZOS = 4
 Performs Lanczos interpolation. This is the slowest image resizing mode, but it typically gives the best results, especially when downscaling images. enum AlphaMode: 
AlphaMode ALPHA_NONE = 0
 Image does not have alpha. 
AlphaMode ALPHA_BIT = 1
 Image stores alpha in a single bit. 
AlphaMode ALPHA_BLEND = 2
 Image uses alpha. enum CompressMode: 
CompressMode COMPRESS_S3TC = 0
 Use S3TC compression. 
CompressMode COMPRESS_ETC = 1
 Use ETC compression. 
CompressMode COMPRESS_ETC2 = 2
 Use ETC2 compression. 
CompressMode COMPRESS_BPTC = 3
 Use BPTC compression. 
CompressMode COMPRESS_ASTC = 4
 Use ASTC compression. 
CompressMode COMPRESS_MAX = 5
 Represents the size of the CompressMode enum. enum UsedChannels: 
UsedChannels USED_CHANNELS_L = 0
 The image only uses one channel for luminance (grayscale). 
UsedChannels USED_CHANNELS_LA = 1
 The image uses two channels for luminance and alpha, respectively. 
UsedChannels USED_CHANNELS_R = 2
 The image only uses the red channel. 
UsedChannels USED_CHANNELS_RG = 3
 The image uses two channels for red and green. 
UsedChannels USED_CHANNELS_RGB = 4
 The image uses three channels for red, green, and blue. 
UsedChannels USED_CHANNELS_RGBA = 5
 The image uses four channels for red, green, blue, and alpha. enum CompressSource: 
CompressSource COMPRESS_SOURCE_GENERIC = 0
 Source texture (before compression) is a regular texture. Default for all textures. 
CompressSource COMPRESS_SOURCE_SRGB = 1
 Source texture (before compression) is in sRGB space. 
CompressSource COMPRESS_SOURCE_NORMAL = 2
 Source texture (before compression) is a normal texture (e.g. it can be compressed into two channels). enum ASTCFormat: 
ASTCFormat ASTC_FORMAT_4x4 = 0
 Hint to indicate that the high quality 4x4 ASTC compression format should be used. 
ASTCFormat ASTC_FORMAT_8x8 = 1
 Hint to indicate that the low quality 8x8 ASTC compression format should be used.   Constants MAX_WIDTH = 16777216
 The maximal width allowed for Image resources. MAX_HEIGHT = 16777216
 The maximal height allowed for Image resources.   Property Descriptions 
Dictionary data = { "data": PackedByteArray(), "format": "Lum8", "height": 0, "mipmaps": false, "width": 0 }
 Holds all the image's color data in a given format. See Format constants.   Method Descriptions void adjust_bcs ( float brightness, float contrast, float saturation ) Adjusts this image's brightness, contrast, and saturation by the given values. Does not work if the image is compressed (see is_compressed). void blend_rect ( Image src, Rect2i src_rect, Vector2i dst ) Alpha-blends src_rect from src image to this image at coordinates dst, clipped accordingly to both image bounds. This image and src image must have the same format. src_rect with non-positive size is treated as empty. void blend_rect_mask ( Image src, Image mask, Rect2i src_rect, Vector2i dst ) Alpha-blends src_rect from src image to this image using mask image at coordinates dst, clipped accordingly to both image bounds. Alpha channels are required for both src and mask. dst pixels and src pixels will blend if the corresponding mask pixel's alpha value is not 0. This image and src image must have the same format. src image and mask image must have the same size (width and height) but they can have different formats. src_rect with non-positive size is treated as empty. void blit_rect ( Image src, Rect2i src_rect, Vector2i dst ) Copies src_rect from src image to this image at coordinates dst, clipped accordingly to both image bounds. This image and src image must have the same format. src_rect with non-positive size is treated as empty. void blit_rect_mask ( Image src, Image mask, Rect2i src_rect, Vector2i dst ) Blits src_rect area from src image to this image at the coordinates given by dst, clipped accordingly to both image bounds. src pixel is copied onto dst if the corresponding mask pixel's alpha value is not 0. This image and src image must have the same format. src image and mask image must have the same size (width and height) but they can have different formats. src_rect with non-positive size is treated as empty. void bump_map_to_normal_map ( float bump_scale=1.0 ) Converts a bump map to a normal map. A bump map provides a height offset per-pixel, while a normal map provides a normal direction per pixel. void clear_mipmaps ( ) Removes the image's mipmaps. 
Error compress ( CompressMode mode, CompressSource source=0, ASTCFormat astc_format=0 ) Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available. The source parameter helps to pick the best compression method for DXT and ETC2 formats. It is ignored for ASTC compression. For ASTC compression, the astc_format parameter must be supplied. 
Error compress_from_channels ( CompressMode mode, UsedChannels channels, ASTCFormat astc_format=0 ) Compresses the image to use less memory. Can not directly access pixel data while the image is compressed. Returns error if the chosen compression mode is not available. This is an alternative to compress that lets the user supply the channels used in order for the compressor to pick the best DXT and ETC2 formats. For other formats (non DXT or ETC2), this argument is ignored. For ASTC compression, the astc_format parameter must be supplied. 
Dictionary compute_image_metrics ( Image compared_image, bool use_luma ) Compute image metrics on the current image and the compared image. The dictionary contains max, mean, mean_squared, root_mean_squared and peak_snr. void convert ( Format format ) Converts the image's format. See Format constants. void copy_from ( Image src ) Copies src image to this image. 
Image create ( int width, int height, bool use_mipmaps, Format format ) static
 Creates an empty image of given size and format. See Format constants. If use_mipmaps is true, then generate mipmaps for this image. See the generate_mipmaps. 
Image create_from_data ( int width, int height, bool use_mipmaps, Format format, PackedByteArray data ) static
 Creates a new image of given size and format. See Format constants. Fills the image with the given raw data. If use_mipmaps is true then loads mipmaps for this image from data. See generate_mipmaps. void crop ( int width, int height ) Crops the image to the given width and height. If the specified size is larger than the current size, the extra area is filled with black pixels. 
Error decompress ( ) Decompresses the image if it is VRAM compressed in a supported format. Returns @GlobalScope.OK if the format is supported, otherwise @GlobalScope.ERR_UNAVAILABLE. Note: The following formats can be decompressed: DXT, RGTC, BPTC. The formats ETC1 and ETC2 are not supported. 
AlphaMode detect_alpha ( ) const
 Returns ALPHA_BLEND if the image has data for alpha values. Returns ALPHA_BIT if all the alpha values are stored in a single bit. Returns ALPHA_NONE if no data for alpha values is found. 
UsedChannels detect_used_channels ( CompressSource source=0 ) const
 Returns the color channels used by this image, as one of the UsedChannels constants. If the image is compressed, the original source must be specified. void fill ( Color color ) Fills the image with color. void fill_rect ( Rect2i rect, Color color ) Fills rect with color. void fix_alpha_edges ( ) Blends low-alpha pixels with nearby pixels. void flip_x ( ) Flips the image horizontally. void flip_y ( ) Flips the image vertically. 
Error generate_mipmaps ( bool renormalize=false ) Generates mipmaps for the image. Mipmaps are precalculated lower-resolution copies of the image that are automatically used if the image needs to be scaled down when rendered. They help improve image quality and performance when rendering. This method returns an error if the image is compressed, in a custom format, or if the image's width/height is 0. Enabling renormalize when generating mipmaps for normal map textures will make sure all resulting vector values are normalized. It is possible to check if the image has mipmaps by calling has_mipmaps or get_mipmap_count. Calling generate_mipmaps on an image that already has mipmaps will replace existing mipmaps in the image. 
PackedByteArray get_data ( ) const
 Returns a copy of the image's raw data. 
Format get_format ( ) const
 Returns the image's format. See Format constants. 
int get_height ( ) const
 Returns the image's height. 
int get_mipmap_count ( ) const
 Returns the number of mipmap levels or 0 if the image has no mipmaps. The largest main level image is not counted as a mipmap level by this method, so if you want to include it you can add 1 to this count. 
int get_mipmap_offset ( int mipmap ) const
 Returns the offset where the image's mipmap with index mipmap is stored in the data dictionary. 
Color get_pixel ( int x, int y ) const
 Returns the color of the pixel at (x, y). This is the same as get_pixelv, but with two integer arguments instead of a Vector2i argument. 
Color get_pixelv ( Vector2i point ) const
 Returns the color of the pixel at point. This is the same as get_pixel, but with a Vector2i argument instead of two integer arguments. 
Image get_region ( Rect2i region ) const
 Returns a new Image that is a copy of this Image's area specified with region. 
Vector2i get_size ( ) const
 Returns the image's size (width and height). 
Rect2i get_used_rect ( ) const
 Returns a Rect2i enclosing the visible portion of the image, considering each pixel with a non-zero alpha channel as visible. 
int get_width ( ) const
 Returns the image's width. 
bool has_mipmaps ( ) const
 Returns true if the image has generated mipmaps. 
bool is_compressed ( ) const
 Returns true if the image is compressed. 
bool is_empty ( ) const
 Returns true if the image has no data. 
bool is_invisible ( ) const
 Returns true if all the image's pixels have an alpha value of 0. Returns false if any pixel has an alpha value higher than 0. 
Error load ( String path ) Loads an image from file path. See Supported image formats for a list of supported image formats and limitations. Warning: This method should only be used in the editor or in cases when you need to load external images at run-time, such as images located at the user:// directory, and may not work in exported projects. See also ImageTexture description for usage examples. 
Error load_bmp_from_buffer ( PackedByteArray buffer ) Loads an image from the binary contents of a BMP file. Note: Godot's BMP module doesn't support 16-bit per pixel images. Only 1-bit, 4-bit, 8-bit, 24-bit, and 32-bit per pixel images are supported. Note: This method is only available in engine builds with the BMP module enabled. By default, the BMP module is enabled, but it can be disabled at build-time using the module_bmp_enabled=no SCons option. 
Image load_from_file ( String path ) static
 Creates a new Image and loads data from the specified file. 
Error load_jpg_from_buffer ( PackedByteArray buffer ) Loads an image from the binary contents of a JPEG file. 
Error load_ktx_from_buffer ( PackedByteArray buffer ) Loads an image from the binary contents of a KTX file. Unlike most image formats, KTX can store VRAM-compressed data and embed mipmaps. Note: Godot's libktx implementation only supports 2D images. Cubemaps, texture arrays, and de-padding are not supported. Note: This method is only available in engine builds with the KTX module enabled. By default, the KTX module is enabled, but it can be disabled at build-time using the module_ktx_enabled=no SCons option. 
Error load_png_from_buffer ( PackedByteArray buffer ) Loads an image from the binary contents of a PNG file. 
Error load_svg_from_buffer ( PackedByteArray buffer, float scale=1.0 ) Loads an image from the UTF-8 binary contents of an uncompressed SVG file (.svg). Note: Beware when using compressed SVG files (like .svgz), they need to be decompressed before loading. Note: This method is only available in engine builds with the SVG module enabled. By default, the SVG module is enabled, but it can be disabled at build-time using the module_svg_enabled=no SCons option. 
Error load_svg_from_string ( String svg_str, float scale=1.0 ) Loads an image from the string contents of a SVG file (.svg). Note: This method is only available in engine builds with the SVG module enabled. By default, the SVG module is enabled, but it can be disabled at build-time using the module_svg_enabled=no SCons option. 
Error load_tga_from_buffer ( PackedByteArray buffer ) Loads an image from the binary contents of a TGA file. Note: This method is only available in engine builds with the TGA module enabled. By default, the TGA module is enabled, but it can be disabled at build-time using the module_tga_enabled=no SCons option. 
Error load_webp_from_buffer ( PackedByteArray buffer ) Loads an image from the binary contents of a WebP file. void normal_map_to_xy ( ) Converts the image's data to represent coordinates on a 3D plane. This is used when the image represents a normal map. A normal map can add lots of detail to a 3D surface without increasing the polygon count. void premultiply_alpha ( ) Multiplies color values with alpha values. Resulting color values for a pixel are (color * alpha)/256. See also CanvasItemMaterial.blend_mode. void resize ( int width, int height, Interpolation interpolation=1 ) Resizes the image to the given width and height. New pixels are calculated using the interpolation mode defined via Interpolation constants. void resize_to_po2 ( bool square=false, Interpolation interpolation=1 ) Resizes the image to the nearest power of 2 for the width and height. If square is true then set width and height to be the same. New pixels are calculated using the interpolation mode defined via Interpolation constants. 
Image rgbe_to_srgb ( ) Converts a standard RGBE (Red Green Blue Exponent) image to an sRGB image. void rotate_90 ( ClockDirection direction ) Rotates the image in the specified direction by 90 degrees. The width and height of the image must be greater than 1. If the width and height are not equal, the image will be resized. void rotate_180 ( ) Rotates the image by 180 degrees. The width and height of the image must be greater than 1. 
Error save_exr ( String path, bool grayscale=false ) const
 Saves the image as an EXR file to path. If grayscale is true and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return @GlobalScope.ERR_UNAVAILABLE if Godot was compiled without the TinyEXR module. Note: The TinyEXR module is disabled in non-editor builds, which means save_exr will return @GlobalScope.ERR_UNAVAILABLE when it is called from an exported project. 
PackedByteArray save_exr_to_buffer ( bool grayscale=false ) const
 Saves the image as an EXR file to a byte array. If grayscale is true and the image has only one channel, it will be saved explicitly as monochrome rather than one red channel. This function will return an empty byte array if Godot was compiled without the TinyEXR module. Note: The TinyEXR module is disabled in non-editor builds, which means save_exr will return an empty byte array when it is called from an exported project. 
Error save_jpg ( String path, float quality=0.75 ) const
 Saves the image as a JPEG file to path with the specified quality between 0.01 and 1.0 (inclusive). Higher quality values result in better-looking output at the cost of larger file sizes. Recommended quality values are between 0.75 and 0.90. Even at quality 1.00, JPEG compression remains lossy. Note: JPEG does not save an alpha channel. If the Image contains an alpha channel, the image will still be saved, but the resulting JPEG file won't contain the alpha channel. 
PackedByteArray save_jpg_to_buffer ( float quality=0.75 ) const
 Saves the image as a JPEG file to a byte array with the specified quality between 0.01 and 1.0 (inclusive). Higher quality values result in better-looking output at the cost of larger byte array sizes (and therefore memory usage). Recommended quality values are between 0.75 and 0.90. Even at quality 1.00, JPEG compression remains lossy. Note: JPEG does not save an alpha channel. If the Image contains an alpha channel, the image will still be saved, but the resulting byte array won't contain the alpha channel. 
Error save_png ( String path ) const
 Saves the image as a PNG file to the file at path. 
PackedByteArray save_png_to_buffer ( ) const
 Saves the image as a PNG file to a byte array. 
Error save_webp ( String path, bool lossy=false, float quality=0.75 ) const
 Saves the image as a WebP (Web Picture) file to the file at path. By default it will save lossless. If lossy is true, the image will be saved lossy, using the quality setting between 0.0 and 1.0 (inclusive). Lossless WebP offers more efficient compression than PNG. Note: The WebP format is limited to a size of 16383Ã—16383 pixels, while PNG can save larger images. 
PackedByteArray save_webp_to_buffer ( bool lossy=false, float quality=0.75 ) const
 Saves the image as a WebP (Web Picture) file to a byte array. By default it will save lossless. If lossy is true, the image will be saved lossy, using the quality setting between 0.0 and 1.0 (inclusive). Lossless WebP offers more efficient compression than PNG. Note: The WebP format is limited to a size of 16383Ã—16383 pixels, while PNG can save larger images. void set_data ( int width, int height, bool use_mipmaps, Format format, PackedByteArray data ) Overwrites data of an existing Image. Non-static equivalent of create_from_data. void set_pixel ( int x, int y, Color color ) Sets the Color of the pixel at (x, y) to color. Example:  GDScriptvar img_width = 10
var img_height = 5
var img = Image.create(img_width, img_height, false, Image.FORMAT_RGBA8)
img.set_pixel(1, 2, Color.RED) # Sets the color at (1, 2) to red.
 C#int imgWidth = 10;
int imgHeight = 5;
var img = Image.Create(imgWidth, imgHeight, false, Image.Format.Rgba8);
img.SetPixel(1, 2, Colors.Red); // Sets the color at (1, 2) to red.
  This is the same as set_pixelv, but with a two integer arguments instead of a Vector2i argument. void set_pixelv ( Vector2i point, Color color ) Sets the Color of the pixel at point to color. Example:  GDScriptvar img_width = 10
var img_height = 5
var img = Image.create(img_width, img_height, false, Image.FORMAT_RGBA8)
img.set_pixelv(Vector2i(1, 2), Color.RED) # Sets the color at (1, 2) to red.
 C#int imgWidth = 10;
int imgHeight = 5;
var img = Image.Create(imgWidth, imgHeight, false, Image.Format.Rgba8);
img.SetPixelv(new Vector2I(1, 2), Colors.Red); // Sets the color at (1, 2) to red.
  This is the same as set_pixel, but with a Vector2i argument instead of two integer arguments. void shrink_x2 ( ) Shrinks the image by a factor of 2 on each axis (this divides the pixel count by 4). void srgb_to_linear ( ) Converts the raw data from the sRGB colorspace to a linear scale.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_image.html


classes/class_resource
-----------------------------------------------------------
Resource Inherits: RefCounted < Object Inherited By: Animation, AnimationLibrary, AnimationNode, AnimationNodeStateMachinePlayback, AnimationNodeStateMachineTransition, AudioBusLayout, AudioEffect, AudioStream, BitMap, BoneMap, ButtonGroup, CameraAttributes, CryptoKey, Curve, Curve2D, Curve3D, EditorNode3DGizmoPlugin, EditorSettings, Environment, Font, GDExtension, GLTFAccessor, GLTFAnimation, GLTFBufferView, GLTFCamera, GLTFDocument, GLTFDocumentExtension, GLTFLight, GLTFMesh, GLTFNode, GLTFPhysicsBody, GLTFPhysicsShape, GLTFSkeleton, GLTFSkin, GLTFSpecGloss, GLTFState, GLTFTexture, GLTFTextureSampler, Gradient, Image, ImporterMesh, InputEvent, JSON, LabelSettings, LightmapGIData, Material, Mesh, MeshLibrary, MissingResource, MultiMesh, NavigationMesh, NavigationMeshSourceGeometryData2D, NavigationMeshSourceGeometryData3D, NavigationPolygon, Noise, Occluder3D, OccluderPolygon2D, OggPacketSequence, OpenXRAction, OpenXRActionMap, OpenXRActionSet, OpenXRInteractionProfile, OpenXRIPBinding, PackedDataContainer, PackedScene, PhysicsMaterial, PolygonPathFinder, RDShaderFile, RDShaderSPIRV, RichTextEffect, SceneReplicationConfig, Script, Shader, ShaderInclude, Shape2D, Shape3D, Shortcut, SkeletonModification2D, SkeletonModificationStack2D, SkeletonProfile, Skin, Sky, SpriteFrames, StyleBox, SyntaxHighlighter, Texture, Theme, TileMapPattern, TileSet, TileSetSource, Translation, VideoStream, VideoStreamPlayback, VisualShaderNode, VoxelGIData, World2D, World3D, X509Certificate Base class for serializable objects.  Description Resource is the base class for all Godot-specific resource types, serving primarily as data containers. Since they inherit from RefCounted, resources are reference-counted and freed when no longer in use. They can also be nested within other resources, and saved on disk. Once loaded from disk, further attempts to load a resource by resource_path returns the same reference. PackedScene, one of the most common Objects in a Godot project, is also a resource, uniquely capable of storing and instantiating the Nodes it contains as many times as desired. In GDScript, resources can loaded from disk by their resource_path using @GDScript.load or @GDScript.preload. Note: In C#, resources will not be freed instantly after they are no longer in use. Instead, garbage collection will run periodically and will free resources that are no longer in use. This means that unused resources will linger on for a while before being removed.   Tutorials  Resources When and how to avoid using nodes for everything    Properties  
bool resource_local_to_scene false  
String resource_name ""  
String resource_path ""     Methods  
RID _get_rid ( ) virtual  
void _setup_local_to_scene ( ) virtual  
Resource duplicate ( bool subresources=false ) const  
void emit_changed ( )  
Node get_local_scene ( ) const  
RID get_rid ( ) const  
void setup_local_to_scene ( )  
void take_over_path ( String path )     Signals changed ( ) Emitted when the resource changes, usually when one of its properties is modified. See also emit_changed. Note: This signal is not emitted automatically for properties of custom resources. If necessary, a setter needs to be created to emit the signal. setup_local_to_scene_requested ( ) Emitted by a newly duplicated resource with resource_local_to_scene set to true. Deprecated. This signal is only emitted when the resource is created. Override _setup_local_to_scene instead.   Property Descriptions 
bool resource_local_to_scene = false
  void set_local_to_scene ( bool value )
 
bool is_local_to_scene ( )
  If true, the resource is duplicated for each instance of all scenes using it. At run-time, the resource can be modified in one scene without affecting other instances (see PackedScene.instantiate). Note: Changing this property at run-time has no effect on already created duplicate resources. 
String resource_name = ""
  void set_name ( String value )
 
String get_name ( )
  An optional name for this resource. When defined, its value is displayed to represent the resource in the Inspector dock. For built-in scripts, the name is displayed as part of the tab name in the script editor. Note: Some resource formats do not support resource names. You can still set the name in the editor or via code, but it will be lost when the resource is reloaded. For example, only built-in scripts can have a resource name, while scripts stored in separate files cannot. 
String resource_path = ""
  void set_path ( String value )
 
String get_path ( )
  The unique path to this resource. If it has been saved to disk, the value will be its filepath. If the resource is exclusively contained within a scene, the value will be the PackedScene's filepath, followed by a unique identifier. Note: Setting this property manually may fail if a resource with the same path has already been previously loaded. If necessary, use take_over_path.   Method Descriptions 
RID _get_rid ( ) virtual
 Override this method to return a custom RID when get_rid is called. void _setup_local_to_scene ( ) virtual
 Override this method to customize the newly duplicated resource created from PackedScene.instantiate, if the original's resource_local_to_scene is set to true. Example: Set a random damage value to every local resource from an instantiated scene. extends Resource
var damage = 0
func _setup_local_to_scene():
    damage = randi_range(10, 40)
 
Resource duplicate ( bool subresources=false ) const
 Duplicates this resource, returning a new resource with its exported or @GlobalScope.PROPERTY_USAGE_STORAGE properties copied from the original. If subresources is false, a shallow copy is returned; nested resources within subresources are not duplicated and are shared from the original resource. If subresources is true, a deep copy is returned; nested subresources will be duplicated and are not shared. Subresource properties with the @GlobalScope.PROPERTY_USAGE_ALWAYS_DUPLICATE flag are always duplicated even with subresources set to false, and properties with the @GlobalScope.PROPERTY_USAGE_NEVER_DUPLICATE flag are never duplicated even with subresources set to true. Note: For custom resources, this method will fail if Object._init has been defined with required parameters. void emit_changed ( ) Emits the changed signal. This method is called automatically for some built-in resources. Note: For custom resources, it's recommended to call this method whenever a meaningful change occurs, such as a modified property. This ensures that custom Objects depending on the resource are properly updated. var damage:
    set(new_value):
        if damage != new_value:
            damage = new_value
            emit_changed()
 
Node get_local_scene ( ) const
 If resource_local_to_scene is set to true and the resource has been loaded from a PackedScene instantiation, returns the root Node of the scene where this resource is used. Otherwise, returns null. 
RID get_rid ( ) const
 Returns the RID of this resource (or an empty RID). Many resources (such as Texture2D, Mesh, and so on) are high-level abstractions of resources stored in a specialized server (DisplayServer, RenderingServer, etc.), so this function will return the original RID. void setup_local_to_scene ( ) Calls _setup_local_to_scene. If resource_local_to_scene is set to true, this method is automatically called from PackedScene.instantiate by the newly duplicated resource within the scene instance. Deprecated. This method should only be called internally. Override _setup_local_to_scene instead. void take_over_path ( String path ) Sets the resource_path to path, potentially overriding an existing cache entry for this path. Further attempts to load an overridden resource by path will instead return this resource.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_resource.html


classes/class_sprite2d
-----------------------------------------------------------
Sprite2D Inherits: Node2D < CanvasItem < Node < Object General-purpose sprite node.  Description A node that displays a 2D texture. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation.   Tutorials  Instancing Demo    Properties  
bool centered true  
bool flip_h false  
bool flip_v false  
int frame 0  
Vector2i frame_coords Vector2i(0, 0)  
int hframes 1  
Vector2 offset Vector2(0, 0)  
bool region_enabled false  
bool region_filter_clip_enabled false  
Rect2 region_rect Rect2(0, 0, 0, 0)  
Texture2D texture   
int vframes 1     Methods  
Rect2 get_rect ( ) const  
bool is_pixel_opaque ( Vector2 pos ) const     Signals frame_changed ( ) Emitted when the frame changes. texture_changed ( ) Emitted when the texture changes.   Property Descriptions 
bool centered = true
  void set_centered ( bool value )
 
bool is_centered ( )
  If true, texture is centered. 
bool flip_h = false
  void set_flip_h ( bool value )
 
bool is_flipped_h ( )
  If true, texture is flipped horizontally. 
bool flip_v = false
  void set_flip_v ( bool value )
 
bool is_flipped_v ( )
  If true, texture is flipped vertically. 
int frame = 0
  void set_frame ( int value )
 
int get_frame ( )
  Current frame to display from sprite sheet. hframes or vframes must be greater than 1. This property is automatically adjusted when hframes or vframes are changed to keep pointing to the same visual frame (same column and row). If that's impossible, this value is reset to 0. 
Vector2i frame_coords = Vector2i(0, 0)
  void set_frame_coords ( Vector2i value )
 
Vector2i get_frame_coords ( )
  Coordinates of the frame to display from sprite sheet. This is as an alias for the frame property. hframes or vframes must be greater than 1. 
int hframes = 1
  void set_hframes ( int value )
 
int get_hframes ( )
  The number of columns in the sprite sheet. When this property is changed, frame is adjusted so that the same visual frame is maintained (same row and column). If that's impossible, frame is reset to 0. 
Vector2 offset = Vector2(0, 0)
  void set_offset ( Vector2 value )
 
Vector2 get_offset ( )
  The texture's drawing offset. 
bool region_enabled = false
  void set_region_enabled ( bool value )
 
bool is_region_enabled ( )
  If true, texture is cut from a larger atlas texture. See region_rect. 
bool region_filter_clip_enabled = false
  void set_region_filter_clip_enabled ( bool value )
 
bool is_region_filter_clip_enabled ( )
  If true, the outermost pixels get blurred out. region_enabled must be true. 
Rect2 region_rect = Rect2(0, 0, 0, 0)
  void set_region_rect ( Rect2 value )
 
Rect2 get_region_rect ( )
  The region of the atlas texture to display. region_enabled must be true. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  Texture2D object to draw. 
int vframes = 1
  void set_vframes ( int value )
 
int get_vframes ( )
  The number of rows in the sprite sheet. When this property is changed, frame is adjusted so that the same visual frame is maintained (same row and column). If that's impossible, frame is reset to 0.   Method Descriptions 
Rect2 get_rect ( ) const
 Returns a Rect2 representing the Sprite2D's boundary in local coordinates. Can be used to detect if the Sprite2D was clicked. Example:  GDScriptfunc _input(event):
    if event is InputEventMouseButton and event.pressed and event.button_index == MOUSE_BUTTON_LEFT:
        if get_rect().has_point(to_local(event.position)):
            print("A click!")
 C#public override void _Input(InputEvent @event)
{
    if (@event is InputEventMouseButton inputEventMouse)
    {
        if (inputEventMouse.Pressed && inputEventMouse.ButtonIndex == MouseButton.Left)
        {
            if (GetRect().HasPoint(ToLocal(inputEventMouse.Position)))
            {
                GD.Print("A click!");
            }
        }
    }
}
  
bool is_pixel_opaque ( Vector2 pos ) const
 Returns true, if the pixel at the given position is opaque and false in other case. Note: It also returns false, if the sprite's texture is null or if the given position is invalid.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_sprite2d.html


classes/class_systemfont
-----------------------------------------------------------
SystemFont Inherits: Font < Resource < RefCounted < Object A font loaded from a system font. Falls back to a default theme font if not implemented on the host OS.  Description SystemFont loads a font from a system font with the first matching name from font_names. It will attempt to match font style, but it's not guaranteed. The returned font might be part of a font collection or be a variable font with OpenType "weight", "width" and/or "italic" features set. You can create FontVariation of the system font for precise control over its features. Note: This class is implemented on iOS, Linux, macOS and Windows, on other platforms it will fallback to default theme font.   Properties  
bool allow_system_fallback true  
FontAntialiasing antialiasing 1  
bool font_italic false  
PackedStringArray font_names PackedStringArray()  
int font_stretch 100  
int font_weight 400  
bool force_autohinter false  
bool generate_mipmaps false  
Hinting hinting 1  
int msdf_pixel_range 16  
int msdf_size 48  
bool multichannel_signed_distance_field false  
float oversampling 0.0  
SubpixelPositioning subpixel_positioning 1     Property Descriptions 
bool allow_system_fallback = true
  void set_allow_system_fallback ( bool value )
 
bool is_allow_system_fallback ( )
  If set to true, system fonts can be automatically used as fallbacks. 
FontAntialiasing antialiasing = 1
  void set_antialiasing ( FontAntialiasing value )
 
FontAntialiasing get_antialiasing ( )
  Font anti-aliasing mode. 
bool font_italic = false
  void set_font_italic ( bool value )
 
bool get_font_italic ( )
  If set to true, italic or oblique font is preferred. 
PackedStringArray font_names = PackedStringArray()
  void set_font_names ( PackedStringArray value )
 
PackedStringArray get_font_names ( )
  Array of font family names to search, first matching font found is used. 
int font_stretch = 100
  void set_font_stretch ( int value )
 
int get_font_stretch ( )
  Preferred font stretch amount, compared to a normal width. A percentage value between 50% and 200%. 
int font_weight = 400
  void set_font_weight ( int value )
 
int get_font_weight ( )
  Preferred weight (boldness) of the font. A value in the 100...999 range, normal font weight is 400, bold font weight is 700. 
bool force_autohinter = false
  void set_force_autohinter ( bool value )
 
bool is_force_autohinter ( )
  If set to true, auto-hinting is supported and preferred over font built-in hinting. 
bool generate_mipmaps = false
  void set_generate_mipmaps ( bool value )
 
bool get_generate_mipmaps ( )
  If set to true, generate mipmaps for the font textures. 
Hinting hinting = 1
  void set_hinting ( Hinting value )
 
Hinting get_hinting ( )
  Font hinting mode. 
int msdf_pixel_range = 16
  void set_msdf_pixel_range ( int value )
 
int get_msdf_pixel_range ( )
  The width of the range around the shape between the minimum and maximum representable signed distance. If using font outlines, msdf_pixel_range must be set to at least twice the size of the largest font outline. The default msdf_pixel_range value of 16 allows outline sizes up to 8 to look correct. 
int msdf_size = 48
  void set_msdf_size ( int value )
 
int get_msdf_size ( )
  Source font size used to generate MSDF textures. Higher values allow for more precision, but are slower to render and require more memory. Only increase this value if you notice a visible lack of precision in glyph rendering. 
bool multichannel_signed_distance_field = false
  void set_multichannel_signed_distance_field ( bool value )
 
bool is_multichannel_signed_distance_field ( )
  If set to true, glyphs of all sizes are rendered using single multichannel signed distance field generated from the dynamic font vector data. 
float oversampling = 0.0
  void set_oversampling ( float value )
 
float get_oversampling ( )
  Font oversampling factor, if set to 0.0 global oversampling factor is used instead. 
SubpixelPositioning subpixel_positioning = 1
  void set_subpixel_positioning ( SubpixelPositioning value )
 
SubpixelPositioning get_subpixel_positioning ( )
  Font glyph subpixel positioning mode. Subpixel positioning provides shaper text and better kerning for smaller font sizes, at the cost of memory usage and font rasterization speed. Use TextServer.SUBPIXEL_POSITIONING_AUTO to automatically enable it based on the font size.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_systemfont.html


classes/class_popupmenu
-----------------------------------------------------------
PopupMenu Inherits: Popup < Window < Viewport < Node < Object A modal window used to display a list of options.  Description PopupMenu is a modal window used to display a list of options. Useful for toolbars and context menus. The size of a PopupMenu can be limited by using Window.max_size. If the height of the list of items is larger than the maximum height of the PopupMenu, a ScrollContainer within the popup will allow the user to scroll the contents. If no maximum size is set, or if it is set to 0, the PopupMenu height will be limited by its parent rect. All set_* methods allow negative item indices, i.e. -1 to access the last item, -2 to select the second-to-last item, and so on. Incremental search: Like ItemList and Tree, PopupMenu supports searching within the list while the control is focused. Press a key that matches the first letter of an item's name to select the first item starting with the given letter. After that point, there are two ways to perform incremental search: 1) Press the same key again before the timeout duration to select the next item starting with the same letter. 2) Press letter keys that match the rest of the word before the timeout duration to match to select the item in question directly. Both of these actions will be reset to the beginning of the list if the timeout duration has passed since the last keystroke was registered. You can adjust the timeout duration by changing ProjectSettings.gui/timers/incremental_search_max_interval_msec. Note: The ID values used for items are limited to 32 bits, not full 64 bits of int. This has a range of -2^32 to 2^32 - 1, i.e. -2147483648 to 2147483647.   Properties  
bool allow_search true  
bool hide_on_checkable_item_selection true  
bool hide_on_item_selection true  
bool hide_on_state_item_selection false  
int item_count 0  
float submenu_popup_delay 0.3     Methods  
bool activate_item_by_event ( InputEvent event, bool for_global_only=false )  
void add_check_item ( String label, int id=-1, Key accel=0 )  
void add_check_shortcut ( Shortcut shortcut, int id=-1, bool global=false )  
void add_icon_check_item ( Texture2D texture, String label, int id=-1, Key accel=0 )  
void add_icon_check_shortcut ( Texture2D texture, Shortcut shortcut, int id=-1, bool global=false )  
void add_icon_item ( Texture2D texture, String label, int id=-1, Key accel=0 )  
void add_icon_radio_check_item ( Texture2D texture, String label, int id=-1, Key accel=0 )  
void add_icon_radio_check_shortcut ( Texture2D texture, Shortcut shortcut, int id=-1, bool global=false )  
void add_icon_shortcut ( Texture2D texture, Shortcut shortcut, int id=-1, bool global=false, bool allow_echo=false )  
void add_item ( String label, int id=-1, Key accel=0 )  
void add_multistate_item ( String label, int max_states, int default_state=0, int id=-1, Key accel=0 )  
void add_radio_check_item ( String label, int id=-1, Key accel=0 )  
void add_radio_check_shortcut ( Shortcut shortcut, int id=-1, bool global=false )  
void add_separator ( String label="", int id=-1 )  
void add_shortcut ( Shortcut shortcut, int id=-1, bool global=false, bool allow_echo=false )  
void add_submenu_item ( String label, String submenu, int id=-1 )  
void clear ( bool free_submenus=false )  
int get_focused_item ( ) const  
Key get_item_accelerator ( int index ) const  
Texture2D get_item_icon ( int index ) const  
int get_item_icon_max_width ( int index ) const  
Color get_item_icon_modulate ( int index ) const  
int get_item_id ( int index ) const  
int get_item_indent ( int index ) const  
int get_item_index ( int id ) const  
String get_item_language ( int index ) const  
Variant get_item_metadata ( int index ) const  
Shortcut get_item_shortcut ( int index ) const  
String get_item_submenu ( int index ) const  
String get_item_text ( int index ) const  
TextDirection get_item_text_direction ( int index ) const  
String get_item_tooltip ( int index ) const  
bool is_item_checkable ( int index ) const  
bool is_item_checked ( int index ) const  
bool is_item_disabled ( int index ) const  
bool is_item_radio_checkable ( int index ) const  
bool is_item_separator ( int index ) const  
bool is_item_shortcut_disabled ( int index ) const  
void remove_item ( int index )  
void scroll_to_item ( int index )  
void set_focused_item ( int index )  
void set_item_accelerator ( int index, Key accel )  
void set_item_as_checkable ( int index, bool enable )  
void set_item_as_radio_checkable ( int index, bool enable )  
void set_item_as_separator ( int index, bool enable )  
void set_item_checked ( int index, bool checked )  
void set_item_disabled ( int index, bool disabled )  
void set_item_icon ( int index, Texture2D icon )  
void set_item_icon_max_width ( int index, int width )  
void set_item_icon_modulate ( int index, Color modulate )  
void set_item_id ( int index, int id )  
void set_item_indent ( int index, int indent )  
void set_item_language ( int index, String language )  
void set_item_metadata ( int index, Variant metadata )  
void set_item_multistate ( int index, int state )  
void set_item_shortcut ( int index, Shortcut shortcut, bool global=false )  
void set_item_shortcut_disabled ( int index, bool disabled )  
void set_item_submenu ( int index, String submenu )  
void set_item_text ( int index, String text )  
void set_item_text_direction ( int index, TextDirection direction )  
void set_item_tooltip ( int index, String tooltip )  
void toggle_item_checked ( int index )  
void toggle_item_multistate ( int index )     Theme Properties  
Color font_accelerator_color Color(0.7, 0.7, 0.7, 0.8)  
Color font_color Color(0.875, 0.875, 0.875, 1)  
Color font_disabled_color Color(0.4, 0.4, 0.4, 0.8)  
Color font_hover_color Color(0.875, 0.875, 0.875, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
Color font_separator_color Color(0.875, 0.875, 0.875, 1)  
Color font_separator_outline_color Color(1, 1, 1, 1)  
int h_separation 4  
int icon_max_width 0  
int indent 10  
int item_end_padding 2  
int item_start_padding 2  
int outline_size 0  
int separator_outline_size 0  
int v_separation 4  
Font font   
Font font_separator   
int font_separator_size   
int font_size   
Texture2D checked   
Texture2D checked_disabled   
Texture2D radio_checked   
Texture2D radio_checked_disabled   
Texture2D radio_unchecked   
Texture2D radio_unchecked_disabled   
Texture2D submenu   
Texture2D submenu_mirrored   
Texture2D unchecked   
Texture2D unchecked_disabled   
StyleBox hover   
StyleBox labeled_separator_left   
StyleBox labeled_separator_right   
StyleBox separator      Signals id_focused ( int id ) Emitted when the user navigated to an item of some id using the ProjectSettings.input/ui_up or ProjectSettings.input/ui_down input action. id_pressed ( int id ) Emitted when an item of some id is pressed or its accelerator is activated. Note: If id is negative (either explicitly or due to overflow), this will return the corresponding index instead. index_pressed ( int index ) Emitted when an item of some index is pressed or its accelerator is activated. menu_changed ( ) Emitted when any item is added, modified or removed.   Property Descriptions 
bool allow_search = true
  void set_allow_search ( bool value )
 
bool get_allow_search ( )
  If true, allows navigating PopupMenu with letter keys. 
bool hide_on_checkable_item_selection = true
  void set_hide_on_checkable_item_selection ( bool value )
 
bool is_hide_on_checkable_item_selection ( )
  If true, hides the PopupMenu when a checkbox or radio button is selected. 
bool hide_on_item_selection = true
  void set_hide_on_item_selection ( bool value )
 
bool is_hide_on_item_selection ( )
  If true, hides the PopupMenu when an item is selected. 
bool hide_on_state_item_selection = false
  void set_hide_on_state_item_selection ( bool value )
 
bool is_hide_on_state_item_selection ( )
  If true, hides the PopupMenu when a state item is selected. 
int item_count = 0
  void set_item_count ( int value )
 
int get_item_count ( )
  The number of items currently in the list. 
float submenu_popup_delay = 0.3
  void set_submenu_popup_delay ( float value )
 
float get_submenu_popup_delay ( )
  Sets the delay time in seconds for the submenu item to popup on mouse hovering. If the popup menu is added as a child of another (acting as a submenu), it will inherit the delay time of the parent menu item.   Method Descriptions 
bool activate_item_by_event ( InputEvent event, bool for_global_only=false ) Checks the provided event against the PopupMenu's shortcuts and accelerators, and activates the first item with matching events. If for_global_only is true, only shortcuts and accelerators with global set to true will be called. Returns true if an item was successfully activated. Note: Certain Controls, such as MenuButton, will call this method automatically. void add_check_item ( String label, int id=-1, Key accel=0 ) Adds a new checkable item with text label. An id can optionally be provided, as well as an accelerator (accel). If no id is provided, one will be created from the index. If no accel is provided, then the default value of 0 (corresponding to @GlobalScope.KEY_NONE) will be assigned to the item (which means it won't have any accelerator). See get_item_accelerator for more info on accelerators. Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See set_item_checked for more info on how to control it. void add_check_shortcut ( Shortcut shortcut, int id=-1, bool global=false ) Adds a new checkable item and assigns the specified Shortcut to it. Sets the label of the checkbox to the Shortcut's name. An id can optionally be provided. If no id is provided, one will be created from the index. Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See set_item_checked for more info on how to control it. void add_icon_check_item ( Texture2D texture, String label, int id=-1, Key accel=0 ) Adds a new checkable item with text label and icon texture. An id can optionally be provided, as well as an accelerator (accel). If no id is provided, one will be created from the index. If no accel is provided, then the default value of 0 (corresponding to @GlobalScope.KEY_NONE) will be assigned to the item (which means it won't have any accelerator). See get_item_accelerator for more info on accelerators. Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See set_item_checked for more info on how to control it. void add_icon_check_shortcut ( Texture2D texture, Shortcut shortcut, int id=-1, bool global=false ) Adds a new checkable item and assigns the specified Shortcut and icon texture to it. Sets the label of the checkbox to the Shortcut's name. An id can optionally be provided. If no id is provided, one will be created from the index. Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See set_item_checked for more info on how to control it. void add_icon_item ( Texture2D texture, String label, int id=-1, Key accel=0 ) Adds a new item with text label and icon texture. An id can optionally be provided, as well as an accelerator (accel). If no id is provided, one will be created from the index. If no accel is provided, then the default value of 0 (corresponding to @GlobalScope.KEY_NONE) will be assigned to the item (which means it won't have any accelerator). See get_item_accelerator for more info on accelerators. void add_icon_radio_check_item ( Texture2D texture, String label, int id=-1, Key accel=0 ) Same as add_icon_check_item, but uses a radio check button. void add_icon_radio_check_shortcut ( Texture2D texture, Shortcut shortcut, int id=-1, bool global=false ) Same as add_icon_check_shortcut, but uses a radio check button. void add_icon_shortcut ( Texture2D texture, Shortcut shortcut, int id=-1, bool global=false, bool allow_echo=false ) Adds a new item and assigns the specified Shortcut and icon texture to it. Sets the label of the checkbox to the Shortcut's name. An id can optionally be provided. If no id is provided, one will be created from the index. If allow_echo is true, the shortcut can be activated with echo events. void add_item ( String label, int id=-1, Key accel=0 ) Adds a new item with text label. An id can optionally be provided, as well as an accelerator (accel). If no id is provided, one will be created from the index. If no accel is provided, then the default value of 0 (corresponding to @GlobalScope.KEY_NONE) will be assigned to the item (which means it won't have any accelerator). See get_item_accelerator for more info on accelerators. Note: The provided id is used only in id_pressed and id_focused signals. It's not related to the index arguments in e.g. set_item_checked. void add_multistate_item ( String label, int max_states, int default_state=0, int id=-1, Key accel=0 ) Adds a new multistate item with text label. Contrarily to normal binary items, multistate items can have more than two states, as defined by max_states. Each press or activate of the item will increase the state by one. The default value is defined by default_state. An id can optionally be provided, as well as an accelerator (accel). If no id is provided, one will be created from the index. If no accel is provided, then the default value of 0 (corresponding to @GlobalScope.KEY_NONE) will be assigned to the item (which means it won't have any accelerator). See get_item_accelerator for more info on accelerators. void add_radio_check_item ( String label, int id=-1, Key accel=0 ) Adds a new radio check button with text label. An id can optionally be provided, as well as an accelerator (accel). If no id is provided, one will be created from the index. If no accel is provided, then the default value of 0 (corresponding to @GlobalScope.KEY_NONE) will be assigned to the item (which means it won't have any accelerator). See get_item_accelerator for more info on accelerators. Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See set_item_checked for more info on how to control it. void add_radio_check_shortcut ( Shortcut shortcut, int id=-1, bool global=false ) Adds a new radio check button and assigns a Shortcut to it. Sets the label of the checkbox to the Shortcut's name. An id can optionally be provided. If no id is provided, one will be created from the index. Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. See set_item_checked for more info on how to control it. void add_separator ( String label="", int id=-1 ) Adds a separator between items. Separators also occupy an index, which you can set by using the id parameter. A label can optionally be provided, which will appear at the center of the separator. void add_shortcut ( Shortcut shortcut, int id=-1, bool global=false, bool allow_echo=false ) Adds a Shortcut. An id can optionally be provided. If no id is provided, one will be created from the index. If allow_echo is true, the shortcut can be activated with echo events. void add_submenu_item ( String label, String submenu, int id=-1 ) Adds an item that will act as a submenu of the parent PopupMenu node when clicked. The submenu argument must be the name of an existing PopupMenu that has been added as a child to this node. This submenu will be shown when the item is clicked, hovered for long enough, or activated using the ui_select or ui_right input actions. An id can optionally be provided. If no id is provided, one will be created from the index. void clear ( bool free_submenus=false ) Removes all items from the PopupMenu. If free_submenus is true, the submenu nodes are automatically freed. 
int get_focused_item ( ) const
 Returns the index of the currently focused item. Returns -1 if no item is focused. 
Key get_item_accelerator ( int index ) const
 Returns the accelerator of the item at the given index. An accelerator is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. The return value is an integer which is generally a combination of KeyModifierMasks and Keys using bitwise OR such as KEY_MASK_CTRL | KEY_A (Ctrl + A). If no accelerator is defined for the specified index, get_item_accelerator returns 0 (corresponding to @GlobalScope.KEY_NONE). 
Texture2D get_item_icon ( int index ) const
 Returns the icon of the item at the given index. 
int get_item_icon_max_width ( int index ) const
 Returns the maximum allowed width of the icon for the item at the given index. 
Color get_item_icon_modulate ( int index ) const
 Returns a Color modulating the item's icon at the given index. 
int get_item_id ( int index ) const
 Returns the ID of the item at the given index. id can be manually assigned, while index can not. 
int get_item_indent ( int index ) const
 Returns the horizontal offset of the item at the given index. 
int get_item_index ( int id ) const
 Returns the index of the item containing the specified id. Index is automatically assigned to each item by the engine and can not be set manually. 
String get_item_language ( int index ) const
 Returns item's text language code. 
Variant get_item_metadata ( int index ) const
 Returns the metadata of the specified item, which might be of any type. You can set it with set_item_metadata, which provides a simple way of assigning context data to items. 
Shortcut get_item_shortcut ( int index ) const
 Returns the Shortcut associated with the item at the given index. 
String get_item_submenu ( int index ) const
 Returns the submenu name of the item at the given index. See add_submenu_item for more info on how to add a submenu. 
String get_item_text ( int index ) const
 Returns the text of the item at the given index. 
TextDirection get_item_text_direction ( int index ) const
 Returns item's text base writing direction. 
String get_item_tooltip ( int index ) const
 Returns the tooltip associated with the item at the given index. 
bool is_item_checkable ( int index ) const
 Returns true if the item at the given index is checkable in some way, i.e. if it has a checkbox or radio button. Note: Checkable items just display a checkmark or radio button, but don't have any built-in checking behavior and must be checked/unchecked manually. 
bool is_item_checked ( int index ) const
 Returns true if the item at the given index is checked. 
bool is_item_disabled ( int index ) const
 Returns true if the item at the given index is disabled. When it is disabled it can't be selected, or its action invoked. See set_item_disabled for more info on how to disable an item. 
bool is_item_radio_checkable ( int index ) const
 Returns true if the item at the given index has radio button-style checkability. Note: This is purely cosmetic; you must add the logic for checking/unchecking items in radio groups. 
bool is_item_separator ( int index ) const
 Returns true if the item is a separator. If it is, it will be displayed as a line. See add_separator for more info on how to add a separator. 
bool is_item_shortcut_disabled ( int index ) const
 Returns true if the specified item's shortcut is disabled. void remove_item ( int index ) Removes the item at the given index from the menu. Note: The indices of items after the removed item will be shifted by one. void scroll_to_item ( int index ) Moves the scroll view to make the item at the given index visible. void set_focused_item ( int index ) Sets the currently focused item as the given index. Passing -1 as the index makes so that no item is focused. void set_item_accelerator ( int index, Key accel ) Sets the accelerator of the item at the given index. An accelerator is a keyboard shortcut that can be pressed to trigger the menu button even if it's not currently open. accel is generally a combination of KeyModifierMasks and Keys using bitwise OR such as KEY_MASK_CTRL | KEY_A (Ctrl + A). void set_item_as_checkable ( int index, bool enable ) Sets whether the item at the given index has a checkbox. If false, sets the type of the item to plain text. Note: Checkable items just display a checkmark, but don't have any built-in checking behavior and must be checked/unchecked manually. void set_item_as_radio_checkable ( int index, bool enable ) Sets the type of the item at the given index to radio button. If false, sets the type of the item to plain text. void set_item_as_separator ( int index, bool enable ) Mark the item at the given index as a separator, which means that it would be displayed as a line. If false, sets the type of the item to plain text. void set_item_checked ( int index, bool checked ) Sets the checkstate status of the item at the given index. void set_item_disabled ( int index, bool disabled ) Enables/disables the item at the given index. When it is disabled, it can't be selected and its action can't be invoked. void set_item_icon ( int index, Texture2D icon ) Replaces the Texture2D icon of the item at the given index. void set_item_icon_max_width ( int index, int width ) Sets the maximum allowed width of the icon for the item at the given index. This limit is applied on top of the default size of the icon and on top of icon_max_width. The height is adjusted according to the icon's ratio. void set_item_icon_modulate ( int index, Color modulate ) Sets a modulating Color of the item's icon at the given index. void set_item_id ( int index, int id ) Sets the id of the item at the given index. The id is used in id_pressed and id_focused signals. void set_item_indent ( int index, int indent ) Sets the horizontal offset of the item at the given index. void set_item_language ( int index, String language ) Sets language code of item's text used for line-breaking and text shaping algorithms, if left empty current locale is used instead. void set_item_metadata ( int index, Variant metadata ) Sets the metadata of an item, which may be of any type. You can later get it with get_item_metadata, which provides a simple way of assigning context data to items. void set_item_multistate ( int index, int state ) Sets the state of a multistate item. See add_multistate_item for details. void set_item_shortcut ( int index, Shortcut shortcut, bool global=false ) Sets a Shortcut for the item at the given index. void set_item_shortcut_disabled ( int index, bool disabled ) Disables the Shortcut of the item at the given index. void set_item_submenu ( int index, String submenu ) Sets the submenu of the item at the given index. The submenu is the name of a child PopupMenu node that would be shown when the item is clicked. void set_item_text ( int index, String text ) Sets the text of the item at the given index. void set_item_text_direction ( int index, TextDirection direction ) Sets item's text base writing direction. void set_item_tooltip ( int index, String tooltip ) Sets the String tooltip of the item at the given index. void toggle_item_checked ( int index ) Toggles the check state of the item at the given index. void toggle_item_multistate ( int index ) Cycle to the next state of a multistate item. See add_multistate_item for details.   Theme Property Descriptions 
Color font_accelerator_color = Color(0.7, 0.7, 0.7, 0.8)
 The text Color used for shortcuts and accelerators that show next to the menu item name when defined. See get_item_accelerator for more info on accelerators. 
Color font_color = Color(0.875, 0.875, 0.875, 1)
 The default text Color for menu items' names. 
Color font_disabled_color = Color(0.4, 0.4, 0.4, 0.8)
 Color used for disabled menu items' text. 
Color font_hover_color = Color(0.875, 0.875, 0.875, 1)
 Color used for the hovered text. 
Color font_outline_color = Color(1, 1, 1, 1)
 The tint of text outline of the menu item. 
Color font_separator_color = Color(0.875, 0.875, 0.875, 1)
 Color used for labeled separators' text. See add_separator. 
Color font_separator_outline_color = Color(1, 1, 1, 1)
 The tint of text outline of the labeled separator. 
int h_separation = 4
 The horizontal space between the item's elements. 
int icon_max_width = 0
 The maximum allowed width of the item's icon. This limit is applied on top of the default size of the icon, but before the value set with set_item_icon_max_width. The height is adjusted according to the icon's ratio. 
int indent = 10
 Width of the single indentation level. 
int item_end_padding = 2
 Horizontal padding to the right of the items (or left, in RTL layout). 
int item_start_padding = 2
 Horizontal padding to the left of the items (or right, in RTL layout). 
int outline_size = 0
 The size of the item text outline. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. 
int separator_outline_size = 0
 The size of the labeled separator text outline. 
int v_separation = 4
 The vertical space between each menu item. 
Font font Font used for the menu items. 
Font font_separator Font used for the labeled separator. 
int font_separator_size Font size of the labeled separator. 
int font_size Font size of the menu items. 
Texture2D checked Texture2D icon for the checked checkbox items. 
Texture2D checked_disabled Texture2D icon for the checked checkbox items when they are disabled. 
Texture2D radio_checked Texture2D icon for the checked radio button items. 
Texture2D radio_checked_disabled Texture2D icon for the checked radio button items when they are disabled. 
Texture2D radio_unchecked Texture2D icon for the unchecked radio button items. 
Texture2D radio_unchecked_disabled Texture2D icon for the unchecked radio button items when they are disabled. 
Texture2D submenu Texture2D icon for the submenu arrow (for left-to-right layouts). 
Texture2D submenu_mirrored Texture2D icon for the submenu arrow (for right-to-left layouts). 
Texture2D unchecked Texture2D icon for the unchecked checkbox items. 
Texture2D unchecked_disabled Texture2D icon for the unchecked checkbox items when they are disabled. 
StyleBox hover StyleBox displayed when the PopupMenu item is hovered. 
StyleBox labeled_separator_left StyleBox for the left side of labeled separator. See add_separator. 
StyleBox labeled_separator_right StyleBox for the right side of labeled separator. See add_separator. 
StyleBox separator StyleBox used for the separators. See add_separator.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_popupmenu.html


classes/class_skeletonmodificationstack2d
-----------------------------------------------------------
SkeletonModificationStack2D Inherits: Resource < RefCounted < Object A resource that holds a stack of SkeletonModification2Ds.  Description This resource is used by the Skeleton and holds a stack of SkeletonModification2Ds. This controls the order of the modifications and how they are applied. Modification order is especially important for full-body IK setups, as you need to execute the modifications in the correct order to get the desired results. For example, you want to execute a modification on the spine before the arms on a humanoid skeleton. This resource also controls how strongly all of the modifications are applied to the Skeleton2D.   Properties  
bool enabled false  
int modification_count 0  
float strength 1.0     Methods  
void add_modification ( SkeletonModification2D modification )  
void delete_modification ( int mod_idx )  
void enable_all_modifications ( bool enabled )  
void execute ( float delta, int execution_mode )  
bool get_is_setup ( ) const  
SkeletonModification2D get_modification ( int mod_idx ) const  
Skeleton2D get_skeleton ( ) const  
void set_modification ( int mod_idx, SkeletonModification2D modification )  
void setup ( )     Property Descriptions 
bool enabled = false
  void set_enabled ( bool value )
 
bool get_enabled ( )
  If true, the modification's in the stack will be called. This is handled automatically through the Skeleton2D node. 
int modification_count = 0
  void set_modification_count ( int value )
 
int get_modification_count ( )
  The number of modifications in the stack. 
float strength = 1.0
  void set_strength ( float value )
 
float get_strength ( )
  The interpolation strength of the modifications in stack. A value of 0 will make it where the modifications are not applied, a strength of 0.5 will be half applied, and a strength of 1 will allow the modifications to be fully applied and override the Skeleton2D Bone2D poses.   Method Descriptions void add_modification ( SkeletonModification2D modification ) Adds the passed-in SkeletonModification2D to the stack. void delete_modification ( int mod_idx ) Deletes the SkeletonModification2D at the index position mod_idx, if it exists. void enable_all_modifications ( bool enabled ) Enables all SkeletonModification2Ds in the stack. void execute ( float delta, int execution_mode ) Executes all of the SkeletonModification2Ds in the stack that use the same execution mode as the passed-in execution_mode, starting from index 0 to modification_count. Note: The order of the modifications can matter depending on the modifications. For example, modifications on a spine should operate before modifications on the arms in order to get proper results. 
bool get_is_setup ( ) const
 Returns a boolean that indicates whether the modification stack is setup and can execute. 
SkeletonModification2D get_modification ( int mod_idx ) const
 Returns the SkeletonModification2D at the passed-in index, mod_idx. 
Skeleton2D get_skeleton ( ) const
 Returns the Skeleton2D node that the SkeletonModificationStack2D is bound to. void set_modification ( int mod_idx, SkeletonModification2D modification ) Sets the modification at mod_idx to the passed-in modification, modification. void setup ( ) Sets up the modification stack so it can execute. This function should be called by Skeleton2D and shouldn't be manually called unless you know what you are doing.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeletonmodificationstack2d.html


classes/class_packedscene
-----------------------------------------------------------
PackedScene Inherits: Resource < RefCounted < Object An abstraction of a serialized scene.  Description A simplified interface to a scene file. Provides access to operations and checks that can be performed on the scene resource itself. Can be used to save a node to a file. When saving, the node as well as all the nodes it owns get saved (see Node.owner property). Note: The node doesn't need to own itself. Example of loading a saved scene:  GDScript# Use load() instead of preload() if the path isn't known at compile-time.
var scene = preload("res://scene.tscn").instantiate()
# Add the node as a child of the node the script is attached to.
add_child(scene)
 C#// C# has no preload, so you have to always use ResourceLoader.Load<PackedScene>().
var scene = ResourceLoader.Load<PackedScene>("res://scene.tscn").Instantiate();
// Add the node as a child of the node the script is attached to.
AddChild(scene);
  Example of saving a node with different owners: The following example creates 3 objects: Node2D (node), RigidBody2D (body) and CollisionObject2D (collision). collision is a child of body which is a child of node. Only body is owned by node and pack will therefore only save those two nodes, but not collision.  GDScript# Create the objects.
var node = Node2D.new()
var body = RigidBody2D.new()
var collision = CollisionShape2D.new()
# Create the object hierarchy.
body.add_child(collision)
node.add_child(body)
# Change owner of `body`, but not of `collision`.
body.owner = node
var scene = PackedScene.new()
# Only `node` and `body` are now packed.
var result = scene.pack(node)
if result == OK:
    var error = ResourceSaver.save(scene, "res://path/name.tscn")  # Or "user://..."
    if error != OK:
        push_error("An error occurred while saving the scene to disk.")
 C#// Create the objects.
var node = new Node2D();
var body = new RigidBody2D();
var collision = new CollisionShape2D();
// Create the object hierarchy.
body.AddChild(collision);
node.AddChild(body);
// Change owner of `body`, but not of `collision`.
body.Owner = node;
var scene = new PackedScene();
// Only `node` and `body` are now packed.
Error result = scene.Pack(node);
if (result == Error.Ok)
{
    Error error = ResourceSaver.Save(scene, "res://path/name.tscn"); // Or "user://..."
    if (error != Error.Ok)
    {
        GD.PushError("An error occurred while saving the scene to disk.");
    }
}
    Tutorials  2D Role Playing Game Demo    Properties  
Dictionary _bundled { "conn_count": 0, "conns": PackedInt32Array(), "editable_instances": [], "names": PackedStringArray(), "node_count": 0, "node_paths": [], "nodes": PackedInt32Array(), "variants": [], "version": 3 }     Methods  
bool can_instantiate ( ) const  
SceneState get_state ( ) const  
Node instantiate ( GenEditState edit_state=0 ) const  
Error pack ( Node path )     Enumerations enum GenEditState: 
GenEditState GEN_EDIT_STATE_DISABLED = 0
 If passed to instantiate, blocks edits to the scene state. 
GenEditState GEN_EDIT_STATE_INSTANCE = 1
 If passed to instantiate, provides local scene resources to the local scene. Note: Only available in editor builds. 
GenEditState GEN_EDIT_STATE_MAIN = 2
 If passed to instantiate, provides local scene resources to the local scene. Only the main scene should receive the main edit state. Note: Only available in editor builds. 
GenEditState GEN_EDIT_STATE_MAIN_INHERITED = 3
 It's similar to GEN_EDIT_STATE_MAIN, but for the case where the scene is being instantiated to be the base of another one. Note: Only available in editor builds.   Property Descriptions 
Dictionary _bundled = { "conn_count": 0, "conns": PackedInt32Array(), "editable_instances": [], "names": PackedStringArray(), "node_count": 0, "node_paths": [], "nodes": PackedInt32Array(), "variants": [], "version": 3 }
 A dictionary representation of the scene contents. Available keys include "rnames" and "variants" for resources, "node_count", "nodes", "node_paths" for nodes, "editable_instances" for paths to overridden nodes, "conn_count" and "conns" for signal connections, and "version" for the format style of the PackedScene.   Method Descriptions 
bool can_instantiate ( ) const
 Returns true if the scene file has nodes. 
SceneState get_state ( ) const
 Returns the SceneState representing the scene file contents. 
Node instantiate ( GenEditState edit_state=0 ) const
 Instantiates the scene's node hierarchy. Triggers child scene instantiation(s). Triggers a Node.NOTIFICATION_SCENE_INSTANTIATED notification on the root node. 
Error pack ( Node path ) Pack will ignore any sub-nodes not owned by given node. See Node.owner.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_packedscene.html


classes/class_spinbox
-----------------------------------------------------------
SpinBox Inherits: Range < Control < CanvasItem < Node < Object An input field for numbers.  Description SpinBox is a numerical input text field. It allows entering integers and floating point numbers. Example:  GDScriptvar spin_box = SpinBox.new()
add_child(spin_box)
var line_edit = spin_box.get_line_edit()
line_edit.context_menu_enabled = false
spin_box.horizontal_alignment = LineEdit.HORIZONTAL_ALIGNMENT_RIGHT
 C#var spinBox = new SpinBox();
AddChild(spinBox);
var lineEdit = spinBox.GetLineEdit();
lineEdit.ContextMenuEnabled = false;
spinBox.AlignHorizontal = LineEdit.HorizontalAlignEnum.Right;
  The above code will create a SpinBox, disable context menu on it and set the text alignment to right. See Range class for more options over the SpinBox. Note: With the SpinBox's context menu disabled, you can right-click the bottom half of the spinbox to set the value to its minimum, while right-clicking the top half sets the value to its maximum. Note: SpinBox relies on an underlying LineEdit node. To theme a SpinBox's background, add theme items for LineEdit and customize them. Note: If you want to implement drag and drop for the underlying LineEdit, you can use Control.set_drag_forwarding on the node returned by get_line_edit.   Properties  
HorizontalAlignment alignment 0  
float custom_arrow_step 0.0  
bool editable true  
String prefix ""  
bool select_all_on_focus false  
BitField<SizeFlags> size_flags_vertical 1 (overrides Control)  
float step 1.0 (overrides Range)  
String suffix ""  
bool update_on_text_changed false     Methods  
void apply ( )  
LineEdit get_line_edit ( )     Theme Properties  
Texture2D updown     Property Descriptions 
HorizontalAlignment alignment = 0
  void set_horizontal_alignment ( HorizontalAlignment value )
 
HorizontalAlignment get_horizontal_alignment ( )
  Changes the alignment of the underlying LineEdit. 
float custom_arrow_step = 0.0
  void set_custom_arrow_step ( float value )
 
float get_custom_arrow_step ( )
  If not 0, Range.value will always be rounded to a multiple of custom_arrow_step when interacting with the arrow buttons of the SpinBox. 
bool editable = true
  void set_editable ( bool value )
 
bool is_editable ( )
  If true, the SpinBox will be editable. Otherwise, it will be read only. 
String prefix = ""
  void set_prefix ( String value )
 
String get_prefix ( )
  Adds the specified prefix string before the numerical value of the SpinBox. 
bool select_all_on_focus = false
  void set_select_all_on_focus ( bool value )
 
bool is_select_all_on_focus ( )
  If true, the SpinBox will select the whole text when the LineEdit gains focus. Clicking the up and down arrows won't trigger this behavior. 
String suffix = ""
  void set_suffix ( String value )
 
String get_suffix ( )
  Adds the specified suffix string after the numerical value of the SpinBox. 
bool update_on_text_changed = false
  void set_update_on_text_changed ( bool value )
 
bool get_update_on_text_changed ( )
  Sets the value of the Range for this SpinBox when the LineEdit text is changed instead of submitted. See LineEdit.text_changed and LineEdit.text_submitted.   Method Descriptions void apply ( ) Applies the current value of this SpinBox. 
LineEdit get_line_edit ( ) Returns the LineEdit instance from this SpinBox. You can use it to access properties and methods of LineEdit. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their CanvasItem.visible property.   Theme Property Descriptions 
Texture2D updown Sets a custom Texture2D for up and down arrows of the SpinBox.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_spinbox.html


classes/class_animationnodeoneshot
-----------------------------------------------------------
AnimationNodeOneShot Inherits: AnimationNodeSync < AnimationNode < Resource < RefCounted < Object Plays an animation once in an AnimationNodeBlendTree.  Description A resource to add to an AnimationNodeBlendTree. This animation node will execute a sub-animation and return once it finishes. Blend times for fading in and out can be customized, as well as filters. After setting the request and changing the animation playback, the one-shot node automatically clears the request on the next process frame by setting its request value to ONE_SHOT_REQUEST_NONE.  GDScript# Play child animation connected to "shot" port.
animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE)
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_FIRE
# Abort child animation connected to "shot" port.
animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT)
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_ABORT
# Abort child animation with fading out connected to "shot" port.
animation_tree.set("parameters/OneShot/request", AnimationNodeOneShot.ONE_SHOT_REQUEST_FADE_OUT)
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/request"] = AnimationNodeOneShot.ONE_SHOT_REQUEST_FADE_OUT
# Get current state (read-only).
animation_tree.get("parameters/OneShot/active")
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/active"]
# Get current internal state (read-only).
animation_tree.get("parameters/OneShot/internal_active")
# Alternative syntax (same result as above).
animation_tree["parameters/OneShot/internal_active"]
 C#// Play child animation connected to "shot" port.
animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.Fire);
// Abort child animation connected to "shot" port.
animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.Abort);
// Abort child animation with fading out connected to "shot" port.
animationTree.Set("parameters/OneShot/request", (int)AnimationNodeOneShot.OneShotRequest.FadeOut);
// Get current state (read-only).
animationTree.Get("parameters/OneShot/active");
// Get current internal state (read-only).
animationTree.Get("parameters/OneShot/internal_active");
    Tutorials  Using AnimationTree Third Person Shooter Demo    Properties  
bool autorestart false  
float autorestart_delay 1.0  
float autorestart_random_delay 0.0  
Curve fadein_curve   
float fadein_time 0.0  
Curve fadeout_curve   
float fadeout_time 0.0  
MixMode mix_mode 0     Enumerations enum OneShotRequest: 
OneShotRequest ONE_SHOT_REQUEST_NONE = 0
 The default state of the request. Nothing is done. 
OneShotRequest ONE_SHOT_REQUEST_FIRE = 1
 The request to play the animation connected to "shot" port. 
OneShotRequest ONE_SHOT_REQUEST_ABORT = 2
 The request to stop the animation connected to "shot" port. 
OneShotRequest ONE_SHOT_REQUEST_FADE_OUT = 3
 The request to fade out the animation connected to "shot" port. enum MixMode: 
MixMode MIX_MODE_BLEND = 0
 Blends two animations. See also AnimationNodeBlend2. 
MixMode MIX_MODE_ADD = 1
 Blends two animations additively. See also AnimationNodeAdd2.   Property Descriptions 
bool autorestart = false
  void set_autorestart ( bool value )
 
bool has_autorestart ( )
  If true, the sub-animation will restart automatically after finishing. In other words, to start auto restarting, the animation must be played once with the ONE_SHOT_REQUEST_FIRE request. The ONE_SHOT_REQUEST_ABORT request stops the auto restarting, but it does not disable the autorestart itself. So, the ONE_SHOT_REQUEST_FIRE request will start auto restarting again. 
float autorestart_delay = 1.0
  void set_autorestart_delay ( float value )
 
float get_autorestart_delay ( )
  The delay after which the automatic restart is triggered, in seconds. 
float autorestart_random_delay = 0.0
  void set_autorestart_random_delay ( float value )
 
float get_autorestart_random_delay ( )
  If autorestart is true, a random additional delay (in seconds) between 0 and this value will be added to autorestart_delay. 
Curve fadein_curve  void set_fadein_curve ( Curve value )
 
Curve get_fadein_curve ( )
  Determines how cross-fading between animations is eased. If empty, the transition will be linear. 
float fadein_time = 0.0
  void set_fadein_time ( float value )
 
float get_fadein_time ( )
  The fade-in duration. For example, setting this to 1.0 for a 5 second length animation will produce a cross-fade that starts at 0 second and ends at 1 second during the animation. 
Curve fadeout_curve  void set_fadeout_curve ( Curve value )
 
Curve get_fadeout_curve ( )
  Determines how cross-fading between animations is eased. If empty, the transition will be linear. 
float fadeout_time = 0.0
  void set_fadeout_time ( float value )
 
float get_fadeout_time ( )
  The fade-out duration. For example, setting this to 1.0 for a 5 second length animation will produce a cross-fade that starts at 4 second and ends at 5 second during the animation. 
MixMode mix_mode = 0
  void set_mix_mode ( MixMode value )
 
MixMode get_mix_mode ( )
  The blend type.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodeoneshot.html


classes/class_scrollcontainer
-----------------------------------------------------------
ScrollContainer Inherits: Container < Control < CanvasItem < Node < Object Inherited By: EditorInspector A container used to provide scrollbars to a child control when needed.  Description A container used to provide a child control with scrollbars when needed. Scrollbars will automatically be drawn at the right (for vertical) or bottom (for horizontal) and will enable dragging to move the viewable Control (and its children) within the ScrollContainer. Scrollbars will also automatically resize the grabber based on the Control.custom_minimum_size of the Control relative to the ScrollContainer.   Tutorials  Using Containers    Properties  
bool clip_contents true (overrides Control)  
bool follow_focus false  
ScrollMode horizontal_scroll_mode 1  
int scroll_deadzone 0  
int scroll_horizontal 0  
float scroll_horizontal_custom_step -1.0  
int scroll_vertical 0  
float scroll_vertical_custom_step -1.0  
ScrollMode vertical_scroll_mode 1     Methods  
void ensure_control_visible ( Control control )  
HScrollBar get_h_scroll_bar ( )  
VScrollBar get_v_scroll_bar ( )     Theme Properties  
StyleBox panel     Signals scroll_ended ( ) Emitted when scrolling stops when dragging the scrollable area with a touch event. This signal is not emitted when scrolling by dragging the scrollbar, scrolling with the mouse wheel or scrolling with keyboard/gamepad events. Note: This signal is only emitted on Android or iOS, or on desktop/web platforms when ProjectSettings.input_devices/pointing/emulate_touch_from_mouse is enabled. scroll_started ( ) Emitted when scrolling starts when dragging the scrollable area with a touch event. This signal is not emitted when scrolling by dragging the scrollbar, scrolling with the mouse wheel or scrolling with keyboard/gamepad events. Note: This signal is only emitted on Android or iOS, or on desktop/web platforms when ProjectSettings.input_devices/pointing/emulate_touch_from_mouse is enabled.   Enumerations enum ScrollMode: 
ScrollMode SCROLL_MODE_DISABLED = 0
 Scrolling disabled, scrollbar will be invisible. 
ScrollMode SCROLL_MODE_AUTO = 1
 Scrolling enabled, scrollbar will be visible only if necessary, i.e. container's content is bigger than the container. 
ScrollMode SCROLL_MODE_SHOW_ALWAYS = 2
 Scrolling enabled, scrollbar will be always visible. 
ScrollMode SCROLL_MODE_SHOW_NEVER = 3
 Scrolling enabled, scrollbar will be hidden.   Property Descriptions 
bool follow_focus = false
  void set_follow_focus ( bool value )
 
bool is_following_focus ( )
  If true, the ScrollContainer will automatically scroll to focused children (including indirect children) to make sure they are fully visible. 
ScrollMode horizontal_scroll_mode = 1
  void set_horizontal_scroll_mode ( ScrollMode value )
 
ScrollMode get_horizontal_scroll_mode ( )
  Controls whether horizontal scrollbar can be used and when it should be visible. See ScrollMode for options. 
int scroll_deadzone = 0
  void set_deadzone ( int value )
 
int get_deadzone ( )
  Deadzone for touch scrolling. Lower deadzone makes the scrolling more sensitive. 
int scroll_horizontal = 0
  void set_h_scroll ( int value )
 
int get_h_scroll ( )
  The current horizontal scroll value. Note: If you are setting this value in the Node._ready function or earlier, it needs to be wrapped with Object.set_deferred, since scroll bar's Range.max_value is not initialized yet. func _ready():
    set_deferred("scroll_horizontal", 600)
 
float scroll_horizontal_custom_step = -1.0
  void set_horizontal_custom_step ( float value )
 
float get_horizontal_custom_step ( )
  Overrides the ScrollBar.custom_step used when clicking the internal scroll bar's horizontal increment and decrement buttons or when using arrow keys when the ScrollBar is focused. 
int scroll_vertical = 0
  void set_v_scroll ( int value )
 
int get_v_scroll ( )
  The current vertical scroll value. Note: Setting it early needs to be deferred, just like in scroll_horizontal. func _ready():
    set_deferred("scroll_vertical", 600)
 
float scroll_vertical_custom_step = -1.0
  void set_vertical_custom_step ( float value )
 
float get_vertical_custom_step ( )
  Overrides the ScrollBar.custom_step used when clicking the internal scroll bar's vertical increment and decrement buttons or when using arrow keys when the ScrollBar is focused. 
ScrollMode vertical_scroll_mode = 1
  void set_vertical_scroll_mode ( ScrollMode value )
 
ScrollMode get_vertical_scroll_mode ( )
  Controls whether vertical scrollbar can be used and when it should be visible. See ScrollMode for options.   Method Descriptions void ensure_control_visible ( Control control ) Ensures the given control is visible (must be a direct or indirect child of the ScrollContainer). Used by follow_focus. Note: This will not work on a node that was just added during the same frame. If you want to scroll to a newly added child, you must wait until the next frame using SceneTree.process_frame: add_child(child_node)
await get_tree().process_frame
ensure_control_visible(child_node)
 
HScrollBar get_h_scroll_bar ( ) Returns the horizontal scrollbar HScrollBar of this ScrollContainer. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to disable or hide a scrollbar, you can use horizontal_scroll_mode. 
VScrollBar get_v_scroll_bar ( ) Returns the vertical scrollbar VScrollBar of this ScrollContainer. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to disable or hide a scrollbar, you can use vertical_scroll_mode.   Theme Property Descriptions 
StyleBox panel The background StyleBox of the ScrollContainer.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_scrollcontainer.html


classes/class_styleboxtexture
-----------------------------------------------------------
StyleBoxTexture Inherits: StyleBox < Resource < RefCounted < Object A texture-based nine-patch StyleBox.  Description A texture-based nine-patch StyleBox, in a way similar to NinePatchRect. This stylebox performs a 3Ã—3 scaling of a texture, where only the center cell is fully stretched. This makes it possible to design bordered styles regardless of the stylebox's size.   Properties  
AxisStretchMode axis_stretch_horizontal 0  
AxisStretchMode axis_stretch_vertical 0  
bool draw_center true  
float expand_margin_bottom 0.0  
float expand_margin_left 0.0  
float expand_margin_right 0.0  
float expand_margin_top 0.0  
Color modulate_color Color(1, 1, 1, 1)  
Rect2 region_rect Rect2(0, 0, 0, 0)  
Texture2D texture   
float texture_margin_bottom 0.0  
float texture_margin_left 0.0  
float texture_margin_right 0.0  
float texture_margin_top 0.0     Methods  
float get_expand_margin ( Side margin ) const  
float get_texture_margin ( Side margin ) const  
void set_expand_margin ( Side margin, float size )  
void set_expand_margin_all ( float size )  
void set_texture_margin ( Side margin, float size )  
void set_texture_margin_all ( float size )     Enumerations enum AxisStretchMode: 
AxisStretchMode AXIS_STRETCH_MODE_STRETCH = 0
 Stretch the stylebox's texture. This results in visible distortion unless the texture size matches the stylebox's size perfectly. 
AxisStretchMode AXIS_STRETCH_MODE_TILE = 1
 Repeats the stylebox's texture to match the stylebox's size according to the nine-patch system. 
AxisStretchMode AXIS_STRETCH_MODE_TILE_FIT = 2
 Repeats the stylebox's texture to match the stylebox's size according to the nine-patch system. Unlike AXIS_STRETCH_MODE_TILE, the texture may be slightly stretched to make the nine-patch texture tile seamlessly.   Property Descriptions 
AxisStretchMode axis_stretch_horizontal = 0
  void set_h_axis_stretch_mode ( AxisStretchMode value )
 
AxisStretchMode get_h_axis_stretch_mode ( )
  Controls how the stylebox's texture will be stretched or tiled horizontally. See AxisStretchMode for possible values. 
AxisStretchMode axis_stretch_vertical = 0
  void set_v_axis_stretch_mode ( AxisStretchMode value )
 
AxisStretchMode get_v_axis_stretch_mode ( )
  Controls how the stylebox's texture will be stretched or tiled vertically. See AxisStretchMode for possible values. 
bool draw_center = true
  void set_draw_center ( bool value )
 
bool is_draw_center_enabled ( )
  If true, the nine-patch texture's center tile will be drawn. 
float expand_margin_bottom = 0.0
  void set_expand_margin ( Side margin, float size )
 
float get_expand_margin ( Side margin ) const
  Expands the bottom margin of this style box when drawing, causing it to be drawn larger than requested. 
float expand_margin_left = 0.0
  void set_expand_margin ( Side margin, float size )
 
float get_expand_margin ( Side margin ) const
  Expands the left margin of this style box when drawing, causing it to be drawn larger than requested. 
float expand_margin_right = 0.0
  void set_expand_margin ( Side margin, float size )
 
float get_expand_margin ( Side margin ) const
  Expands the right margin of this style box when drawing, causing it to be drawn larger than requested. 
float expand_margin_top = 0.0
  void set_expand_margin ( Side margin, float size )
 
float get_expand_margin ( Side margin ) const
  Expands the top margin of this style box when drawing, causing it to be drawn larger than requested. 
Color modulate_color = Color(1, 1, 1, 1)
  void set_modulate ( Color value )
 
Color get_modulate ( )
  Modulates the color of the texture when this style box is drawn. 
Rect2 region_rect = Rect2(0, 0, 0, 0)
  void set_region_rect ( Rect2 value )
 
Rect2 get_region_rect ( )
  Species a sub-region of the texture to use. This is equivalent to first wrapping the texture in an AtlasTexture with the same region. If empty (Rect2(0, 0, 0, 0)), the whole texture will be used. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  The texture to use when drawing this style box. 
float texture_margin_bottom = 0.0
  void set_texture_margin ( Side margin, float size )
 
float get_texture_margin ( Side margin ) const
  Increases the bottom margin of the 3Ã—3 texture box. A higher value means more of the source texture is considered to be part of the bottom border of the 3Ã—3 box. This is also the value used as fallback for StyleBox.content_margin_bottom if it is negative. 
float texture_margin_left = 0.0
  void set_texture_margin ( Side margin, float size )
 
float get_texture_margin ( Side margin ) const
  Increases the left margin of the 3Ã—3 texture box. A higher value means more of the source texture is considered to be part of the left border of the 3Ã—3 box. This is also the value used as fallback for StyleBox.content_margin_left if it is negative. 
float texture_margin_right = 0.0
  void set_texture_margin ( Side margin, float size )
 
float get_texture_margin ( Side margin ) const
  Increases the right margin of the 3Ã—3 texture box. A higher value means more of the source texture is considered to be part of the right border of the 3Ã—3 box. This is also the value used as fallback for StyleBox.content_margin_right if it is negative. 
float texture_margin_top = 0.0
  void set_texture_margin ( Side margin, float size )
 
float get_texture_margin ( Side margin ) const
  Increases the top margin of the 3Ã—3 texture box. A higher value means more of the source texture is considered to be part of the top border of the 3Ã—3 box. This is also the value used as fallback for StyleBox.content_margin_top if it is negative.   Method Descriptions 
float get_expand_margin ( Side margin ) const
 Returns the expand margin size of the specified Side. 
float get_texture_margin ( Side margin ) const
 Returns the margin size of the specified Side. void set_expand_margin ( Side margin, float size ) Sets the expand margin to size pixels for the specified Side. void set_expand_margin_all ( float size ) Sets the expand margin to size pixels for all sides. void set_texture_margin ( Side margin, float size ) Sets the margin to size pixels for the specified Side. void set_texture_margin_all ( float size ) Sets the margin to size pixels for all sides.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_styleboxtexture.html


classes/class_navigationobstacle3d
-----------------------------------------------------------
NavigationObstacle3D Inherits: Node3D < Node < Object 3D Obstacle used in navigation to constrain avoidance controlled agents outside or inside an area.  Description 3D Obstacle used in navigation to constrain avoidance controlled agents outside or inside an area. The obstacle needs a navigation map and outline vertices defined to work correctly. If the obstacle's vertices are winded in clockwise order, avoidance agents will be pushed in by the obstacle, otherwise, avoidance agents will be pushed out. Outlines must not cross or overlap. Obstacles are not a replacement for a (re)baked navigation mesh. Obstacles don't change the resulting path from the pathfinding, obstacles only affect the navigation avoidance agent movement by altering the suggested velocity of the avoidance agent. Obstacles using vertices can warp to a new position but should not moved every frame as each move requires a rebuild of the avoidance map.   Tutorials  Using NavigationObstacles    Properties  
bool avoidance_enabled true  
int avoidance_layers 1  
float height 1.0  
float radius 0.0  
bool use_3d_avoidance false  
Vector3 velocity Vector3(0, 0, 0)  
PackedVector3Array vertices PackedVector3Array()     Methods  
bool get_avoidance_layer_value ( int layer_number ) const  
RID get_navigation_map ( ) const  
RID get_rid ( ) const  
void set_avoidance_layer_value ( int layer_number, bool value )  
void set_navigation_map ( RID navigation_map )     Property Descriptions 
bool avoidance_enabled = true
  void set_avoidance_enabled ( bool value )
 
bool get_avoidance_enabled ( )
  If true the obstacle affects avoidance using agents. 
int avoidance_layers = 1
  void set_avoidance_layers ( int value )
 
int get_avoidance_layers ( )
  A bitfield determining the avoidance layers for this obstacle. Agents with a matching bit on the their avoidance mask will avoid this obstacle. 
float height = 1.0
  void set_height ( float value )
 
float get_height ( )
  Sets the obstacle height used in 2D avoidance. 2D avoidance using agent's ignore obstacles that are below or above them. 
float radius = 0.0
  void set_radius ( float value )
 
float get_radius ( )
  Sets the avoidance radius for the obstacle. 
bool use_3d_avoidance = false
  void set_use_3d_avoidance ( bool value )
 
bool get_use_3d_avoidance ( )
  If true the obstacle affects 3D avoidance using agent's with obstacle radius. If false the obstacle affects 2D avoidance using agent's with both obstacle vertices as well as obstacle radius. 
Vector3 velocity = Vector3(0, 0, 0)
  void set_velocity ( Vector3 value )
 
Vector3 get_velocity ( )
  Sets the wanted velocity for the obstacle so other agent's can better predict the obstacle if it is moved with a velocity regularly (every frame) instead of warped to a new position. Does only affect avoidance for the obstacles radius. Does nothing for the obstacles static vertices. 
PackedVector3Array vertices = PackedVector3Array()
  void set_vertices ( PackedVector3Array value )
 
PackedVector3Array get_vertices ( )
  The outline vertices of the obstacle. If the vertices are winded in clockwise order agents will be pushed in by the obstacle, else they will be pushed out. Outlines can not be crossed or overlap. Should the vertices using obstacle be warped to a new position agent's can not predict this movement and may get trapped inside the obstacle.   Method Descriptions 
bool get_avoidance_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the avoidance_layers bitmask is enabled, given a layer_number between 1 and 32. 
RID get_navigation_map ( ) const
 Returns the RID of the navigation map for this NavigationObstacle node. This function returns always the map set on the NavigationObstacle node and not the map of the abstract obstacle on the NavigationServer. If the obstacle map is changed directly with the NavigationServer API the NavigationObstacle node will not be aware of the map change. Use set_navigation_map to change the navigation map for the NavigationObstacle and also update the obstacle on the NavigationServer. 
RID get_rid ( ) const
 Returns the RID of this obstacle on the NavigationServer3D. void set_avoidance_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the avoidance_layers bitmask, given a layer_number between 1 and 32. void set_navigation_map ( RID navigation_map ) Sets the RID of the navigation map this NavigationObstacle node should use and also updates the obstacle on the NavigationServer.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_navigationobstacle3d.html


classes/class_tabcontainer
-----------------------------------------------------------
TabContainer Inherits: Container < Control < CanvasItem < Node < Object A container that creates a tab for each child control, displaying only the active tab's control.  Description Arranges child controls into a tabbed view, creating a tab for each one. The active tab's corresponding control is made visible, while all other child controls are hidden. Ignores non-control children. Note: The drawing of the clickable tabs is handled by this node; TabBar is not needed.   Tutorials  Using Containers    Properties  
bool all_tabs_in_front false  
bool clip_tabs true  
int current_tab 0  
bool drag_to_rearrange_enabled false  
AlignmentMode tab_alignment 0  
FocusMode tab_focus_mode 2  
int tabs_rearrange_group -1  
bool tabs_visible true  
bool use_hidden_tabs_for_min_size false     Methods  
Control get_current_tab_control ( ) const  
Popup get_popup ( ) const  
int get_previous_tab ( ) const  
TabBar get_tab_bar ( ) const  
Texture2D get_tab_button_icon ( int tab_idx ) const  
Control get_tab_control ( int tab_idx ) const  
int get_tab_count ( ) const  
Texture2D get_tab_icon ( int tab_idx ) const  
int get_tab_idx_at_point ( Vector2 point ) const  
int get_tab_idx_from_control ( Control control ) const  
Variant get_tab_metadata ( int tab_idx ) const  
String get_tab_title ( int tab_idx ) const  
bool is_tab_disabled ( int tab_idx ) const  
bool is_tab_hidden ( int tab_idx ) const  
bool select_next_available ( )  
bool select_previous_available ( )  
void set_popup ( Node popup )  
void set_tab_button_icon ( int tab_idx, Texture2D icon )  
void set_tab_disabled ( int tab_idx, bool disabled )  
void set_tab_hidden ( int tab_idx, bool hidden )  
void set_tab_icon ( int tab_idx, Texture2D icon )  
void set_tab_metadata ( int tab_idx, Variant metadata )  
void set_tab_title ( int tab_idx, String title )     Theme Properties  
Color drop_mark_color Color(1, 1, 1, 1)  
Color font_disabled_color Color(0.875, 0.875, 0.875, 0.5)  
Color font_hovered_color Color(0.95, 0.95, 0.95, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
Color font_selected_color Color(0.95, 0.95, 0.95, 1)  
Color font_unselected_color Color(0.7, 0.7, 0.7, 1)  
int icon_max_width 0  
int icon_separation 4  
int outline_size 0  
int side_margin 8  
Font font   
int font_size   
Texture2D decrement   
Texture2D decrement_highlight   
Texture2D drop_mark   
Texture2D increment   
Texture2D increment_highlight   
Texture2D menu   
Texture2D menu_highlight   
StyleBox panel   
StyleBox tab_disabled   
StyleBox tab_focus   
StyleBox tab_hovered   
StyleBox tab_selected   
StyleBox tab_unselected   
StyleBox tabbar_background      Signals active_tab_rearranged ( int idx_to ) Emitted when the active tab is rearranged via mouse drag. See drag_to_rearrange_enabled. pre_popup_pressed ( ) Emitted when the TabContainer's Popup button is clicked. See set_popup for details. tab_button_pressed ( int tab ) Emitted when the user clicks on the button icon on this tab. tab_changed ( int tab ) Emitted when switching to another tab. tab_clicked ( int tab ) Emitted when a tab is clicked, even if it is the current tab. tab_hovered ( int tab ) Emitted when a tab is hovered by the mouse. tab_selected ( int tab ) Emitted when a tab is selected via click, directional input, or script, even if it is the current tab.   Property Descriptions 
bool all_tabs_in_front = false
  void set_all_tabs_in_front ( bool value )
 
bool is_all_tabs_in_front ( )
  If true, all tabs are drawn in front of the panel. If false, inactive tabs are drawn behind the panel. 
bool clip_tabs = true
  void set_clip_tabs ( bool value )
 
bool get_clip_tabs ( )
  If true, tabs overflowing this node's width will be hidden, displaying two navigation buttons instead. Otherwise, this node's minimum size is updated so that all tabs are visible. 
int current_tab = 0
  void set_current_tab ( int value )
 
int get_current_tab ( )
  The current tab index. When set, this index's Control node's visible property is set to true and all others are set to false. 
bool drag_to_rearrange_enabled = false
  void set_drag_to_rearrange_enabled ( bool value )
 
bool get_drag_to_rearrange_enabled ( )
  If true, tabs can be rearranged with mouse drag. 
AlignmentMode tab_alignment = 0
  void set_tab_alignment ( AlignmentMode value )
 
AlignmentMode get_tab_alignment ( )
  Sets the position at which tabs will be placed. See AlignmentMode for details. 
FocusMode tab_focus_mode = 2
  void set_tab_focus_mode ( FocusMode value )
 
FocusMode get_tab_focus_mode ( )
  The focus access mode for the internal TabBar node. 
int tabs_rearrange_group = -1
  void set_tabs_rearrange_group ( int value )
 
int get_tabs_rearrange_group ( )
  TabContainers with the same rearrange group ID will allow dragging the tabs between them. Enable drag with drag_to_rearrange_enabled. Setting this to -1 will disable rearranging between TabContainers. 
bool tabs_visible = true
  void set_tabs_visible ( bool value )
 
bool are_tabs_visible ( )
  If true, tabs are visible. If false, tabs' content and titles are hidden. 
bool use_hidden_tabs_for_min_size = false
  void set_use_hidden_tabs_for_min_size ( bool value )
 
bool get_use_hidden_tabs_for_min_size ( )
  If true, child Control nodes that are hidden have their minimum size take into account in the total, instead of only the currently visible one.   Method Descriptions 
Control get_current_tab_control ( ) const
 Returns the child Control node located at the active tab index. 
Popup get_popup ( ) const
 Returns the Popup node instance if one has been set already with set_popup. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their Window.visible property. 
int get_previous_tab ( ) const
 Returns the previously active tab index. 
TabBar get_tab_bar ( ) const
 Returns the TabBar contained in this container. Warning: This is a required internal node, removing and freeing it or editing its tabs may cause a crash. If you wish to edit the tabs, use the methods provided in TabContainer. 
Texture2D get_tab_button_icon ( int tab_idx ) const
 Returns the button icon from the tab at index tab_idx. 
Control get_tab_control ( int tab_idx ) const
 Returns the Control node from the tab at index tab_idx. 
int get_tab_count ( ) const
 Returns the number of tabs. 
Texture2D get_tab_icon ( int tab_idx ) const
 Returns the Texture2D for the tab at index tab_idx or null if the tab has no Texture2D. 
int get_tab_idx_at_point ( Vector2 point ) const
 Returns the index of the tab at local coordinates point. Returns -1 if the point is outside the control boundaries or if there's no tab at the queried position. 
int get_tab_idx_from_control ( Control control ) const
 Returns the index of the tab tied to the given control. The control must be a child of the TabContainer. 
Variant get_tab_metadata ( int tab_idx ) const
 Returns the metadata value set to the tab at index tab_idx using set_tab_metadata. If no metadata was previously set, returns null by default. 
String get_tab_title ( int tab_idx ) const
 Returns the title of the tab at index tab_idx. Tab titles default to the name of the indexed child node, but this can be overridden with set_tab_title. 
bool is_tab_disabled ( int tab_idx ) const
 Returns true if the tab at index tab_idx is disabled. 
bool is_tab_hidden ( int tab_idx ) const
 Returns true if the tab at index tab_idx is hidden. 
bool select_next_available ( ) Selects the first available tab with greater index than the currently selected. Returns true if tab selection changed. 
bool select_previous_available ( ) Selects the first available tab with lower index than the currently selected. Returns true if tab selection changed. void set_popup ( Node popup ) If set on a Popup node instance, a popup menu icon appears in the top-right corner of the TabContainer (setting it to null will make it go away). Clicking it will expand the Popup node. void set_tab_button_icon ( int tab_idx, Texture2D icon ) Sets the button icon from the tab at index tab_idx. void set_tab_disabled ( int tab_idx, bool disabled ) If disabled is true, disables the tab at index tab_idx, making it non-interactable. void set_tab_hidden ( int tab_idx, bool hidden ) If hidden is true, hides the tab at index tab_idx, making it disappear from the tab area. void set_tab_icon ( int tab_idx, Texture2D icon ) Sets an icon for the tab at index tab_idx. void set_tab_metadata ( int tab_idx, Variant metadata ) Sets the metadata value for the tab at index tab_idx, which can be retrieved later using get_tab_metadata. void set_tab_title ( int tab_idx, String title ) Sets a custom title for the tab at index tab_idx (tab titles default to the name of the indexed child node). Set it back to the child's name to make the tab default to it again.   Theme Property Descriptions 
Color drop_mark_color = Color(1, 1, 1, 1)
 Modulation color for the drop_mark icon. 
Color font_disabled_color = Color(0.875, 0.875, 0.875, 0.5)
 Font color of disabled tabs. 
Color font_hovered_color = Color(0.95, 0.95, 0.95, 1)
 Font color of the currently hovered tab. 
Color font_outline_color = Color(1, 1, 1, 1)
 The tint of text outline of the tab name. 
Color font_selected_color = Color(0.95, 0.95, 0.95, 1)
 Font color of the currently selected tab. 
Color font_unselected_color = Color(0.7, 0.7, 0.7, 1)
 Font color of the other, unselected tabs. 
int icon_max_width = 0
 The maximum allowed width of the tab's icon. This limit is applied on top of the default size of the icon, but before the value set with TabBar.set_tab_icon_max_width. The height is adjusted according to the icon's ratio. 
int icon_separation = 4
 Space between tab's name and its icon. 
int outline_size = 0
 The size of the tab text outline. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. 
int side_margin = 8
 The space at the left or right edges of the tab bar, accordingly with the current tab_alignment. The margin is ignored with TabBar.ALIGNMENT_RIGHT if the tabs are clipped (see clip_tabs) or a popup has been set (see set_popup). The margin is always ignored with TabBar.ALIGNMENT_CENTER. 
Font font The font used to draw tab names. 
int font_size Font size of the tab names. 
Texture2D decrement Icon for the left arrow button that appears when there are too many tabs to fit in the container width. When the button is disabled (i.e. the first tab is visible), it appears semi-transparent. 
Texture2D decrement_highlight Icon for the left arrow button that appears when there are too many tabs to fit in the container width. Used when the button is being hovered with the cursor. 
Texture2D drop_mark Icon shown to indicate where a dragged tab is gonna be dropped (see drag_to_rearrange_enabled). 
Texture2D increment Icon for the right arrow button that appears when there are too many tabs to fit in the container width. When the button is disabled (i.e. the last tab is visible) it appears semi-transparent. 
Texture2D increment_highlight Icon for the right arrow button that appears when there are too many tabs to fit in the container width. Used when the button is being hovered with the cursor. 
Texture2D menu The icon for the menu button (see set_popup). 
Texture2D menu_highlight The icon for the menu button (see set_popup) when it's being hovered with the cursor. 
StyleBox panel The style for the background fill. 
StyleBox tab_disabled The style of disabled tabs. 
StyleBox tab_focus StyleBox used when the TabBar is focused. The tab_focus StyleBox is displayed over the base StyleBox of the selected tab, so a partially transparent StyleBox should be used to ensure the base StyleBox remains visible. A StyleBox that represents an outline or an underline works well for this purpose. To disable the focus visual effect, assign a StyleBoxEmpty resource. Note that disabling the focus visual effect will harm keyboard/controller navigation usability, so this is not recommended for accessibility reasons. 
StyleBox tab_hovered The style of the currently hovered tab. Note: This style will be drawn with the same width as tab_unselected at minimum. 
StyleBox tab_selected The style of the currently selected tab. 
StyleBox tab_unselected The style of the other, unselected tabs. 
StyleBox tabbar_background The style for the background fill of the TabBar area.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_tabcontainer.html


classes/class_viewport
-----------------------------------------------------------
Viewport Inherits: Node < Object Inherited By: SubViewport, Window Abstract base class for viewports. Encapsulates drawing and interaction with a game world.  Description A Viewport creates a different view into the screen, or a sub-view inside another viewport. Child 2D nodes will display on it, and child Camera3D 3D nodes will render on it too. Optionally, a viewport can have its own 2D or 3D world, so it doesn't share what it draws with other viewports. Viewports can also choose to be audio listeners, so they generate positional audio depending on a 2D or 3D camera child of it. Also, viewports can be assigned to different screens in case the devices have multiple screens. Finally, viewports can also behave as render targets, in which case they will not be visible unless the associated texture is used to draw.   Tutorials  Using Viewports Viewport and canvas transforms GUI in 3D Demo 3D in 2D Demo 2D in 3D Demo Screen Capture Demo Dynamic Split Screen Demo 3D Viewport Scaling Demo    Properties  
bool audio_listener_enable_2d false  
bool audio_listener_enable_3d false  
int canvas_cull_mask 4294967295  
DefaultCanvasItemTextureFilter canvas_item_default_texture_filter 1  
DefaultCanvasItemTextureRepeat canvas_item_default_texture_repeat 0  
Transform2D canvas_transform   
DebugDraw debug_draw 0  
bool disable_3d false  
float fsr_sharpness 0.2  
Transform2D global_canvas_transform   
bool gui_disable_input false  
bool gui_embed_subwindows false  
bool gui_snap_controls_to_pixels true  
bool handle_input_locally true  
float mesh_lod_threshold 1.0  
MSAA msaa_2d 0  
MSAA msaa_3d 0  
bool own_world_3d false  
bool physics_object_picking false  
bool physics_object_picking_sort false  
bool positional_shadow_atlas_16_bits true  
PositionalShadowAtlasQuadrantSubdiv positional_shadow_atlas_quad_0 2  
PositionalShadowAtlasQuadrantSubdiv positional_shadow_atlas_quad_1 2  
PositionalShadowAtlasQuadrantSubdiv positional_shadow_atlas_quad_2 3  
PositionalShadowAtlasQuadrantSubdiv positional_shadow_atlas_quad_3 4  
int positional_shadow_atlas_size 2048  
Scaling3DMode scaling_3d_mode 0  
float scaling_3d_scale 1.0  
ScreenSpaceAA screen_space_aa 0  
SDFOversize sdf_oversize 1  
SDFScale sdf_scale 1  
bool snap_2d_transforms_to_pixel false  
bool snap_2d_vertices_to_pixel false  
float texture_mipmap_bias 0.0  
bool transparent_bg false  
bool use_debanding false  
bool use_hdr_2d false  
bool use_occlusion_culling false  
bool use_taa false  
bool use_xr false  
VRSMode vrs_mode 0  
Texture2D vrs_texture   
World2D world_2d   
World3D world_3d      Methods  
World2D find_world_2d ( ) const  
World3D find_world_3d ( ) const  
Camera2D get_camera_2d ( ) const  
Camera3D get_camera_3d ( ) const  
bool get_canvas_cull_mask_bit ( int layer ) const  
Window[] get_embedded_subwindows ( ) const  
Transform2D get_final_transform ( ) const  
Vector2 get_mouse_position ( ) const  
PositionalShadowAtlasQuadrantSubdiv get_positional_shadow_atlas_quadrant_subdiv ( int quadrant ) const  
int get_render_info ( RenderInfoType type, RenderInfo info )  
Transform2D get_screen_transform ( ) const  
ViewportTexture get_texture ( ) const  
RID get_viewport_rid ( ) const  
Rect2 get_visible_rect ( ) const  
Variant gui_get_drag_data ( ) const  
Control gui_get_focus_owner ( ) const  
bool gui_is_drag_successful ( ) const  
bool gui_is_dragging ( ) const  
void gui_release_focus ( )  
bool is_input_handled ( ) const  
void push_input ( InputEvent event, bool in_local_coords=false )  
void push_text_input ( String text )  
void push_unhandled_input ( InputEvent event, bool in_local_coords=false )  
void set_canvas_cull_mask_bit ( int layer, bool enable )  
void set_input_as_handled ( )  
void set_positional_shadow_atlas_quadrant_subdiv ( int quadrant, PositionalShadowAtlasQuadrantSubdiv subdiv )  
void update_mouse_cursor_state ( )  
void warp_mouse ( Vector2 position )     Signals gui_focus_changed ( Control node ) Emitted when a Control node grabs keyboard focus. size_changed ( ) Emitted when the size of the viewport is changed, whether by resizing of window, or some other means.   Enumerations enum PositionalShadowAtlasQuadrantSubdiv: 
PositionalShadowAtlasQuadrantSubdiv SHADOW_ATLAS_QUADRANT_SUBDIV_DISABLED = 0
 This quadrant will not be used. 
PositionalShadowAtlasQuadrantSubdiv SHADOW_ATLAS_QUADRANT_SUBDIV_1 = 1
 This quadrant will only be used by one shadow map. 
PositionalShadowAtlasQuadrantSubdiv SHADOW_ATLAS_QUADRANT_SUBDIV_4 = 2
 This quadrant will be split in 4 and used by up to 4 shadow maps. 
PositionalShadowAtlasQuadrantSubdiv SHADOW_ATLAS_QUADRANT_SUBDIV_16 = 3
 This quadrant will be split 16 ways and used by up to 16 shadow maps. 
PositionalShadowAtlasQuadrantSubdiv SHADOW_ATLAS_QUADRANT_SUBDIV_64 = 4
 This quadrant will be split 64 ways and used by up to 64 shadow maps. 
PositionalShadowAtlasQuadrantSubdiv SHADOW_ATLAS_QUADRANT_SUBDIV_256 = 5
 This quadrant will be split 256 ways and used by up to 256 shadow maps. Unless the positional_shadow_atlas_size is very high, the shadows in this quadrant will be very low resolution. 
PositionalShadowAtlasQuadrantSubdiv SHADOW_ATLAS_QUADRANT_SUBDIV_1024 = 6
 This quadrant will be split 1024 ways and used by up to 1024 shadow maps. Unless the positional_shadow_atlas_size is very high, the shadows in this quadrant will be very low resolution. 
PositionalShadowAtlasQuadrantSubdiv SHADOW_ATLAS_QUADRANT_SUBDIV_MAX = 7
 Represents the size of the PositionalShadowAtlasQuadrantSubdiv enum. enum Scaling3DMode: 
Scaling3DMode SCALING_3D_MODE_BILINEAR = 0
 Use bilinear scaling for the viewport's 3D buffer. The amount of scaling can be set using scaling_3d_scale. Values less than 1.0 will result in undersampling while values greater than 1.0 will result in supersampling. A value of 1.0 disables scaling. 
Scaling3DMode SCALING_3D_MODE_FSR = 1
 Use AMD FidelityFX Super Resolution 1.0 upscaling for the viewport's 3D buffer. The amount of scaling can be set using scaling_3d_scale. Values less than 1.0 will be result in the viewport being upscaled using FSR. Values greater than 1.0 are not supported and bilinear downsampling will be used instead. A value of 1.0 disables scaling. 
Scaling3DMode SCALING_3D_MODE_FSR2 = 2
 Use AMD FidelityFX Super Resolution 2.2 upscaling for the viewport's 3D buffer. The amount of scaling can be set using scaling_3d_scale. Values less than 1.0 will be result in the viewport being upscaled using FSR2. Values greater than 1.0 are not supported and bilinear downsampling will be used instead. A value of 1.0 will use FSR2 at native resolution as a TAA solution. 
Scaling3DMode SCALING_3D_MODE_MAX = 3
 Represents the size of the Scaling3DMode enum. enum MSAA: 
MSAA MSAA_DISABLED = 0
 Multisample antialiasing mode disabled. This is the default value, and is also the fastest setting. 
MSAA MSAA_2X = 1
 Use 2Ã— Multisample Antialiasing. This has a moderate performance cost. It helps reduce aliasing noticeably, but 4Ã— MSAA still looks substantially better. 
MSAA MSAA_4X = 2
 Use 4Ã— Multisample Antialiasing. This has a significant performance cost, and is generally a good compromise between performance and quality. 
MSAA MSAA_8X = 3
 Use 8Ã— Multisample Antialiasing. This has a very high performance cost. The difference between 4Ã— and 8Ã— MSAA may not always be visible in real gameplay conditions. Likely unsupported on low-end and older hardware. 
MSAA MSAA_MAX = 4
 Represents the size of the MSAA enum. enum ScreenSpaceAA: 
ScreenSpaceAA SCREEN_SPACE_AA_DISABLED = 0
 Do not perform any antialiasing in the full screen post-process. 
ScreenSpaceAA SCREEN_SPACE_AA_FXAA = 1
 Use fast approximate antialiasing. FXAA is a popular screen-space antialiasing method, which is fast but will make the image look blurry, especially at lower resolutions. It can still work relatively well at large resolutions such as 1440p and 4K. 
ScreenSpaceAA SCREEN_SPACE_AA_MAX = 2
 Represents the size of the ScreenSpaceAA enum. enum RenderInfo: 
RenderInfo RENDER_INFO_OBJECTS_IN_FRAME = 0
 Amount of objects in frame. 
RenderInfo RENDER_INFO_PRIMITIVES_IN_FRAME = 1
 Amount of vertices in frame. 
RenderInfo RENDER_INFO_DRAW_CALLS_IN_FRAME = 2
 Amount of draw calls in frame. 
RenderInfo RENDER_INFO_MAX = 3
 Represents the size of the RenderInfo enum. enum RenderInfoType: 
RenderInfoType RENDER_INFO_TYPE_VISIBLE = 0
 
RenderInfoType RENDER_INFO_TYPE_SHADOW = 1
 
RenderInfoType RENDER_INFO_TYPE_MAX = 2
 enum DebugDraw: 
DebugDraw DEBUG_DRAW_DISABLED = 0
 Objects are displayed normally. 
DebugDraw DEBUG_DRAW_UNSHADED = 1
 Objects are displayed without light information. 
DebugDraw DEBUG_DRAW_LIGHTING = 2
 
DebugDraw DEBUG_DRAW_OVERDRAW = 3
 Objects are displayed semi-transparent with additive blending so you can see where they are drawing over top of one another. A higher overdraw means you are wasting performance on drawing pixels that are being hidden behind others. 
DebugDraw DEBUG_DRAW_WIREFRAME = 4
 Objects are displayed in wireframe style. 
DebugDraw DEBUG_DRAW_NORMAL_BUFFER = 5
 
DebugDraw DEBUG_DRAW_VOXEL_GI_ALBEDO = 6
 Objects are displayed with only the albedo value from VoxelGIs. 
DebugDraw DEBUG_DRAW_VOXEL_GI_LIGHTING = 7
 Objects are displayed with only the lighting value from VoxelGIs. 
DebugDraw DEBUG_DRAW_VOXEL_GI_EMISSION = 8
 Objects are displayed with only the emission color from VoxelGIs. 
DebugDraw DEBUG_DRAW_SHADOW_ATLAS = 9
 Draws the shadow atlas that stores shadows from OmniLight3Ds and SpotLight3Ds in the upper left quadrant of the Viewport. 
DebugDraw DEBUG_DRAW_DIRECTIONAL_SHADOW_ATLAS = 10
 Draws the shadow atlas that stores shadows from DirectionalLight3Ds in the upper left quadrant of the Viewport. 
DebugDraw DEBUG_DRAW_SCENE_LUMINANCE = 11
 
DebugDraw DEBUG_DRAW_SSAO = 12
 Draws the screen-space ambient occlusion texture instead of the scene so that you can clearly see how it is affecting objects. In order for this display mode to work, you must have Environment.ssao_enabled set in your WorldEnvironment. 
DebugDraw DEBUG_DRAW_SSIL = 13
 Draws the screen-space indirect lighting texture instead of the scene so that you can clearly see how it is affecting objects. In order for this display mode to work, you must have Environment.ssil_enabled set in your WorldEnvironment. 
DebugDraw DEBUG_DRAW_PSSM_SPLITS = 14
 Colors each PSSM split for the DirectionalLight3Ds in the scene a different color so you can see where the splits are. In order, they will be colored red, green, blue, and yellow. 
DebugDraw DEBUG_DRAW_DECAL_ATLAS = 15
 Draws the decal atlas used by Decals and light projector textures in the upper left quadrant of the Viewport. 
DebugDraw DEBUG_DRAW_SDFGI = 16
 
DebugDraw DEBUG_DRAW_SDFGI_PROBES = 17
 
DebugDraw DEBUG_DRAW_GI_BUFFER = 18
 
DebugDraw DEBUG_DRAW_DISABLE_LOD = 19
 
DebugDraw DEBUG_DRAW_CLUSTER_OMNI_LIGHTS = 20
 
DebugDraw DEBUG_DRAW_CLUSTER_SPOT_LIGHTS = 21
 
DebugDraw DEBUG_DRAW_CLUSTER_DECALS = 22
 
DebugDraw DEBUG_DRAW_CLUSTER_REFLECTION_PROBES = 23
 
DebugDraw DEBUG_DRAW_OCCLUDERS = 24
 
DebugDraw DEBUG_DRAW_MOTION_VECTORS = 25
 
DebugDraw DEBUG_DRAW_INTERNAL_BUFFER = 26
 Draws the internal resolution buffer of the scene before post-processing is applied. enum DefaultCanvasItemTextureFilter: 
DefaultCanvasItemTextureFilter DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST = 0
 The texture filter reads from the nearest pixel only. This makes the texture look pixelated from up close, and grainy from a distance (due to mipmaps not being sampled). 
DefaultCanvasItemTextureFilter DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR = 1
 The texture filter blends between the nearest 4 pixels. This makes the texture look smooth from up close, and grainy from a distance (due to mipmaps not being sampled). 
DefaultCanvasItemTextureFilter DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_LINEAR_WITH_MIPMAPS = 2
 The texture filter blends between the nearest 4 pixels and between the nearest 2 mipmaps (or uses the nearest mipmap if ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter is true). This makes the texture look smooth from up close, and smooth from a distance. Use this for non-pixel art textures that may be viewed at a low scale (e.g. due to Camera2D zoom or sprite scaling), as mipmaps are important to smooth out pixels that are smaller than on-screen pixels. 
DefaultCanvasItemTextureFilter DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_NEAREST_WITH_MIPMAPS = 3
 The texture filter reads from the nearest pixel and blends between the nearest 2 mipmaps (or uses the nearest mipmap if ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter is true). This makes the texture look pixelated from up close, and smooth from a distance. Use this for non-pixel art textures that may be viewed at a low scale (e.g. due to Camera2D zoom or sprite scaling), as mipmaps are important to smooth out pixels that are smaller than on-screen pixels. 
DefaultCanvasItemTextureFilter DEFAULT_CANVAS_ITEM_TEXTURE_FILTER_MAX = 4
 Max value for DefaultCanvasItemTextureFilter enum. enum DefaultCanvasItemTextureRepeat: 
DefaultCanvasItemTextureRepeat DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_DISABLED = 0
 Disables textures repeating. Instead, when reading UVs outside the 0-1 range, the value will be clamped to the edge of the texture, resulting in a stretched out look at the borders of the texture. 
DefaultCanvasItemTextureRepeat DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_ENABLED = 1
 Enables the texture to repeat when UV coordinates are outside the 0-1 range. If using one of the linear filtering modes, this can result in artifacts at the edges of a texture when the sampler filters across the edges of the texture. 
DefaultCanvasItemTextureRepeat DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MIRROR = 2
 Flip the texture when repeating so that the edge lines up instead of abruptly changing. 
DefaultCanvasItemTextureRepeat DEFAULT_CANVAS_ITEM_TEXTURE_REPEAT_MAX = 3
 Max value for DefaultCanvasItemTextureRepeat enum. enum SDFOversize: 
SDFOversize SDF_OVERSIZE_100_PERCENT = 0
 
SDFOversize SDF_OVERSIZE_120_PERCENT = 1
 
SDFOversize SDF_OVERSIZE_150_PERCENT = 2
 
SDFOversize SDF_OVERSIZE_200_PERCENT = 3
 
SDFOversize SDF_OVERSIZE_MAX = 4
 enum SDFScale: 
SDFScale SDF_SCALE_100_PERCENT = 0
 
SDFScale SDF_SCALE_50_PERCENT = 1
 
SDFScale SDF_SCALE_25_PERCENT = 2
 
SDFScale SDF_SCALE_MAX = 3
 enum VRSMode: 
VRSMode VRS_DISABLED = 0
 VRS is disabled. 
VRSMode VRS_TEXTURE = 1
 VRS uses a texture. Note, for stereoscopic use a texture atlas with a texture for each view. 
VRSMode VRS_XR = 2
 VRS texture is supplied by the primary XRInterface. 
VRSMode VRS_MAX = 3
 Represents the size of the VRSMode enum.   Property Descriptions 
bool audio_listener_enable_2d = false
  void set_as_audio_listener_2d ( bool value )
 
bool is_audio_listener_2d ( )
  If true, the viewport will process 2D audio streams. 
bool audio_listener_enable_3d = false
  void set_as_audio_listener_3d ( bool value )
 
bool is_audio_listener_3d ( )
  If true, the viewport will process 3D audio streams. 
int canvas_cull_mask = 4294967295
  void set_canvas_cull_mask ( int value )
 
int get_canvas_cull_mask ( )
  The rendering layers in which this Viewport renders CanvasItem nodes. 
DefaultCanvasItemTextureFilter canvas_item_default_texture_filter = 1
  void set_default_canvas_item_texture_filter ( DefaultCanvasItemTextureFilter value )
 
DefaultCanvasItemTextureFilter get_default_canvas_item_texture_filter ( )
  Sets the default filter mode used by CanvasItems in this Viewport. See DefaultCanvasItemTextureFilter for options. 
DefaultCanvasItemTextureRepeat canvas_item_default_texture_repeat = 0
  void set_default_canvas_item_texture_repeat ( DefaultCanvasItemTextureRepeat value )
 
DefaultCanvasItemTextureRepeat get_default_canvas_item_texture_repeat ( )
  Sets the default repeat mode used by CanvasItems in this Viewport. See DefaultCanvasItemTextureRepeat for options. 
Transform2D canvas_transform  void set_canvas_transform ( Transform2D value )
 
Transform2D get_canvas_transform ( )
  The canvas transform of the viewport, useful for changing the on-screen positions of all child CanvasItems. This is relative to the global canvas transform of the viewport. 
DebugDraw debug_draw = 0
  void set_debug_draw ( DebugDraw value )
 
DebugDraw get_debug_draw ( )
  The overlay mode for test rendered geometry in debug purposes. 
bool disable_3d = false
  void set_disable_3d ( bool value )
 
bool is_3d_disabled ( )
  Disable 3D rendering (but keep 2D rendering). 
float fsr_sharpness = 0.2
  void set_fsr_sharpness ( float value )
 
float get_fsr_sharpness ( )
  Determines how sharp the upscaled image will be when using the FSR upscaling mode. Sharpness halves with every whole number. Values go from 0.0 (sharpest) to 2.0. Values above 2.0 won't make a visible difference. To control this property on the root viewport, set the ProjectSettings.rendering/scaling_3d/fsr_sharpness project setting. 
Transform2D global_canvas_transform  void set_global_canvas_transform ( Transform2D value )
 
Transform2D get_global_canvas_transform ( )
  The global canvas transform of the viewport. The canvas transform is relative to this. 
bool gui_disable_input = false
  void set_disable_input ( bool value )
 
bool is_input_disabled ( )
  If true, the viewport will not receive input events. 
bool gui_embed_subwindows = false
  void set_embedding_subwindows ( bool value )
 
bool is_embedding_subwindows ( )
  If true, sub-windows (popups and dialogs) will be embedded inside application window as control-like nodes. If false, they will appear as separate windows handled by the operating system. 
bool gui_snap_controls_to_pixels = true
  void set_snap_controls_to_pixels ( bool value )
 
bool is_snap_controls_to_pixels_enabled ( )
  If true, the GUI controls on the viewport will lay pixel perfectly. 
bool handle_input_locally = true
  void set_handle_input_locally ( bool value )
 
bool is_handling_input_locally ( )
  If true, this viewport will mark incoming input events as handled by itself. If false, this is instead done by the first parent viewport that is set to handle input locally. A SubViewportContainer will automatically set this property to false for the Viewport contained inside of it. See also set_input_as_handled and is_input_handled. 
float mesh_lod_threshold = 1.0
  void set_mesh_lod_threshold ( float value )
 
float get_mesh_lod_threshold ( )
  The automatic LOD bias to use for meshes rendered within the Viewport (this is analogous to ReflectionProbe.mesh_lod_threshold). Higher values will use less detailed versions of meshes that have LOD variations generated. If set to 0.0, automatic LOD is disabled. Increase mesh_lod_threshold to improve performance at the cost of geometry detail. To control this property on the root viewport, set the ProjectSettings.rendering/mesh_lod/lod_change/threshold_pixels project setting. Note: mesh_lod_threshold does not affect GeometryInstance3D visibility ranges (also known as "manual" LOD or hierarchical LOD). 
MSAA msaa_2d = 0
  void set_msaa_2d ( MSAA value )
 
MSAA get_msaa_2d ( )
  The multisample anti-aliasing mode for 2D/Canvas rendering. A higher number results in smoother edges at the cost of significantly worse performance. A value of 2 or 4 is best unless targeting very high-end systems. This has no effect on shader-induced aliasing or texture aliasing. 
MSAA msaa_3d = 0
  void set_msaa_3d ( MSAA value )
 
MSAA get_msaa_3d ( )
  The multisample anti-aliasing mode for 3D rendering. A higher number results in smoother edges at the cost of significantly worse performance. A value of 2 or 4 is best unless targeting very high-end systems. See also bilinear scaling 3d scaling_3d_mode for supersampling, which provides higher quality but is much more expensive. This has no effect on shader-induced aliasing or texture aliasing. 
bool own_world_3d = false
  void set_use_own_world_3d ( bool value )
 
bool is_using_own_world_3d ( )
  If true, the viewport will use a unique copy of the World3D defined in world_3d. 
bool physics_object_picking = false
  void set_physics_object_picking ( bool value )
 
bool get_physics_object_picking ( )
  If true, the objects rendered by viewport become subjects of mouse picking process. Note: The number of simultaneously pickable objects is limited to 64 and they are selected in a non-deterministic order, which can be different in each picking process. 
bool physics_object_picking_sort = false
  void set_physics_object_picking_sort ( bool value )
 
bool get_physics_object_picking_sort ( )
  If true, objects receive mouse picking events sorted primarily by their CanvasItem.z_index and secondarily by their position in the scene tree. If false, the order is undetermined. Note: This setting is disabled by default because of its potential expensive computational cost. Note: Sorting happens after selecting the pickable objects. Because of the limitation of 64 simultaneously pickable objects, it is not guaranteed that the object with the highest CanvasItem.z_index receives the picking event. 
bool positional_shadow_atlas_16_bits = true
  void set_positional_shadow_atlas_16_bits ( bool value )
 
bool get_positional_shadow_atlas_16_bits ( )
  Use 16 bits for the omni/spot shadow depth map. Enabling this results in shadows having less precision and may result in shadow acne, but can lead to performance improvements on some devices. 
PositionalShadowAtlasQuadrantSubdiv positional_shadow_atlas_quad_0 = 2
  void set_positional_shadow_atlas_quadrant_subdiv ( int quadrant, PositionalShadowAtlasQuadrantSubdiv subdiv )
 
PositionalShadowAtlasQuadrantSubdiv get_positional_shadow_atlas_quadrant_subdiv ( int quadrant ) const
  The subdivision amount of the first quadrant on the shadow atlas. 
PositionalShadowAtlasQuadrantSubdiv positional_shadow_atlas_quad_1 = 2
  void set_positional_shadow_atlas_quadrant_subdiv ( int quadrant, PositionalShadowAtlasQuadrantSubdiv subdiv )
 
PositionalShadowAtlasQuadrantSubdiv get_positional_shadow_atlas_quadrant_subdiv ( int quadrant ) const
  The subdivision amount of the second quadrant on the shadow atlas. 
PositionalShadowAtlasQuadrantSubdiv positional_shadow_atlas_quad_2 = 3
  void set_positional_shadow_atlas_quadrant_subdiv ( int quadrant, PositionalShadowAtlasQuadrantSubdiv subdiv )
 
PositionalShadowAtlasQuadrantSubdiv get_positional_shadow_atlas_quadrant_subdiv ( int quadrant ) const
  The subdivision amount of the third quadrant on the shadow atlas. 
PositionalShadowAtlasQuadrantSubdiv positional_shadow_atlas_quad_3 = 4
  void set_positional_shadow_atlas_quadrant_subdiv ( int quadrant, PositionalShadowAtlasQuadrantSubdiv subdiv )
 
PositionalShadowAtlasQuadrantSubdiv get_positional_shadow_atlas_quadrant_subdiv ( int quadrant ) const
  The subdivision amount of the fourth quadrant on the shadow atlas. 
int positional_shadow_atlas_size = 2048
  void set_positional_shadow_atlas_size ( int value )
 
int get_positional_shadow_atlas_size ( )
  The shadow atlas' resolution (used for omni and spot lights). The value is rounded up to the nearest power of 2. Note: If this is set to 0, no positional shadows will be visible at all. This can improve performance significantly on low-end systems by reducing both the CPU and GPU load (as fewer draw calls are needed to draw the scene without shadows). 
Scaling3DMode scaling_3d_mode = 0
  void set_scaling_3d_mode ( Scaling3DMode value )
 
Scaling3DMode get_scaling_3d_mode ( )
  Sets scaling 3d mode. Bilinear scaling renders at different resolution to either undersample or supersample the viewport. FidelityFX Super Resolution 1.0, abbreviated to FSR, is an upscaling technology that produces high quality images at fast framerates by using a spatially aware upscaling algorithm. FSR is slightly more expensive than bilinear, but it produces significantly higher image quality. FSR should be used where possible. To control this property on the root viewport, set the ProjectSettings.rendering/scaling_3d/mode project setting. 
float scaling_3d_scale = 1.0
  void set_scaling_3d_scale ( float value )
 
float get_scaling_3d_scale ( )
  Scales the 3D render buffer based on the viewport size uses an image filter specified in ProjectSettings.rendering/scaling_3d/mode to scale the output image to the full viewport size. Values lower than 1.0 can be used to speed up 3D rendering at the cost of quality (undersampling). Values greater than 1.0 are only valid for bilinear mode and can be used to improve 3D rendering quality at a high performance cost (supersampling). See also ProjectSettings.rendering/anti_aliasing/quality/msaa_3d for multi-sample antialiasing, which is significantly cheaper but only smooths the edges of polygons. When using FSR upscaling, AMD recommends exposing the following values as preset options to users "Ultra Quality: 0.77", "Quality: 0.67", "Balanced: 0.59", "Performance: 0.5" instead of exposing the entire scale. To control this property on the root viewport, set the ProjectSettings.rendering/scaling_3d/scale project setting. 
ScreenSpaceAA screen_space_aa = 0
  void set_screen_space_aa ( ScreenSpaceAA value )
 
ScreenSpaceAA get_screen_space_aa ( )
  Sets the screen-space antialiasing method used. Screen-space antialiasing works by selectively blurring edges in a post-process shader. It differs from MSAA which takes multiple coverage samples while rendering objects. Screen-space AA methods are typically faster than MSAA and will smooth out specular aliasing, but tend to make scenes appear blurry. 
SDFOversize sdf_oversize = 1
  void set_sdf_oversize ( SDFOversize value )
 
SDFOversize get_sdf_oversize ( )
   There is currently no description for this property. Please help us by contributing one!  
SDFScale sdf_scale = 1
  void set_sdf_scale ( SDFScale value )
 
SDFScale get_sdf_scale ( )
   There is currently no description for this property. Please help us by contributing one!  
bool snap_2d_transforms_to_pixel = false
  void set_snap_2d_transforms_to_pixel ( bool value )
 
bool is_snap_2d_transforms_to_pixel_enabled ( )
   There is currently no description for this property. Please help us by contributing one!  
bool snap_2d_vertices_to_pixel = false
  void set_snap_2d_vertices_to_pixel ( bool value )
 
bool is_snap_2d_vertices_to_pixel_enabled ( )
   There is currently no description for this property. Please help us by contributing one!  
float texture_mipmap_bias = 0.0
  void set_texture_mipmap_bias ( float value )
 
float get_texture_mipmap_bias ( )
  Affects the final texture sharpness by reading from a lower or higher mipmap (also called "texture LOD bias"). Negative values make mipmapped textures sharper but grainier when viewed at a distance, while positive values make mipmapped textures blurrier (even when up close). Enabling temporal antialiasing (use_taa) will automatically apply a -0.5 offset to this value, while enabling FXAA (screen_space_aa) will automatically apply a -0.25 offset to this value. If both TAA and FXAA are enabled at the same time, an offset of -0.75 is applied to this value. Note: If scaling_3d_scale is lower than 1.0 (exclusive), texture_mipmap_bias is used to adjust the automatic mipmap bias which is calculated internally based on the scale factor. The formula for this is log2(scaling_3d_scale) + mipmap_bias. To control this property on the root viewport, set the ProjectSettings.rendering/textures/default_filters/texture_mipmap_bias project setting. 
bool transparent_bg = false
  void set_transparent_background ( bool value )
 
bool has_transparent_background ( )
  If true, the viewport should render its background as transparent. 
bool use_debanding = false
  void set_use_debanding ( bool value )
 
bool is_using_debanding ( )
  If true, uses a fast post-processing filter to make banding significantly less visible in 3D. 2D rendering is not affected by debanding unless the Environment.background_mode is Environment.BG_CANVAS. See also ProjectSettings.rendering/anti_aliasing/quality/use_debanding. In some cases, debanding may introduce a slightly noticeable dithering pattern. It's recommended to enable debanding only when actually needed since the dithering pattern will make lossless-compressed screenshots larger. 
bool use_hdr_2d = false
  void set_use_hdr_2d ( bool value )
 
bool is_using_hdr_2d ( )
  If true, 2D rendering will use an high dynamic range (HDR) format framebuffer matching the bit depth of the 3D framebuffer. When using the Forward+ renderer this will be a RGBA16 framebuffer, while when using the Mobile renderer it will be a RGB10_A2 framebuffer. Additionally, 2D rendering will take place in linear color space and will be converted to sRGB space immediately before blitting to the screen (if the Viewport is attached to the screen). Practically speaking, this means that the end result of the Viewport will not be clamped into the 0-1 range and can be used in 3D rendering without color space adjustments. This allows 2D rendering to take advantage of effects requiring high dynamic range (e.g. 2D glow) as well as substantially improves the appearance of effects requiring highly detailed gradients. Note: This setting will have no effect when using the GL Compatibility renderer as the GL Compatibility renderer always renders in low dynamic range for performance reasons. 
bool use_occlusion_culling = false
  void set_use_occlusion_culling ( bool value )
 
bool is_using_occlusion_culling ( )
  If true, OccluderInstance3D nodes will be usable for occlusion culling in 3D for this viewport. For the root viewport, ProjectSettings.rendering/occlusion_culling/use_occlusion_culling must be set to true instead. Note: Enabling occlusion culling has a cost on the CPU. Only enable occlusion culling if you actually plan to use it, and think whether your scene can actually benefit from occlusion culling. Large, open scenes with few or no objects blocking the view will generally not benefit much from occlusion culling. Large open scenes generally benefit more from mesh LOD and visibility ranges (GeometryInstance3D.visibility_range_begin and GeometryInstance3D.visibility_range_end) compared to occlusion culling. Note: Due to memory constraints, occlusion culling is not supported by default in Web export templates. It can be enabled by compiling custom Web export templates with module_raycast_enabled=yes. 
bool use_taa = false
  void set_use_taa ( bool value )
 
bool is_using_taa ( )
  Enables Temporal Anti-Aliasing for this viewport. TAA works by jittering the camera and accumulating the images of the last rendered frames, motion vector rendering is used to account for camera and object motion. Note: The implementation is not complete yet, some visual instances such as particles and skinned meshes may show artifacts. 
bool use_xr = false
  void set_use_xr ( bool value )
 
bool is_using_xr ( )
  If true, the viewport will use the primary XR interface to render XR output. When applicable this can result in a stereoscopic image and the resulting render being output to a headset. 
VRSMode vrs_mode = 0
  void set_vrs_mode ( VRSMode value )
 
VRSMode get_vrs_mode ( )
  The Variable Rate Shading (VRS) mode that is used for this viewport. Note, if hardware does not support VRS this property is ignored. 
Texture2D vrs_texture  void set_vrs_texture ( Texture2D value )
 
Texture2D get_vrs_texture ( )
  Texture to use when vrs_mode is set to VRS_TEXTURE. The texture must use a lossless compression format so that colors can be matched precisely. The following VRS densities are mapped to various colors, with brighter colors representing a lower level of shading precision: - 1x1 = rgb(0, 0, 0)     - #000000
- 1x2 = rgb(0, 85, 0)    - #005500
- 2x1 = rgb(85, 0, 0)    - #550000
- 2x2 = rgb(85, 85, 0)   - #555500
- 2x4 = rgb(85, 170, 0)  - #55aa00
- 4x2 = rgb(170, 85, 0)  - #aa5500
- 4x4 = rgb(170, 170, 0) - #aaaa00
- 4x8 = rgb(170, 255, 0) - #aaff00 - Not supported on most hardware
- 8x4 = rgb(255, 170, 0) - #ffaa00 - Not supported on most hardware
- 8x8 = rgb(255, 255, 0) - #ffff00 - Not supported on most hardware
 
World2D world_2d  void set_world_2d ( World2D value )
 
World2D get_world_2d ( )
  The custom World2D which can be used as 2D environment source. 
World3D world_3d  void set_world_3d ( World3D value )
 
World3D get_world_3d ( )
  The custom World3D which can be used as 3D environment source.   Method Descriptions 
World2D find_world_2d ( ) const
 Returns the first valid World2D for this viewport, searching the world_2d property of itself and any Viewport ancestor. 
World3D find_world_3d ( ) const
 Returns the first valid World3D for this viewport, searching the world_3d property of itself and any Viewport ancestor. 
Camera2D get_camera_2d ( ) const
 Returns the currently active 2D camera. Returns null if there are no active cameras. 
Camera3D get_camera_3d ( ) const
 Returns the currently active 3D camera. 
bool get_canvas_cull_mask_bit ( int layer ) const
 Returns an individual bit on the rendering layer mask. 
Window[] get_embedded_subwindows ( ) const
 Returns a list of the visible embedded Windows inside the viewport. Note: Windows inside other viewports will not be listed. 
Transform2D get_final_transform ( ) const
 Returns the transform from the viewport's coordinate system to the embedder's coordinate system. 
Vector2 get_mouse_position ( ) const
 Returns the mouse's position in this Viewport using the coordinate system of this Viewport. 
PositionalShadowAtlasQuadrantSubdiv get_positional_shadow_atlas_quadrant_subdiv ( int quadrant ) const
 Returns the PositionalShadowAtlasQuadrantSubdiv of the specified quadrant. 
int get_render_info ( RenderInfoType type, RenderInfo info ) Returns rendering statistics of the given type. See RenderInfoType and RenderInfo for options. 
Transform2D get_screen_transform ( ) const
 Returns the transform from the Viewport's coordinates to the screen coordinates of the containing window manager window. 
ViewportTexture get_texture ( ) const
 Returns the viewport's texture. Note: When trying to store the current texture (e.g. in a file), it might be completely black or outdated if used too early, especially when used in e.g. Node._ready. To make sure the texture you get is correct, you can await RenderingServer.frame_post_draw signal. func _ready():
    await RenderingServer.frame_post_draw
    $Viewport.get_texture().get_image().save_png("user://Screenshot.png")
 
RID get_viewport_rid ( ) const
 Returns the viewport's RID from the RenderingServer. 
Rect2 get_visible_rect ( ) const
 Returns the visible rectangle in global screen coordinates. 
Variant gui_get_drag_data ( ) const
 Returns the drag data from the GUI, that was previously returned by Control._get_drag_data. 
Control gui_get_focus_owner ( ) const
 Returns the Control having the focus within this viewport. If no Control has the focus, returns null. 
bool gui_is_drag_successful ( ) const
 Returns true if the drag operation is successful. 
bool gui_is_dragging ( ) const
 Returns true if the viewport is currently performing a drag operation. Alternative to Node.NOTIFICATION_DRAG_BEGIN and Node.NOTIFICATION_DRAG_END when you prefer polling the value. void gui_release_focus ( ) Removes the focus from the currently focused Control within this viewport. If no Control has the focus, does nothing. 
bool is_input_handled ( ) const
 Returns whether the current InputEvent has been handled. Input events are not handled until set_input_as_handled has been called during the lifetime of an InputEvent. This is usually done as part of input handling methods like Node._input, Control._gui_input or others, as well as in corresponding signal handlers. If handle_input_locally is set to false, this method will try finding the first parent viewport that is set to handle input locally, and return its value for is_input_handled instead. void push_input ( InputEvent event, bool in_local_coords=false ) Triggers the given event in this Viewport. This can be used to pass an InputEvent between viewports, or to locally apply inputs that were sent over the network or saved to a file. If in_local_coords is false, the event's position is in the embedder's coordinates and will be converted to viewport coordinates. If in_local_coords is true, the event's position is in viewport coordinates. While this method serves a similar purpose as Input.parse_input_event, it does not remap the specified event based on project settings like ProjectSettings.input_devices/pointing/emulate_touch_from_mouse. Calling this method will propagate calls to child nodes for following methods in the given order:  Node._input 
Control._gui_input for Control nodes Node._shortcut_input Node._unhandled_key_input Node._unhandled_input  If an earlier method marks the input as handled via set_input_as_handled, any later method in this list will not be called. If none of the methods handle the event and physics_object_picking is true, the event is used for physics object picking. void push_text_input ( String text ) Helper method which calls the set_text() method on the currently focused Control, provided that it is defined (e.g. if the focused Control is Button or LineEdit). void push_unhandled_input ( InputEvent event, bool in_local_coords=false ) Triggers the given InputEvent in this Viewport. This can be used to pass input events between viewports, or to locally apply inputs that were sent over the network or saved to a file. If in_local_coords is false, the event's position is in the embedder's coordinates and will be converted to viewport coordinates. If in_local_coords is true, the event's position is in viewport coordinates. While this method serves a similar purpose as Input.parse_input_event, it does not remap the specified event based on project settings like ProjectSettings.input_devices/pointing/emulate_touch_from_mouse. Calling this method will propagate calls to child nodes for following methods in the given order:  Node._shortcut_input Node._unhandled_key_input Node._unhandled_input  If an earlier method marks the input as handled via set_input_as_handled, any later method in this list will not be called. If none of the methods handle the event and physics_object_picking is true, the event is used for physics object picking. Note: This method doesn't propagate input events to embedded Windows or SubViewports. Deprecated. Use push_input instead. void set_canvas_cull_mask_bit ( int layer, bool enable ) Set/clear individual bits on the rendering layer mask. This simplifies editing this Viewport's layers. void set_input_as_handled ( ) Stops the input from propagating further down the SceneTree. Note: This does not affect the methods in Input, only the way events are propagated. void set_positional_shadow_atlas_quadrant_subdiv ( int quadrant, PositionalShadowAtlasQuadrantSubdiv subdiv ) Sets the number of subdivisions to use in the specified quadrant. A higher number of subdivisions allows you to have more shadows in the scene at once, but reduces the quality of the shadows. A good practice is to have quadrants with a varying number of subdivisions and to have as few subdivisions as possible. void update_mouse_cursor_state ( ) Force instantly updating the display based on the current mouse cursor position. This includes updating the mouse cursor shape and sending necessary Control.mouse_entered, CollisionObject2D.mouse_entered, CollisionObject3D.mouse_entered and Window.mouse_entered signals and their respective mouse_exited counterparts. void warp_mouse ( Vector2 position ) Moves the mouse pointer to the specified position in this Viewport using the coordinate system of this Viewport. Note: warp_mouse is only supported on Windows, macOS and Linux. It has no effect on Android, iOS and Web.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_viewport.html


classes/class_navigationregion2d
-----------------------------------------------------------
NavigationRegion2D Inherits: Node2D < CanvasItem < Node < Object A traversable 2D region that NavigationAgent2Ds can use for pathfinding.  Description A traversable 2D region based on a NavigationPolygon that NavigationAgent2Ds can use for pathfinding. Two regions can be connected to each other if they share a similar edge. You can set the minimum distance between two vertices required to connect two edges by using NavigationServer2D.map_set_edge_connection_margin. Note: Overlapping two regions' navigation polygons is not enough for connecting two regions. They must share a similar edge. The pathfinding cost of entering a region from another region can be controlled with the enter_cost value. Note: This value is not added to the path cost when the start position is already inside this region. The pathfinding cost of traveling distances inside this region can be controlled with the travel_cost multiplier. Note: This node caches changes to its properties, so if you make changes to the underlying region RID in NavigationServer2D, they will not be reflected in this node's properties.   Tutorials  Using NavigationRegions    Properties  
int avoidance_layers 1  
bool constrain_avoidance false  
bool enabled true  
float enter_cost 0.0  
int navigation_layers 1  
NavigationPolygon navigation_polygon   
float travel_cost 1.0  
bool use_edge_connections true     Methods  
void bake_navigation_polygon ( bool on_thread=true )  
bool get_avoidance_layer_value ( int layer_number ) const  
bool get_navigation_layer_value ( int layer_number ) const  
RID get_navigation_map ( ) const  
RID get_region_rid ( ) const  
RID get_rid ( ) const  
void set_avoidance_layer_value ( int layer_number, bool value )  
void set_navigation_layer_value ( int layer_number, bool value )  
void set_navigation_map ( RID navigation_map )     Signals bake_finished ( ) Emitted when a navigation polygon bake operation is completed. navigation_polygon_changed ( ) Emitted when the used navigation polygon is replaced or changes to the internals of the current navigation polygon are committed.   Property Descriptions 
int avoidance_layers = 1
  void set_avoidance_layers ( int value )
 
int get_avoidance_layers ( )
  A bitfield determining all avoidance layers for the avoidance constrain. 
bool constrain_avoidance = false
  void set_constrain_avoidance ( bool value )
 
bool get_constrain_avoidance ( )
  If true constraints avoidance agent's with an avoidance mask bit that matches with a bit of the avoidance_layers to the navigation polygon. Due to each navigation polygon outline creating an obstacle and each polygon edge creating an avoidance line constrain keep the navigation polygon shape as simple as possible for performance. Experimental: This is an experimental feature and should not be used in production as agent's can get stuck on the navigation polygon corners and edges especially at high frame rate. 
bool enabled = true
  void set_enabled ( bool value )
 
bool is_enabled ( )
  Determines if the NavigationRegion2D is enabled or disabled. 
float enter_cost = 0.0
  void set_enter_cost ( float value )
 
float get_enter_cost ( )
  When pathfinding enters this region's navigation mesh from another regions navigation mesh the enter_cost value is added to the path distance for determining the shortest path. 
int navigation_layers = 1
  void set_navigation_layers ( int value )
 
int get_navigation_layers ( )
  A bitfield determining all navigation layers the region belongs to. These navigation layers can be checked upon when requesting a path with NavigationServer2D.map_get_path. 
NavigationPolygon navigation_polygon  void set_navigation_polygon ( NavigationPolygon value )
 
NavigationPolygon get_navigation_polygon ( )
  The NavigationPolygon resource to use. 
float travel_cost = 1.0
  void set_travel_cost ( float value )
 
float get_travel_cost ( )
  When pathfinding moves inside this region's navigation mesh the traveled distances are multiplied with travel_cost for determining the shortest path. 
bool use_edge_connections = true
  void set_use_edge_connections ( bool value )
 
bool get_use_edge_connections ( )
  If enabled the navigation region will use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.   Method Descriptions void bake_navigation_polygon ( bool on_thread=true ) Bakes the NavigationPolygon. If on_thread is set to true (default), the baking is done on a separate thread. 
bool get_avoidance_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the avoidance_layers bitmask is enabled, given a layer_number between 1 and 32. 
bool get_navigation_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the navigation_layers bitmask is enabled, given a layer_number between 1 and 32. 
RID get_navigation_map ( ) const
 Returns the current navigation map RID used by this region. 
RID get_region_rid ( ) const
 Returns the RID of this region on the NavigationServer2D. Deprecated. Use get_rid instead. 
RID get_rid ( ) const
 Returns the RID of this region on the NavigationServer2D. Combined with NavigationServer2D.map_get_closest_point_owner can be used to identify the NavigationRegion2D closest to a point on the merged navigation map. void set_avoidance_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the avoidance_layers bitmask, given a layer_number between 1 and 32. void set_navigation_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the navigation_layers bitmask, given a layer_number between 1 and 32. void set_navigation_map ( RID navigation_map ) Sets the RID of the navigation map this region should use. By default the region will automatically join the World2D default navigation map so this function is only required to override the default map.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_navigationregion2d.html


classes/class_animationplayer
-----------------------------------------------------------
AnimationPlayer Inherits: AnimationMixer < Node < Object A node used for animation playback.  Description An animation player is used for general-purpose playback of animations. It contains a dictionary of AnimationLibrary resources and custom blend times between animation transitions. Some methods and properties use a single key to reference an animation directly. These keys are formatted as the key for the library, followed by a forward slash, then the key for the animation within the library, for example "movement/run". If the library's key is an empty string (known as the default library), the forward slash is omitted, being the same key used by the library. AnimationPlayer is better-suited than Tween for more complex animations, for example ones with non-trivial timings. It can also be used over Tween if the animation track editor is more convenient than doing it in code. Updating the target properties of animations occurs at the process frame.   Tutorials  2D Sprite animation Animation documentation index Third Person Shooter Demo    Properties  
String assigned_animation   
String autoplay ""  
String current_animation ""  
float current_animation_length   
float current_animation_position   
bool movie_quit_on_finish false  
float playback_default_blend_time 0.0  
float speed_scale 1.0     Methods  
StringName animation_get_next ( StringName animation_from ) const  
void animation_set_next ( StringName animation_from, StringName animation_to )  
void clear_queue ( )  
float get_blend_time ( StringName animation_from, StringName animation_to ) const  
AnimationMethodCallMode get_method_call_mode ( ) const  
float get_playing_speed ( ) const  
AnimationProcessCallback get_process_callback ( ) const  
PackedStringArray get_queue ( )  
NodePath get_root ( ) const  
bool is_playing ( ) const  
void pause ( )  
void play ( StringName name="", float custom_blend=-1, float custom_speed=1.0, bool from_end=false )  
void play_backwards ( StringName name="", float custom_blend=-1 )  
void queue ( StringName name )  
void seek ( float seconds, bool update=false, bool update_only=false )  
void set_blend_time ( StringName animation_from, StringName animation_to, float sec )  
void set_method_call_mode ( AnimationMethodCallMode mode )  
void set_process_callback ( AnimationProcessCallback mode )  
void set_root ( NodePath path )  
void stop ( bool keep_state=false )     Signals animation_changed ( StringName old_name, StringName new_name ) Emitted when a queued animation plays after the previous animation finished. See also queue. Note: The signal is not emitted when the animation is changed via play or by an AnimationTree. current_animation_changed ( String name ) Emitted when current_animation changes.   Enumerations enum AnimationProcessCallback: 
AnimationProcessCallback ANIMATION_PROCESS_PHYSICS = 0
 For backward compatibility. See AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS. 
AnimationProcessCallback ANIMATION_PROCESS_IDLE = 1
 For backward compatibility. See AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_IDLE. 
AnimationProcessCallback ANIMATION_PROCESS_MANUAL = 2
 For backward compatibility. See AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_MANUAL. enum AnimationMethodCallMode: 
AnimationMethodCallMode ANIMATION_METHOD_CALL_DEFERRED = 0
 For backward compatibility. See AnimationMixer.ANIMATION_CALLBACK_MODE_METHOD_DEFERRED. 
AnimationMethodCallMode ANIMATION_METHOD_CALL_IMMEDIATE = 1
 For backward compatibility. See AnimationMixer.ANIMATION_CALLBACK_MODE_METHOD_IMMEDIATE.   Property Descriptions 
String assigned_animation  void set_assigned_animation ( String value )
 
String get_assigned_animation ( )
  If playing, the current animation's key, otherwise, the animation last played. When set, this changes the animation, but will not play it unless already playing. See also current_animation. 
String autoplay = ""
  void set_autoplay ( String value )
 
String get_autoplay ( )
  The key of the animation to play when the scene loads. 
String current_animation = ""
  void set_current_animation ( String value )
 
String get_current_animation ( )
  The key of the currently playing animation. If no animation is playing, the property's value is an empty string. Changing this value does not restart the animation. See play for more information on playing animations. Note: While this property appears in the Inspector, it's not meant to be edited, and it's not saved in the scene. This property is mainly used to get the currently playing animation, and internally for animation playback tracks. For more information, see Animation. 
float current_animation_length  
float get_current_animation_length ( )
  The length (in seconds) of the currently playing animation. 
float current_animation_position  
float get_current_animation_position ( )
  The position (in seconds) of the currently playing animation. 
bool movie_quit_on_finish = false
  void set_movie_quit_on_finish_enabled ( bool value )
 
bool is_movie_quit_on_finish_enabled ( )
  If true and the engine is running in Movie Maker mode (see MovieWriter), exits the engine with SceneTree.quit as soon as an animation is done playing in this AnimationPlayer. A message is printed when the engine quits for this reason. Note: This obeys the same logic as the AnimationMixer.animation_finished signal, so it will not quit the engine if the animation is set to be looping. 
float playback_default_blend_time = 0.0
  void set_default_blend_time ( float value )
 
float get_default_blend_time ( )
  The default time in which to blend animations. Ranges from 0 to 4096 with 0.01 precision. 
float speed_scale = 1.0
  void set_speed_scale ( float value )
 
float get_speed_scale ( )
  The speed scaling ratio. For example, if this value is 1, then the animation plays at normal speed. If it's 0.5, then it plays at half speed. If it's 2, then it plays at double speed. If set to a negative value, the animation is played in reverse. If set to 0, the animation will not advance.   Method Descriptions 
StringName animation_get_next ( StringName animation_from ) const
 Returns the key of the animation which is queued to play after the animation_from animation. void animation_set_next ( StringName animation_from, StringName animation_to ) Triggers the animation_to animation when the animation_from animation completes. void clear_queue ( ) Clears all queued, unplayed animations. 
float get_blend_time ( StringName animation_from, StringName animation_to ) const
 Returns the blend time (in seconds) between two animations, referenced by their keys. 
AnimationMethodCallMode get_method_call_mode ( ) const
 For backward compatibility. See AnimationCallbackModeMethod. 
float get_playing_speed ( ) const
 Returns the actual playing speed of current animation or 0 if not playing. This speed is the speed_scale property multiplied by custom_speed argument specified when calling the play method. Returns a negative value if the current animation is playing backwards. 
AnimationProcessCallback get_process_callback ( ) const
 For backward compatibility. See AnimationCallbackModeProcess. 
PackedStringArray get_queue ( ) Returns a list of the animation keys that are currently queued to play. 
NodePath get_root ( ) const
 For backward compatibility. See AnimationMixer.root_node. 
bool is_playing ( ) const
 Returns true if an animation is currently playing (even if speed_scale and/or custom_speed are 0). void pause ( ) Pauses the currently playing animation. The current_animation_position will be kept and calling play or play_backwards without arguments or with the same animation name as assigned_animation will resume the animation. See also stop. void play ( StringName name="", float custom_blend=-1, float custom_speed=1.0, bool from_end=false ) Plays the animation with key name. Custom blend times and speed can be set. The from_end option only affects when switching to a new animation track, or if the same track but at the start or end. It does not affect resuming playback that was paused in the middle of an animation. If custom_speed is negative and from_end is true, the animation will play backwards (which is equivalent to calling play_backwards). The AnimationPlayer keeps track of its current or last played animation with assigned_animation. If this method is called with that same animation name, or with no name parameter, the assigned animation will resume playing if it was paused. Note: The animation will be updated the next time the AnimationPlayer is processed. If other variables are updated at the same time this is called, they may be updated too early. To perform the update immediately, call advance(0). void play_backwards ( StringName name="", float custom_blend=-1 ) Plays the animation with key name in reverse. This method is a shorthand for play with custom_speed = -1.0 and from_end = true, so see its description for more information. void queue ( StringName name ) Queues an animation for playback once the current one is done. Note: If a looped animation is currently playing, the queued animation will never play unless the looped animation is stopped somehow. void seek ( float seconds, bool update=false, bool update_only=false ) Seeks the animation to the seconds point in time (in seconds). If update is true, the animation updates too, otherwise it updates at process time. Events between the current frame and seconds are skipped. If update_only is true, the method / audio / animation playback tracks will not be processed. Note: Seeking to the end of the animation doesn't emit AnimationMixer.animation_finished. If you want to skip animation and emit the signal, use AnimationMixer.advance. void set_blend_time ( StringName animation_from, StringName animation_to, float sec ) Specifies a blend time (in seconds) between two animations, referenced by their keys. void set_method_call_mode ( AnimationMethodCallMode mode ) For backward compatibility. See AnimationCallbackModeMethod. void set_process_callback ( AnimationProcessCallback mode ) For backward compatibility. See AnimationCallbackModeProcess. void set_root ( NodePath path ) For backward compatibility. See AnimationMixer.root_node. void stop ( bool keep_state=false ) Stops the currently playing animation. The animation position is reset to 0 and the custom_speed is reset to 1.0. See also pause. If keep_state is true, the animation state is not updated visually. Note: The method / audio / animation playback tracks will not be processed by this method.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationplayer.html


classes/class_stylebox
-----------------------------------------------------------
StyleBox Inherits: Resource < RefCounted < Object Inherited By: StyleBoxEmpty, StyleBoxFlat, StyleBoxLine, StyleBoxTexture Abstract base class for defining stylized boxes for UI elements.  Description StyleBox is an abstract base class for drawing stylized boxes for UI elements. It is used for panels, buttons, LineEdit backgrounds, Tree backgrounds, etc. and also for testing a transparency mask for pointer signals. If mask test fails on a StyleBox assigned as mask to a control, clicks and motion signals will go through it to the one below. Note: For control nodes that have Theme Properties, the focus StyleBox is displayed over the normal, hover or pressed StyleBox. This makes the focus StyleBox more reusable across different nodes.   Properties  
float content_margin_bottom -1.0  
float content_margin_left -1.0  
float content_margin_right -1.0  
float content_margin_top -1.0     Methods  
void _draw ( RID to_canvas_item, Rect2 rect ) virtual const  
Rect2 _get_draw_rect ( Rect2 rect ) virtual const  
Vector2 _get_minimum_size ( ) virtual const  
bool _test_mask ( Vector2 point, Rect2 rect ) virtual const  
void draw ( RID canvas_item, Rect2 rect ) const  
float get_content_margin ( Side margin ) const  
CanvasItem get_current_item_drawn ( ) const  
float get_margin ( Side margin ) const  
Vector2 get_minimum_size ( ) const  
Vector2 get_offset ( ) const  
void set_content_margin ( Side margin, float offset )  
void set_content_margin_all ( float offset )  
bool test_mask ( Vector2 point, Rect2 rect ) const     Property Descriptions 
float content_margin_bottom = -1.0
  void set_content_margin ( Side margin, float offset )
 
float get_content_margin ( Side margin ) const
  The bottom margin for the contents of this style box. Increasing this value reduces the space available to the contents from the bottom. If this value is negative, it is ignored and a child-specific margin is used instead. For example, for StyleBoxFlat, the border thickness (if any) is used instead. It is up to the code using this style box to decide what these contents are: for example, a Button respects this content margin for the textual contents of the button. get_margin should be used to fetch this value as consumer instead of reading these properties directly. This is because it correctly respects negative values and the fallback mentioned above. 
float content_margin_left = -1.0
  void set_content_margin ( Side margin, float offset )
 
float get_content_margin ( Side margin ) const
  The left margin for the contents of this style box. Increasing this value reduces the space available to the contents from the left. Refer to content_margin_bottom for extra considerations. 
float content_margin_right = -1.0
  void set_content_margin ( Side margin, float offset )
 
float get_content_margin ( Side margin ) const
  The right margin for the contents of this style box. Increasing this value reduces the space available to the contents from the right. Refer to content_margin_bottom for extra considerations. 
float content_margin_top = -1.0
  void set_content_margin ( Side margin, float offset )
 
float get_content_margin ( Side margin ) const
  The top margin for the contents of this style box. Increasing this value reduces the space available to the contents from the top. Refer to content_margin_bottom for extra considerations.   Method Descriptions void _draw ( RID to_canvas_item, Rect2 rect ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
Rect2 _get_draw_rect ( Rect2 rect ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
Vector2 _get_minimum_size ( ) virtual const
 Virtual method to be implemented by the user. Returns a custom minimum size that the stylebox must respect when drawing. By default get_minimum_size only takes content margins into account. This method can be overridden to add another size restriction. A combination of the default behavior and the output of this method will be used, to account for both sizes. 
bool _test_mask ( Vector2 point, Rect2 rect ) virtual const
  There is currently no description for this method. Please help us by contributing one!  void draw ( RID canvas_item, Rect2 rect ) const
 Draws this stylebox using a canvas item identified by the given RID. The RID value can either be the result of CanvasItem.get_canvas_item called on an existing CanvasItem-derived node, or directly from creating a canvas item in the RenderingServer with RenderingServer.canvas_item_create. 
float get_content_margin ( Side margin ) const
 Returns the default margin of the specified Side. 
CanvasItem get_current_item_drawn ( ) const
 Returns the CanvasItem that handles its CanvasItem.NOTIFICATION_DRAW or CanvasItem._draw callback at this moment. 
float get_margin ( Side margin ) const
 Returns the content margin offset for the specified Side. Positive values reduce size inwards, unlike Control's margin values. 
Vector2 get_minimum_size ( ) const
 Returns the minimum size that this stylebox can be shrunk to. 
Vector2 get_offset ( ) const
 Returns the "offset" of a stylebox. This helper function returns a value equivalent to Vector2(style.get_margin(MARGIN_LEFT), style.get_margin(MARGIN_TOP)). void set_content_margin ( Side margin, float offset ) Sets the default value of the specified Side to offset pixels. void set_content_margin_all ( float offset ) Sets the default margin to offset pixels for all sides. 
bool test_mask ( Vector2 point, Rect2 rect ) const
 Test a position in a rectangle, return whether it passes the mask test.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_stylebox.html


classes/class_navigationpolygon
-----------------------------------------------------------
NavigationPolygon Inherits: Resource < RefCounted < Object A 2D navigation mesh that describes a traversable surface for pathfinding.  Description A navigation mesh can be created either by baking it with the help of the NavigationServer2D, or by adding vertices and convex polygon indices arrays manually. To bake a navigation mesh at least one outline needs to be added that defines the outer bounds of the baked area.  GDScriptvar new_navigation_mesh = NavigationPolygon.new()
var bounding_outline = PackedVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])
new_navigation_mesh.add_outline(bounding_outline)
NavigationServer2D.bake_from_source_geometry_data(new_navigation_mesh, NavigationMeshSourceGeometryData2D.new());
$NavigationRegion2D.navigation_polygon = new_navigation_mesh
 C#var newNavigationMesh = new NavigationPolygon();
var boundingOutline = new Vector2[] { new Vector2(0, 0), new Vector2(0, 50), new Vector2(50, 50), new Vector2(50, 0) };
newNavigationMesh.AddOutline(boundingOutline);
NavigationServer2D.BakeFromSourceGeometryData(newNavigationMesh, new NavigationMeshSourceGeometryData2D());
GetNode<NavigationRegion2D>("NavigationRegion2D").NavigationPolygon = newNavigationMesh;
  Adding vertices and polygon indices manually.  GDScriptvar new_navigation_mesh = NavigationPolygon.new()
var new_vertices = PackedVector2Array([Vector2(0, 0), Vector2(0, 50), Vector2(50, 50), Vector2(50, 0)])
new_navigation_mesh.vertices = new_vertices
var new_polygon_indices = PackedInt32Array([0, 1, 2, 3])
new_navigation_mesh.add_polygon(new_polygon_indices)
$NavigationRegion2D.navigation_polygon = new_navigation_mesh
 C#var newNavigationMesh = new NavigationPolygon();
var newVertices = new Vector2[] { new Vector2(0, 0), new Vector2(0, 50), new Vector2(50, 50), new Vector2(50, 0) };
newNavigationMesh.Vertices = newVertices;
var newPolygonIndices = new int[] { 0, 1, 2, 3 };
newNavigationMesh.AddPolygon(newPolygonIndices);
GetNode<NavigationRegion2D>("NavigationRegion2D").NavigationPolygon = newNavigationMesh;
    Tutorials  2D Navigation Demo Using NavigationMeshes    Properties  
float agent_radius 10.0  
float cell_size 1.0  
int parsed_collision_mask 4294967295  
ParsedGeometryType parsed_geometry_type 2  
StringName source_geometry_group_name &"navigation_polygon_source_geometry_group"  
SourceGeometryMode source_geometry_mode 0     Methods  
void add_outline ( PackedVector2Array outline )  
void add_outline_at_index ( PackedVector2Array outline, int index )  
void add_polygon ( PackedInt32Array polygon )  
void clear ( )  
void clear_outlines ( )  
void clear_polygons ( )  
NavigationMesh get_navigation_mesh ( )  
PackedVector2Array get_outline ( int idx ) const  
int get_outline_count ( ) const  
bool get_parsed_collision_mask_value ( int layer_number ) const  
PackedInt32Array get_polygon ( int idx )  
int get_polygon_count ( ) const  
PackedVector2Array get_vertices ( ) const  
void make_polygons_from_outlines ( )  
void remove_outline ( int idx )  
void set_outline ( int idx, PackedVector2Array outline )  
void set_parsed_collision_mask_value ( int layer_number, bool value )  
void set_vertices ( PackedVector2Array vertices )     Enumerations enum ParsedGeometryType: 
ParsedGeometryType PARSED_GEOMETRY_MESH_INSTANCES = 0
 Parses mesh instances as obstruction geometry. This includes Polygon2D, MeshInstance2D, MultiMeshInstance2D, and TileMap nodes. Meshes are only parsed when they use a 2D vertices surface format. 
ParsedGeometryType PARSED_GEOMETRY_STATIC_COLLIDERS = 1
 Parses StaticBody2D and TileMap colliders as obstruction geometry. The collider should be in any of the layers specified by parsed_collision_mask. 
ParsedGeometryType PARSED_GEOMETRY_BOTH = 2
 Both PARSED_GEOMETRY_MESH_INSTANCES and PARSED_GEOMETRY_STATIC_COLLIDERS. 
ParsedGeometryType PARSED_GEOMETRY_MAX = 3
 Represents the size of the ParsedGeometryType enum. enum SourceGeometryMode: 
SourceGeometryMode SOURCE_GEOMETRY_ROOT_NODE_CHILDREN = 0
 Scans the child nodes of the root node recursively for geometry. 
SourceGeometryMode SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN = 1
 Scans nodes in a group and their child nodes recursively for geometry. The group is specified by source_geometry_group_name. 
SourceGeometryMode SOURCE_GEOMETRY_GROUPS_EXPLICIT = 2
 Uses nodes in a group for geometry. The group is specified by source_geometry_group_name. 
SourceGeometryMode SOURCE_GEOMETRY_MAX = 3
 Represents the size of the SourceGeometryMode enum.   Property Descriptions 
float agent_radius = 10.0
  void set_agent_radius ( float value )
 
float get_agent_radius ( )
  The distance to erode/shrink the walkable surface when baking the navigation mesh. 
float cell_size = 1.0
  void set_cell_size ( float value )
 
float get_cell_size ( )
  The cell size used to rasterize the navigation mesh vertices. Must match with the cell size on the navigation map. 
int parsed_collision_mask = 4294967295
  void set_parsed_collision_mask ( int value )
 
int get_parsed_collision_mask ( )
  The physics layers to scan for static colliders. Only used when parsed_geometry_type is PARSED_GEOMETRY_STATIC_COLLIDERS or PARSED_GEOMETRY_BOTH. 
ParsedGeometryType parsed_geometry_type = 2
  void set_parsed_geometry_type ( ParsedGeometryType value )
 
ParsedGeometryType get_parsed_geometry_type ( )
  Determines which type of nodes will be parsed as geometry. See ParsedGeometryType for possible values. 
StringName source_geometry_group_name = &"navigation_polygon_source_geometry_group"
  void set_source_geometry_group_name ( StringName value )
 
StringName get_source_geometry_group_name ( )
  The group name of nodes that should be parsed for baking source geometry. Only used when source_geometry_mode is SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN or SOURCE_GEOMETRY_GROUPS_EXPLICIT. 
SourceGeometryMode source_geometry_mode = 0
  void set_source_geometry_mode ( SourceGeometryMode value )
 
SourceGeometryMode get_source_geometry_mode ( )
  The source of the geometry used when baking. See SourceGeometryMode for possible values.   Method Descriptions void add_outline ( PackedVector2Array outline ) Appends a PackedVector2Array that contains the vertices of an outline to the internal array that contains all the outlines. void add_outline_at_index ( PackedVector2Array outline, int index ) Adds a PackedVector2Array that contains the vertices of an outline to the internal array that contains all the outlines at a fixed position. void add_polygon ( PackedInt32Array polygon ) Adds a polygon using the indices of the vertices you get when calling get_vertices. void clear ( ) Clears the internal arrays for vertices and polygon indices. void clear_outlines ( ) Clears the array of the outlines, but it doesn't clear the vertices and the polygons that were created by them. void clear_polygons ( ) Clears the array of polygons, but it doesn't clear the array of outlines and vertices. 
NavigationMesh get_navigation_mesh ( ) Returns the NavigationMesh resulting from this navigation polygon. This navigation mesh can be used to update the navigation mesh of a region with the NavigationServer3D.region_set_navigation_mesh API directly (as 2D uses the 3D server behind the scene). 
PackedVector2Array get_outline ( int idx ) const
 Returns a PackedVector2Array containing the vertices of an outline that was created in the editor or by script. 
int get_outline_count ( ) const
 Returns the number of outlines that were created in the editor or by script. 
bool get_parsed_collision_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the parsed_collision_mask is enabled, given a layer_number between 1 and 32. 
PackedInt32Array get_polygon ( int idx ) Returns a PackedInt32Array containing the indices of the vertices of a created polygon. 
int get_polygon_count ( ) const
 Returns the count of all polygons. 
PackedVector2Array get_vertices ( ) const
 Returns a PackedVector2Array containing all the vertices being used to create the polygons. void make_polygons_from_outlines ( ) Creates polygons from the outlines added in the editor or by script. Deprecated. This function is deprecated, and might be removed in a future release. Use NavigationServer2D.parse_source_geometry_data and NavigationServer2D.bake_from_source_geometry_data instead. void remove_outline ( int idx ) Removes an outline created in the editor or by script. You have to call make_polygons_from_outlines for the polygons to update. void set_outline ( int idx, PackedVector2Array outline ) Changes an outline created in the editor or by script. You have to call make_polygons_from_outlines for the polygons to update. void set_parsed_collision_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the parsed_collision_mask, given a layer_number between 1 and 32. void set_vertices ( PackedVector2Array vertices ) Sets the vertices that can be then indexed to create polygons with the add_polygon method.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_navigationpolygon.html


classes/class_visualinstance3d
-----------------------------------------------------------
VisualInstance3D Inherits: Node3D < Node < Object Inherited By: Decal, FogVolume, GeometryInstance3D, GPUParticlesAttractor3D, GPUParticlesCollision3D, Light3D, LightmapGI, ReflectionProbe, RootMotionView, VisibleOnScreenNotifier3D, VoxelGI Parent of all visual 3D nodes.  Description The VisualInstance3D is used to connect a resource to a visual representation. All visual 3D nodes inherit from the VisualInstance3D. In general, you should not access the VisualInstance3D properties directly as they are accessed and managed by the nodes that inherit from VisualInstance3D. VisualInstance3D is the node representation of the RenderingServer instance.   Properties  
int layers 1  
float sorting_offset 0.0  
bool sorting_use_aabb_center      Methods  
AABB _get_aabb ( ) virtual const  
AABB get_aabb ( ) const  
RID get_base ( ) const  
RID get_instance ( ) const  
bool get_layer_mask_value ( int layer_number ) const  
void set_base ( RID base )  
void set_layer_mask_value ( int layer_number, bool value )     Property Descriptions 
int layers = 1
  void set_layer_mask ( int value )
 
int get_layer_mask ( )
  The render layer(s) this VisualInstance3D is drawn on. This object will only be visible for Camera3Ds whose cull mask includes any of the render layers this VisualInstance3D is set to. For Light3Ds, this can be used to control which VisualInstance3Ds are affected by a specific light. For GPUParticles3D, this can be used to control which particles are effected by a specific attractor. For Decals, this can be used to control which VisualInstance3Ds are affected by a specific decal. To adjust layers more easily using a script, use get_layer_mask_value and set_layer_mask_value. Note: VoxelGI, SDFGI and LightmapGI will always take all layers into account to determine what contributes to global illumination. If this is an issue, set GeometryInstance3D.gi_mode to GeometryInstance3D.GI_MODE_DISABLED for meshes and Light3D.light_bake_mode to Light3D.BAKE_DISABLED for lights to exclude them from global illumination. 
float sorting_offset = 0.0
  void set_sorting_offset ( float value )
 
float get_sorting_offset ( )
  The amount by which the depth of this VisualInstance3D will be adjusted when sorting by depth. Uses the same units as the engine (which are typically meters). Adjusting it to a higher value will make the VisualInstance3D reliably draw on top of other VisualInstance3Ds that are otherwise positioned at the same spot. To ensure it always draws on top of other objects around it (not positioned at the same spot), set the value to be greater than the distance between this VisualInstance3D and the other nearby VisualInstance3Ds. 
bool sorting_use_aabb_center  void set_sorting_use_aabb_center ( bool value )
 
bool is_sorting_use_aabb_center ( )
  If true, the object is sorted based on the AABB center. The object will be sorted based on the global position otherwise. The AABB center based sorting is generally more accurate for 3D models. The position based sorting instead allows to better control the drawing order when working with GPUParticles3D and CPUParticles3D.   Method Descriptions 
AABB _get_aabb ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
AABB get_aabb ( ) const
 Returns the AABB (also known as the bounding box) for this VisualInstance3D. 
RID get_base ( ) const
 Returns the RID of the resource associated with this VisualInstance3D. For example, if the Node is a MeshInstance3D, this will return the RID of the associated Mesh. 
RID get_instance ( ) const
 Returns the RID of this instance. This RID is the same as the RID returned by RenderingServer.instance_create. This RID is needed if you want to call RenderingServer functions directly on this VisualInstance3D. 
bool get_layer_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the layers is enabled, given a layer_number between 1 and 20. void set_base ( RID base ) Sets the resource that is instantiated by this VisualInstance3D, which changes how the engine handles the VisualInstance3D under the hood. Equivalent to RenderingServer.instance_set_base. void set_layer_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the layers, given a layer_number between 1 and 20.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualinstance3d.html


classes/class_softbody3d
-----------------------------------------------------------
SoftBody3D Inherits: MeshInstance3D < GeometryInstance3D < VisualInstance3D < Node3D < Node < Object A deformable 3D physics mesh.  Description A deformable 3D physics mesh. Used to create elastic or deformable objects such as cloth, rubber, or other flexible materials. Note: There are many known bugs in SoftBody3D. Therefore, it's not recommended to use them for things that can affect gameplay (such as trampolines).   Tutorials  SoftBody    Properties  
int collision_layer 1  
int collision_mask 1  
float damping_coefficient 0.01  
DisableMode disable_mode 0  
float drag_coefficient 0.0  
float linear_stiffness 0.5  
NodePath parent_collision_ignore NodePath("")  
float pressure_coefficient 0.0  
bool ray_pickable true  
int simulation_precision 5  
float total_mass 1.0     Methods  
void add_collision_exception_with ( Node body )  
PhysicsBody3D[] get_collision_exceptions ( )  
bool get_collision_layer_value ( int layer_number ) const  
bool get_collision_mask_value ( int layer_number ) const  
RID get_physics_rid ( ) const  
Vector3 get_point_transform ( int point_index )  
bool is_point_pinned ( int point_index ) const  
void remove_collision_exception_with ( Node body )  
void set_collision_layer_value ( int layer_number, bool value )  
void set_collision_mask_value ( int layer_number, bool value )  
void set_point_pinned ( int point_index, bool pinned, NodePath attachment_path=NodePath("") )     Enumerations enum DisableMode: 
DisableMode DISABLE_MODE_REMOVE = 0
 When Node.process_mode is set to Node.PROCESS_MODE_DISABLED, remove from the physics simulation to stop all physics interactions with this SoftBody3D. Automatically re-added to the physics simulation when the Node is processed again. 
DisableMode DISABLE_MODE_KEEP_ACTIVE = 1
 When Node.process_mode is set to Node.PROCESS_MODE_DISABLED, do not affect the physics simulation.   Property Descriptions 
int collision_layer = 1
  void set_collision_layer ( int value )
 
int get_collision_layer ( )
  The physics layers this SoftBody3D is in. Collision objects can exist in one or more of 32 different layers. See also collision_mask. Note: Object A can detect a contact with object B only if object B is in any of the layers that object A scans. See Collision layers and masks in the documentation for more information. 
int collision_mask = 1
  void set_collision_mask ( int value )
 
int get_collision_mask ( )
  The physics layers this SoftBody3D scans. Collision objects can scan one or more of 32 different layers. See also collision_layer. Note: Object A can detect a contact with object B only if object B is in any of the layers that object A scans. See Collision layers and masks in the documentation for more information. 
float damping_coefficient = 0.01
  void set_damping_coefficient ( float value )
 
float get_damping_coefficient ( )
  The body's damping coefficient. Higher values will slow down the body more noticeably when forces are applied. 
DisableMode disable_mode = 0
  void set_disable_mode ( DisableMode value )
 
DisableMode get_disable_mode ( )
  Defines the behavior in physics when Node.process_mode is set to Node.PROCESS_MODE_DISABLED. See DisableMode for more details about the different modes. 
float drag_coefficient = 0.0
  void set_drag_coefficient ( float value )
 
float get_drag_coefficient ( )
  The body's drag coefficient. Higher values increase this body's air resistance. Note: This value is currently unused by Godot's default physics implementation. 
float linear_stiffness = 0.5
  void set_linear_stiffness ( float value )
 
float get_linear_stiffness ( )
  Higher values will result in a stiffer body, while lower values will increase the body's ability to bend. The value can be between 0.0 and 1.0 (inclusive). 
NodePath parent_collision_ignore = NodePath("")
  void set_parent_collision_ignore ( NodePath value )
 
NodePath get_parent_collision_ignore ( )
  NodePath to a CollisionObject3D this SoftBody3D should avoid clipping. 
float pressure_coefficient = 0.0
  void set_pressure_coefficient ( float value )
 
float get_pressure_coefficient ( )
  The pressure coefficient of this soft body. Simulate pressure build-up from inside this body. Higher values increase the strength of this effect. 
bool ray_pickable = true
  void set_ray_pickable ( bool value )
 
bool is_ray_pickable ( )
  If true, the SoftBody3D will respond to RayCast3Ds. 
int simulation_precision = 5
  void set_simulation_precision ( int value )
 
int get_simulation_precision ( )
  Increasing this value will improve the resulting simulation, but can affect performance. Use with care. 
float total_mass = 1.0
  void set_total_mass ( float value )
 
float get_total_mass ( )
  The SoftBody3D's mass.   Method Descriptions void add_collision_exception_with ( Node body ) Adds a body to the list of bodies that this body can't collide with. 
PhysicsBody3D[] get_collision_exceptions ( ) Returns an array of nodes that were added as collision exceptions for this body. 
bool get_collision_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_layer is enabled, given a layer_number between 1 and 32. 
bool get_collision_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_mask is enabled, given a layer_number between 1 and 32. 
RID get_physics_rid ( ) const
 Returns the internal RID used by the PhysicsServer3D for this body. 
Vector3 get_point_transform ( int point_index ) Returns local translation of a vertex in the surface array. 
bool is_point_pinned ( int point_index ) const
 Returns true if vertex is set to pinned. void remove_collision_exception_with ( Node body ) Removes a body from the list of bodies that this body can't collide with. void set_collision_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_layer, given a layer_number between 1 and 32. void set_collision_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_mask, given a layer_number between 1 and 32. void set_point_pinned ( int point_index, bool pinned, NodePath attachment_path=NodePath("") ) Sets the pinned state of a surface vertex. When set to true, the optional attachment_path can define a Node3D the pinned vertex will be attached to.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_softbody3d.html


classes/class_rigidbody2d
-----------------------------------------------------------
RigidBody2D Inherits: PhysicsBody2D < CollisionObject2D < Node2D < CanvasItem < Node < Object Inherited By: PhysicalBone2D A 2D physics body that is moved by a physics simulation.  Description RigidBody2D implements full 2D physics. It cannot be controlled directly, instead, you must apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, rotation, react to collisions, and affect other physics bodies in its path. The body's behavior can be adjusted via lock_rotation, freeze, and freeze_mode. By changing various properties of the object, such as mass, you can control how the physics simulation acts on it. A rigid body will always maintain its shape and size, even when forces are applied to it. It is useful for objects that can be interacted with in an environment, such as a tree that can be knocked over or a stack of crates that can be pushed around. If you need to override the default physics behavior, you can write a custom force integration function. See custom_integrator. Note: Changing the 2D transform or linear_velocity of a RigidBody2D very often may lead to some unpredictable behaviors. If you need to directly affect the body, prefer _integrate_forces as it allows you to directly access the physics state.   Tutorials  2D Physics Platformer Demo Instancing Demo    Properties  
float angular_damp 0.0  
DampMode angular_damp_mode 0  
float angular_velocity 0.0  
bool can_sleep true  
Vector2 center_of_mass Vector2(0, 0)  
CenterOfMassMode center_of_mass_mode 0  
Vector2 constant_force Vector2(0, 0)  
float constant_torque 0.0  
bool contact_monitor false  
CCDMode continuous_cd 0  
bool custom_integrator false  
bool freeze false  
FreezeMode freeze_mode 0  
float gravity_scale 1.0  
float inertia 0.0  
float linear_damp 0.0  
DampMode linear_damp_mode 0  
Vector2 linear_velocity Vector2(0, 0)  
bool lock_rotation false  
float mass 1.0  
int max_contacts_reported 0  
PhysicsMaterial physics_material_override   
bool sleeping false     Methods  
void _integrate_forces ( PhysicsDirectBodyState2D state ) virtual  
void add_constant_central_force ( Vector2 force )  
void add_constant_force ( Vector2 force, Vector2 position=Vector2(0, 0) )  
void add_constant_torque ( float torque )  
void apply_central_force ( Vector2 force )  
void apply_central_impulse ( Vector2 impulse=Vector2(0, 0) )  
void apply_force ( Vector2 force, Vector2 position=Vector2(0, 0) )  
void apply_impulse ( Vector2 impulse, Vector2 position=Vector2(0, 0) )  
void apply_torque ( float torque )  
void apply_torque_impulse ( float torque )  
Node2D[] get_colliding_bodies ( ) const  
int get_contact_count ( ) const  
void set_axis_velocity ( Vector2 axis_velocity )     Signals body_entered ( Node body ) Emitted when a collision with another PhysicsBody2D or TileMap occurs. Requires contact_monitor to be set to true and max_contacts_reported to be set high enough to detect all the collisions. TileMaps are detected if the TileSet has Collision Shape2Ds. body the Node, if it exists in the tree, of the other PhysicsBody2D or TileMap. body_exited ( Node body ) Emitted when the collision with another PhysicsBody2D or TileMap ends. Requires contact_monitor to be set to true and max_contacts_reported to be set high enough to detect all the collisions. TileMaps are detected if the TileSet has Collision Shape2Ds. body the Node, if it exists in the tree, of the other PhysicsBody2D or TileMap. body_shape_entered ( RID body_rid, Node body, int body_shape_index, int local_shape_index ) Emitted when one of this RigidBody2D's Shape2Ds collides with another PhysicsBody2D or TileMap's Shape2Ds. Requires contact_monitor to be set to true and max_contacts_reported to be set high enough to detect all the collisions. TileMaps are detected if the TileSet has Collision Shape2Ds. body_rid the RID of the other PhysicsBody2D or TileSet's CollisionObject2D used by the PhysicsServer2D. body the Node, if it exists in the tree, of the other PhysicsBody2D or TileMap. body_shape_index the index of the Shape2D of the other PhysicsBody2D or TileMap used by the PhysicsServer2D. Get the CollisionShape2D node with body.shape_owner_get_owner(body.shape_find_owner(body_shape_index)). local_shape_index the index of the Shape2D of this RigidBody2D used by the PhysicsServer2D. Get the CollisionShape2D node with self.shape_owner_get_owner(self.shape_find_owner(local_shape_index)). body_shape_exited ( RID body_rid, Node body, int body_shape_index, int local_shape_index ) Emitted when the collision between one of this RigidBody2D's Shape2Ds and another PhysicsBody2D or TileMap's Shape2Ds ends. Requires contact_monitor to be set to true and max_contacts_reported to be set high enough to detect all the collisions. TileMaps are detected if the TileSet has Collision Shape2Ds. body_rid the RID of the other PhysicsBody2D or TileSet's CollisionObject2D used by the PhysicsServer2D. body the Node, if it exists in the tree, of the other PhysicsBody2D or TileMap. body_shape_index the index of the Shape2D of the other PhysicsBody2D or TileMap used by the PhysicsServer2D. Get the CollisionShape2D node with body.shape_owner_get_owner(body.shape_find_owner(body_shape_index)). local_shape_index the index of the Shape2D of this RigidBody2D used by the PhysicsServer2D. Get the CollisionShape2D node with self.shape_owner_get_owner(self.shape_find_owner(local_shape_index)). sleeping_state_changed ( ) Emitted when the physics engine changes the body's sleeping state. Note: Changing the value sleeping will not trigger this signal. It is only emitted if the sleeping state is changed by the physics engine or emit_signal("sleeping_state_changed") is used.   Enumerations enum FreezeMode: 
FreezeMode FREEZE_MODE_STATIC = 0
 Static body freeze mode (default). The body is not affected by gravity and forces. It can be only moved by user code and doesn't collide with other bodies along its path. 
FreezeMode FREEZE_MODE_KINEMATIC = 1
 Kinematic body freeze mode. Similar to FREEZE_MODE_STATIC, but collides with other bodies along its path when moved. Useful for a frozen body that needs to be animated. enum CenterOfMassMode: 
CenterOfMassMode CENTER_OF_MASS_MODE_AUTO = 0
 In this mode, the body's center of mass is calculated automatically based on its shapes. This assumes that the shapes' origins are also their center of mass. 
CenterOfMassMode CENTER_OF_MASS_MODE_CUSTOM = 1
 In this mode, the body's center of mass is set through center_of_mass. Defaults to the body's origin position. enum DampMode: 
DampMode DAMP_MODE_COMBINE = 0
 In this mode, the body's damping value is added to any value set in areas or the default value. 
DampMode DAMP_MODE_REPLACE = 1
 In this mode, the body's damping value replaces any value set in areas or the default value. enum CCDMode: 
CCDMode CCD_MODE_DISABLED = 0
 Continuous collision detection disabled. This is the fastest way to detect body collisions, but can miss small, fast-moving objects. 
CCDMode CCD_MODE_CAST_RAY = 1
 Continuous collision detection enabled using raycasting. This is faster than shapecasting but less precise. 
CCDMode CCD_MODE_CAST_SHAPE = 2
 Continuous collision detection enabled using shapecasting. This is the slowest CCD method and the most precise.   Property Descriptions 
float angular_damp = 0.0
  void set_angular_damp ( float value )
 
float get_angular_damp ( )
  Damps the body's rotation. By default, the body will use the Default Angular Damp in Project > Project Settings > Physics > 2d or any value override set by an Area2D the body is in. Depending on angular_damp_mode, you can set angular_damp to be added to or to replace the body's damping value. See ProjectSettings.physics/2d/default_angular_damp for more details about damping. 
DampMode angular_damp_mode = 0
  void set_angular_damp_mode ( DampMode value )
 
DampMode get_angular_damp_mode ( )
  Defines how angular_damp is applied. See DampMode for possible values. 
float angular_velocity = 0.0
  void set_angular_velocity ( float value )
 
float get_angular_velocity ( )
  The body's rotational velocity in radians per second. 
bool can_sleep = true
  void set_can_sleep ( bool value )
 
bool is_able_to_sleep ( )
  If true, the body can enter sleep mode when there is no movement. See sleeping. 
Vector2 center_of_mass = Vector2(0, 0)
  void set_center_of_mass ( Vector2 value )
 
Vector2 get_center_of_mass ( )
  The body's custom center of mass, relative to the body's origin position, when center_of_mass_mode is set to CENTER_OF_MASS_MODE_CUSTOM. This is the balanced point of the body, where applied forces only cause linear acceleration. Applying forces outside of the center of mass causes angular acceleration. When center_of_mass_mode is set to CENTER_OF_MASS_MODE_AUTO (default value), the center of mass is automatically computed. 
CenterOfMassMode center_of_mass_mode = 0
  void set_center_of_mass_mode ( CenterOfMassMode value )
 
CenterOfMassMode get_center_of_mass_mode ( )
  Defines the way the body's center of mass is set. See CenterOfMassMode for possible values. 
Vector2 constant_force = Vector2(0, 0)
  void set_constant_force ( Vector2 value )
 
Vector2 get_constant_force ( )
  The body's total constant positional forces applied during each physics update. See add_constant_force and add_constant_central_force. 
float constant_torque = 0.0
  void set_constant_torque ( float value )
 
float get_constant_torque ( )
  The body's total constant rotational forces applied during each physics update. See add_constant_torque. 
bool contact_monitor = false
  void set_contact_monitor ( bool value )
 
bool is_contact_monitor_enabled ( )
  If true, the RigidBody2D will emit signals when it collides with another body. Note: By default the maximum contacts reported is set to 0, meaning nothing will be recorded, see max_contacts_reported. 
CCDMode continuous_cd = 0
  void set_continuous_collision_detection_mode ( CCDMode value )
 
CCDMode get_continuous_collision_detection_mode ( )
  Continuous collision detection mode. Continuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See CCDMode for details. 
bool custom_integrator = false
  void set_use_custom_integrator ( bool value )
 
bool is_using_custom_integrator ( )
  If true, internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the _integrate_forces function. 
bool freeze = false
  void set_freeze_enabled ( bool value )
 
bool is_freeze_enabled ( )
  If true, the body is frozen. Gravity and forces are not applied anymore. See freeze_mode to set the body's behavior when frozen. For a body that is always frozen, use StaticBody2D or AnimatableBody2D instead. 
FreezeMode freeze_mode = 0
  void set_freeze_mode ( FreezeMode value )
 
FreezeMode get_freeze_mode ( )
  The body's freeze mode. Can be used to set the body's behavior when freeze is enabled. See FreezeMode for possible values. For a body that is always frozen, use StaticBody2D or AnimatableBody2D instead. 
float gravity_scale = 1.0
  void set_gravity_scale ( float value )
 
float get_gravity_scale ( )
  Multiplies the gravity applied to the body. The body's gravity is calculated from the Default Gravity value in Project > Project Settings > Physics > 2d and/or any additional gravity vector applied by Area2Ds. 
float inertia = 0.0
  void set_inertia ( float value )
 
float get_inertia ( )
  The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this property allows you to set a custom value. If set to 0, inertia is automatically computed (default value). Note: This value does not change when inertia is automatically computed. Use PhysicsServer2D to get the computed inertia.  GDScript@onready var ball = $Ball
func get_ball_inertia():
    return 1.0 / PhysicsServer2D.body_get_direct_state(ball.get_rid()).inverse_inertia
 C#private RigidBody2D _ball;
public override void _Ready()
{
    _ball = GetNode<RigidBody2D>("Ball");
}
private float GetBallInertia()
{
    return 1.0f / PhysicsServer2D.BodyGetDirectState(_ball.GetRid()).InverseInertia;
}
  
float linear_damp = 0.0
  void set_linear_damp ( float value )
 
float get_linear_damp ( )
  Damps the body's movement. By default, the body will use the Default Linear Damp in Project > Project Settings > Physics > 2d or any value override set by an Area2D the body is in. Depending on linear_damp_mode, you can set linear_damp to be added to or to replace the body's damping value. See ProjectSettings.physics/2d/default_linear_damp for more details about damping. 
DampMode linear_damp_mode = 0
  void set_linear_damp_mode ( DampMode value )
 
DampMode get_linear_damp_mode ( )
  Defines how linear_damp is applied. See DampMode for possible values. 
Vector2 linear_velocity = Vector2(0, 0)
  void set_linear_velocity ( Vector2 value )
 
Vector2 get_linear_velocity ( )
  The body's linear velocity in pixels per second. Can be used sporadically, but don't set this every frame, because physics may run in another thread and runs at a different granularity. Use _integrate_forces as your process loop for precise control of the body state. 
bool lock_rotation = false
  void set_lock_rotation_enabled ( bool value )
 
bool is_lock_rotation_enabled ( )
  If true, the body cannot rotate. Gravity and forces only apply linear movement. 
float mass = 1.0
  void set_mass ( float value )
 
float get_mass ( )
  The body's mass. 
int max_contacts_reported = 0
  void set_max_contacts_reported ( int value )
 
int get_max_contacts_reported ( )
  The maximum number of contacts that will be recorded. Requires a value greater than 0 and contact_monitor to be set to true to start to register contacts. Use get_contact_count to retrieve the count or get_colliding_bodies to retrieve bodies that have been collided with. Note: The number of contacts is different from the number of collisions. Collisions between parallel edges will result in two contacts (one at each end), and collisions between parallel faces will result in four contacts (one at each corner). 
PhysicsMaterial physics_material_override  void set_physics_material_override ( PhysicsMaterial value )
 
PhysicsMaterial get_physics_material_override ( )
  The physics material override for the body. If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one. 
bool sleeping = false
  void set_sleeping ( bool value )
 
bool is_sleeping ( )
  If true, the body will not move and will not calculate forces until woken up by another body through, for example, a collision, or by using the apply_impulse or apply_force methods.   Method Descriptions void _integrate_forces ( PhysicsDirectBodyState2D state ) virtual
 Allows you to read and safely modify the simulation state for the object. Use this instead of Node._physics_process if you need to directly change the body's position or other physics properties. By default, it works in addition to the usual physics behavior, but custom_integrator allows you to disable the default behavior and write custom force integration for a body. void add_constant_central_force ( Vector2 force ) Adds a constant directional force without affecting rotation that keeps being applied over time until cleared with constant_force = Vector2(0, 0). This is equivalent to using add_constant_force at the body's center of mass. void add_constant_force ( Vector2 force, Vector2 position=Vector2(0, 0) ) Adds a constant positioned force to the body that keeps being applied over time until cleared with constant_force = Vector2(0, 0). position is the offset from the body origin in global coordinates. void add_constant_torque ( float torque ) Adds a constant rotational force without affecting position that keeps being applied over time until cleared with constant_torque = 0. void apply_central_force ( Vector2 force ) Applies a directional force without affecting rotation. A force is time dependent and meant to be applied every physics update. This is equivalent to using apply_force at the body's center of mass. void apply_central_impulse ( Vector2 impulse=Vector2(0, 0) ) Applies a directional impulse without affecting rotation. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise). This is equivalent to using apply_impulse at the body's center of mass. void apply_force ( Vector2 force, Vector2 position=Vector2(0, 0) ) Applies a positioned force to the body. A force is time dependent and meant to be applied every physics update. position is the offset from the body origin in global coordinates. void apply_impulse ( Vector2 impulse, Vector2 position=Vector2(0, 0) ) Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise). position is the offset from the body origin in global coordinates. void apply_torque ( float torque ) Applies a rotational force without affecting position. A force is time dependent and meant to be applied every physics update. Note: inertia is required for this to work. To have inertia, an active CollisionShape2D must be a child of the node, or you can manually set inertia. void apply_torque_impulse ( float torque ) Applies a rotational impulse to the body without affecting the position. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise). Note: inertia is required for this to work. To have inertia, an active CollisionShape2D must be a child of the node, or you can manually set inertia. 
Node2D[] get_colliding_bodies ( ) const
 Returns a list of the bodies colliding with this one. Requires contact_monitor to be set to true and max_contacts_reported to be set high enough to detect all the collisions. Note: The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead. 
int get_contact_count ( ) const
 Returns the number of contacts this body has with other bodies. By default, this returns 0 unless bodies are configured to monitor contacts (see contact_monitor). Note: To retrieve the colliding bodies, use get_colliding_bodies. void set_axis_velocity ( Vector2 axis_velocity ) Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_rigidbody2d.html


classes/class_animationnodestatemachine
-----------------------------------------------------------
AnimationNodeStateMachine Inherits: AnimationRootNode < AnimationNode < Resource < RefCounted < Object A state machine with multiple AnimationRootNodes, used by AnimationTree.  Description Contains multiple AnimationRootNodes representing animation states, connected in a graph. State transitions can be configured to happen automatically or via code, using a shortest-path algorithm. Retrieve the AnimationNodeStateMachinePlayback object from the AnimationTree node to control it programmatically. Example:  GDScriptvar state_machine = $AnimationTree.get("parameters/playback")
state_machine.travel("some_state")
 C#var stateMachine = GetNode<AnimationTree>("AnimationTree").Get("parameters/playback") as AnimationNodeStateMachinePlayback;
stateMachine.Travel("some_state");
    Tutorials  Using AnimationTree    Properties  
bool allow_transition_to_self false  
bool reset_ends false  
StateMachineType state_machine_type 0     Methods  
void add_node ( StringName name, AnimationNode node, Vector2 position=Vector2(0, 0) )  
void add_transition ( StringName from, StringName to, AnimationNodeStateMachineTransition transition )  
Vector2 get_graph_offset ( ) const  
AnimationNode get_node ( StringName name ) const  
StringName get_node_name ( AnimationNode node ) const  
Vector2 get_node_position ( StringName name ) const  
AnimationNodeStateMachineTransition get_transition ( int idx ) const  
int get_transition_count ( ) const  
StringName get_transition_from ( int idx ) const  
StringName get_transition_to ( int idx ) const  
bool has_node ( StringName name ) const  
bool has_transition ( StringName from, StringName to ) const  
void remove_node ( StringName name )  
void remove_transition ( StringName from, StringName to )  
void remove_transition_by_index ( int idx )  
void rename_node ( StringName name, StringName new_name )  
void replace_node ( StringName name, AnimationNode node )  
void set_graph_offset ( Vector2 offset )  
void set_node_position ( StringName name, Vector2 position )     Enumerations enum StateMachineType: 
StateMachineType STATE_MACHINE_TYPE_ROOT = 0
 Seeking to the beginning is treated as playing from the start state. Transition to the end state is treated as exiting the state machine. 
StateMachineType STATE_MACHINE_TYPE_NESTED = 1
 Seeking to the beginning is treated as seeking to the beginning of the animation in the current state. Transition to the end state, or the absence of transitions in each state, is treated as exiting the state machine. 
StateMachineType STATE_MACHINE_TYPE_GROUPED = 2
 This is a grouped state machine that can be controlled from a parent state machine. It does not work independently. There must be a state machine with state_machine_type of STATE_MACHINE_TYPE_ROOT or STATE_MACHINE_TYPE_NESTED in the parent or ancestor.   Property Descriptions 
bool allow_transition_to_self = false
  void set_allow_transition_to_self ( bool value )
 
bool is_allow_transition_to_self ( )
  If true, allows teleport to the self state with AnimationNodeStateMachinePlayback.travel. When the reset option is enabled in AnimationNodeStateMachinePlayback.travel, the animation is restarted. If false, nothing happens on the teleportation to the self state. 
bool reset_ends = false
  void set_reset_ends ( bool value )
 
bool are_ends_reset ( )
  If true, treat the cross-fade to the start and end nodes as a blend with the RESET animation. In most cases, when additional cross-fades are performed in the parent AnimationNode of the state machine, setting this property to false and matching the cross-fade time of the parent AnimationNode and the state machine's start node and end node gives good results. 
StateMachineType state_machine_type = 0
  void set_state_machine_type ( StateMachineType value )
 
StateMachineType get_state_machine_type ( )
  This property can define the process of transitions for different use cases. See also StateMachineType.   Method Descriptions void add_node ( StringName name, AnimationNode node, Vector2 position=Vector2(0, 0) ) Adds a new animation node to the graph. The position is used for display in the editor. void add_transition ( StringName from, StringName to, AnimationNodeStateMachineTransition transition ) Adds a transition between the given animation nodes. 
Vector2 get_graph_offset ( ) const
 Returns the draw offset of the graph. Used for display in the editor. 
AnimationNode get_node ( StringName name ) const
 Returns the animation node with the given name. 
StringName get_node_name ( AnimationNode node ) const
 Returns the given animation node's name. 
Vector2 get_node_position ( StringName name ) const
 Returns the given animation node's coordinates. Used for display in the editor. 
AnimationNodeStateMachineTransition get_transition ( int idx ) const
 Returns the given transition. 
int get_transition_count ( ) const
 Returns the number of connections in the graph. 
StringName get_transition_from ( int idx ) const
 Returns the given transition's start node. 
StringName get_transition_to ( int idx ) const
 Returns the given transition's end node. 
bool has_node ( StringName name ) const
 Returns true if the graph contains the given animation node. 
bool has_transition ( StringName from, StringName to ) const
 Returns true if there is a transition between the given animation nodes. void remove_node ( StringName name ) Deletes the given animation node from the graph. void remove_transition ( StringName from, StringName to ) Deletes the transition between the two specified animation nodes. void remove_transition_by_index ( int idx ) Deletes the given transition by index. void rename_node ( StringName name, StringName new_name ) Renames the given animation node. void replace_node ( StringName name, AnimationNode node )  There is currently no description for this method. Please help us by contributing one!  void set_graph_offset ( Vector2 offset ) Sets the draw offset of the graph. Used for display in the editor. void set_node_position ( StringName name, Vector2 position ) Sets the animation node's coordinates. Used for display in the editor.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodestatemachine.html


classes/class_theme
-----------------------------------------------------------
Theme Inherits: Resource < RefCounted < Object A resource used for styling/skinning Controls and Windows.  Description A resource used for styling/skinning Control and Window nodes. While individual controls can be styled using their local theme overrides (see Control.add_theme_color_override), theme resources allow you to store and apply the same settings across all controls sharing the same type (e.g. style all Buttons the same). One theme resource can be used for the entire project, but you can also set a separate theme resource to a branch of control nodes. A theme resource assigned to a control applies to the control itself, as well as all of its direct and indirect children (as long as a chain of controls is uninterrupted). Use ProjectSettings.gui/theme/custom to set up a project-scope theme that will be available to every control in your project. Use Control.theme of any control node to set up a theme that will be available to that control and all of its direct and indirect children.   Tutorials  GUI skinning Using the theme editor    Properties  
float default_base_scale 0.0  
Font default_font   
int default_font_size -1     Methods  
void add_type ( StringName theme_type )  
void clear ( )  
void clear_color ( StringName name, StringName theme_type )  
void clear_constant ( StringName name, StringName theme_type )  
void clear_font ( StringName name, StringName theme_type )  
void clear_font_size ( StringName name, StringName theme_type )  
void clear_icon ( StringName name, StringName theme_type )  
void clear_stylebox ( StringName name, StringName theme_type )  
void clear_theme_item ( DataType data_type, StringName name, StringName theme_type )  
void clear_type_variation ( StringName theme_type )  
Color get_color ( StringName name, StringName theme_type ) const  
PackedStringArray get_color_list ( String theme_type ) const  
PackedStringArray get_color_type_list ( ) const  
int get_constant ( StringName name, StringName theme_type ) const  
PackedStringArray get_constant_list ( String theme_type ) const  
PackedStringArray get_constant_type_list ( ) const  
Font get_font ( StringName name, StringName theme_type ) const  
PackedStringArray get_font_list ( String theme_type ) const  
int get_font_size ( StringName name, StringName theme_type ) const  
PackedStringArray get_font_size_list ( String theme_type ) const  
PackedStringArray get_font_size_type_list ( ) const  
PackedStringArray get_font_type_list ( ) const  
Texture2D get_icon ( StringName name, StringName theme_type ) const  
PackedStringArray get_icon_list ( String theme_type ) const  
PackedStringArray get_icon_type_list ( ) const  
StyleBox get_stylebox ( StringName name, StringName theme_type ) const  
PackedStringArray get_stylebox_list ( String theme_type ) const  
PackedStringArray get_stylebox_type_list ( ) const  
Variant get_theme_item ( DataType data_type, StringName name, StringName theme_type ) const  
PackedStringArray get_theme_item_list ( DataType data_type, String theme_type ) const  
PackedStringArray get_theme_item_type_list ( DataType data_type ) const  
PackedStringArray get_type_list ( ) const  
StringName get_type_variation_base ( StringName theme_type ) const  
PackedStringArray get_type_variation_list ( StringName base_type ) const  
bool has_color ( StringName name, StringName theme_type ) const  
bool has_constant ( StringName name, StringName theme_type ) const  
bool has_default_base_scale ( ) const  
bool has_default_font ( ) const  
bool has_default_font_size ( ) const  
bool has_font ( StringName name, StringName theme_type ) const  
bool has_font_size ( StringName name, StringName theme_type ) const  
bool has_icon ( StringName name, StringName theme_type ) const  
bool has_stylebox ( StringName name, StringName theme_type ) const  
bool has_theme_item ( DataType data_type, StringName name, StringName theme_type ) const  
bool is_type_variation ( StringName theme_type, StringName base_type ) const  
void merge_with ( Theme other )  
void remove_type ( StringName theme_type )  
void rename_color ( StringName old_name, StringName name, StringName theme_type )  
void rename_constant ( StringName old_name, StringName name, StringName theme_type )  
void rename_font ( StringName old_name, StringName name, StringName theme_type )  
void rename_font_size ( StringName old_name, StringName name, StringName theme_type )  
void rename_icon ( StringName old_name, StringName name, StringName theme_type )  
void rename_stylebox ( StringName old_name, StringName name, StringName theme_type )  
void rename_theme_item ( DataType data_type, StringName old_name, StringName name, StringName theme_type )  
void set_color ( StringName name, StringName theme_type, Color color )  
void set_constant ( StringName name, StringName theme_type, int constant )  
void set_font ( StringName name, StringName theme_type, Font font )  
void set_font_size ( StringName name, StringName theme_type, int font_size )  
void set_icon ( StringName name, StringName theme_type, Texture2D texture )  
void set_stylebox ( StringName name, StringName theme_type, StyleBox texture )  
void set_theme_item ( DataType data_type, StringName name, StringName theme_type, Variant value )  
void set_type_variation ( StringName theme_type, StringName base_type )     Enumerations enum DataType: 
DataType DATA_TYPE_COLOR = 0
 Theme's Color item type. 
DataType DATA_TYPE_CONSTANT = 1
 Theme's constant item type. 
DataType DATA_TYPE_FONT = 2
 Theme's Font item type. 
DataType DATA_TYPE_FONT_SIZE = 3
 Theme's font size item type. 
DataType DATA_TYPE_ICON = 4
 Theme's icon Texture2D item type. 
DataType DATA_TYPE_STYLEBOX = 5
 Theme's StyleBox item type. 
DataType DATA_TYPE_MAX = 6
 Maximum value for the DataType enum.   Property Descriptions 
float default_base_scale = 0.0
  void set_default_base_scale ( float value )
 
float get_default_base_scale ( )
  The default base scale factor of this theme resource. Used by some controls to scale their visual properties based on the global scale factor. If this value is set to 0.0, the global scale factor is used (see ThemeDB.fallback_base_scale). Use has_default_base_scale to check if this value is valid. 
Font default_font  void set_default_font ( Font value )
 
Font get_default_font ( )
  The default font of this theme resource. Used as the default value when trying to fetch a font resource that doesn't exist in this theme or is in invalid state. If the default font is also missing or invalid, the engine fallback value is used (see ThemeDB.fallback_font). Use has_default_font to check if this value is valid. 
int default_font_size = -1
  void set_default_font_size ( int value )
 
int get_default_font_size ( )
  The default font size of this theme resource. Used as the default value when trying to fetch a font size value that doesn't exist in this theme or is in invalid state. If the default font size is also missing or invalid, the engine fallback value is used (see ThemeDB.fallback_font_size). Values below 0 are invalid and can be used to unset the property. Use has_default_font_size to check if this value is valid.   Method Descriptions void add_type ( StringName theme_type ) Adds an empty theme type for every valid data type. Note: Empty types are not saved with the theme. This method only exists to perform in-memory changes to the resource. Use available set_* methods to add theme items. void clear ( ) Removes all the theme properties defined on the theme resource. void clear_color ( StringName name, StringName theme_type ) Removes the Color property defined by name and theme_type, if it exists. Fails if it doesn't exist. Use has_color to check for existence. void clear_constant ( StringName name, StringName theme_type ) Removes the constant property defined by name and theme_type, if it exists. Fails if it doesn't exist. Use has_constant to check for existence. void clear_font ( StringName name, StringName theme_type ) Removes the Font property defined by name and theme_type, if it exists. Fails if it doesn't exist. Use has_font to check for existence. void clear_font_size ( StringName name, StringName theme_type ) Removes the font size property defined by name and theme_type, if it exists. Fails if it doesn't exist. Use has_font_size to check for existence. void clear_icon ( StringName name, StringName theme_type ) Removes the icon property defined by name and theme_type, if it exists. Fails if it doesn't exist. Use has_icon to check for existence. void clear_stylebox ( StringName name, StringName theme_type ) Removes the StyleBox property defined by name and theme_type, if it exists. Fails if it doesn't exist. Use has_stylebox to check for existence. void clear_theme_item ( DataType data_type, StringName name, StringName theme_type ) Removes the theme property of data_type defined by name and theme_type, if it exists. Fails if it doesn't exist. Use has_theme_item to check for existence. Note: This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic. void clear_type_variation ( StringName theme_type ) Unmarks theme_type as being a variation of another theme type. See set_type_variation. 
Color get_color ( StringName name, StringName theme_type ) const
 Returns the Color property defined by name and theme_type, if it exists. Returns the default color value if the property doesn't exist. Use has_color to check for existence. 
PackedStringArray get_color_list ( String theme_type ) const
 Returns a list of names for Color properties defined with theme_type. Use get_color_type_list to get a list of possible theme type names. 
PackedStringArray get_color_type_list ( ) const
 Returns a list of all unique theme type names for Color properties. Use get_type_list to get a list of all unique theme types. 
int get_constant ( StringName name, StringName theme_type ) const
 Returns the constant property defined by name and theme_type, if it exists. Returns 0 if the property doesn't exist. Use has_constant to check for existence. 
PackedStringArray get_constant_list ( String theme_type ) const
 Returns a list of names for constant properties defined with theme_type. Use get_constant_type_list to get a list of possible theme type names. 
PackedStringArray get_constant_type_list ( ) const
 Returns a list of all unique theme type names for constant properties. Use get_type_list to get a list of all unique theme types. 
Font get_font ( StringName name, StringName theme_type ) const
 Returns the Font property defined by name and theme_type, if it exists. Returns the default theme font if the property doesn't exist and the default theme font is set up (see default_font). Use has_font to check for existence of the property and has_default_font to check for existence of the default theme font. Returns the engine fallback font value, if neither exist (see ThemeDB.fallback_font). 
PackedStringArray get_font_list ( String theme_type ) const
 Returns a list of names for Font properties defined with theme_type. Use get_font_type_list to get a list of possible theme type names. 
int get_font_size ( StringName name, StringName theme_type ) const
 Returns the font size property defined by name and theme_type, if it exists. Returns the default theme font size if the property doesn't exist and the default theme font size is set up (see default_font_size). Use has_font_size to check for existence of the property and has_default_font_size to check for existence of the default theme font. Returns the engine fallback font size value, if neither exist (see ThemeDB.fallback_font_size). 
PackedStringArray get_font_size_list ( String theme_type ) const
 Returns a list of names for font size properties defined with theme_type. Use get_font_size_type_list to get a list of possible theme type names. 
PackedStringArray get_font_size_type_list ( ) const
 Returns a list of all unique theme type names for font size properties. Use get_type_list to get a list of all unique theme types. 
PackedStringArray get_font_type_list ( ) const
 Returns a list of all unique theme type names for Font properties. Use get_type_list to get a list of all unique theme types. 
Texture2D get_icon ( StringName name, StringName theme_type ) const
 Returns the icon property defined by name and theme_type, if it exists. Returns the engine fallback icon value if the property doesn't exist (see ThemeDB.fallback_icon). Use has_icon to check for existence. 
PackedStringArray get_icon_list ( String theme_type ) const
 Returns a list of names for icon properties defined with theme_type. Use get_icon_type_list to get a list of possible theme type names. 
PackedStringArray get_icon_type_list ( ) const
 Returns a list of all unique theme type names for icon properties. Use get_type_list to get a list of all unique theme types. 
StyleBox get_stylebox ( StringName name, StringName theme_type ) const
 Returns the StyleBox property defined by name and theme_type, if it exists. Returns the engine fallback stylebox value if the property doesn't exist (see ThemeDB.fallback_stylebox). Use has_stylebox to check for existence. 
PackedStringArray get_stylebox_list ( String theme_type ) const
 Returns a list of names for StyleBox properties defined with theme_type. Use get_stylebox_type_list to get a list of possible theme type names. 
PackedStringArray get_stylebox_type_list ( ) const
 Returns a list of all unique theme type names for StyleBox properties. Use get_type_list to get a list of all unique theme types. 
Variant get_theme_item ( DataType data_type, StringName name, StringName theme_type ) const
 Returns the theme property of data_type defined by name and theme_type, if it exists. Returns the engine fallback value if the property doesn't exist (see ThemeDB). Use has_theme_item to check for existence. Note: This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic. 
PackedStringArray get_theme_item_list ( DataType data_type, String theme_type ) const
 Returns a list of names for properties of data_type defined with theme_type. Use get_theme_item_type_list to get a list of possible theme type names. Note: This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic. 
PackedStringArray get_theme_item_type_list ( DataType data_type ) const
 Returns a list of all unique theme type names for data_type properties. Use get_type_list to get a list of all unique theme types. Note: This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic. 
PackedStringArray get_type_list ( ) const
 Returns a list of all unique theme type names. Use the appropriate get_*_type_list method to get a list of unique theme types for a single data type. 
StringName get_type_variation_base ( StringName theme_type ) const
 Returns the name of the base theme type if theme_type is a valid variation type. Returns an empty string otherwise. 
PackedStringArray get_type_variation_list ( StringName base_type ) const
 Returns a list of all type variations for the given base_type. 
bool has_color ( StringName name, StringName theme_type ) const
 Returns true if the Color property defined by name and theme_type exists. Returns false if it doesn't exist. Use set_color to define it. 
bool has_constant ( StringName name, StringName theme_type ) const
 Returns true if the constant property defined by name and theme_type exists. Returns false if it doesn't exist. Use set_constant to define it. 
bool has_default_base_scale ( ) const
 Returns true if default_base_scale has a valid value. Returns false if it doesn't. The value must be greater than 0.0 to be considered valid. 
bool has_default_font ( ) const
 Returns true if default_font has a valid value. Returns false if it doesn't. 
bool has_default_font_size ( ) const
 Returns true if default_font_size has a valid value. Returns false if it doesn't. The value must be greater than 0 to be considered valid. 
bool has_font ( StringName name, StringName theme_type ) const
 Returns true if the Font property defined by name and theme_type exists, or if the default theme font is set up (see has_default_font). Returns false if neither exist. Use set_font to define the property. 
bool has_font_size ( StringName name, StringName theme_type ) const
 Returns true if the font size property defined by name and theme_type exists, or if the default theme font size is set up (see has_default_font_size). Returns false if neither exist. Use set_font_size to define the property. 
bool has_icon ( StringName name, StringName theme_type ) const
 Returns true if the icon property defined by name and theme_type exists. Returns false if it doesn't exist. Use set_icon to define it. 
bool has_stylebox ( StringName name, StringName theme_type ) const
 Returns true if the StyleBox property defined by name and theme_type exists. Returns false if it doesn't exist. Use set_stylebox to define it. 
bool has_theme_item ( DataType data_type, StringName name, StringName theme_type ) const
 Returns true if the theme property of data_type defined by name and theme_type exists. Returns false if it doesn't exist. Use set_theme_item to define it. Note: This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic. 
bool is_type_variation ( StringName theme_type, StringName base_type ) const
 Returns true if theme_type is marked as a variation of base_type. void merge_with ( Theme other ) Adds missing and overrides existing definitions with values from the other theme resource. Note: This modifies the current theme. If you want to merge two themes together without modifying either one, create a new empty theme and merge the other two into it one after another. void remove_type ( StringName theme_type ) Removes the theme type, gracefully discarding defined theme items. If the type is a variation, this information is also erased. If the type is a base for type variations, those variations lose their base. void rename_color ( StringName old_name, StringName name, StringName theme_type ) Renames the Color property defined by old_name and theme_type to name, if it exists. Fails if it doesn't exist, or if a similar property with the new name already exists. Use has_color to check for existence, and clear_color to remove the existing property. void rename_constant ( StringName old_name, StringName name, StringName theme_type ) Renames the constant property defined by old_name and theme_type to name, if it exists. Fails if it doesn't exist, or if a similar property with the new name already exists. Use has_constant to check for existence, and clear_constant to remove the existing property. void rename_font ( StringName old_name, StringName name, StringName theme_type ) Renames the Font property defined by old_name and theme_type to name, if it exists. Fails if it doesn't exist, or if a similar property with the new name already exists. Use has_font to check for existence, and clear_font to remove the existing property. void rename_font_size ( StringName old_name, StringName name, StringName theme_type ) Renames the font size property defined by old_name and theme_type to name, if it exists. Fails if it doesn't exist, or if a similar property with the new name already exists. Use has_font_size to check for existence, and clear_font_size to remove the existing property. void rename_icon ( StringName old_name, StringName name, StringName theme_type ) Renames the icon property defined by old_name and theme_type to name, if it exists. Fails if it doesn't exist, or if a similar property with the new name already exists. Use has_icon to check for existence, and clear_icon to remove the existing property. void rename_stylebox ( StringName old_name, StringName name, StringName theme_type ) Renames the StyleBox property defined by old_name and theme_type to name, if it exists. Fails if it doesn't exist, or if a similar property with the new name already exists. Use has_stylebox to check for existence, and clear_stylebox to remove the existing property. void rename_theme_item ( DataType data_type, StringName old_name, StringName name, StringName theme_type ) Renames the theme property of data_type defined by old_name and theme_type to name, if it exists. Fails if it doesn't exist, or if a similar property with the new name already exists. Use has_theme_item to check for existence, and clear_theme_item to remove the existing property. Note: This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic. void set_color ( StringName name, StringName theme_type, Color color ) Creates or changes the value of the Color property defined by name and theme_type. Use clear_color to remove the property. void set_constant ( StringName name, StringName theme_type, int constant ) Creates or changes the value of the constant property defined by name and theme_type. Use clear_constant to remove the property. void set_font ( StringName name, StringName theme_type, Font font ) Creates or changes the value of the Font property defined by name and theme_type. Use clear_font to remove the property. void set_font_size ( StringName name, StringName theme_type, int font_size ) Creates or changes the value of the font size property defined by name and theme_type. Use clear_font_size to remove the property. void set_icon ( StringName name, StringName theme_type, Texture2D texture ) Creates or changes the value of the icon property defined by name and theme_type. Use clear_icon to remove the property. void set_stylebox ( StringName name, StringName theme_type, StyleBox texture ) Creates or changes the value of the StyleBox property defined by name and theme_type. Use clear_stylebox to remove the property. void set_theme_item ( DataType data_type, StringName name, StringName theme_type, Variant value ) Creates or changes the value of the theme property of data_type defined by name and theme_type. Use clear_theme_item to remove the property. Fails if the value type is not accepted by data_type. Note: This method is analogous to calling the corresponding data type specific method, but can be used for more generalized logic. void set_type_variation ( StringName theme_type, StringName base_type ) Marks theme_type as a variation of base_type. This adds theme_type as a suggested option for Control.theme_type_variation on a Control that is of the base_type class. Variations can also be nested, i.e. base_type can be another variation. If a chain of variations ends with a base_type matching the class of the Control, the whole chain is going to be suggested as options. Note: Suggestions only show up if this theme resource is set as the project default theme. See ProjectSettings.gui/theme/custom.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_theme.html


classes/class_gltfdocument
-----------------------------------------------------------
GLTFDocument Inherits: Resource < RefCounted < Object Class for importing and exporting glTF files in and out of Godot.  Description GLTFDocument supports reading data from a glTF file, buffer, or Godot scene. This data can then be written to the filesystem, buffer, or used to create a Godot scene. All of the data in a GLTF scene is stored in the GLTFState class. GLTFDocument processes state objects, but does not contain any scene data itself. GLTFDocument has member variables to store export configuration settings such as the image format, but is otherwise stateless. Multiple scenes can be processed with the same settings using the same GLTFDocument object and different GLTFState objects. GLTFDocument can be extended with arbitrary functionality by extending the GLTFDocumentExtension class and registering it with GLTFDocument via register_gltf_document_extension. This allows for custom data to be imported and exported.   Tutorials  Runtime file loading and saving glTF 'What the duck?' guide Khronos glTF specification    Properties  
String image_format "PNG"  
float lossy_quality 0.75  
RootNodeMode root_node_mode 0     Methods  
Error append_from_buffer ( PackedByteArray bytes, String base_path, GLTFState state, int flags=0 )  
Error append_from_file ( String path, GLTFState state, int flags=0, String base_path="" )  
Error append_from_scene ( Node node, GLTFState state, int flags=0 )  
PackedByteArray generate_buffer ( GLTFState state )  
Node generate_scene ( GLTFState state, float bake_fps=30, bool trimming=false, bool remove_immutable_tracks=true )  
void register_gltf_document_extension ( GLTFDocumentExtension extension, bool first_priority=false ) static  
void unregister_gltf_document_extension ( GLTFDocumentExtension extension ) static  
Error write_to_filesystem ( GLTFState state, String path )     Enumerations enum RootNodeMode: 
RootNodeMode ROOT_NODE_MODE_SINGLE_ROOT = 0
 Treat the Godot scene's root node as the root node of the glTF file, and mark it as the single root node via the GODOT_single_root glTF extension. This will be parsed the same as ROOT_NODE_MODE_KEEP_ROOT if the implementation does not support GODOT_single_root. 
RootNodeMode ROOT_NODE_MODE_KEEP_ROOT = 1
 Treat the Godot scene's root node as the root node of the glTF file, but do not mark it as anything special. An extra root node will be generated when importing into Godot. This uses only vanilla glTF features. This is equivalent to the behavior in Godot 4.1 and earlier. 
RootNodeMode ROOT_NODE_MODE_MULTI_ROOT = 2
 Treat the Godot scene's root node as the name of the glTF scene, and add all of its children as root nodes of the glTF file. This uses only vanilla glTF features. This avoids an extra root node, but only the name of the Godot scene's root node will be preserved, as it will not be saved as a node.   Property Descriptions 
String image_format = "PNG"
  void set_image_format ( String value )
 
String get_image_format ( )
  The user-friendly name of the export image format. This is used when exporting the GLTF file, including writing to a file and writing to a byte array. By default, Godot allows the following options: "None", "PNG", "JPEG", "Lossless WebP", and "Lossy WebP". Support for more image formats can be added in GLTFDocumentExtension classes. 
float lossy_quality = 0.75
  void set_lossy_quality ( float value )
 
float get_lossy_quality ( )
  If image_format is a lossy image format, this determines the lossy quality of the image. On a range of 0.0 to 1.0, where 0.0 is the lowest quality and 1.0 is the highest quality. A lossy quality of 1.0 is not the same as lossless. 
RootNodeMode root_node_mode = 0
  void set_root_node_mode ( RootNodeMode value )
 
RootNodeMode get_root_node_mode ( )
  How to process the root node during export. See RootNodeMode for details. The default and recommended value is ROOT_NODE_MODE_SINGLE_ROOT. Note: Regardless of how the glTF file is exported, when importing, the root node type and name can be overridden in the scene import settings tab.   Method Descriptions 
Error append_from_buffer ( PackedByteArray bytes, String base_path, GLTFState state, int flags=0 ) Takes a PackedByteArray defining a GLTF and imports the data to the given GLTFState object through the state parameter. Note: The base_path tells append_from_buffer where to find dependencies and can be empty. 
Error append_from_file ( String path, GLTFState state, int flags=0, String base_path="" ) Takes a path to a GLTF file and imports the data at that file path to the given GLTFState object through the state parameter. Note: The base_path tells append_from_file where to find dependencies and can be empty. 
Error append_from_scene ( Node node, GLTFState state, int flags=0 ) Takes a Godot Engine scene node and exports it and its descendants to the given GLTFState object through the state parameter. 
PackedByteArray generate_buffer ( GLTFState state ) Takes a GLTFState object through the state parameter and returns a GLTF PackedByteArray. 
Node generate_scene ( GLTFState state, float bake_fps=30, bool trimming=false, bool remove_immutable_tracks=true ) Takes a GLTFState object through the state parameter and returns a Godot Engine scene node. void register_gltf_document_extension ( GLTFDocumentExtension extension, bool first_priority=false ) static
 Registers the given GLTFDocumentExtension instance with GLTFDocument. If first_priority is true, this extension will be run first. Otherwise, it will be run last. Note: Like GLTFDocument itself, all GLTFDocumentExtension classes must be stateless in order to function properly. If you need to store data, use the set_additional_data and get_additional_data methods in GLTFState or GLTFNode. void unregister_gltf_document_extension ( GLTFDocumentExtension extension ) static
 Unregisters the given GLTFDocumentExtension instance. 
Error write_to_filesystem ( GLTFState state, String path ) Takes a GLTFState object through the state parameter and writes a glTF file to the filesystem. Note: The extension of the glTF file determines if it is a .glb binary file or a .gltf file.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfdocument.html


classes/class_curve3d
-----------------------------------------------------------
Curve3D Inherits: Resource < RefCounted < Object Describes a BÃ©zier curve in 3D space.  Description This class describes a BÃ©zier curve in 3D space. It is mainly used to give a shape to a Path3D, but can be manually sampled for other purposes. It keeps a cache of precalculated points along the curve, to speed up further calculations.   Properties  
float bake_interval 0.2  
int point_count 0  
bool up_vector_enabled true     Methods  
void add_point ( Vector3 position, Vector3 in=Vector3(0, 0, 0), Vector3 out=Vector3(0, 0, 0), int index=-1 )  
void clear_points ( )  
float get_baked_length ( ) const  
PackedVector3Array get_baked_points ( ) const  
PackedFloat32Array get_baked_tilts ( ) const  
PackedVector3Array get_baked_up_vectors ( ) const  
float get_closest_offset ( Vector3 to_point ) const  
Vector3 get_closest_point ( Vector3 to_point ) const  
Vector3 get_point_in ( int idx ) const  
Vector3 get_point_out ( int idx ) const  
Vector3 get_point_position ( int idx ) const  
float get_point_tilt ( int idx ) const  
void remove_point ( int idx )  
Vector3 sample ( int idx, float t ) const  
Vector3 sample_baked ( float offset=0.0, bool cubic=false ) const  
Vector3 sample_baked_up_vector ( float offset, bool apply_tilt=false ) const  
Transform3D sample_baked_with_rotation ( float offset=0.0, bool cubic=false, bool apply_tilt=false ) const  
Vector3 samplef ( float fofs ) const  
void set_point_in ( int idx, Vector3 position )  
void set_point_out ( int idx, Vector3 position )  
void set_point_position ( int idx, Vector3 position )  
void set_point_tilt ( int idx, float tilt )  
PackedVector3Array tessellate ( int max_stages=5, float tolerance_degrees=4 ) const  
PackedVector3Array tessellate_even_length ( int max_stages=5, float tolerance_length=0.2 ) const     Property Descriptions 
float bake_interval = 0.2
  void set_bake_interval ( float value )
 
float get_bake_interval ( )
  The distance in meters between two adjacent cached points. Changing it forces the cache to be recomputed the next time the get_baked_points or get_baked_length function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care. 
int point_count = 0
  void set_point_count ( int value )
 
int get_point_count ( )
  The number of points describing the curve. 
bool up_vector_enabled = true
  void set_up_vector_enabled ( bool value )
 
bool is_up_vector_enabled ( )
  If true, the curve will bake up vectors used for orientation. This is used when PathFollow3D.rotation_mode is set to PathFollow3D.ROTATION_ORIENTED. Changing it forces the cache to be recomputed.   Method Descriptions void add_point ( Vector3 position, Vector3 in=Vector3(0, 0, 0), Vector3 out=Vector3(0, 0, 0), int index=-1 ) Adds a point with the specified position relative to the curve's own position, with control points in and out. Appends the new point at the end of the point list. If index is given, the new point is inserted before the existing point identified by index index. Every existing point starting from index is shifted further down the list of points. The index must be greater than or equal to 0 and must not exceed the number of existing points in the line. See point_count. void clear_points ( ) Removes all points from the curve. 
float get_baked_length ( ) const
 Returns the total length of the curve, based on the cached points. Given enough density (see bake_interval), it should be approximate enough. 
PackedVector3Array get_baked_points ( ) const
 Returns the cache of points as a PackedVector3Array. 
PackedFloat32Array get_baked_tilts ( ) const
 Returns the cache of tilts as a PackedFloat32Array. 
PackedVector3Array get_baked_up_vectors ( ) const
 Returns the cache of up vectors as a PackedVector3Array. If up_vector_enabled is false, the cache will be empty. 
float get_closest_offset ( Vector3 to_point ) const
 Returns the closest offset to to_point. This offset is meant to be used in sample_baked or sample_baked_up_vector. to_point must be in this curve's local space. 
Vector3 get_closest_point ( Vector3 to_point ) const
 Returns the closest point on baked segments (in curve's local space) to to_point. to_point must be in this curve's local space. 
Vector3 get_point_in ( int idx ) const
 Returns the position of the control point leading to the vertex idx. The returned position is relative to the vertex idx. If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0). 
Vector3 get_point_out ( int idx ) const
 Returns the position of the control point leading out of the vertex idx. The returned position is relative to the vertex idx. If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0). 
Vector3 get_point_position ( int idx ) const
 Returns the position of the vertex idx. If the index is out of bounds, the function sends an error to the console, and returns (0, 0, 0). 
float get_point_tilt ( int idx ) const
 Returns the tilt angle in radians for the point idx. If the index is out of bounds, the function sends an error to the console, and returns 0. void remove_point ( int idx ) Deletes the point idx from the curve. Sends an error to the console if idx is out of bounds. 
Vector3 sample ( int idx, float t ) const
 Returns the position between the vertex idx and the vertex idx + 1, where t controls if the point is the first vertex (t = 0.0), the last vertex (t = 1.0), or in between. Values of t outside the range (0.0 >= t <=1) give strange, but predictable results. If idx is out of bounds it is truncated to the first or last vertex, and t is ignored. If the curve has no points, the function sends an error to the console, and returns (0, 0, 0). 
Vector3 sample_baked ( float offset=0.0, bool cubic=false ) const
 Returns a point within the curve at position offset, where offset is measured as a distance in 3D units along the curve. To do that, it finds the two cached points where the offset lies between, then interpolates the values. This interpolation is cubic if cubic is set to true, or linear if set to false. Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough). 
Vector3 sample_baked_up_vector ( float offset, bool apply_tilt=false ) const
 Returns an up vector within the curve at position offset, where offset is measured as a distance in 3D units along the curve. To do that, it finds the two cached up vectors where the offset lies between, then interpolates the values. If apply_tilt is true, an interpolated tilt is applied to the interpolated up vector. If the curve has no up vectors, the function sends an error to the console, and returns (0, 1, 0). 
Transform3D sample_baked_with_rotation ( float offset=0.0, bool cubic=false, bool apply_tilt=false ) const
 Returns a Transform3D with origin as point position, basis.x as sideway vector, basis.y as up vector, basis.z as forward vector. When the curve length is 0, there is no reasonable way to calculate the rotation, all vectors aligned with global space axes. See also sample_baked. 
Vector3 samplef ( float fofs ) const
 Returns the position at the vertex fofs. It calls sample using the integer part of fofs as idx, and its fractional part as t. void set_point_in ( int idx, Vector3 position ) Sets the position of the control point leading to the vertex idx. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex. void set_point_out ( int idx, Vector3 position ) Sets the position of the control point leading out of the vertex idx. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex. void set_point_position ( int idx, Vector3 position ) Sets the position for the vertex idx. If the index is out of bounds, the function sends an error to the console. void set_point_tilt ( int idx, float tilt ) Sets the tilt angle in radians for the point idx. If the index is out of bounds, the function sends an error to the console. The tilt controls the rotation along the look-at axis an object traveling the path would have. In the case of a curve controlling a PathFollow3D, this tilt is an offset over the natural tilt the PathFollow3D calculates. 
PackedVector3Array tessellate ( int max_stages=5, float tolerance_degrees=4 ) const
 Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts. This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough. max_stages controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care! tolerance_degrees controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided. 
PackedVector3Array tessellate_even_length ( int max_stages=5, float tolerance_length=0.2 ) const
 Returns a list of points along the curve, with almost uniform density. max_stages controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care! tolerance_length controls the maximal distance between two neighboring points, before the segment has to be subdivided.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_curve3d.html


classes/class_control
-----------------------------------------------------------
Control Inherits: CanvasItem < Node < Object Inherited By: BaseButton, ColorRect, Container, GraphEdit, ItemList, Label, LineEdit, MenuBar, NinePatchRect, Panel, Range, ReferenceRect, RichTextLabel, Separator, TabBar, TextEdit, TextureRect, Tree, VideoStreamPlayer Base class for all GUI controls. Adapts its position and size based on its parent control.  Description Base class for all UI-related nodes. Control features a bounding rectangle that defines its extents, an anchor position relative to its parent control or the current viewport, and offsets relative to the anchor. The offsets update automatically when the node, any of its parents, or the screen size change. For more information on Godot's UI system, anchors, offsets, and containers, see the related tutorials in the manual. To build flexible UIs, you'll need a mix of UI elements that inherit from Control and Container nodes. User Interface nodes and input Godot propagates input events via viewports. Each Viewport is responsible for propagating InputEvents to their child nodes. As the SceneTree.root is a Window, this already happens automatically for all UI elements in your game. Input events are propagated through the SceneTree from the root node to all child nodes by calling Node._input. For UI elements specifically, it makes more sense to override the virtual method _gui_input, which filters out unrelated input events, such as by checking z-order, mouse_filter, focus, or if the event was inside of the control's bounding box. Call accept_event so no other node receives the event. Once you accept an input, it becomes handled so Node._unhandled_input will not process it. Only one Control node can be in focus. Only the node in focus will receive events. To get the focus, call grab_focus. Control nodes lose focus when another node grabs it, or if you hide the node in focus. Sets mouse_filter to MOUSE_FILTER_IGNORE to tell a Control node to ignore mouse or touch events. You'll need it if you place an icon on top of a button. Theme resources change the Control's appearance. If you change the Theme on a Control node, it affects all of its children. To override some of the theme's parameters, call one of the add_theme_*_override methods, like add_theme_font_override. You can override the theme with the Inspector. Note: Theme items are not Object properties. This means you can't access their values using Object.get and Object.set. Instead, use the get_theme_* and add_theme_*_override methods provided by this class.   Tutorials  GUI documentation index Custom drawing in 2D Control node gallery Multiple resolutions All GUI Demos    Properties  
float anchor_bottom 0.0  
float anchor_left 0.0  
float anchor_right 0.0  
float anchor_top 0.0  
bool auto_translate true  
bool clip_contents false  
Vector2 custom_minimum_size Vector2(0, 0)  
FocusMode focus_mode 0  
NodePath focus_neighbor_bottom NodePath("")  
NodePath focus_neighbor_left NodePath("")  
NodePath focus_neighbor_right NodePath("")  
NodePath focus_neighbor_top NodePath("")  
NodePath focus_next NodePath("")  
NodePath focus_previous NodePath("")  
Vector2 global_position   
GrowDirection grow_horizontal 1  
GrowDirection grow_vertical 1  
LayoutDirection layout_direction 0  
bool localize_numeral_system true  
CursorShape mouse_default_cursor_shape 0  
MouseFilter mouse_filter 0  
bool mouse_force_pass_scroll_events true  
float offset_bottom 0.0  
float offset_left 0.0  
float offset_right 0.0  
float offset_top 0.0  
Vector2 pivot_offset Vector2(0, 0)  
Vector2 position Vector2(0, 0)  
float rotation 0.0  
float rotation_degrees   
Vector2 scale Vector2(1, 1)  
Node shortcut_context   
Vector2 size Vector2(0, 0)  
BitField<SizeFlags> size_flags_horizontal 1  
float size_flags_stretch_ratio 1.0  
BitField<SizeFlags> size_flags_vertical 1  
Theme theme   
StringName theme_type_variation &""  
String tooltip_text ""     Methods  
bool _can_drop_data ( Vector2 at_position, Variant data ) virtual const  
void _drop_data ( Vector2 at_position, Variant data ) virtual  
Variant _get_drag_data ( Vector2 at_position ) virtual  
Vector2 _get_minimum_size ( ) virtual const  
String _get_tooltip ( Vector2 at_position ) virtual const  
void _gui_input ( InputEvent event ) virtual  
bool _has_point ( Vector2 point ) virtual const  
Object _make_custom_tooltip ( String for_text ) virtual const  
Vector3i[] _structured_text_parser ( Array args, String text ) virtual const  
void accept_event ( )  
void add_theme_color_override ( StringName name, Color color )  
void add_theme_constant_override ( StringName name, int constant )  
void add_theme_font_override ( StringName name, Font font )  
void add_theme_font_size_override ( StringName name, int font_size )  
void add_theme_icon_override ( StringName name, Texture2D texture )  
void add_theme_stylebox_override ( StringName name, StyleBox stylebox )  
void begin_bulk_theme_override ( )  
void end_bulk_theme_override ( )  
Control find_next_valid_focus ( ) const  
Control find_prev_valid_focus ( ) const  
Control find_valid_focus_neighbor ( Side side ) const  
void force_drag ( Variant data, Control preview )  
float get_anchor ( Side side ) const  
Vector2 get_begin ( ) const  
Vector2 get_combined_minimum_size ( ) const  
CursorShape get_cursor_shape ( Vector2 position=Vector2(0, 0) ) const  
Vector2 get_end ( ) const  
NodePath get_focus_neighbor ( Side side ) const  
Rect2 get_global_rect ( ) const  
Vector2 get_minimum_size ( ) const  
float get_offset ( Side offset ) const  
Vector2 get_parent_area_size ( ) const  
Control get_parent_control ( ) const  
Rect2 get_rect ( ) const  
Vector2 get_screen_position ( ) const  
Color get_theme_color ( StringName name, StringName theme_type="" ) const  
int get_theme_constant ( StringName name, StringName theme_type="" ) const  
float get_theme_default_base_scale ( ) const  
Font get_theme_default_font ( ) const  
int get_theme_default_font_size ( ) const  
Font get_theme_font ( StringName name, StringName theme_type="" ) const  
int get_theme_font_size ( StringName name, StringName theme_type="" ) const  
Texture2D get_theme_icon ( StringName name, StringName theme_type="" ) const  
StyleBox get_theme_stylebox ( StringName name, StringName theme_type="" ) const  
String get_tooltip ( Vector2 at_position=Vector2(0, 0) ) const  
void grab_click_focus ( )  
void grab_focus ( )  
bool has_focus ( ) const  
bool has_theme_color ( StringName name, StringName theme_type="" ) const  
bool has_theme_color_override ( StringName name ) const  
bool has_theme_constant ( StringName name, StringName theme_type="" ) const  
bool has_theme_constant_override ( StringName name ) const  
bool has_theme_font ( StringName name, StringName theme_type="" ) const  
bool has_theme_font_override ( StringName name ) const  
bool has_theme_font_size ( StringName name, StringName theme_type="" ) const  
bool has_theme_font_size_override ( StringName name ) const  
bool has_theme_icon ( StringName name, StringName theme_type="" ) const  
bool has_theme_icon_override ( StringName name ) const  
bool has_theme_stylebox ( StringName name, StringName theme_type="" ) const  
bool has_theme_stylebox_override ( StringName name ) const  
bool is_drag_successful ( ) const  
bool is_layout_rtl ( ) const  
void release_focus ( )  
void remove_theme_color_override ( StringName name )  
void remove_theme_constant_override ( StringName name )  
void remove_theme_font_override ( StringName name )  
void remove_theme_font_size_override ( StringName name )  
void remove_theme_icon_override ( StringName name )  
void remove_theme_stylebox_override ( StringName name )  
void reset_size ( )  
void set_anchor ( Side side, float anchor, bool keep_offset=false, bool push_opposite_anchor=true )  
void set_anchor_and_offset ( Side side, float anchor, float offset, bool push_opposite_anchor=false )  
void set_anchors_and_offsets_preset ( LayoutPreset preset, LayoutPresetMode resize_mode=0, int margin=0 )  
void set_anchors_preset ( LayoutPreset preset, bool keep_offsets=false )  
void set_begin ( Vector2 position )  
void set_drag_forwarding ( Callable drag_func, Callable can_drop_func, Callable drop_func )  
void set_drag_preview ( Control control )  
void set_end ( Vector2 position )  
void set_focus_neighbor ( Side side, NodePath neighbor )  
void set_global_position ( Vector2 position, bool keep_offsets=false )  
void set_offset ( Side side, float offset )  
void set_offsets_preset ( LayoutPreset preset, LayoutPresetMode resize_mode=0, int margin=0 )  
void set_position ( Vector2 position, bool keep_offsets=false )  
void set_size ( Vector2 size, bool keep_offsets=false )  
void update_minimum_size ( )  
void warp_mouse ( Vector2 position )     Signals focus_entered ( ) Emitted when the node gains focus. focus_exited ( ) Emitted when the node loses focus. gui_input ( InputEvent event ) Emitted when the node receives an InputEvent. minimum_size_changed ( ) Emitted when the node's minimum size changes. mouse_entered ( ) Emitted when the mouse cursor enters the control's (or any child control's) visible area, that is not occluded behind other Controls or Windows, provided its mouse_filter lets the event reach it and regardless if it's currently focused or not. Note: CanvasItem.z_index doesn't affect, which Control receives the signal. mouse_exited ( ) Emitted when the mouse cursor leaves the control's (and all child control's) visible area, that is not occluded behind other Controls or Windows, provided its mouse_filter lets the event reach it and regardless if it's currently focused or not. Note: CanvasItem.z_index doesn't affect, which Control receives the signal. Note: If you want to check whether the mouse truly left the area, ignoring any top nodes, you can use code like this: func _on_mouse_exited():
    if not Rect2(Vector2(), size).has_point(get_local_mouse_position()):
        # Not hovering over area.
 resized ( ) Emitted when the control changes size. size_flags_changed ( ) Emitted when one of the size flags changes. See size_flags_horizontal and size_flags_vertical. theme_changed ( ) Emitted when the NOTIFICATION_THEME_CHANGED notification is sent.   Enumerations enum FocusMode: 
FocusMode FOCUS_NONE = 0
 The node cannot grab focus. Use with focus_mode. 
FocusMode FOCUS_CLICK = 1
 The node can only grab focus on mouse clicks. Use with focus_mode. 
FocusMode FOCUS_ALL = 2
 The node can grab focus on mouse click, using the arrows and the Tab keys on the keyboard, or using the D-pad buttons on a gamepad. Use with focus_mode. enum CursorShape: 
CursorShape CURSOR_ARROW = 0
 Show the system's arrow mouse cursor when the user hovers the node. Use with mouse_default_cursor_shape. 
CursorShape CURSOR_IBEAM = 1
 Show the system's I-beam mouse cursor when the user hovers the node. The I-beam pointer has a shape similar to "I". It tells the user they can highlight or insert text. 
CursorShape CURSOR_POINTING_HAND = 2
 Show the system's pointing hand mouse cursor when the user hovers the node. 
CursorShape CURSOR_CROSS = 3
 Show the system's cross mouse cursor when the user hovers the node. 
CursorShape CURSOR_WAIT = 4
 Show the system's wait mouse cursor when the user hovers the node. Often an hourglass. 
CursorShape CURSOR_BUSY = 5
 Show the system's busy mouse cursor when the user hovers the node. Often an arrow with a small hourglass. 
CursorShape CURSOR_DRAG = 6
 Show the system's drag mouse cursor, often a closed fist or a cross symbol, when the user hovers the node. It tells the user they're currently dragging an item, like a node in the Scene dock. 
CursorShape CURSOR_CAN_DROP = 7
 Show the system's drop mouse cursor when the user hovers the node. It can be an open hand. It tells the user they can drop an item they're currently grabbing, like a node in the Scene dock. 
CursorShape CURSOR_FORBIDDEN = 8
 Show the system's forbidden mouse cursor when the user hovers the node. Often a crossed circle. 
CursorShape CURSOR_VSIZE = 9
 Show the system's vertical resize mouse cursor when the user hovers the node. A double-headed vertical arrow. It tells the user they can resize the window or the panel vertically. 
CursorShape CURSOR_HSIZE = 10
 Show the system's horizontal resize mouse cursor when the user hovers the node. A double-headed horizontal arrow. It tells the user they can resize the window or the panel horizontally. 
CursorShape CURSOR_BDIAGSIZE = 11
 Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double-headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically. 
CursorShape CURSOR_FDIAGSIZE = 12
 Show the system's window resize mouse cursor when the user hovers the node. The cursor is a double-headed arrow that goes from the top left to the bottom right, the opposite of CURSOR_BDIAGSIZE. It tells the user they can resize the window or the panel both horizontally and vertically. 
CursorShape CURSOR_MOVE = 13
 Show the system's move mouse cursor when the user hovers the node. It shows 2 double-headed arrows at a 90 degree angle. It tells the user they can move a UI element freely. 
CursorShape CURSOR_VSPLIT = 14
 Show the system's vertical split mouse cursor when the user hovers the node. On Windows, it's the same as CURSOR_VSIZE. 
CursorShape CURSOR_HSPLIT = 15
 Show the system's horizontal split mouse cursor when the user hovers the node. On Windows, it's the same as CURSOR_HSIZE. 
CursorShape CURSOR_HELP = 16
 Show the system's help mouse cursor when the user hovers the node, a question mark. enum LayoutPreset: 
LayoutPreset PRESET_TOP_LEFT = 0
 Snap all 4 anchors to the top-left of the parent control's bounds. Use with set_anchors_preset. 
LayoutPreset PRESET_TOP_RIGHT = 1
 Snap all 4 anchors to the top-right of the parent control's bounds. Use with set_anchors_preset. 
LayoutPreset PRESET_BOTTOM_LEFT = 2
 Snap all 4 anchors to the bottom-left of the parent control's bounds. Use with set_anchors_preset. 
LayoutPreset PRESET_BOTTOM_RIGHT = 3
 Snap all 4 anchors to the bottom-right of the parent control's bounds. Use with set_anchors_preset. 
LayoutPreset PRESET_CENTER_LEFT = 4
 Snap all 4 anchors to the center of the left edge of the parent control's bounds. Use with set_anchors_preset. 
LayoutPreset PRESET_CENTER_TOP = 5
 Snap all 4 anchors to the center of the top edge of the parent control's bounds. Use with set_anchors_preset. 
LayoutPreset PRESET_CENTER_RIGHT = 6
 Snap all 4 anchors to the center of the right edge of the parent control's bounds. Use with set_anchors_preset. 
LayoutPreset PRESET_CENTER_BOTTOM = 7
 Snap all 4 anchors to the center of the bottom edge of the parent control's bounds. Use with set_anchors_preset. 
LayoutPreset PRESET_CENTER = 8
 Snap all 4 anchors to the center of the parent control's bounds. Use with set_anchors_preset. 
LayoutPreset PRESET_LEFT_WIDE = 9
 Snap all 4 anchors to the left edge of the parent control. The left offset becomes relative to the left edge and the top offset relative to the top left corner of the node's parent. Use with set_anchors_preset. 
LayoutPreset PRESET_TOP_WIDE = 10
 Snap all 4 anchors to the top edge of the parent control. The left offset becomes relative to the top left corner, the top offset relative to the top edge, and the right offset relative to the top right corner of the node's parent. Use with set_anchors_preset. 
LayoutPreset PRESET_RIGHT_WIDE = 11
 Snap all 4 anchors to the right edge of the parent control. The right offset becomes relative to the right edge and the top offset relative to the top right corner of the node's parent. Use with set_anchors_preset. 
LayoutPreset PRESET_BOTTOM_WIDE = 12
 Snap all 4 anchors to the bottom edge of the parent control. The left offset becomes relative to the bottom left corner, the bottom offset relative to the bottom edge, and the right offset relative to the bottom right corner of the node's parent. Use with set_anchors_preset. 
LayoutPreset PRESET_VCENTER_WIDE = 13
 Snap all 4 anchors to a vertical line that cuts the parent control in half. Use with set_anchors_preset. 
LayoutPreset PRESET_HCENTER_WIDE = 14
 Snap all 4 anchors to a horizontal line that cuts the parent control in half. Use with set_anchors_preset. 
LayoutPreset PRESET_FULL_RECT = 15
 Snap all 4 anchors to the respective corners of the parent control. Set all 4 offsets to 0 after you applied this preset and the Control will fit its parent control. Use with set_anchors_preset. enum LayoutPresetMode: 
LayoutPresetMode PRESET_MODE_MINSIZE = 0
 The control will be resized to its minimum size. 
LayoutPresetMode PRESET_MODE_KEEP_WIDTH = 1
 The control's width will not change. 
LayoutPresetMode PRESET_MODE_KEEP_HEIGHT = 2
 The control's height will not change. 
LayoutPresetMode PRESET_MODE_KEEP_SIZE = 3
 The control's size will not change. flags SizeFlags: 
SizeFlags SIZE_SHRINK_BEGIN = 0
 Tells the parent Container to align the node with its start, either the top or the left edge. It is mutually exclusive with SIZE_FILL and other shrink size flags, but can be used with SIZE_EXPAND in some containers. Use with size_flags_horizontal and size_flags_vertical. Note: Setting this flag is equal to not having any size flags. 
SizeFlags SIZE_FILL = 1
 Tells the parent Container to expand the bounds of this node to fill all the available space without pushing any other node. It is mutually exclusive with shrink size flags. Use with size_flags_horizontal and size_flags_vertical. 
SizeFlags SIZE_EXPAND = 2
 Tells the parent Container to let this node take all the available space on the axis you flag. If multiple neighboring nodes are set to expand, they'll share the space based on their stretch ratio. See size_flags_stretch_ratio. Use with size_flags_horizontal and size_flags_vertical. 
SizeFlags SIZE_EXPAND_FILL = 3
 Sets the node's size flags to both fill and expand. See SIZE_FILL and SIZE_EXPAND for more information. 
SizeFlags SIZE_SHRINK_CENTER = 4
 Tells the parent Container to center the node in the available space. It is mutually exclusive with SIZE_FILL and other shrink size flags, but can be used with SIZE_EXPAND in some containers. Use with size_flags_horizontal and size_flags_vertical. 
SizeFlags SIZE_SHRINK_END = 8
 Tells the parent Container to align the node with its end, either the bottom or the right edge. It is mutually exclusive with SIZE_FILL and other shrink size flags, but can be used with SIZE_EXPAND in some containers. Use with size_flags_horizontal and size_flags_vertical. enum MouseFilter: 
MouseFilter MOUSE_FILTER_STOP = 0
 The control will receive mouse movement input events and mouse button input events if clicked on through _gui_input. And the control will receive the mouse_entered and mouse_exited signals. These events are automatically marked as handled, and they will not propagate further to other controls. This also results in blocking signals in other controls. 
MouseFilter MOUSE_FILTER_PASS = 1
 The control will receive mouse movement input events and mouse button input events if clicked on through _gui_input. And the control will receive the mouse_entered and mouse_exited signals. If this control does not handle the event, the parent control (if any) will be considered, and so on until there is no more parent control to potentially handle it. This also allows signals to fire in other controls. If no control handled it, the event will be passed to Node._shortcut_input for further processing. 
MouseFilter MOUSE_FILTER_IGNORE = 2
 The control will not receive mouse movement input events and mouse button input events if clicked on through _gui_input. The control will also not receive the mouse_entered nor mouse_exited signals. This will not block other controls from receiving these events or firing the signals. Ignored events will not be handled automatically. Note: If the control has received mouse_entered but not mouse_exited, changing the mouse_filter to MOUSE_FILTER_IGNORE will cause mouse_exited to be emitted. enum GrowDirection: 
GrowDirection GROW_DIRECTION_BEGIN = 0
 The control will grow to the left or top to make up if its minimum size is changed to be greater than its current size on the respective axis. 
GrowDirection GROW_DIRECTION_END = 1
 The control will grow to the right or bottom to make up if its minimum size is changed to be greater than its current size on the respective axis. 
GrowDirection GROW_DIRECTION_BOTH = 2
 The control will grow in both directions equally to make up if its minimum size is changed to be greater than its current size. enum Anchor: 
Anchor ANCHOR_BEGIN = 0
 Snaps one of the 4 anchor's sides to the origin of the node's Rect, in the top left. Use it with one of the anchor_* member variables, like anchor_left. To change all 4 anchors at once, use set_anchors_preset. 
Anchor ANCHOR_END = 1
 Snaps one of the 4 anchor's sides to the end of the node's Rect, in the bottom right. Use it with one of the anchor_* member variables, like anchor_left. To change all 4 anchors at once, use set_anchors_preset. enum LayoutDirection: 
LayoutDirection LAYOUT_DIRECTION_INHERITED = 0
 Automatic layout direction, determined from the parent control layout direction. 
LayoutDirection LAYOUT_DIRECTION_LOCALE = 1
 Automatic layout direction, determined from the current locale. 
LayoutDirection LAYOUT_DIRECTION_LTR = 2
 Left-to-right layout direction. 
LayoutDirection LAYOUT_DIRECTION_RTL = 3
 Right-to-left layout direction. enum TextDirection: 
TextDirection TEXT_DIRECTION_INHERITED = 3
 Text writing direction is the same as layout direction. 
TextDirection TEXT_DIRECTION_AUTO = 0
 Automatic text writing direction, determined from the current locale and text content. 
TextDirection TEXT_DIRECTION_LTR = 1
 Left-to-right text writing direction. 
TextDirection TEXT_DIRECTION_RTL = 2
 Right-to-left text writing direction.   Constants NOTIFICATION_RESIZED = 40
 Sent when the node changes size. Use size to get the new size. NOTIFICATION_MOUSE_ENTER = 41
 Sent when the mouse cursor enters the control's (or any child control's) visible area, that is not occluded behind other Controls or Windows, provided its mouse_filter lets the event reach it and regardless if it's currently focused or not. Note: CanvasItem.z_index doesn't affect which Control receives the notification. See also NOTIFICATION_MOUSE_ENTER_SELF. NOTIFICATION_MOUSE_EXIT = 42
 Sent when the mouse cursor leaves the control's (and all child control's) visible area, that is not occluded behind other Controls or Windows, provided its mouse_filter lets the event reach it and regardless if it's currently focused or not. Note: CanvasItem.z_index doesn't affect which Control receives the notification. See also NOTIFICATION_MOUSE_EXIT_SELF. NOTIFICATION_MOUSE_ENTER_SELF = 60
 Sent when the mouse cursor enters the control's visible area, that is not occluded behind other Controls or Windows, provided its mouse_filter lets the event reach it and regardless if it's currently focused or not. Note: CanvasItem.z_index doesn't affect which Control receives the notification. See also NOTIFICATION_MOUSE_ENTER. NOTIFICATION_MOUSE_EXIT_SELF = 61
 Sent when the mouse cursor leaves the control's visible area, that is not occluded behind other Controls or Windows, provided its mouse_filter lets the event reach it and regardless if it's currently focused or not. Note: CanvasItem.z_index doesn't affect which Control receives the notification. See also NOTIFICATION_MOUSE_EXIT. NOTIFICATION_FOCUS_ENTER = 43
 Sent when the node grabs focus. NOTIFICATION_FOCUS_EXIT = 44
 Sent when the node loses focus. NOTIFICATION_THEME_CHANGED = 45
 Sent when the node needs to refresh its theme items. This happens in one of the following cases:  The theme property is changed on this node or any of its ancestors. The theme_type_variation property is changed on this node. One of the node's theme property overrides is changed. The node enters the scene tree.  Note: As an optimization, this notification won't be sent from changes that occur while this node is outside of the scene tree. Instead, all of the theme item updates can be applied at once when the node enters the scene tree. NOTIFICATION_SCROLL_BEGIN = 47
 Sent when this node is inside a ScrollContainer which has begun being scrolled when dragging the scrollable area with a touch event. This notification is not sent when scrolling by dragging the scrollbar, scrolling with the mouse wheel or scrolling with keyboard/gamepad events. Note: This signal is only emitted on Android or iOS, or on desktop/web platforms when ProjectSettings.input_devices/pointing/emulate_touch_from_mouse is enabled. NOTIFICATION_SCROLL_END = 48
 Sent when this node is inside a ScrollContainer which has stopped being scrolled when dragging the scrollable area with a touch event. This notification is not sent when scrolling by dragging the scrollbar, scrolling with the mouse wheel or scrolling with keyboard/gamepad events. Note: This signal is only emitted on Android or iOS, or on desktop/web platforms when ProjectSettings.input_devices/pointing/emulate_touch_from_mouse is enabled. NOTIFICATION_LAYOUT_DIRECTION_CHANGED = 49
 Sent when control layout direction is changed.   Property Descriptions 
float anchor_bottom = 0.0
  
float get_anchor ( Side side ) const
  Anchors the bottom edge of the node to the origin, the center, or the end of its parent control. It changes how the bottom offset updates when the node moves or changes size. You can use one of the Anchor constants for convenience. 
float anchor_left = 0.0
  
float get_anchor ( Side side ) const
  Anchors the left edge of the node to the origin, the center or the end of its parent control. It changes how the left offset updates when the node moves or changes size. You can use one of the Anchor constants for convenience. 
float anchor_right = 0.0
  
float get_anchor ( Side side ) const
  Anchors the right edge of the node to the origin, the center or the end of its parent control. It changes how the right offset updates when the node moves or changes size. You can use one of the Anchor constants for convenience. 
float anchor_top = 0.0
  
float get_anchor ( Side side ) const
  Anchors the top edge of the node to the origin, the center or the end of its parent control. It changes how the top offset updates when the node moves or changes size. You can use one of the Anchor constants for convenience. 
bool auto_translate = true
  void set_auto_translate ( bool value )
 
bool is_auto_translating ( )
  Toggles if any text should automatically change to its translated version depending on the current locale. Also decides if the node's strings should be parsed for POT generation. 
bool clip_contents = false
  void set_clip_contents ( bool value )
 
bool is_clipping_contents ( )
  Enables whether rendering of CanvasItem based children should be clipped to this control's rectangle. If true, parts of a child which would be visibly outside of this control's rectangle will not be rendered and won't receive input. 
Vector2 custom_minimum_size = Vector2(0, 0)
  void set_custom_minimum_size ( Vector2 value )
 
Vector2 get_custom_minimum_size ( )
  The minimum size of the node's bounding rectangle. If you set it to a value greater than (0, 0), the node's bounding rectangle will always have at least this size, even if its content is smaller. If it's set to (0, 0), the node sizes automatically to fit its content, be it a texture or child nodes. 
FocusMode focus_mode = 0
  void set_focus_mode ( FocusMode value )
 
FocusMode get_focus_mode ( )
  The focus access mode for the control (None, Click or All). Only one Control can be focused at the same time, and it will receive keyboard, gamepad, and mouse signals. 
NodePath focus_neighbor_bottom = NodePath("")
  void set_focus_neighbor ( Side side, NodePath neighbor )
 
NodePath get_focus_neighbor ( Side side ) const
  Tells Godot which node it should give focus to if the user presses the down arrow on the keyboard or down on a gamepad by default. You can change the key by editing the ProjectSettings.input/ui_down input action. The node must be a Control. If this property is not set, Godot will give focus to the closest Control to the bottom of this one. 
NodePath focus_neighbor_left = NodePath("")
  void set_focus_neighbor ( Side side, NodePath neighbor )
 
NodePath get_focus_neighbor ( Side side ) const
  Tells Godot which node it should give focus to if the user presses the left arrow on the keyboard or left on a gamepad by default. You can change the key by editing the ProjectSettings.input/ui_left input action. The node must be a Control. If this property is not set, Godot will give focus to the closest Control to the left of this one. 
NodePath focus_neighbor_right = NodePath("")
  void set_focus_neighbor ( Side side, NodePath neighbor )
 
NodePath get_focus_neighbor ( Side side ) const
  Tells Godot which node it should give focus to if the user presses the right arrow on the keyboard or right on a gamepad by default. You can change the key by editing the ProjectSettings.input/ui_right input action. The node must be a Control. If this property is not set, Godot will give focus to the closest Control to the right of this one. 
NodePath focus_neighbor_top = NodePath("")
  void set_focus_neighbor ( Side side, NodePath neighbor )
 
NodePath get_focus_neighbor ( Side side ) const
  Tells Godot which node it should give focus to if the user presses the top arrow on the keyboard or top on a gamepad by default. You can change the key by editing the ProjectSettings.input/ui_up input action. The node must be a Control. If this property is not set, Godot will give focus to the closest Control to the top of this one. 
NodePath focus_next = NodePath("")
  void set_focus_next ( NodePath value )
 
NodePath get_focus_next ( )
  Tells Godot which node it should give focus to if the user presses Tab on a keyboard by default. You can change the key by editing the ProjectSettings.input/ui_focus_next input action. If this property is not set, Godot will select a "best guess" based on surrounding nodes in the scene tree. 
NodePath focus_previous = NodePath("")
  void set_focus_previous ( NodePath value )
 
NodePath get_focus_previous ( )
  Tells Godot which node it should give focus to if the user presses Shift + Tab on a keyboard by default. You can change the key by editing the ProjectSettings.input/ui_focus_prev input action. If this property is not set, Godot will select a "best guess" based on surrounding nodes in the scene tree. 
Vector2 global_position  
Vector2 get_global_position ( )
  The node's global position, relative to the world (usually to the CanvasLayer). 
GrowDirection grow_horizontal = 1
  void set_h_grow_direction ( GrowDirection value )
 
GrowDirection get_h_grow_direction ( )
  Controls the direction on the horizontal axis in which the control should grow if its horizontal minimum size is changed to be greater than its current size, as the control always has to be at least the minimum size. 
GrowDirection grow_vertical = 1
  void set_v_grow_direction ( GrowDirection value )
 
GrowDirection get_v_grow_direction ( )
  Controls the direction on the vertical axis in which the control should grow if its vertical minimum size is changed to be greater than its current size, as the control always has to be at least the minimum size. 
LayoutDirection layout_direction = 0
  void set_layout_direction ( LayoutDirection value )
 
LayoutDirection get_layout_direction ( )
  Controls layout direction and text writing direction. Right-to-left layouts are necessary for certain languages (e.g. Arabic and Hebrew). 
bool localize_numeral_system = true
  void set_localize_numeral_system ( bool value )
 
bool is_localizing_numeral_system ( )
  If true, automatically converts code line numbers, list indices, SpinBox and ProgressBar values from the Western Arabic (0..9) to the numeral systems used in current locale. Note: Numbers within the text are not automatically converted, it can be done manually, using TextServer.format_number. 
CursorShape mouse_default_cursor_shape = 0
  void set_default_cursor_shape ( CursorShape value )
 
CursorShape get_default_cursor_shape ( )
  The default cursor shape for this control. Useful for Godot plugins and applications or games that use the system's mouse cursors. Note: On Linux, shapes may vary depending on the cursor theme of the system. 
MouseFilter mouse_filter = 0
  void set_mouse_filter ( MouseFilter value )
 
MouseFilter get_mouse_filter ( )
  Controls whether the control will be able to receive mouse button input events through _gui_input and how these events should be handled. Also controls whether the control can receive the mouse_entered, and mouse_exited signals. See the constants to learn what each does. 
bool mouse_force_pass_scroll_events = true
  void set_force_pass_scroll_events ( bool value )
 
bool is_force_pass_scroll_events ( )
  When enabled, scroll wheel events processed by _gui_input will be passed to the parent control even if mouse_filter is set to MOUSE_FILTER_STOP. As it defaults to true, this allows nested scrollable containers to work out of the box. You should disable it on the root of your UI if you do not want scroll events to go to the Node._unhandled_input processing. 
float offset_bottom = 0.0
  void set_offset ( Side side, float offset )
 
float get_offset ( Side offset ) const
  Distance between the node's bottom edge and its parent control, based on anchor_bottom. Offsets are often controlled by one or multiple parent Container nodes, so you should not modify them manually if your node is a direct child of a Container. Offsets update automatically when you move or resize the node. 
float offset_left = 0.0
  void set_offset ( Side side, float offset )
 
float get_offset ( Side offset ) const
  Distance between the node's left edge and its parent control, based on anchor_left. Offsets are often controlled by one or multiple parent Container nodes, so you should not modify them manually if your node is a direct child of a Container. Offsets update automatically when you move or resize the node. 
float offset_right = 0.0
  void set_offset ( Side side, float offset )
 
float get_offset ( Side offset ) const
  Distance between the node's right edge and its parent control, based on anchor_right. Offsets are often controlled by one or multiple parent Container nodes, so you should not modify them manually if your node is a direct child of a Container. Offsets update automatically when you move or resize the node. 
float offset_top = 0.0
  void set_offset ( Side side, float offset )
 
float get_offset ( Side offset ) const
  Distance between the node's top edge and its parent control, based on anchor_top. Offsets are often controlled by one or multiple parent Container nodes, so you should not modify them manually if your node is a direct child of a Container. Offsets update automatically when you move or resize the node. 
Vector2 pivot_offset = Vector2(0, 0)
  void set_pivot_offset ( Vector2 value )
 
Vector2 get_pivot_offset ( )
  By default, the node's pivot is its top-left corner. When you change its rotation or scale, it will rotate or scale around this pivot. Set this property to size / 2 to pivot around the Control's center. 
Vector2 position = Vector2(0, 0)
  
Vector2 get_position ( )
  The node's position, relative to its containing node. It corresponds to the rectangle's top-left corner. The property is not affected by pivot_offset. 
float rotation = 0.0
  void set_rotation ( float value )
 
float get_rotation ( )
  The node's rotation around its pivot, in radians. See pivot_offset to change the pivot's position. Note: This property is edited in the inspector in degrees. If you want to use degrees in a script, use rotation_degrees. 
float rotation_degrees  void set_rotation_degrees ( float value )
 
float get_rotation_degrees ( )
  Helper property to access rotation in degrees instead of radians. 
Vector2 scale = Vector2(1, 1)
  void set_scale ( Vector2 value )
 
Vector2 get_scale ( )
  The node's scale, relative to its size. Change this property to scale the node around its pivot_offset. The Control's tooltip_text will also scale according to this value. Note: This property is mainly intended to be used for animation purposes. To support multiple resolutions in your project, use an appropriate viewport stretch mode as described in the documentation instead of scaling Controls individually. Note: FontFile.oversampling does not take Control scale into account. This means that scaling up/down will cause bitmap fonts and rasterized (non-MSDF) dynamic fonts to appear blurry or pixelated. To ensure text remains crisp regardless of scale, you can enable MSDF font rendering by enabling ProjectSettings.gui/theme/default_font_multichannel_signed_distance_field (applies to the default project font only), or enabling Multichannel Signed Distance Field in the import options of a DynamicFont for custom fonts. On system fonts, SystemFont.multichannel_signed_distance_field can be enabled in the inspector. Note: If the Control node is a child of a Container node, the scale will be reset to Vector2(1, 1) when the scene is instantiated. To set the Control's scale when it's instantiated, wait for one frame using await get_tree().process_frame then set its scale property. 
Node shortcut_context  void set_shortcut_context ( Node value )
 
Node get_shortcut_context ( )
  The Node which must be a parent of the focused Control for the shortcut to be activated. If null, the shortcut can be activated when any control is focused (a global shortcut). This allows shortcuts to be accepted only when the user has a certain area of the GUI focused. 
Vector2 size = Vector2(0, 0)
  
Vector2 get_size ( )
  The size of the node's bounding rectangle, in the node's coordinate system. Container nodes update this property automatically. 
BitField<SizeFlags> size_flags_horizontal = 1
  void set_h_size_flags ( BitField<SizeFlags> value )
 
BitField<SizeFlags> get_h_size_flags ( )
  Tells the parent Container nodes how they should resize and place the node on the X axis. Use a combination of the SizeFlags constants to change the flags. See the constants to learn what each does. 
float size_flags_stretch_ratio = 1.0
  void set_stretch_ratio ( float value )
 
float get_stretch_ratio ( )
  If the node and at least one of its neighbors uses the SIZE_EXPAND size flag, the parent Container will let it take more or less space depending on this property. If this node has a stretch ratio of 2 and its neighbor a ratio of 1, this node will take two thirds of the available space. 
BitField<SizeFlags> size_flags_vertical = 1
  void set_v_size_flags ( BitField<SizeFlags> value )
 
BitField<SizeFlags> get_v_size_flags ( )
  Tells the parent Container nodes how they should resize and place the node on the Y axis. Use a combination of the SizeFlags constants to change the flags. See the constants to learn what each does. 
Theme theme  void set_theme ( Theme value )
 
Theme get_theme ( )
  The Theme resource this node and all its Control and Window children use. If a child node has its own Theme resource set, theme items are merged with child's definitions having higher priority. Note: Window styles will have no effect unless the window is embedded. 
StringName theme_type_variation = &""
  void set_theme_type_variation ( StringName value )
 
StringName get_theme_type_variation ( )
  The name of a theme type variation used by this Control to look up its own theme items. When empty, the class name of the node is used (e.g. Button for the Button control), as well as the class names of all parent classes (in order of inheritance). When set, this property gives the highest priority to the type of the specified name. This type can in turn extend another type, forming a dependency chain. See Theme.set_type_variation. If the theme item cannot be found using this type or its base types, lookup falls back on the class names. Note: To look up Control's own items use various get_theme_* methods without specifying theme_type. Note: Theme items are looked for in the tree order, from branch to root, where each Control node is checked for its theme property. The earliest match against any type/class name is returned. The project-level Theme and the default Theme are checked last. 
String tooltip_text = ""
  void set_tooltip_text ( String value )
 
String get_tooltip_text ( )
  The default tooltip text. The tooltip appears when the user's mouse cursor stays idle over this control for a few moments, provided that the mouse_filter property is not MOUSE_FILTER_IGNORE. The time required for the tooltip to appear can be changed with the ProjectSettings.gui/timers/tooltip_delay_sec option. See also get_tooltip. The tooltip popup will use either a default implementation, or a custom one that you can provide by overriding _make_custom_tooltip. The default tooltip includes a PopupPanel and Label whose theme properties can be customized using Theme methods with the "TooltipPanel" and "TooltipLabel" respectively. For example:  GDScriptvar style_box = StyleBoxFlat.new()
style_box.set_bg_color(Color(1, 1, 0))
style_box.set_border_width_all(2)
# We assume here that the `theme` property has been assigned a custom Theme beforehand.
theme.set_stylebox("panel", "TooltipPanel", style_box)
theme.set_color("font_color", "TooltipLabel", Color(0, 1, 1))
 C#var styleBox = new StyleBoxFlat();
styleBox.SetBgColor(new Color(1, 1, 0));
styleBox.SetBorderWidthAll(2);
// We assume here that the `Theme` property has been assigned a custom Theme beforehand.
Theme.SetStyleBox("panel", "TooltipPanel", styleBox);
Theme.SetColor("font_color", "TooltipLabel", new Color(0, 1, 1));
    Method Descriptions 
bool _can_drop_data ( Vector2 at_position, Variant data ) virtual const
 Godot calls this method to test if data from a control's _get_drag_data can be dropped at at_position. at_position is local to this control. This method should only be used to test the data. Process the data in _drop_data.  GDScriptfunc _can_drop_data(position, data):
    # Check position if it is relevant to you
    # Otherwise, just check data
    return typeof(data) == TYPE_DICTIONARY and data.has("expected")
 C#public override bool _CanDropData(Vector2 atPosition, Variant data)
{
    // Check position if it is relevant to you
    // Otherwise, just check data
    return data.VariantType == Variant.Type.Dictionary && data.AsGodotDictionary().ContainsKey("expected");
}
  void _drop_data ( Vector2 at_position, Variant data ) virtual
 Godot calls this method to pass you the data from a control's _get_drag_data result. Godot first calls _can_drop_data to test if data is allowed to drop at at_position where at_position is local to this control.  GDScriptfunc _can_drop_data(position, data):
    return typeof(data) == TYPE_DICTIONARY and data.has("color")
func _drop_data(position, data):
    var color = data["color"]
 C#public override bool _CanDropData(Vector2 atPosition, Variant data)
{
    return data.VariantType == Variant.Type.Dictionary && dict.AsGodotDictionary().ContainsKey("color");
}
public override void _DropData(Vector2 atPosition, Variant data)
{
    Color color = data.AsGodotDictionary()["color"].AsColor();
}
  
Variant _get_drag_data ( Vector2 at_position ) virtual
 Godot calls this method to get data that can be dragged and dropped onto controls that expect drop data. Returns null if there is no data to drag. Controls that want to receive drop data should implement _can_drop_data and _drop_data. at_position is local to this control. Drag may be forced with force_drag. A preview that will follow the mouse that should represent the data can be set with set_drag_preview. A good time to set the preview is in this method.  GDScriptfunc _get_drag_data(position):
    var mydata = make_data() # This is your custom method generating the drag data.
    set_drag_preview(make_preview(mydata)) # This is your custom method generating the preview of the drag data.
    return mydata
 C#public override Variant _GetDragData(Vector2 atPosition)
{
    var myData = MakeData(); // This is your custom method generating the drag data.
    SetDragPreview(MakePreview(myData)); // This is your custom method generating the preview of the drag data.
    return myData;
}
  
Vector2 _get_minimum_size ( ) virtual const
 Virtual method to be implemented by the user. Returns the minimum size for this control. Alternative to custom_minimum_size for controlling minimum size via code. The actual minimum size will be the max value of these two (in each axis separately). If not overridden, defaults to Vector2.ZERO. Note: This method will not be called when the script is attached to a Control node that already overrides its minimum size (e.g. Label, Button, PanelContainer etc.). It can only be used with most basic GUI nodes, like Control, Container, Panel etc. 
String _get_tooltip ( Vector2 at_position ) virtual const
 Virtual method to be implemented by the user. Returns the tooltip text for the position at_position in control's local coordinates, which will typically appear when the cursor is resting over this control. See get_tooltip. Note: If this method returns an empty String, no tooltip is displayed. void _gui_input ( InputEvent event ) virtual
 Virtual method to be implemented by the user. Use this method to process and accept inputs on UI elements. See accept_event. Example usage for clicking a control:  GDScriptfunc _gui_input(event):
    if event is InputEventMouseButton:
        if event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
            print("I've been clicked D:")
 C#public override void _GuiInput(InputEvent @event)
{
    if (@event is InputEventMouseButton mb)
    {
        if (mb.ButtonIndex == MouseButton.Left && mb.Pressed)
        {
            GD.Print("I've been clicked D:");
        }
    }
}
  The event won't trigger if: * clicking outside the control (see _has_point); * control has mouse_filter set to MOUSE_FILTER_IGNORE; * control is obstructed by another Control on top of it, which doesn't have mouse_filter set to MOUSE_FILTER_IGNORE; * control's parent has mouse_filter set to MOUSE_FILTER_STOP or has accepted the event; * it happens outside the parent's rectangle and the parent has either clip_contents enabled. Note: Event position is relative to the control origin. 
bool _has_point ( Vector2 point ) virtual const
 Virtual method to be implemented by the user. Returns whether the given point is inside this control. If not overridden, default behavior is checking if the point is within control's Rect. Note: If you want to check if a point is inside the control, you can use Rect2(Vector2.ZERO, size).has_point(point). 
Object _make_custom_tooltip ( String for_text ) virtual const
 Virtual method to be implemented by the user. Returns a Control node that should be used as a tooltip instead of the default one. The for_text includes the contents of the tooltip_text property. The returned node must be of type Control or Control-derived. It can have child nodes of any type. It is freed when the tooltip disappears, so make sure you always provide a new instance (if you want to use a pre-existing node from your scene tree, you can duplicate it and pass the duplicated instance). When null or a non-Control node is returned, the default tooltip will be used instead. The returned node will be added as child to a PopupPanel, so you should only provide the contents of that panel. That PopupPanel can be themed using Theme.set_stylebox for the type "TooltipPanel" (see tooltip_text for an example). Note: The tooltip is shrunk to minimal size. If you want to ensure it's fully visible, you might want to set its custom_minimum_size to some non-zero value. Note: The node (and any relevant children) should be CanvasItem.visible when returned, otherwise, the viewport that instantiates it will not be able to calculate its minimum size reliably. Example of usage with a custom-constructed node:  GDScriptfunc _make_custom_tooltip(for_text):
    var label = Label.new()
    label.text = for_text
    return label
 C#public override Control _MakeCustomTooltip(string forText)
{
    var label = new Label();
    label.Text = forText;
    return label;
}
  Example of usage with a custom scene instance:  GDScriptfunc _make_custom_tooltip(for_text):
    var tooltip = preload("res://some_tooltip_scene.tscn").instantiate()
    tooltip.get_node("Label").text = for_text
    return tooltip
 C#public override Control _MakeCustomTooltip(string forText)
{
    Node tooltip = ResourceLoader.Load<PackedScene>("res://some_tooltip_scene.tscn").Instantiate();
    tooltip.GetNode<Label>("Label").Text = forText;
    return tooltip;
}
  
Vector3i[] _structured_text_parser ( Array args, String text ) virtual const
 User defined BiDi algorithm override function. Returns an Array of Vector3i text ranges and text base directions, in the left-to-right order. Ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately. void accept_event ( ) Marks an input event as handled. Once you accept an input event, it stops propagating, even to nodes listening to Node._unhandled_input or Node._unhandled_key_input. Note: This does not affect the methods in Input, only the way events are propagated. void add_theme_color_override ( StringName name, Color color ) Creates a local override for a theme Color with the specified name. Local overrides always take precedence when fetching theme items for the control. An override can be removed with remove_theme_color_override. See also get_theme_color. Example of overriding a label's color and resetting it later:  GDScript# Given the child Label node "MyLabel", override its font color with a custom value.
$MyLabel.add_theme_color_override("font_color", Color(1, 0.5, 0))
# Reset the font color of the child label.
$MyLabel.remove_theme_color_override("font_color")
# Alternatively it can be overridden with the default value from the Label type.
$MyLabel.add_theme_color_override("font_color", get_theme_color("font_color", "Label"))
 C#// Given the child Label node "MyLabel", override its font color with a custom value.
GetNode<Label>("MyLabel").AddThemeColorOverride("font_color", new Color(1, 0.5f, 0));
// Reset the font color of the child label.
GetNode<Label>("MyLabel").RemoveThemeColorOverride("font_color");
// Alternatively it can be overridden with the default value from the Label type.
GetNode<Label>("MyLabel").AddThemeColorOverride("font_color", GetThemeColor("font_color", "Label"));
  void add_theme_constant_override ( StringName name, int constant ) Creates a local override for a theme constant with the specified name. Local overrides always take precedence when fetching theme items for the control. An override can be removed with remove_theme_constant_override. See also get_theme_constant. void add_theme_font_override ( StringName name, Font font ) Creates a local override for a theme Font with the specified name. Local overrides always take precedence when fetching theme items for the control. An override can be removed with remove_theme_font_override. See also get_theme_font. void add_theme_font_size_override ( StringName name, int font_size ) Creates a local override for a theme font size with the specified name. Local overrides always take precedence when fetching theme items for the control. An override can be removed with remove_theme_font_size_override. See also get_theme_font_size. void add_theme_icon_override ( StringName name, Texture2D texture ) Creates a local override for a theme icon with the specified name. Local overrides always take precedence when fetching theme items for the control. An override can be removed with remove_theme_icon_override. See also get_theme_icon. void add_theme_stylebox_override ( StringName name, StyleBox stylebox ) Creates a local override for a theme StyleBox with the specified name. Local overrides always take precedence when fetching theme items for the control. An override can be removed with remove_theme_stylebox_override. See also get_theme_stylebox. Example of modifying a property in a StyleBox by duplicating it:  GDScript# The snippet below assumes the child node MyButton has a StyleBoxFlat assigned.
# Resources are shared across instances, so we need to duplicate it
# to avoid modifying the appearance of all other buttons.
var new_stylebox_normal = $MyButton.get_theme_stylebox("normal").duplicate()
new_stylebox_normal.border_width_top = 3
new_stylebox_normal.border_color = Color(0, 1, 0.5)
$MyButton.add_theme_stylebox_override("normal", new_stylebox_normal)
# Remove the stylebox override.
$MyButton.remove_theme_stylebox_override("normal")
 C#// The snippet below assumes the child node MyButton has a StyleBoxFlat assigned.
// Resources are shared across instances, so we need to duplicate it
// to avoid modifying the appearance of all other buttons.
StyleBoxFlat newStyleboxNormal = GetNode<Button>("MyButton").GetThemeStylebox("normal").Duplicate() as StyleBoxFlat;
newStyleboxNormal.BorderWidthTop = 3;
newStyleboxNormal.BorderColor = new Color(0, 1, 0.5f);
GetNode<Button>("MyButton").AddThemeStyleboxOverride("normal", newStyleboxNormal);
// Remove the stylebox override.
GetNode<Button>("MyButton").RemoveThemeStyleboxOverride("normal");
  void begin_bulk_theme_override ( ) Prevents *_theme_*_override methods from emitting NOTIFICATION_THEME_CHANGED until end_bulk_theme_override is called. void end_bulk_theme_override ( ) Ends a bulk theme override update. See begin_bulk_theme_override. 
Control find_next_valid_focus ( ) const
 Finds the next (below in the tree) Control that can receive the focus. 
Control find_prev_valid_focus ( ) const
 Finds the previous (above in the tree) Control that can receive the focus. 
Control find_valid_focus_neighbor ( Side side ) const
 Finds the next Control that can receive the focus on the specified Side. Note: This is different from get_focus_neighbor, which returns the path of a specified focus neighbor. void force_drag ( Variant data, Control preview ) Forces drag and bypasses _get_drag_data and set_drag_preview by passing data and preview. Drag will start even if the mouse is neither over nor pressed on this control. The methods _can_drop_data and _drop_data must be implemented on controls that want to receive drop data. 
float get_anchor ( Side side ) const
 Returns the anchor for the specified Side. A getter method for anchor_bottom, anchor_left, anchor_right and anchor_top. 
Vector2 get_begin ( ) const
 Returns offset_left and offset_top. See also position. 
Vector2 get_combined_minimum_size ( ) const
 Returns combined minimum size from custom_minimum_size and get_minimum_size. 
CursorShape get_cursor_shape ( Vector2 position=Vector2(0, 0) ) const
 Returns the mouse cursor shape the control displays on mouse hover. See CursorShape. 
Vector2 get_end ( ) const
 Returns offset_right and offset_bottom. 
NodePath get_focus_neighbor ( Side side ) const
 Returns the focus neighbor for the specified Side. A getter method for focus_neighbor_bottom, focus_neighbor_left, focus_neighbor_right and focus_neighbor_top. Note: To find the next Control on the specific Side, even if a neighbor is not assigned, use find_valid_focus_neighbor. 
Rect2 get_global_rect ( ) const
 Returns the position and size of the control relative to the containing canvas. See global_position and size. Note: If the node itself or any parent CanvasItem between the node and the canvas have a non default rotation or skew, the resulting size is likely not meaningful. Note: Setting Viewport.gui_snap_controls_to_pixels to true can lead to rounding inaccuracies between the displayed control and the returned Rect2. 
Vector2 get_minimum_size ( ) const
 Returns the minimum size for this control. See custom_minimum_size. 
float get_offset ( Side offset ) const
 Returns the offset for the specified Side. A getter method for offset_bottom, offset_left, offset_right and offset_top. 
Vector2 get_parent_area_size ( ) const
 Returns the width/height occupied in the parent control. 
Control get_parent_control ( ) const
 Returns the parent control node. 
Rect2 get_rect ( ) const
 Returns the position and size of the control in the coordinate system of the containing node. See position, scale and size. Note: If rotation is not the default rotation, the resulting size is not meaningful. Note: Setting Viewport.gui_snap_controls_to_pixels to true can lead to rounding inaccuracies between the displayed control and the returned Rect2. 
Vector2 get_screen_position ( ) const
 Returns the position of this Control in global screen coordinates (i.e. taking window position into account). Mostly useful for editor plugins. Equals to global_position if the window is embedded (see Viewport.gui_embed_subwindows). Example usage for showing a popup: popup_menu.position = get_screen_position() + get_local_mouse_position()
popup_menu.reset_size()
popup_menu.popup()
 
Color get_theme_color ( StringName name, StringName theme_type="" ) const
 Returns a Color from the first matching Theme in the tree if that Theme has a color item with the specified name and theme_type. If theme_type is omitted the class name of the current control is used as the type, or theme_type_variation if it is defined. If the type is a class name its parent classes are also checked, in order of inheritance. If the type is a variation its base types are checked, in order of dependency, then the control's class name and its parent classes are checked. For the current control its local overrides are considered first (see add_theme_color_override), then its assigned theme. After the current control, each parent control and its assigned theme are considered; controls without a theme assigned are skipped. If no matching Theme is found in the tree, the custom project Theme (see ProjectSettings.gui/theme/custom) and the default Theme are used (see ThemeDB).  GDScriptfunc _ready():
    # Get the font color defined for the current Control's class, if it exists.
    modulate = get_theme_color("font_color")
    # Get the font color defined for the Button class.
    modulate = get_theme_color("font_color", "Button")
 C#public override void _Ready()
{
    // Get the font color defined for the current Control's class, if it exists.
    Modulate = GetThemeColor("font_color");
    // Get the font color defined for the Button class.
    Modulate = GetThemeColor("font_color", "Button");
}
  
int get_theme_constant ( StringName name, StringName theme_type="" ) const
 Returns a constant from the first matching Theme in the tree if that Theme has a constant item with the specified name and theme_type. See get_theme_color for details. 
float get_theme_default_base_scale ( ) const
 Returns the default base scale value from the first matching Theme in the tree if that Theme has a valid Theme.default_base_scale value. See get_theme_color for details. 
Font get_theme_default_font ( ) const
 Returns the default font from the first matching Theme in the tree if that Theme has a valid Theme.default_font value. See get_theme_color for details. 
int get_theme_default_font_size ( ) const
 Returns the default font size value from the first matching Theme in the tree if that Theme has a valid Theme.default_font_size value. See get_theme_color for details. 
Font get_theme_font ( StringName name, StringName theme_type="" ) const
 Returns a Font from the first matching Theme in the tree if that Theme has a font item with the specified name and theme_type. See get_theme_color for details. 
int get_theme_font_size ( StringName name, StringName theme_type="" ) const
 Returns a font size from the first matching Theme in the tree if that Theme has a font size item with the specified name and theme_type. See get_theme_color for details. 
Texture2D get_theme_icon ( StringName name, StringName theme_type="" ) const
 Returns an icon from the first matching Theme in the tree if that Theme has an icon item with the specified name and theme_type. See get_theme_color for details. 
StyleBox get_theme_stylebox ( StringName name, StringName theme_type="" ) const
 Returns a StyleBox from the first matching Theme in the tree if that Theme has a stylebox item with the specified name and theme_type. See get_theme_color for details. 
String get_tooltip ( Vector2 at_position=Vector2(0, 0) ) const
 Returns the tooltip text for the position at_position in control's local coordinates, which will typically appear when the cursor is resting over this control. By default, it returns tooltip_text. This method can be overridden to customize its behavior. See _get_tooltip. Note: If this method returns an empty String, no tooltip is displayed. void grab_click_focus ( ) Creates an InputEventMouseButton that attempts to click the control. If the event is received, the control acquires focus.  GDScriptfunc _process(delta):
    grab_click_focus() # When clicking another Control node, this node will be clicked instead.
 C#public override void _Process(double delta)
{
    GrabClickFocus(); // When clicking another Control node, this node will be clicked instead.
}
  void grab_focus ( ) Steal the focus from another control and become the focused control (see focus_mode). Note: Using this method together with Callable.call_deferred makes it more reliable, especially when called inside Node._ready. 
bool has_focus ( ) const
 Returns true if this is the current focused control. See focus_mode. 
bool has_theme_color ( StringName name, StringName theme_type="" ) const
 Returns true if there is a matching Theme in the tree that has a color item with the specified name and theme_type. See get_theme_color for details. 
bool has_theme_color_override ( StringName name ) const
 Returns true if there is a local override for a theme Color with the specified name in this Control node. See add_theme_color_override. 
bool has_theme_constant ( StringName name, StringName theme_type="" ) const
 Returns true if there is a matching Theme in the tree that has a constant item with the specified name and theme_type. See get_theme_color for details. 
bool has_theme_constant_override ( StringName name ) const
 Returns true if there is a local override for a theme constant with the specified name in this Control node. See add_theme_constant_override. 
bool has_theme_font ( StringName name, StringName theme_type="" ) const
 Returns true if there is a matching Theme in the tree that has a font item with the specified name and theme_type. See get_theme_color for details. 
bool has_theme_font_override ( StringName name ) const
 Returns true if there is a local override for a theme Font with the specified name in this Control node. See add_theme_font_override. 
bool has_theme_font_size ( StringName name, StringName theme_type="" ) const
 Returns true if there is a matching Theme in the tree that has a font size item with the specified name and theme_type. See get_theme_color for details. 
bool has_theme_font_size_override ( StringName name ) const
 Returns true if there is a local override for a theme font size with the specified name in this Control node. See add_theme_font_size_override. 
bool has_theme_icon ( StringName name, StringName theme_type="" ) const
 Returns true if there is a matching Theme in the tree that has an icon item with the specified name and theme_type. See get_theme_color for details. 
bool has_theme_icon_override ( StringName name ) const
 Returns true if there is a local override for a theme icon with the specified name in this Control node. See add_theme_icon_override. 
bool has_theme_stylebox ( StringName name, StringName theme_type="" ) const
 Returns true if there is a matching Theme in the tree that has a stylebox item with the specified name and theme_type. See get_theme_color for details. 
bool has_theme_stylebox_override ( StringName name ) const
 Returns true if there is a local override for a theme StyleBox with the specified name in this Control node. See add_theme_stylebox_override. 
bool is_drag_successful ( ) const
 Returns true if a drag operation is successful. Alternative to Viewport.gui_is_drag_successful. Best used with Node.NOTIFICATION_DRAG_END. 
bool is_layout_rtl ( ) const
 Returns true if layout is right-to-left. void release_focus ( ) Give up the focus. No other control will be able to receive input. void remove_theme_color_override ( StringName name ) Removes a local override for a theme Color with the specified name previously added by add_theme_color_override or via the Inspector dock. void remove_theme_constant_override ( StringName name ) Removes a local override for a theme constant with the specified name previously added by add_theme_constant_override or via the Inspector dock. void remove_theme_font_override ( StringName name ) Removes a local override for a theme Font with the specified name previously added by add_theme_font_override or via the Inspector dock. void remove_theme_font_size_override ( StringName name ) Removes a local override for a theme font size with the specified name previously added by add_theme_font_size_override or via the Inspector dock. void remove_theme_icon_override ( StringName name ) Removes a local override for a theme icon with the specified name previously added by add_theme_icon_override or via the Inspector dock. void remove_theme_stylebox_override ( StringName name ) Removes a local override for a theme StyleBox with the specified name previously added by add_theme_stylebox_override or via the Inspector dock. void reset_size ( ) Resets the size to get_combined_minimum_size. This is equivalent to calling set_size(Vector2()) (or any size below the minimum). void set_anchor ( Side side, float anchor, bool keep_offset=false, bool push_opposite_anchor=true ) Sets the anchor for the specified Side to anchor. A setter method for anchor_bottom, anchor_left, anchor_right and anchor_top. If keep_offset is true, offsets aren't updated after this operation. If push_opposite_anchor is true and the opposite anchor overlaps this anchor, the opposite one will have its value overridden. For example, when setting left anchor to 1 and the right anchor has value of 0.5, the right anchor will also get value of 1. If push_opposite_anchor was false, the left anchor would get value 0.5. void set_anchor_and_offset ( Side side, float anchor, float offset, bool push_opposite_anchor=false ) Works the same as set_anchor, but instead of keep_offset argument and automatic update of offset, it allows to set the offset yourself (see set_offset). void set_anchors_and_offsets_preset ( LayoutPreset preset, LayoutPresetMode resize_mode=0, int margin=0 ) Sets both anchor preset and offset preset. See set_anchors_preset and set_offsets_preset. void set_anchors_preset ( LayoutPreset preset, bool keep_offsets=false ) Sets the anchors to a preset from LayoutPreset enum. This is the code equivalent to using the Layout menu in the 2D editor. If keep_offsets is true, control's position will also be updated. void set_begin ( Vector2 position ) Sets offset_left and offset_top at the same time. Equivalent of changing position. void set_drag_forwarding ( Callable drag_func, Callable can_drop_func, Callable drop_func ) Forwards the handling of this control's _get_drag_data, _can_drop_data and _drop_data virtual functions to delegate callables. For each argument, if not empty, the delegate callable is used, otherwise the local (virtual) function is used. The function format for each callable should be exactly the same as the virtual functions described above. void set_drag_preview ( Control control ) Shows the given control at the mouse pointer. A good time to call this method is in _get_drag_data. The control must not be in the scene tree. You should not free the control, and you should not keep a reference to the control beyond the duration of the drag. It will be deleted automatically after the drag has ended.  GDScript@export var color = Color(1, 0, 0, 1)
func _get_drag_data(position):
    # Use a control that is not in the tree
    var cpb = ColorPickerButton.new()
    cpb.color = color
    cpb.size = Vector2(50, 50)
    set_drag_preview(cpb)
    return color
 C#[Export]
private Color _color = new Color(1, 0, 0, 1);
public override Variant _GetDragData(Vector2 atPosition)
{
    // Use a control that is not in the tree
    var cpb = new ColorPickerButton();
    cpb.Color = _color;
    cpb.Size = new Vector2(50, 50);
    SetDragPreview(cpb);
    return _color;
}
  void set_end ( Vector2 position ) Sets offset_right and offset_bottom at the same time. void set_focus_neighbor ( Side side, NodePath neighbor ) Sets the focus neighbor for the specified Side to the Control at neighbor node path. A setter method for focus_neighbor_bottom, focus_neighbor_left, focus_neighbor_right and focus_neighbor_top. void set_global_position ( Vector2 position, bool keep_offsets=false ) Sets the global_position to given position. If keep_offsets is true, control's anchors will be updated instead of offsets. void set_offset ( Side side, float offset ) Sets the offset for the specified Side to offset. A setter method for offset_bottom, offset_left, offset_right and offset_top. void set_offsets_preset ( LayoutPreset preset, LayoutPresetMode resize_mode=0, int margin=0 ) Sets the offsets to a preset from LayoutPreset enum. This is the code equivalent to using the Layout menu in the 2D editor. Use parameter resize_mode with constants from LayoutPresetMode to better determine the resulting size of the Control. Constant size will be ignored if used with presets that change size, e.g. PRESET_LEFT_WIDE. Use parameter margin to determine the gap between the Control and the edges. void set_position ( Vector2 position, bool keep_offsets=false ) Sets the position to given position. If keep_offsets is true, control's anchors will be updated instead of offsets. void set_size ( Vector2 size, bool keep_offsets=false ) Sets the size (see size). If keep_offsets is true, control's anchors will be updated instead of offsets. void update_minimum_size ( ) Invalidates the size cache in this node and in parent nodes up to top level. Intended to be used with get_minimum_size when the return value is changed. Setting custom_minimum_size directly calls this method automatically. void warp_mouse ( Vector2 position ) Moves the mouse cursor to position, relative to position of this Control. Note: warp_mouse is only supported on Windows, macOS and Linux. It has no effect on Android, iOS and Web.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_control.html


classes/class_visualshadernode
-----------------------------------------------------------
VisualShaderNode Inherits: Resource < RefCounted < Object Inherited By: VisualShaderNodeBillboard, VisualShaderNodeClamp, VisualShaderNodeColorFunc, VisualShaderNodeColorOp, VisualShaderNodeCompare, VisualShaderNodeConstant, VisualShaderNodeCubemap, VisualShaderNodeCustom, VisualShaderNodeDerivativeFunc, VisualShaderNodeDeterminant, VisualShaderNodeDistanceFade, VisualShaderNodeDotProduct, VisualShaderNodeFloatFunc, VisualShaderNodeFloatOp, VisualShaderNodeFresnel, VisualShaderNodeIf, VisualShaderNodeInput, VisualShaderNodeIntFunc, VisualShaderNodeIntOp, VisualShaderNodeIs, VisualShaderNodeLinearSceneDepth, VisualShaderNodeMix, VisualShaderNodeMultiplyAdd, VisualShaderNodeOuterProduct, VisualShaderNodeOutput, VisualShaderNodeParameter, VisualShaderNodeParameterRef, VisualShaderNodeParticleAccelerator, VisualShaderNodeParticleConeVelocity, VisualShaderNodeParticleEmit, VisualShaderNodeParticleEmitter, VisualShaderNodeParticleMultiplyByAxisAngle, VisualShaderNodeParticleRandomness, VisualShaderNodeProximityFade, VisualShaderNodeRandomRange, VisualShaderNodeRemap, VisualShaderNodeResizableBase, VisualShaderNodeRotationByAxis, VisualShaderNodeSample3D, VisualShaderNodeScreenNormalWorldSpace, VisualShaderNodeScreenUVToSDF, VisualShaderNodeSDFRaymarch, VisualShaderNodeSDFToScreenUV, VisualShaderNodeSmoothStep, VisualShaderNodeStep, VisualShaderNodeSwitch, VisualShaderNodeTexture, VisualShaderNodeTextureSDF, VisualShaderNodeTextureSDFNormal, VisualShaderNodeTransformCompose, VisualShaderNodeTransformDecompose, VisualShaderNodeTransformFunc, VisualShaderNodeTransformOp, VisualShaderNodeTransformVecMult, VisualShaderNodeUIntFunc, VisualShaderNodeUIntOp, VisualShaderNodeUVFunc, VisualShaderNodeUVPolarCoord, VisualShaderNodeVarying, VisualShaderNodeVectorBase, VisualShaderNodeWorldPositionFromDepth Base class for VisualShader nodes. Not related to scene nodes.  Description Visual shader graphs consist of various nodes. Each node in the graph is a separate object and they are represented as a rectangular boxes with title and a set of properties. Each node also has connection ports that allow to connect it to another nodes and control the flow of the shader.   Tutorials  Using VisualShaders    Properties  
int output_port_for_preview -1     Methods  
void clear_default_input_values ( )  
int get_default_input_port ( PortType type ) const  
Array get_default_input_values ( ) const  
Variant get_input_port_default_value ( int port ) const  
void remove_input_port_default_value ( int port )  
void set_default_input_values ( Array values )  
void set_input_port_default_value ( int port, Variant value, Variant prev_value=null )     Enumerations enum PortType: 
PortType PORT_TYPE_SCALAR = 0
 Floating-point scalar. Translated to float type in shader code. 
PortType PORT_TYPE_SCALAR_INT = 1
 Integer scalar. Translated to int type in shader code. 
PortType PORT_TYPE_SCALAR_UINT = 2
 Unsigned integer scalar. Translated to uint type in shader code. 
PortType PORT_TYPE_VECTOR_2D = 3
 2D vector of floating-point values. Translated to vec2 type in shader code. 
PortType PORT_TYPE_VECTOR_3D = 4
 3D vector of floating-point values. Translated to vec3 type in shader code. 
PortType PORT_TYPE_VECTOR_4D = 5
 4D vector of floating-point values. Translated to vec4 type in shader code. 
PortType PORT_TYPE_BOOLEAN = 6
 Boolean type. Translated to bool type in shader code. 
PortType PORT_TYPE_TRANSFORM = 7
 Transform type. Translated to mat4 type in shader code. 
PortType PORT_TYPE_SAMPLER = 8
 Sampler type. Translated to reference of sampler uniform in shader code. Can only be used for input ports in non-uniform nodes. 
PortType PORT_TYPE_MAX = 9
 Represents the size of the PortType enum.   Property Descriptions 
int output_port_for_preview = -1
  void set_output_port_for_preview ( int value )
 
int get_output_port_for_preview ( )
  Sets the output port index which will be showed for preview. If set to -1 no port will be open for preview.   Method Descriptions void clear_default_input_values ( ) Clears the default input ports value. 
int get_default_input_port ( PortType type ) const
 Returns the input port which should be connected by default when this node is created as a result of dragging a connection from an existing node to the empty space on the graph. 
Array get_default_input_values ( ) const
 Returns an Array containing default values for all of the input ports of the node in the form [index0, value0, index1, value1, ...]. 
Variant get_input_port_default_value ( int port ) const
 Returns the default value of the input port. void remove_input_port_default_value ( int port ) Removes the default value of the input port. void set_default_input_values ( Array values ) Sets the default input ports values using an Array of the form [index0, value0, index1, value1, ...]. For example: [0, Vector3(0, 0, 0), 1, Vector3(0, 0, 0)]. void set_input_port_default_value ( int port, Variant value, Variant prev_value=null ) Sets the default value for the selected input port.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualshadernode.html


classes/class_graphnode
-----------------------------------------------------------
GraphNode Inherits: GraphElement < Container < Control < CanvasItem < Node < Object A container with connection ports, representing a node in a GraphEdit.  Description GraphNode allows to create nodes for a GraphEdit graph with customizable content based on its child controls. GraphNode is derived from Container and it is responsible for placing its children on screen. This works similar to VBoxContainer. Children, in turn, provide GraphNode with so-called slots, each of which can have a connection port on either side. Each GraphNode slot is defined by its index and can provide the node with up to two ports: one on the left, and one on the right. By convention the left port is also referred to as the input port and the right port is referred to as the output port. Each port can be enabled and configured individually, using different type and color. The type is an arbitrary value that you can define using your own considerations. The parent GraphEdit will receive this information on each connect and disconnect request. Slots can be configured in the Inspector dock once you add at least one child Control. The properties are grouped by each slot's index in the "Slot" section. Note: While GraphNode is set up using slots and slot indices, connections are made between the ports which are enabled. Because of that GraphEdit uses the port's index and not the slot's index. You can use get_input_port_slot and get_output_port_slot to get the slot index from the port index.   Properties  
MouseFilter mouse_filter 0 (overrides Control)  
String title ""     Methods  
void _draw_port ( int slot_index, Vector2i position, bool left, Color color ) virtual  
void clear_all_slots ( )  
void clear_slot ( int slot_index )  
Color get_input_port_color ( int port_idx )  
int get_input_port_count ( )  
Vector2 get_input_port_position ( int port_idx )  
int get_input_port_slot ( int port_idx )  
int get_input_port_type ( int port_idx )  
Color get_output_port_color ( int port_idx )  
int get_output_port_count ( )  
Vector2 get_output_port_position ( int port_idx )  
int get_output_port_slot ( int port_idx )  
int get_output_port_type ( int port_idx )  
Color get_slot_color_left ( int slot_index ) const  
Color get_slot_color_right ( int slot_index ) const  
int get_slot_type_left ( int slot_index ) const  
int get_slot_type_right ( int slot_index ) const  
HBoxContainer get_titlebar_hbox ( )  
bool is_slot_draw_stylebox ( int slot_index ) const  
bool is_slot_enabled_left ( int slot_index ) const  
bool is_slot_enabled_right ( int slot_index ) const  
void set_slot ( int slot_index, bool enable_left_port, int type_left, Color color_left, bool enable_right_port, int type_right, Color color_right, Texture2D custom_icon_left=null, Texture2D custom_icon_right=null, bool draw_stylebox=true )  
void set_slot_color_left ( int slot_index, Color color )  
void set_slot_color_right ( int slot_index, Color color )  
void set_slot_draw_stylebox ( int slot_index, bool enable )  
void set_slot_enabled_left ( int slot_index, bool enable )  
void set_slot_enabled_right ( int slot_index, bool enable )  
void set_slot_type_left ( int slot_index, int type )  
void set_slot_type_right ( int slot_index, int type )     Theme Properties  
Color resizer_color Color(0.875, 0.875, 0.875, 1)  
int port_h_offset 0  
int separation 2  
Texture2D port   
StyleBox panel   
StyleBox panel_selected   
StyleBox slot   
StyleBox titlebar   
StyleBox titlebar_selected      Signals slot_updated ( int slot_index ) Emitted when any GraphNode's slot is updated.   Property Descriptions 
String title = ""
  void set_title ( String value )
 
String get_title ( )
  The text displayed in the GraphNode's title bar.   Method Descriptions void _draw_port ( int slot_index, Vector2i position, bool left, Color color ) virtual
  There is currently no description for this method. Please help us by contributing one!  void clear_all_slots ( ) Disables all slots of the GraphNode. This will remove all input/output ports from the GraphNode. void clear_slot ( int slot_index ) Disables the slot with the given slot_index. This will remove the corresponding input and output port from the GraphNode. 
Color get_input_port_color ( int port_idx ) Returns the Color of the input port with the given port_idx. 
int get_input_port_count ( ) Returns the number of slots with an enabled input port. 
Vector2 get_input_port_position ( int port_idx ) Returns the position of the input port with the given port_idx. 
int get_input_port_slot ( int port_idx ) Returns the corresponding slot index of the input port with the given port_idx. 
int get_input_port_type ( int port_idx ) Returns the type of the input port with the given port_idx. 
Color get_output_port_color ( int port_idx ) Returns the Color of the output port with the given port_idx. 
int get_output_port_count ( ) Returns the number of slots with an enabled output port. 
Vector2 get_output_port_position ( int port_idx ) Returns the position of the output port with the given port_idx. 
int get_output_port_slot ( int port_idx ) Returns the corresponding slot index of the output port with the given port_idx. 
int get_output_port_type ( int port_idx ) Returns the type of the output port with the given port_idx. 
Color get_slot_color_left ( int slot_index ) const
 Returns the left (input) Color of the slot with the given slot_index. 
Color get_slot_color_right ( int slot_index ) const
 Returns the right (output) Color of the slot with the given slot_index. 
int get_slot_type_left ( int slot_index ) const
 Returns the left (input) type of the slot with the given slot_index. 
int get_slot_type_right ( int slot_index ) const
 Returns the right (output) type of the slot with the given slot_index. 
HBoxContainer get_titlebar_hbox ( ) Returns the HBoxContainer used for the title bar, only containing a Label for displaying the title by default. This can be used to add custom controls to the title bar such as option or close buttons. 
bool is_slot_draw_stylebox ( int slot_index ) const
 Returns true if the background StyleBox of the slot with the given slot_index is drawn. 
bool is_slot_enabled_left ( int slot_index ) const
 Returns true if left (input) side of the slot with the given slot_index is enabled. 
bool is_slot_enabled_right ( int slot_index ) const
 Returns true if right (output) side of the slot with the given slot_index is enabled. void set_slot ( int slot_index, bool enable_left_port, int type_left, Color color_left, bool enable_right_port, int type_right, Color color_right, Texture2D custom_icon_left=null, Texture2D custom_icon_right=null, bool draw_stylebox=true ) Sets properties of the slot with the given slot_index. If enable_left_port/enable_right_port is true, a port will appear and the slot will be able to be connected from this side. With type_left/type_right an arbitrary type can be assigned to each port. Two ports can be connected if they share the same type, or if the connection between their types is allowed in the parent GraphEdit (see GraphEdit.add_valid_connection_type). Keep in mind that the GraphEdit has the final say in accepting the connection. Type compatibility simply allows the GraphEdit.connection_request signal to be emitted. Ports can be further customized using color_left/color_right and custom_icon_left/custom_icon_right. The color parameter adds a tint to the icon. The custom icon can be used to override the default port dot. Additionally, draw_stylebox can be used to enable or disable drawing of the background stylebox for each slot. See slot. Individual properties can also be set using one of the set_slot_* methods. Note: This method only sets properties of the slot. To create the slot itself, add a Control-derived child to the GraphNode. void set_slot_color_left ( int slot_index, Color color ) Sets the Color of the left (input) side of the slot with the given slot_index to color. void set_slot_color_right ( int slot_index, Color color ) Sets the Color of the right (output) side of the slot with the given slot_index to color. void set_slot_draw_stylebox ( int slot_index, bool enable ) Toggles the background StyleBox of the slot with the given slot_index. void set_slot_enabled_left ( int slot_index, bool enable ) Toggles the left (input) side of the slot with the given slot_index. If enable is true, a port will appear on the left side and the slot will be able to be connected from this side. void set_slot_enabled_right ( int slot_index, bool enable ) Toggles the right (output) side of the slot with the given slot_index. If enable is true, a port will appear on the right side and the slot will be able to be connected from this side. void set_slot_type_left ( int slot_index, int type ) Sets the left (input) type of the slot with the given slot_index to type. If the value is negative, all connections will be disallowed to be created via user inputs. void set_slot_type_right ( int slot_index, int type ) Sets the right (output) type of the slot with the given slot_index to type. If the value is negative, all connections will be disallowed to be created via user inputs.   Theme Property Descriptions 
Color resizer_color = Color(0.875, 0.875, 0.875, 1)
 The color modulation applied to the resizer icon. 
int port_h_offset = 0
 Horizontal offset for the ports. 
int separation = 2
 The vertical distance between ports. 
Texture2D port The icon used for representing ports. 
StyleBox panel The default background for the slot area of the GraphNode. 
StyleBox panel_selected The StyleBox used for the slot area when selected. 
StyleBox slot The StyleBox used for each slot of the GraphNode. 
StyleBox titlebar The StyleBox used for the title bar of the GraphNode. 
StyleBox titlebar_selected The StyleBox used for the title bar of the GraphNode when it is selected.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_graphnode.html


classes/class_skeletonprofile
-----------------------------------------------------------
SkeletonProfile Inherits: Resource < RefCounted < Object Inherited By: SkeletonProfileHumanoid Base class for a profile of a virtual skeleton used as a target for retargeting.  Description This resource is used in EditorScenePostImport. Some parameters are referring to bones in Skeleton3D, Skin, Animation, and some other nodes are rewritten based on the parameters of SkeletonProfile. Note: These parameters need to be set only when creating a custom profile. In SkeletonProfileHumanoid, they are defined internally as read-only values.   Tutorials  Retargeting 3D Skeletons    Properties  
int bone_size 0  
int group_size 0  
StringName root_bone &""  
StringName scale_base_bone &""     Methods  
int find_bone ( StringName bone_name ) const  
StringName get_bone_name ( int bone_idx ) const  
StringName get_bone_parent ( int bone_idx ) const  
StringName get_bone_tail ( int bone_idx ) const  
StringName get_group ( int bone_idx ) const  
StringName get_group_name ( int group_idx ) const  
Vector2 get_handle_offset ( int bone_idx ) const  
Transform3D get_reference_pose ( int bone_idx ) const  
TailDirection get_tail_direction ( int bone_idx ) const  
Texture2D get_texture ( int group_idx ) const  
void set_bone_name ( int bone_idx, StringName bone_name )  
void set_bone_parent ( int bone_idx, StringName bone_parent )  
void set_bone_tail ( int bone_idx, StringName bone_tail )  
void set_group ( int bone_idx, StringName group )  
void set_group_name ( int group_idx, StringName group_name )  
void set_handle_offset ( int bone_idx, Vector2 handle_offset )  
void set_reference_pose ( int bone_idx, Transform3D bone_name )  
void set_tail_direction ( int bone_idx, TailDirection tail_direction )  
void set_texture ( int group_idx, Texture2D texture )     Signals profile_updated ( ) This signal is emitted when change the value in profile. This is used to update key name in the BoneMap and to redraw the BoneMap editor. Note: This signal is not connected directly to editor to simplify the reference, instead it is passed on to editor through the BoneMap.   Enumerations enum TailDirection: 
TailDirection TAIL_DIRECTION_AVERAGE_CHILDREN = 0
 Direction to the average coordinates of bone children. 
TailDirection TAIL_DIRECTION_SPECIFIC_CHILD = 1
 Direction to the coordinates of specified bone child. 
TailDirection TAIL_DIRECTION_END = 2
 Direction is not calculated.   Property Descriptions 
int bone_size = 0
  void set_bone_size ( int value )
 
int get_bone_size ( )
  The amount of bones in retargeting section's BoneMap editor. For example, SkeletonProfileHumanoid has 56 bones. The size of elements in BoneMap updates when changing this property in it's assigned SkeletonProfile. 
int group_size = 0
  void set_group_size ( int value )
 
int get_group_size ( )
  The amount of groups of bones in retargeting section's BoneMap editor. For example, SkeletonProfileHumanoid has 4 groups. This property exists to separate the bone list into several sections in the editor. 
StringName root_bone = &""
  void set_root_bone ( StringName value )
 
StringName get_root_bone ( )
  A bone name that will be used as the root bone in AnimationTree. This should be the bone of the parent of hips that exists at the world origin. 
StringName scale_base_bone = &""
  void set_scale_base_bone ( StringName value )
 
StringName get_scale_base_bone ( )
  A bone name which will use model's height as the coefficient for normalization. For example, SkeletonProfileHumanoid defines it as Hips.   Method Descriptions 
int find_bone ( StringName bone_name ) const
 Returns the bone index that matches bone_name as its name. 
StringName get_bone_name ( int bone_idx ) const
 Returns the name of the bone at bone_idx that will be the key name in the BoneMap. In the retargeting process, the returned bone name is the bone name of the target skeleton. 
StringName get_bone_parent ( int bone_idx ) const
 Returns the name of the bone which is the parent to the bone at bone_idx. The result is empty if the bone has no parent. 
StringName get_bone_tail ( int bone_idx ) const
 Returns the name of the bone which is the tail of the bone at bone_idx. 
StringName get_group ( int bone_idx ) const
 Returns the group of the bone at bone_idx. 
StringName get_group_name ( int group_idx ) const
 Returns the name of the group at group_idx that will be the drawing group in the BoneMap editor. 
Vector2 get_handle_offset ( int bone_idx ) const
 Returns the offset of the bone at bone_idx that will be the button position in the BoneMap editor. This is the offset with origin at the top left corner of the square. 
Transform3D get_reference_pose ( int bone_idx ) const
 Returns the reference pose transform for bone bone_idx. 
TailDirection get_tail_direction ( int bone_idx ) const
 Returns the tail direction of the bone at bone_idx. 
Texture2D get_texture ( int group_idx ) const
 Returns the texture of the group at group_idx that will be the drawing group background image in the BoneMap editor. void set_bone_name ( int bone_idx, StringName bone_name ) Sets the name of the bone at bone_idx that will be the key name in the BoneMap. In the retargeting process, the setting bone name is the bone name of the target skeleton. void set_bone_parent ( int bone_idx, StringName bone_parent ) Sets the bone with name bone_parent as the parent of the bone at bone_idx. If an empty string is passed, then the bone has no parent. void set_bone_tail ( int bone_idx, StringName bone_tail ) Sets the bone with name bone_tail as the tail of the bone at bone_idx. void set_group ( int bone_idx, StringName group ) Sets the group of the bone at bone_idx. void set_group_name ( int group_idx, StringName group_name ) Sets the name of the group at group_idx that will be the drawing group in the BoneMap editor. void set_handle_offset ( int bone_idx, Vector2 handle_offset ) Sets the offset of the bone at bone_idx that will be the button position in the BoneMap editor. This is the offset with origin at the top left corner of the square. void set_reference_pose ( int bone_idx, Transform3D bone_name ) Sets the reference pose transform for bone bone_idx. void set_tail_direction ( int bone_idx, TailDirection tail_direction ) Sets the tail direction of the bone at bone_idx. Note: This only specifies the method of calculation. The actual coordinates required should be stored in an external skeleton, so the calculation itself needs to be done externally. void set_texture ( int group_idx, Texture2D texture ) Sets the texture of the group at group_idx that will be the drawing group background image in the BoneMap editor.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeletonprofile.html


classes/class_shapecast3d
-----------------------------------------------------------
ShapeCast3D Inherits: Node3D < Node < Object A 3D shape that sweeps a region of space to detect CollisionObject3Ds.  Description Shape casting allows to detect collision objects by sweeping its shape along the cast direction determined by target_position. This is similar to RayCast3D, but it allows for sweeping a region of space, rather than just a straight line. ShapeCast3D can detect multiple collision objects. It is useful for things like wide laser beams or snapping a simple shape to a floor. Immediate collision overlaps can be done with the target_position set to Vector3(0, 0, 0) and by calling force_shapecast_update within the same physics frame. This helps to overcome some limitations of Area3D when used as an instantaneous detection area, as collision information isn't immediately available to it. Note: Shape casting is more computationally expensive than ray casting.   Properties  
bool collide_with_areas false  
bool collide_with_bodies true  
int collision_mask 1  
Array collision_result []  
Color debug_shape_custom_color Color(0, 0, 0, 1)  
bool enabled true  
bool exclude_parent true  
float margin 0.0  
int max_results 32  
Shape3D shape   
Vector3 target_position Vector3(0, -1, 0)     Methods  
void add_exception ( CollisionObject3D node )  
void add_exception_rid ( RID rid )  
void clear_exceptions ( )  
void force_shapecast_update ( )  
float get_closest_collision_safe_fraction ( ) const  
float get_closest_collision_unsafe_fraction ( ) const  
Object get_collider ( int index ) const  
RID get_collider_rid ( int index ) const  
int get_collider_shape ( int index ) const  
int get_collision_count ( ) const  
bool get_collision_mask_value ( int layer_number ) const  
Vector3 get_collision_normal ( int index ) const  
Vector3 get_collision_point ( int index ) const  
bool is_colliding ( ) const  
void remove_exception ( CollisionObject3D node )  
void remove_exception_rid ( RID rid )  
void resource_changed ( Resource resource )  
void set_collision_mask_value ( int layer_number, bool value )     Property Descriptions 
bool collide_with_areas = false
  void set_collide_with_areas ( bool value )
 
bool is_collide_with_areas_enabled ( )
  If true, collisions with Area3Ds will be reported. 
bool collide_with_bodies = true
  void set_collide_with_bodies ( bool value )
 
bool is_collide_with_bodies_enabled ( )
  If true, collisions with PhysicsBody3Ds will be reported. 
int collision_mask = 1
  void set_collision_mask ( int value )
 
int get_collision_mask ( )
  The shape's collision mask. Only objects in at least one collision layer enabled in the mask will be detected. See Collision layers and masks in the documentation for more information. 
Array collision_result = []
 Returns the complete collision information from the collision sweep. The data returned is the same as in the PhysicsDirectSpaceState3D.get_rest_info method. 
Color debug_shape_custom_color = Color(0, 0, 0, 1)
  void set_debug_shape_custom_color ( Color value )
 
Color get_debug_shape_custom_color ( )
  The custom color to use to draw the shape in the editor and at run-time if Visible Collision Shapes is enabled in the Debug menu. This color will be highlighted at run-time if the ShapeCast3D is colliding with something. If set to Color(0.0, 0.0, 0.0) (by default), the color set in ProjectSettings.debug/shapes/collision/shape_color is used. 
bool enabled = true
  void set_enabled ( bool value )
 
bool is_enabled ( )
  If true, collisions will be reported. 
bool exclude_parent = true
  void set_exclude_parent_body ( bool value )
 
bool get_exclude_parent_body ( )
  If true, the parent node will be excluded from collision detection. 
float margin = 0.0
  void set_margin ( float value )
 
float get_margin ( )
  The collision margin for the shape. A larger margin helps detecting collisions more consistently, at the cost of precision. 
int max_results = 32
  void set_max_results ( int value )
 
int get_max_results ( )
  The number of intersections can be limited with this parameter, to reduce the processing time. 
Shape3D shape  void set_shape ( Shape3D value )
 
Shape3D get_shape ( )
  The Shape3D-derived shape to be used for collision queries. 
Vector3 target_position = Vector3(0, -1, 0)
  void set_target_position ( Vector3 value )
 
Vector3 get_target_position ( )
  The shape's destination point, relative to this node's position.   Method Descriptions void add_exception ( CollisionObject3D node ) Adds a collision exception so the shape does not report collisions with the specified CollisionObject3D node. void add_exception_rid ( RID rid ) Adds a collision exception so the shape does not report collisions with the specified RID. void clear_exceptions ( ) Removes all collision exceptions for this ShapeCast3D. void force_shapecast_update ( ) Updates the collision information for the shape immediately, without waiting for the next _physics_process call. Use this method, for example, when the shape or its parent has changed state. Note: enabled == true is not required for this to work. 
float get_closest_collision_safe_fraction ( ) const
 The fraction from the ShapeCast3D's origin to its target_position (between 0 and 1) of how far the shape can move without triggering a collision. 
float get_closest_collision_unsafe_fraction ( ) const
 The fraction from the ShapeCast3D's origin to its target_position (between 0 and 1) of how far the shape must move to trigger a collision. 
Object get_collider ( int index ) const
 Returns the collided Object of one of the multiple collisions at index, or null if no object is intersecting the shape (i.e. is_colliding returns false). 
RID get_collider_rid ( int index ) const
 Returns the RID of the collided object of one of the multiple collisions at index. 
int get_collider_shape ( int index ) const
 Returns the shape ID of the colliding shape of one of the multiple collisions at index, or 0 if no object is intersecting the shape (i.e. is_colliding returns false). 
int get_collision_count ( ) const
 The number of collisions detected at the point of impact. Use this to iterate over multiple collisions as provided by get_collider, get_collider_shape, get_collision_point, and get_collision_normal methods. 
bool get_collision_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_mask is enabled, given a layer_number between 1 and 32. 
Vector3 get_collision_normal ( int index ) const
 Returns the normal of one of the multiple collisions at index of the intersecting object. 
Vector3 get_collision_point ( int index ) const
 Returns the collision point of one of the multiple collisions at index where the shape intersects the colliding object. Note: this point is in the global coordinate system. 
bool is_colliding ( ) const
 Returns whether any object is intersecting with the shape's vector (considering the vector length). void remove_exception ( CollisionObject3D node ) Removes a collision exception so the shape does report collisions with the specified CollisionObject3D node. void remove_exception_rid ( RID rid ) Removes a collision exception so the shape does report collisions with the specified RID. void resource_changed ( Resource resource ) Obsoleted. Use Resource.changed instead. void set_collision_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_mask, given a layer_number between 1 and 32.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_shapecast3d.html


classes/class_directionallight3d
-----------------------------------------------------------
DirectionalLight3D Inherits: Light3D < VisualInstance3D < Node3D < Node < Object Directional light from a distance, as from the Sun.  Description A directional light is a type of Light3D node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene to model sunlight or moonlight. The worldspace location of the DirectionalLight3D transform (origin) is ignored. Only the basis is used to determine light direction.   Tutorials  3D lights and shadows Faking global illumination    Properties  
bool directional_shadow_blend_splits false  
float directional_shadow_fade_start 0.8  
float directional_shadow_max_distance 100.0  
ShadowMode directional_shadow_mode 2  
float directional_shadow_pancake_size 20.0  
float directional_shadow_split_1 0.1  
float directional_shadow_split_2 0.2  
float directional_shadow_split_3 0.5  
SkyMode sky_mode 0     Enumerations enum ShadowMode: 
ShadowMode SHADOW_ORTHOGONAL = 0
 Renders the entire scene's shadow map from an orthogonal point of view. This is the fastest directional shadow mode. May result in blurrier shadows on close objects. 
ShadowMode SHADOW_PARALLEL_2_SPLITS = 1
 Splits the view frustum in 2 areas, each with its own shadow map. This shadow mode is a compromise between SHADOW_ORTHOGONAL and SHADOW_PARALLEL_4_SPLITS in terms of performance. 
ShadowMode SHADOW_PARALLEL_4_SPLITS = 2
 Splits the view frustum in 4 areas, each with its own shadow map. This is the slowest directional shadow mode. enum SkyMode: 
SkyMode SKY_MODE_LIGHT_AND_SKY = 0
 Makes the light visible in both scene lighting and sky rendering. 
SkyMode SKY_MODE_LIGHT_ONLY = 1
 Makes the light visible in scene lighting only (including direct lighting and global illumination). When using this mode, the light will not be visible from sky shaders. 
SkyMode SKY_MODE_SKY_ONLY = 2
 Makes the light visible to sky shaders only. When using this mode the light will not cast light into the scene (either through direct lighting or through global illumination), but can be accessed through sky shaders. This can be useful, for example, when you want to control sky effects without illuminating the scene (during a night cycle, for example).   Property Descriptions 
bool directional_shadow_blend_splits = false
  void set_blend_splits ( bool value )
 
bool is_blend_splits_enabled ( )
  If true, shadow detail is sacrificed in exchange for smoother transitions between splits. Enabling shadow blend splitting also has a moderate performance cost. This is ignored when directional_shadow_mode is SHADOW_ORTHOGONAL. 
float directional_shadow_fade_start = 0.8
  void set_param ( float value )
 
float get_param ( )
  Proportion of directional_shadow_max_distance at which point the shadow starts to fade. At directional_shadow_max_distance, the shadow will disappear. The default value is a balance between smooth fading and distant shadow visibility. If the camera moves fast and the directional_shadow_max_distance is low, consider lowering directional_shadow_fade_start below 0.8 to make shadow transitions less noticeable. On the other hand, if you tuned directional_shadow_max_distance to cover the entire scene, you can set directional_shadow_fade_start to 1.0 to prevent the shadow from fading in the distance (it will suddenly cut off instead). 
float directional_shadow_max_distance = 100.0
  void set_param ( float value )
 
float get_param ( )
  The maximum distance for shadow splits. Increasing this value will make directional shadows visible from further away, at the cost of lower overall shadow detail and performance (since more objects need to be included in the directional shadow rendering). 
ShadowMode directional_shadow_mode = 2
  void set_shadow_mode ( ShadowMode value )
 
ShadowMode get_shadow_mode ( )
  The light's shadow rendering algorithm. See ShadowMode. 
float directional_shadow_pancake_size = 20.0
  void set_param ( float value )
 
float get_param ( )
  Sets the size of the directional shadow pancake. The pancake offsets the start of the shadow's camera frustum to provide a higher effective depth resolution for the shadow. However, a high pancake size can cause artifacts in the shadows of large objects that are close to the edge of the frustum. Reducing the pancake size can help. Setting the size to 0 turns off the pancaking effect. 
float directional_shadow_split_1 = 0.1
  void set_param ( float value )
 
float get_param ( )
  The distance from camera to shadow split 1. Relative to directional_shadow_max_distance. Only used when directional_shadow_mode is SHADOW_PARALLEL_2_SPLITS or SHADOW_PARALLEL_4_SPLITS. 
float directional_shadow_split_2 = 0.2
  void set_param ( float value )
 
float get_param ( )
  The distance from shadow split 1 to split 2. Relative to directional_shadow_max_distance. Only used when directional_shadow_mode is SHADOW_PARALLEL_4_SPLITS. 
float directional_shadow_split_3 = 0.5
  void set_param ( float value )
 
float get_param ( )
  The distance from shadow split 2 to split 3. Relative to directional_shadow_max_distance. Only used when directional_shadow_mode is SHADOW_PARALLEL_4_SPLITS. 
SkyMode sky_mode = 0
  void set_sky_mode ( SkyMode value )
 
SkyMode get_sky_mode ( )
  Set whether this DirectionalLight3D is visible in the sky, in the scene, or both in the sky and in the scene. See SkyMode for options.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_directionallight3d.html


classes/class_multimesh
-----------------------------------------------------------
MultiMesh Inherits: Resource < RefCounted < Object Provides high-performance drawing of a mesh multiple times using GPU instancing.  Description MultiMesh provides low-level mesh instancing. Drawing thousands of MeshInstance3D nodes can be slow, since each object is submitted to the GPU then drawn individually. MultiMesh is much faster as it can draw thousands of instances with a single draw call, resulting in less API overhead. As a drawback, if the instances are too far away from each other, performance may be reduced as every single instance will always render (they are spatially indexed as one, for the whole object). Since instances may have any behavior, the AABB used for visibility must be provided by the user. Note: A MultiMesh is a single object, therefore the same maximum lights per object restriction applies. This means, that once the maximum lights are consumed by one or more instances, the rest of the MultiMesh instances will not receive any lighting. Note: Blend Shapes will be ignored if used in a MultiMesh.   Tutorials  Using MultiMeshInstance Optimization using MultiMeshes Animating thousands of fish with MultiMeshInstance    Properties  
PackedFloat32Array buffer PackedFloat32Array()  
PackedColorArray color_array   
PackedColorArray custom_data_array   
int instance_count 0  
Mesh mesh   
PackedVector2Array transform_2d_array   
PackedVector3Array transform_array   
TransformFormat transform_format 0  
bool use_colors false  
bool use_custom_data false  
int visible_instance_count -1     Methods  
AABB get_aabb ( ) const  
Color get_instance_color ( int instance ) const  
Color get_instance_custom_data ( int instance ) const  
Transform3D get_instance_transform ( int instance ) const  
Transform2D get_instance_transform_2d ( int instance ) const  
void set_instance_color ( int instance, Color color )  
void set_instance_custom_data ( int instance, Color custom_data )  
void set_instance_transform ( int instance, Transform3D transform )  
void set_instance_transform_2d ( int instance, Transform2D transform )     Enumerations enum TransformFormat: 
TransformFormat TRANSFORM_2D = 0
 Use this when using 2D transforms. 
TransformFormat TRANSFORM_3D = 1
 Use this when using 3D transforms.   Property Descriptions 
PackedFloat32Array buffer = PackedFloat32Array()
  void set_buffer ( PackedFloat32Array value )
 
PackedFloat32Array get_buffer ( )
   There is currently no description for this property. Please help us by contributing one!  
PackedColorArray color_array See set_instance_color. 
PackedColorArray custom_data_array See set_instance_custom_data. 
int instance_count = 0
  void set_instance_count ( int value )
 
int get_instance_count ( )
  Number of instances that will get drawn. This clears and (re)sizes the buffers. Setting data format or flags afterwards will have no effect. By default, all instances are drawn but you can limit this with visible_instance_count. 
Mesh mesh  void set_mesh ( Mesh value )
 
Mesh get_mesh ( )
  Mesh resource to be instanced. The looks of the individual instances can be modified using set_instance_color and set_instance_custom_data. 
PackedVector2Array transform_2d_array See set_instance_transform_2d. 
PackedVector3Array transform_array See set_instance_transform. 
TransformFormat transform_format = 0
  void set_transform_format ( TransformFormat value )
 
TransformFormat get_transform_format ( )
  Format of transform used to transform mesh, either 2D or 3D. 
bool use_colors = false
  void set_use_colors ( bool value )
 
bool is_using_colors ( )
  If true, the MultiMesh will use color data (see set_instance_color). Can only be set when instance_count is 0 or less. This means that you need to call this method before setting the instance count, or temporarily reset it to 0. 
bool use_custom_data = false
  void set_use_custom_data ( bool value )
 
bool is_using_custom_data ( )
  If true, the MultiMesh will use custom data (see set_instance_custom_data). Can only be set when instance_count is 0 or less. This means that you need to call this method before setting the instance count, or temporarily reset it to 0. 
int visible_instance_count = -1
  void set_visible_instance_count ( int value )
 
int get_visible_instance_count ( )
  Limits the number of instances drawn, -1 draws all instances. Changing this does not change the sizes of the buffers.   Method Descriptions 
AABB get_aabb ( ) const
 Returns the visibility axis-aligned bounding box in local space. 
Color get_instance_color ( int instance ) const
 Gets a specific instance's color multiplier. 
Color get_instance_custom_data ( int instance ) const
 Returns the custom data that has been set for a specific instance. 
Transform3D get_instance_transform ( int instance ) const
 Returns the Transform3D of a specific instance. 
Transform2D get_instance_transform_2d ( int instance ) const
 Returns the Transform2D of a specific instance. void set_instance_color ( int instance, Color color ) Sets the color of a specific instance by multiplying the mesh's existing vertex colors. This allows for different color tinting per instance. For the color to take effect, ensure that use_colors is true on the MultiMesh and BaseMaterial3D.vertex_color_use_as_albedo is true on the material. If you intend to set an absolute color instead of tinting, make sure the material's albedo color is set to pure white (Color(1, 1, 1)). void set_instance_custom_data ( int instance, Color custom_data ) Sets custom data for a specific instance. Although Color is used, it is just a container for 4 floating point numbers. For the custom data to be used, ensure that use_custom_data is true. This custom instance data has to be manually accessed in your custom shader using INSTANCE_CUSTOM. void set_instance_transform ( int instance, Transform3D transform ) Sets the Transform3D for a specific instance. void set_instance_transform_2d ( int instance, Transform2D transform ) Sets the Transform2D for a specific instance.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_multimesh.html


classes/class_sky
-----------------------------------------------------------
Sky Inherits: Resource < RefCounted < Object Defines a 3D environment's background by using a Material.  Description The Sky class uses a Material to render a 3D environment's background and the light it emits by updating the reflection/radiance cubemaps.   Properties  
ProcessMode process_mode 0  
RadianceSize radiance_size 3  
Material sky_material      Enumerations enum RadianceSize: 
RadianceSize RADIANCE_SIZE_32 = 0
 Radiance texture size is 32Ã—32 pixels. 
RadianceSize RADIANCE_SIZE_64 = 1
 Radiance texture size is 64Ã—64 pixels. 
RadianceSize RADIANCE_SIZE_128 = 2
 Radiance texture size is 128Ã—128 pixels. 
RadianceSize RADIANCE_SIZE_256 = 3
 Radiance texture size is 256Ã—256 pixels. 
RadianceSize RADIANCE_SIZE_512 = 4
 Radiance texture size is 512Ã—512 pixels. 
RadianceSize RADIANCE_SIZE_1024 = 5
 Radiance texture size is 1024Ã—1024 pixels. 
RadianceSize RADIANCE_SIZE_2048 = 6
 Radiance texture size is 2048Ã—2048 pixels. 
RadianceSize RADIANCE_SIZE_MAX = 7
 Represents the size of the RadianceSize enum. enum ProcessMode: 
ProcessMode PROCESS_MODE_AUTOMATIC = 0
 Automatically selects the appropriate process mode based on your sky shader. If your shader uses TIME or POSITION, this will use PROCESS_MODE_REALTIME. If your shader uses any of the LIGHT_* variables or any custom uniforms, this uses PROCESS_MODE_INCREMENTAL. Otherwise, this defaults to PROCESS_MODE_QUALITY. 
ProcessMode PROCESS_MODE_QUALITY = 1
 Uses high quality importance sampling to process the radiance map. In general, this results in much higher quality than PROCESS_MODE_REALTIME but takes much longer to generate. This should not be used if you plan on changing the sky at runtime. If you are finding that the reflection is not blurry enough and is showing sparkles or fireflies, try increasing ProjectSettings.rendering/reflections/sky_reflections/ggx_samples. 
ProcessMode PROCESS_MODE_INCREMENTAL = 2
 Uses the same high quality importance sampling to process the radiance map as PROCESS_MODE_QUALITY, but updates over several frames. The number of frames is determined by ProjectSettings.rendering/reflections/sky_reflections/roughness_layers. Use this when you need highest quality radiance maps, but have a sky that updates slowly. 
ProcessMode PROCESS_MODE_REALTIME = 3
 Uses the fast filtering algorithm to process the radiance map. In general this results in lower quality, but substantially faster run times. If you need better quality, but still need to update the sky every frame, consider turning on ProjectSettings.rendering/reflections/sky_reflections/fast_filter_high_quality. Note: The fast filtering algorithm is limited to 256Ã—256 cubemaps, so radiance_size must be set to RADIANCE_SIZE_256. Otherwise, a warning is printed and the overridden radiance size is ignored.   Property Descriptions 
ProcessMode process_mode = 0
  void set_process_mode ( ProcessMode value )
 
ProcessMode get_process_mode ( )
  Sets the method for generating the radiance map from the sky. The radiance map is a cubemap with increasingly blurry versions of the sky corresponding to different levels of roughness. Radiance maps can be expensive to calculate. See ProcessMode for options. 
RadianceSize radiance_size = 3
  void set_radiance_size ( RadianceSize value )
 
RadianceSize get_radiance_size ( )
  The Sky's radiance map size. The higher the radiance map size, the more detailed the lighting from the Sky will be. See RadianceSize constants for values. Note: Some hardware will have trouble with higher radiance sizes, especially RADIANCE_SIZE_512 and above. Only use such high values on high-end hardware. 
Material sky_material  void set_material ( Material value )
 
Material get_material ( )
  Material used to draw the background. Can be PanoramaSkyMaterial, ProceduralSkyMaterial, PhysicalSkyMaterial, or even a ShaderMaterial if you want to use your own custom shader.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_sky.html


classes/class_animatedsprite3d
-----------------------------------------------------------
AnimatedSprite3D Inherits: SpriteBase3D < GeometryInstance3D < VisualInstance3D < Node3D < Node < Object 2D sprite node in 3D world, that can use multiple 2D textures for animation.  Description AnimatedSprite3D is similar to the Sprite3D node, except it carries multiple textures as animation sprite_frames. Animations are created using a SpriteFrames resource, which allows you to import image files (or a folder containing said files) to provide the animation frames for the sprite. The SpriteFrames resource can be configured in the editor via the SpriteFrames bottom panel.   Tutorials  2D Sprite animation (also applies to 3D)    Properties  
StringName animation &"default"  
String autoplay ""  
int frame 0  
float frame_progress 0.0  
float speed_scale 1.0  
SpriteFrames sprite_frames      Methods  
float get_playing_speed ( ) const  
bool is_playing ( ) const  
void pause ( )  
void play ( StringName name=&"", float custom_speed=1.0, bool from_end=false )  
void play_backwards ( StringName name=&"" )  
void set_frame_and_progress ( int frame, float progress )  
void stop ( )     Signals animation_changed ( ) Emitted when animation changes. animation_finished ( ) Emitted when the animation reaches the end, or the start if it is played in reverse. When the animation finishes, it pauses the playback. animation_looped ( ) Emitted when the animation loops. frame_changed ( ) Emitted when frame changes. sprite_frames_changed ( ) Emitted when sprite_frames changes.   Property Descriptions 
StringName animation = &"default"
  void set_animation ( StringName value )
 
StringName get_animation ( )
  The current animation from the sprite_frames resource. If this value is changed, the frame counter and the frame_progress are reset. 
String autoplay = ""
  void set_autoplay ( String value )
 
String get_autoplay ( )
  The key of the animation to play when the scene loads. 
int frame = 0
  void set_frame ( int value )
 
int get_frame ( )
  The displayed animation frame's index. Setting this property also resets frame_progress. If this is not desired, use set_frame_and_progress. 
float frame_progress = 0.0
  void set_frame_progress ( float value )
 
float get_frame_progress ( )
  The progress value between 0.0 and 1.0 until the current frame transitions to the next frame. If the animation is playing backwards, the value transitions from 1.0 to 0.0. 
float speed_scale = 1.0
  void set_speed_scale ( float value )
 
float get_speed_scale ( )
  The speed scaling ratio. For example, if this value is 1, then the animation plays at normal speed. If it's 0.5, then it plays at half speed. If it's 2, then it plays at double speed. If set to a negative value, the animation is played in reverse. If set to 0, the animation will not advance. 
SpriteFrames sprite_frames  void set_sprite_frames ( SpriteFrames value )
 
SpriteFrames get_sprite_frames ( )
  The SpriteFrames resource containing the animation(s). Allows you the option to load, edit, clear, make unique and save the states of the SpriteFrames resource.   Method Descriptions 
float get_playing_speed ( ) const
 Returns the actual playing speed of current animation or 0 if not playing. This speed is the speed_scale property multiplied by custom_speed argument specified when calling the play method. Returns a negative value if the current animation is playing backwards. 
bool is_playing ( ) const
 Returns true if an animation is currently playing (even if speed_scale and/or custom_speed are 0). void pause ( ) Pauses the currently playing animation. The frame and frame_progress will be kept and calling play or play_backwards without arguments will resume the animation from the current playback position. See also stop. void play ( StringName name=&"", float custom_speed=1.0, bool from_end=false ) Plays the animation with key name. If custom_speed is negative and from_end is true, the animation will play backwards (which is equivalent to calling play_backwards). If this method is called with that same animation name, or with no name parameter, the assigned animation will resume playing if it was paused. void play_backwards ( StringName name=&"" ) Plays the animation with key name in reverse. This method is a shorthand for play with custom_speed = -1.0 and from_end = true, so see its description for more information. void set_frame_and_progress ( int frame, float progress ) The setter of frame resets the frame_progress to 0.0 implicitly, but this method avoids that. This is useful when you want to carry over the current frame_progress to another frame. Example:  GDScript# Change the animation with keeping the frame index and progress.
var current_frame = animated_sprite.get_frame()
var current_progress = animated_sprite.get_frame_progress()
animated_sprite.play("walk_another_skin")
animated_sprite.set_frame_and_progress(current_frame, current_progress)
  void stop ( ) Stops the currently playing animation. The animation position is reset to 0 and the custom_speed is reset to 1.0. See also pause.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animatedsprite3d.html


classes/class_gltfdocumentextension
-----------------------------------------------------------
GLTFDocumentExtension Inherits: Resource < RefCounted < Object Inherited By: GLTFDocumentExtensionConvertImporterMesh GLTFDocument extension class.  Description Extends the functionality of the GLTFDocument class by allowing you to run arbitrary code at various stages of GLTF import or export. To use, make a new class extending GLTFDocumentExtension, override any methods you need, make an instance of your class, and register it using GLTFDocument.register_gltf_document_extension. Note: Like GLTFDocument itself, all GLTFDocumentExtension classes must be stateless in order to function properly. If you need to store data, use the set_additional_data and get_additional_data methods in GLTFState or GLTFNode.   Tutorials  Runtime file loading and saving    Methods  
void _convert_scene_node ( GLTFState state, GLTFNode gltf_node, Node scene_node ) virtual  
Error _export_node ( GLTFState state, GLTFNode gltf_node, Dictionary json, Node node ) virtual  
Error _export_post ( GLTFState state ) virtual  
Error _export_preflight ( GLTFState state, Node root ) virtual  
Error _export_preserialize ( GLTFState state ) virtual  
Node3D _generate_scene_node ( GLTFState state, GLTFNode gltf_node, Node scene_parent ) virtual  
String _get_image_file_extension ( ) virtual  
PackedStringArray _get_saveable_image_formats ( ) virtual  
PackedStringArray _get_supported_extensions ( ) virtual  
Error _import_node ( GLTFState state, GLTFNode gltf_node, Dictionary json, Node node ) virtual  
Error _import_post ( GLTFState state, Node root ) virtual  
Error _import_post_parse ( GLTFState state ) virtual  
Error _import_preflight ( GLTFState state, PackedStringArray extensions ) virtual  
Error _parse_image_data ( GLTFState state, PackedByteArray image_data, String mime_type, Image ret_image ) virtual  
Error _parse_node_extensions ( GLTFState state, GLTFNode gltf_node, Dictionary extensions ) virtual  
Error _parse_texture_json ( GLTFState state, Dictionary texture_json, GLTFTexture ret_gltf_texture ) virtual  
Error _save_image_at_path ( GLTFState state, Image image, String file_path, String image_format, float lossy_quality ) virtual  
PackedByteArray _serialize_image_to_bytes ( GLTFState state, Image image, Dictionary image_dict, String image_format, float lossy_quality ) virtual  
Error _serialize_texture_json ( GLTFState state, Dictionary texture_json, GLTFTexture gltf_texture, String image_format ) virtual     Method Descriptions void _convert_scene_node ( GLTFState state, GLTFNode gltf_node, Node scene_node ) virtual
 Part of the export process. This method is run after _export_preflight and before _export_preserialize. Runs when converting the data from a Godot scene node. This method can be used to process the Godot scene node data into a format that can be used by _export_node. 
Error _export_node ( GLTFState state, GLTFNode gltf_node, Dictionary json, Node node ) virtual
 Part of the export process. This method is run after _get_saveable_image_formats and before _export_post. If this GLTFDocumentExtension is used for exporting images, this runs after _serialize_texture_json. This method can be used to modify the final JSON of each node. 
Error _export_post ( GLTFState state ) virtual
 Part of the export process. This method is run last, after all other parts of the export process. This method can be used to modify the final JSON of the generated GLTF file. 
Error _export_preflight ( GLTFState state, Node root ) virtual
 Part of the export process. This method is run first, before all other parts of the export process. The return value is used to determine if this GLTFDocumentExtension instance should be used for exporting a given GLTF file. If @GlobalScope.OK, the export will use this GLTFDocumentExtension instance. If not overridden, @GlobalScope.OK is returned. 
Error _export_preserialize ( GLTFState state ) virtual
 Part of the export process. This method is run after _convert_scene_node and before _get_saveable_image_formats. This method can be used to alter the state before performing serialization. It runs every time when generating a buffer with GLTFDocument.generate_buffer or writing to the file system with GLTFDocument.write_to_filesystem. 
Node3D _generate_scene_node ( GLTFState state, GLTFNode gltf_node, Node scene_parent ) virtual
 Part of the import process. This method is run after _import_post_parse and before _import_node. Runs when generating a Godot scene node from a GLTFNode. The returned node will be added to the scene tree. Multiple nodes can be generated in this step if they are added as a child of the returned node. Note: The scene_parent parameter may be null if this is the single root node. 
String _get_image_file_extension ( ) virtual
 Returns the file extension to use for saving image data into, for example, ".png". If defined, when this extension is used to handle images, and the images are saved to a separate file, the image bytes will be copied to a file with this extension. If this is set, there should be a ResourceImporter class able to import the file. If not defined or empty, Godot will save the image into a PNG file. 
PackedStringArray _get_saveable_image_formats ( ) virtual
 Part of the export process. This method is run after _convert_scene_node and before _export_node. Returns an array of the image formats that can be saved/exported by this extension. This extension will only be selected as the image exporter if the GLTFDocument's GLTFDocument.image_format is in this array. If this GLTFDocumentExtension is selected as the image exporter, one of the _save_image_at_path or _serialize_image_to_bytes methods will run next, otherwise _export_node will run next. If the format name contains "Lossy", the lossy quality slider will be displayed. 
PackedStringArray _get_supported_extensions ( ) virtual
 Part of the import process. This method is run after _import_preflight and before _parse_node_extensions. Returns an array of the GLTF extensions supported by this GLTFDocumentExtension class. This is used to validate if a GLTF file with required extensions can be loaded. 
Error _import_node ( GLTFState state, GLTFNode gltf_node, Dictionary json, Node node ) virtual
 Part of the import process. This method is run after _generate_scene_node and before _import_post. This method can be used to make modifications to each of the generated Godot scene nodes. 
Error _import_post ( GLTFState state, Node root ) virtual
 Part of the import process. This method is run last, after all other parts of the import process. This method can be used to modify the final Godot scene generated by the import process. 
Error _import_post_parse ( GLTFState state ) virtual
 Part of the import process. This method is run after _parse_node_extensions and before _generate_scene_node. This method can be used to modify any of the data imported so far, including any scene nodes, before running the final per-node import step. 
Error _import_preflight ( GLTFState state, PackedStringArray extensions ) virtual
 Part of the import process. This method is run first, before all other parts of the import process. The return value is used to determine if this GLTFDocumentExtension instance should be used for importing a given GLTF file. If @GlobalScope.OK, the import will use this GLTFDocumentExtension instance. If not overridden, @GlobalScope.OK is returned. 
Error _parse_image_data ( GLTFState state, PackedByteArray image_data, String mime_type, Image ret_image ) virtual
 Part of the import process. This method is run after _parse_node_extensions and before _parse_texture_json. Runs when parsing image data from a GLTF file. The data could be sourced from a separate file, a URI, or a buffer, and then is passed as a byte array. 
Error _parse_node_extensions ( GLTFState state, GLTFNode gltf_node, Dictionary extensions ) virtual
 Part of the import process. This method is run after _get_supported_extensions and before _import_post_parse. Runs when parsing the node extensions of a GLTFNode. This method can be used to process the extension JSON data into a format that can be used by _generate_scene_node. The return value should be a member of the Error enum. 
Error _parse_texture_json ( GLTFState state, Dictionary texture_json, GLTFTexture ret_gltf_texture ) virtual
 Part of the import process. This method is run after _parse_image_data and before _generate_scene_node. Runs when parsing the texture JSON from the GLTF textures array. This can be used to set the source image index to use as the texture. 
Error _save_image_at_path ( GLTFState state, Image image, String file_path, String image_format, float lossy_quality ) virtual
 Part of the export process. This method is run after _get_saveable_image_formats and before _serialize_texture_json. This method is run when saving images separately from the GLTF file. When images are embedded, _serialize_image_to_bytes runs instead. Note that these methods only run when this GLTFDocumentExtension is selected as the image exporter. 
PackedByteArray _serialize_image_to_bytes ( GLTFState state, Image image, Dictionary image_dict, String image_format, float lossy_quality ) virtual
 Part of the export process. This method is run after _get_saveable_image_formats and before _serialize_texture_json. This method is run when embedding images in the GLTF file. When images are saved separately, _save_image_at_path runs instead. Note that these methods only run when this GLTFDocumentExtension is selected as the image exporter. This method must set the image MIME type in the image_dict with the "mimeType" key. For example, for a PNG image, it would be set to "image/png". The return value must be a PackedByteArray containing the image data. 
Error _serialize_texture_json ( GLTFState state, Dictionary texture_json, GLTFTexture gltf_texture, String image_format ) virtual
 Part of the export process. This method is run after _save_image_at_path or _serialize_image_to_bytes, and before _export_node. Note that this method only runs when this GLTFDocumentExtension is selected as the image exporter. This method can be used to set up the extensions for the texture JSON by editing texture_json. The extension must also be added as used extension with GLTFState.add_used_extension, be sure to set required to true if you are not providing a fallback.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfdocumentextension.html


classes/class_particleprocessmaterial
-----------------------------------------------------------
ParticleProcessMaterial Inherits: Material < Resource < RefCounted < Object Holds a particle configuration for GPUParticles2D or GPUParticles3D nodes.  Description ParticleProcessMaterial defines particle properties and behavior. It is used in the process_material of the GPUParticles2D and GPUParticles3D nodes. Some of this material's properties are applied to each particle when emitted, while others can have a CurveTexture or a GradientTexture1D applied to vary numerical or color values over the lifetime of the particle.   Properties  
Texture2D alpha_curve   
Texture2D angle_curve   
float angle_max 0.0  
float angle_min 0.0  
Texture2D angular_velocity_curve   
float angular_velocity_max 0.0  
float angular_velocity_min 0.0  
Texture2D anim_offset_curve   
float anim_offset_max 0.0  
float anim_offset_min 0.0  
Texture2D anim_speed_curve   
float anim_speed_max 0.0  
float anim_speed_min 0.0  
bool attractor_interaction_enabled true  
float collision_bounce   
float collision_friction   
CollisionMode collision_mode 0  
bool collision_use_scale false  
Color color Color(1, 1, 1, 1)  
Texture2D color_initial_ramp   
Texture2D color_ramp   
Texture2D damping_curve   
float damping_max 0.0  
float damping_min 0.0  
Vector3 direction Vector3(1, 0, 0)  
Texture2D directional_velocity_curve   
float directional_velocity_max   
float directional_velocity_min   
Vector3 emission_box_extents   
Texture2D emission_color_texture   
Texture2D emission_curve   
Texture2D emission_normal_texture   
int emission_point_count   
Texture2D emission_point_texture   
Vector3 emission_ring_axis   
float emission_ring_height   
float emission_ring_inner_radius   
float emission_ring_radius   
EmissionShape emission_shape 0  
Vector3 emission_shape_offset Vector3(0, 0, 0)  
Vector3 emission_shape_scale Vector3(1, 1, 1)  
float emission_sphere_radius   
float flatness 0.0  
Vector3 gravity Vector3(0, -9.8, 0)  
Texture2D hue_variation_curve   
float hue_variation_max 0.0  
float hue_variation_min 0.0  
float inherit_velocity_ratio 0.0  
float initial_velocity_max 0.0  
float initial_velocity_min 0.0  
float lifetime_randomness 0.0  
Texture2D linear_accel_curve   
float linear_accel_max 0.0  
float linear_accel_min 0.0  
Texture2D orbit_velocity_curve   
float orbit_velocity_max 0.0  
float orbit_velocity_min 0.0  
bool particle_flag_align_y false  
bool particle_flag_damping_as_friction false  
bool particle_flag_disable_z false  
bool particle_flag_rotate_y false  
Texture2D radial_accel_curve   
float radial_accel_max 0.0  
float radial_accel_min 0.0  
Texture2D radial_velocity_curve   
float radial_velocity_max 0.0  
float radial_velocity_min 0.0  
Texture2D scale_curve   
float scale_max 1.0  
float scale_min 1.0  
Texture2D scale_over_velocity_curve   
float scale_over_velocity_max 0.0  
float scale_over_velocity_min 0.0  
float spread 45.0  
int sub_emitter_amount_at_collision   
int sub_emitter_amount_at_end   
float sub_emitter_frequency   
bool sub_emitter_keep_velocity false  
SubEmitterMode sub_emitter_mode 0  
Texture2D tangential_accel_curve   
float tangential_accel_max 0.0  
float tangential_accel_min 0.0  
bool turbulence_enabled false  
float turbulence_influence_max 0.1  
float turbulence_influence_min 0.1  
Texture2D turbulence_influence_over_life   
float turbulence_initial_displacement_max 0.0  
float turbulence_initial_displacement_min 0.0  
float turbulence_noise_scale 9.0  
Vector3 turbulence_noise_speed Vector3(0, 0, 0)  
float turbulence_noise_speed_random 0.2  
float turbulence_noise_strength 1.0  
Texture2D velocity_limit_curve   
Vector3 velocity_pivot Vector3(0, 0, 0)     Methods  
float get_param_max ( Parameter param ) const  
float get_param_min ( Parameter param ) const  
Texture2D get_param_texture ( Parameter param ) const  
bool get_particle_flag ( ParticleFlags particle_flag ) const  
void set_param_max ( Parameter param, float value )  
void set_param_min ( Parameter param, float value )  
void set_param_texture ( Parameter param, Texture2D texture )  
void set_particle_flag ( ParticleFlags particle_flag, bool enable )     Enumerations enum Parameter: 
Parameter PARAM_INITIAL_LINEAR_VELOCITY = 0
 Use with set_param_min, set_param_max, and set_param_texture to set initial velocity properties. 
Parameter PARAM_ANGULAR_VELOCITY = 1
 Use with set_param_min, set_param_max, and set_param_texture to set angular velocity properties. 
Parameter PARAM_ORBIT_VELOCITY = 2
 Use with set_param_min, set_param_max, and set_param_texture to set orbital velocity properties. 
Parameter PARAM_LINEAR_ACCEL = 3
 Use with set_param_min, set_param_max, and set_param_texture to set linear acceleration properties. 
Parameter PARAM_RADIAL_ACCEL = 4
 Use with set_param_min, set_param_max, and set_param_texture to set radial acceleration properties. 
Parameter PARAM_TANGENTIAL_ACCEL = 5
 Use with set_param_min, set_param_max, and set_param_texture to set tangential acceleration properties. 
Parameter PARAM_DAMPING = 6
 Use with set_param_min, set_param_max, and set_param_texture to set damping properties. 
Parameter PARAM_ANGLE = 7
 Use with set_param_min, set_param_max, and set_param_texture to set angle properties. 
Parameter PARAM_SCALE = 8
 Use with set_param_min, set_param_max, and set_param_texture to set scale properties. 
Parameter PARAM_HUE_VARIATION = 9
 Use with set_param_min, set_param_max, and set_param_texture to set hue variation properties. 
Parameter PARAM_ANIM_SPEED = 10
 Use with set_param_min, set_param_max, and set_param_texture to set animation speed properties. 
Parameter PARAM_ANIM_OFFSET = 11
 Use with set_param_min, set_param_max, and set_param_texture to set animation offset properties. 
Parameter PARAM_RADIAL_VELOCITY = 15
 Use with set_param_min, set_param_max, and set_param_texture to set radial velocity properties. 
Parameter PARAM_DIRECTIONAL_VELOCITY = 16
 Use with set_param_min, set_param_max, and set_param_texture to set directional velocity properties. 
Parameter PARAM_SCALE_OVER_VELOCITY = 17
 Use with set_param_min, set_param_max, and set_param_texture to set scale over velocity properties. 
Parameter PARAM_MAX = 18
 Represents the size of the Parameter enum. 
Parameter PARAM_TURB_VEL_INFLUENCE = 13
 Use with set_param_min and set_param_max to set the turbulence minimum und maximum influence on each particles velocity. 
Parameter PARAM_TURB_INIT_DISPLACEMENT = 14
 Use with set_param_min and set_param_max to set the turbulence minimum and maximum displacement of the particles spawn position. 
Parameter PARAM_TURB_INFLUENCE_OVER_LIFE = 12
 Use with set_param_texture to set the turbulence influence over the particles life time. enum ParticleFlags: 
ParticleFlags PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY = 0
 Use with set_particle_flag to set particle_flag_align_y. 
ParticleFlags PARTICLE_FLAG_ROTATE_Y = 1
 Use with set_particle_flag to set particle_flag_rotate_y. 
ParticleFlags PARTICLE_FLAG_DISABLE_Z = 2
 Use with set_particle_flag to set particle_flag_disable_z. 
ParticleFlags PARTICLE_FLAG_DAMPING_AS_FRICTION = 3
 
ParticleFlags PARTICLE_FLAG_MAX = 4
 Represents the size of the ParticleFlags enum. enum EmissionShape: 
EmissionShape EMISSION_SHAPE_POINT = 0
 All particles will be emitted from a single point. 
EmissionShape EMISSION_SHAPE_SPHERE = 1
 Particles will be emitted in the volume of a sphere. 
EmissionShape EMISSION_SHAPE_SPHERE_SURFACE = 2
 Particles will be emitted on the surface of a sphere. 
EmissionShape EMISSION_SHAPE_BOX = 3
 Particles will be emitted in the volume of a box. 
EmissionShape EMISSION_SHAPE_POINTS = 4
 Particles will be emitted at a position determined by sampling a random point on the emission_point_texture. Particle color will be modulated by emission_color_texture. 
EmissionShape EMISSION_SHAPE_DIRECTED_POINTS = 5
 Particles will be emitted at a position determined by sampling a random point on the emission_point_texture. Particle velocity and rotation will be set based on emission_normal_texture. Particle color will be modulated by emission_color_texture. 
EmissionShape EMISSION_SHAPE_RING = 6
 Particles will be emitted in a ring or cylinder. 
EmissionShape EMISSION_SHAPE_MAX = 7
 Represents the size of the EmissionShape enum. enum SubEmitterMode: 
SubEmitterMode SUB_EMITTER_DISABLED = 0
 
SubEmitterMode SUB_EMITTER_CONSTANT = 1
 
SubEmitterMode SUB_EMITTER_AT_END = 2
 
SubEmitterMode SUB_EMITTER_AT_COLLISION = 3
 
SubEmitterMode SUB_EMITTER_MAX = 4
 Represents the size of the SubEmitterMode enum. enum CollisionMode: 
CollisionMode COLLISION_DISABLED = 0
 No collision for particles. Particles will go through GPUParticlesCollision3D nodes. 
CollisionMode COLLISION_RIGID = 1
 RigidBody3D-style collision for particles using GPUParticlesCollision3D nodes. 
CollisionMode COLLISION_HIDE_ON_CONTACT = 2
 Hide particles instantly when colliding with a GPUParticlesCollision3D node. This can be combined with a subemitter that uses the COLLISION_RIGID collision mode to "replace" the parent particle with the subemitter on impact. 
CollisionMode COLLISION_MAX = 3
 Represents the size of the CollisionMode enum.   Property Descriptions 
Texture2D alpha_curve  void set_alpha_curve ( Texture2D value )
 
Texture2D get_alpha_curve ( )
  The alpha value of each particle's color will be multiplied by this CurveTexture over its lifetime. 
Texture2D angle_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Each particle's rotation will be animated along this CurveTexture. 
float angle_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum initial rotation applied to each particle, in degrees. Only applied when particle_flag_disable_z or particle_flag_rotate_y are true or the BaseMaterial3D being used to draw the particle is using BaseMaterial3D.BILLBOARD_PARTICLES. 
float angle_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of angle_max. 
Texture2D angular_velocity_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Each particle's angular velocity (rotation speed) will vary along this CurveTexture over its lifetime. 
float angular_velocity_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum initial angular velocity (rotation speed) applied to each particle in degrees per second. Only applied when particle_flag_disable_z or particle_flag_rotate_y are true or the BaseMaterial3D being used to draw the particle is using BaseMaterial3D.BILLBOARD_PARTICLES. 
float angular_velocity_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of angular_velocity_max. 
Texture2D anim_offset_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Each particle's animation offset will vary along this CurveTexture. 
float anim_offset_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum animation offset that corresponds to frame index in the texture. 0 is the first frame, 1 is the last one. See CanvasItemMaterial.particles_animation. 
float anim_offset_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of anim_offset_max. 
Texture2D anim_speed_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Each particle's animation speed will vary along this CurveTexture. 
float anim_speed_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum particle animation speed. Animation speed of 1 means that the particles will make full 0 to 1 offset cycle during lifetime, 2 means 2 cycles etc. With animation speed greater than 1, remember to enable CanvasItemMaterial.particles_anim_loop property if you want the animation to repeat. 
float anim_speed_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of anim_speed_max. 
bool attractor_interaction_enabled = true
  void set_attractor_interaction_enabled ( bool value )
 
bool is_attractor_interaction_enabled ( )
  If true, interaction with particle attractors is enabled. In 3D, attraction only occurs within the area defined by the GPUParticles3D node's GPUParticles3D.visibility_aabb. 
float collision_bounce  void set_collision_bounce ( float value )
 
float get_collision_bounce ( )
  The particles' bounciness. Values range from 0 (no bounce) to 1 (full bounciness). Only effective if collision_mode is COLLISION_RIGID. 
float collision_friction  void set_collision_friction ( float value )
 
float get_collision_friction ( )
  The particles' friction. Values range from 0 (frictionless) to 1 (maximum friction). Only effective if collision_mode is COLLISION_RIGID. 
CollisionMode collision_mode = 0
  void set_collision_mode ( CollisionMode value )
 
CollisionMode get_collision_mode ( )
  The particles' collision mode. Note: 3D Particles can only collide with GPUParticlesCollision3D nodes, not PhysicsBody3D nodes. To make particles collide with various objects, you can add GPUParticlesCollision3D nodes as children of PhysicsBody3D nodes. In 3D, collisions only occur within the area defined by the GPUParticles3D node's GPUParticles3D.visibility_aabb. Note: 2D Particles can only collide with LightOccluder2D nodes, not PhysicsBody2D nodes. 
bool collision_use_scale = false
  void set_collision_use_scale ( bool value )
 
bool is_collision_using_scale ( )
  If true, GPUParticles3D.collision_base_size is multiplied by the particle's effective scale (see scale_min, scale_max, scale_curve, and scale_over_velocity_curve). 
Color color = Color(1, 1, 1, 1)
  void set_color ( Color value )
 
Color get_color ( )
  Each particle's initial color. If the GPUParticles2D's texture is defined, it will be multiplied by this color. Note: color multiplies the particle mesh's vertex colors. To have a visible effect on a BaseMaterial3D, BaseMaterial3D.vertex_color_use_as_albedo must be true. For a ShaderMaterial, ALBEDO *= COLOR.rgb; must be inserted in the shader's fragment() function. Otherwise, color will have no visible effect. 
Texture2D color_initial_ramp  void set_color_initial_ramp ( Texture2D value )
 
Texture2D get_color_initial_ramp ( )
  Each particle's initial color will vary along this GradientTexture1D (multiplied with color). Note: color_initial_ramp multiplies the particle mesh's vertex colors. To have a visible effect on a BaseMaterial3D, BaseMaterial3D.vertex_color_use_as_albedo must be true. For a ShaderMaterial, ALBEDO *= COLOR.rgb; must be inserted in the shader's fragment() function. Otherwise, color_initial_ramp will have no visible effect. 
Texture2D color_ramp  void set_color_ramp ( Texture2D value )
 
Texture2D get_color_ramp ( )
  Each particle's color will vary along this GradientTexture1D over its lifetime (multiplied with color). Note: color_ramp multiplies the particle mesh's vertex colors. To have a visible effect on a BaseMaterial3D, BaseMaterial3D.vertex_color_use_as_albedo must be true. For a ShaderMaterial, ALBEDO *= COLOR.rgb; must be inserted in the shader's fragment() function. Otherwise, color_ramp will have no visible effect. 
Texture2D damping_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Damping will vary along this CurveTexture. 
float damping_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  The maximum rate at which particles lose velocity. For example value of 100 means that the particle will go from 100 velocity to 0 in 1 second. 
float damping_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of damping_max. 
Vector3 direction = Vector3(1, 0, 0)
  void set_direction ( Vector3 value )
 
Vector3 get_direction ( )
  Unit vector specifying the particles' emission direction. 
Texture2D directional_velocity_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  A curve that specifies the velocity along each of the axes of the particle system along its lifetime. Note: Animated velocities will not be affected by damping, use velocity_limit_curve instead. 
float directional_velocity_max  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum directional velocity value, which is multiplied by directional_velocity_curve. Note: Animated velocities will not be affected by damping, use velocity_limit_curve instead. 
float directional_velocity_min  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum directional velocity value, which is multiplied by directional_velocity_curve. Note: Animated velocities will not be affected by damping, use velocity_limit_curve instead. 
Vector3 emission_box_extents  void set_emission_box_extents ( Vector3 value )
 
Vector3 get_emission_box_extents ( )
  The box's extents if emission_shape is set to EMISSION_SHAPE_BOX. 
Texture2D emission_color_texture  void set_emission_color_texture ( Texture2D value )
 
Texture2D get_emission_color_texture ( )
  Particle color will be modulated by color determined by sampling this texture at the same point as the emission_point_texture. Note: emission_color_texture multiplies the particle mesh's vertex colors. To have a visible effect on a BaseMaterial3D, BaseMaterial3D.vertex_color_use_as_albedo must be true. For a ShaderMaterial, ALBEDO *= COLOR.rgb; must be inserted in the shader's fragment() function. Otherwise, emission_color_texture will have no visible effect. 
Texture2D emission_curve  void set_emission_curve ( Texture2D value )
 
Texture2D get_emission_curve ( )
  Each particle's color will be multiplied by this CurveTexture over its lifetime. Note: This property won't have a visible effect unless the render material is marked as unshaded. 
Texture2D emission_normal_texture  void set_emission_normal_texture ( Texture2D value )
 
Texture2D get_emission_normal_texture ( )
  Particle velocity and rotation will be set by sampling this texture at the same point as the emission_point_texture. Used only in EMISSION_SHAPE_DIRECTED_POINTS. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar. 
int emission_point_count  void set_emission_point_count ( int value )
 
int get_emission_point_count ( )
  The number of emission points if emission_shape is set to EMISSION_SHAPE_POINTS or EMISSION_SHAPE_DIRECTED_POINTS. 
Texture2D emission_point_texture  void set_emission_point_texture ( Texture2D value )
 
Texture2D get_emission_point_texture ( )
  Particles will be emitted at positions determined by sampling this texture at a random position. Used with EMISSION_SHAPE_POINTS and EMISSION_SHAPE_DIRECTED_POINTS. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar. 
Vector3 emission_ring_axis  void set_emission_ring_axis ( Vector3 value )
 
Vector3 get_emission_ring_axis ( )
  The axis of the ring when using the emitter EMISSION_SHAPE_RING. 
float emission_ring_height  void set_emission_ring_height ( float value )
 
float get_emission_ring_height ( )
  The height of the ring when using the emitter EMISSION_SHAPE_RING. 
float emission_ring_inner_radius  void set_emission_ring_inner_radius ( float value )
 
float get_emission_ring_inner_radius ( )
  The inner radius of the ring when using the emitter EMISSION_SHAPE_RING. 
float emission_ring_radius  void set_emission_ring_radius ( float value )
 
float get_emission_ring_radius ( )
  The radius of the ring when using the emitter EMISSION_SHAPE_RING. 
EmissionShape emission_shape = 0
  void set_emission_shape ( EmissionShape value )
 
EmissionShape get_emission_shape ( )
  Particles will be emitted inside this region. Use EmissionShape constants for values. 
Vector3 emission_shape_offset = Vector3(0, 0, 0)
  void set_emission_shape_offset ( Vector3 value )
 
Vector3 get_emission_shape_offset ( )
  The offset for the emission_shape, in local space. 
Vector3 emission_shape_scale = Vector3(1, 1, 1)
  void set_emission_shape_scale ( Vector3 value )
 
Vector3 get_emission_shape_scale ( )
  The scale of the emission_shape, in local space. 
float emission_sphere_radius  void set_emission_sphere_radius ( float value )
 
float get_emission_sphere_radius ( )
  The sphere's radius if emission_shape is set to EMISSION_SHAPE_SPHERE. 
float flatness = 0.0
  void set_flatness ( float value )
 
float get_flatness ( )
  Amount of spread along the Y axis. 
Vector3 gravity = Vector3(0, -9.8, 0)
  void set_gravity ( Vector3 value )
 
Vector3 get_gravity ( )
  Gravity applied to every particle. 
Texture2D hue_variation_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Each particle's hue will vary along this CurveTexture. 
float hue_variation_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum initial hue variation applied to each particle. It will shift the particle color's hue. 
float hue_variation_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of hue_variation_max. 
float inherit_velocity_ratio = 0.0
  void set_inherit_velocity_ratio ( float value )
 
float get_inherit_velocity_ratio ( )
  Percentage of the velocity of the respective GPUParticles2D or GPUParticles3D inherited by each particle when spawning. 
float initial_velocity_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum initial velocity magnitude for each particle. Direction comes from direction and spread. 
float initial_velocity_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of initial_velocity_max. 
float lifetime_randomness = 0.0
  void set_lifetime_randomness ( float value )
 
float get_lifetime_randomness ( )
  Particle lifetime randomness ratio. The equation for the lifetime of a particle is lifetime * (1.0 - randf() * lifetime_randomness). For example, a lifetime_randomness of 0.4 scales the lifetime between 0.6 to 1.0 of its original value. 
Texture2D linear_accel_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Each particle's linear acceleration will vary along this CurveTexture. 
float linear_accel_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum linear acceleration applied to each particle in the direction of motion. 
float linear_accel_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of linear_accel_max. 
Texture2D orbit_velocity_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Each particle's orbital velocity will vary along this CurveTexture. Note: For 3D orbital velocity, use a CurveXYZTexture. Note: Animated velocities will not be affected by damping, use velocity_limit_curve instead. 
float orbit_velocity_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second. Note: Animated velocities will not be affected by damping, use velocity_limit_curve instead. 
float orbit_velocity_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of orbit_velocity_max. Note: Animated velocities will not be affected by damping, use velocity_limit_curve instead. 
bool particle_flag_align_y = false
  void set_particle_flag ( ParticleFlags particle_flag, bool enable )
 
bool get_particle_flag ( ParticleFlags particle_flag ) const
  Align Y axis of particle with the direction of its velocity. 
bool particle_flag_damping_as_friction = false
  void set_particle_flag ( ParticleFlags particle_flag, bool enable )
 
bool get_particle_flag ( ParticleFlags particle_flag ) const
  Changes the behavior of the damping properties from a linear deceleration to a deceleration based on speed percentage. 
bool particle_flag_disable_z = false
  void set_particle_flag ( ParticleFlags particle_flag, bool enable )
 
bool get_particle_flag ( ParticleFlags particle_flag ) const
  If true, particles will not move on the z axis. 
bool particle_flag_rotate_y = false
  void set_particle_flag ( ParticleFlags particle_flag, bool enable )
 
bool get_particle_flag ( ParticleFlags particle_flag ) const
  If true, particles rotate around Y axis by angle_min. 
Texture2D radial_accel_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Each particle's radial acceleration will vary along this CurveTexture. 
float radial_accel_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum radial acceleration applied to each particle. Makes particle accelerate away from the origin or towards it if negative. 
float radial_accel_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of radial_accel_max. 
Texture2D radial_velocity_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  A CurveTexture that defines the velocity over the particle's lifetime away (or toward) the velocity_pivot. Note: Animated velocities will not be affected by damping, use velocity_limit_curve instead. 
float radial_velocity_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum radial velocity applied to each particle. Makes particles move away from the velocity_pivot, or toward it if negative. Note: Animated velocities will not be affected by damping, use velocity_limit_curve instead. 
float radial_velocity_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum radial velocity applied to each particle. Makes particles move away from the velocity_pivot, or toward it if negative. Note: Animated velocities will not be affected by damping, use velocity_limit_curve instead. 
Texture2D scale_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Each particle's scale will vary along this CurveTexture. If a CurveXYZTexture is supplied instead, the scale will be separated per-axis. 
float scale_max = 1.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum initial scale applied to each particle. 
float scale_min = 1.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of scale_max. 
Texture2D scale_over_velocity_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Either a CurveTexture or a CurveXYZTexture that scales each particle based on its velocity. 
float scale_over_velocity_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum velocity value reference for scale_over_velocity_curve. scale_over_velocity_curve will be interpolated between scale_over_velocity_min and scale_over_velocity_max. 
float scale_over_velocity_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum velocity value reference for scale_over_velocity_curve. scale_over_velocity_curve will be interpolated between scale_over_velocity_min and scale_over_velocity_max. 
float spread = 45.0
  void set_spread ( float value )
 
float get_spread ( )
  Each particle's initial direction range from +spread to -spread degrees. 
int sub_emitter_amount_at_collision  void set_sub_emitter_amount_at_collision ( int value )
 
int get_sub_emitter_amount_at_collision ( )
  The amount of particles to spawn from the subemitter node when a collision occurs. When combined with COLLISION_HIDE_ON_CONTACT on the main particles material, this can be used to achieve effects such as raindrops hitting the ground. Note: This value shouldn't exceed GPUParticles2D.amount or GPUParticles3D.amount defined on the subemitter node (not the main node), relative to the subemitter's particle lifetime. If the number of particles is exceeded, no new particles will spawn from the subemitter until enough particles have expired. 
int sub_emitter_amount_at_end  void set_sub_emitter_amount_at_end ( int value )
 
int get_sub_emitter_amount_at_end ( )
  The amount of particles to spawn from the subemitter node when the particle expires. Note: This value shouldn't exceed GPUParticles2D.amount or GPUParticles3D.amount defined on the subemitter node (not the main node), relative to the subemitter's particle lifetime. If the number of particles is exceeded, no new particles will spawn from the subemitter until enough particles have expired. 
float sub_emitter_frequency  void set_sub_emitter_frequency ( float value )
 
float get_sub_emitter_frequency ( )
  The frequency at which particles should be emitted from the subemitter node. One particle will be spawned every sub_emitter_frequency seconds. Note: This value shouldn't exceed GPUParticles2D.amount or GPUParticles3D.amount defined on the subemitter node (not the main node), relative to the subemitter's particle lifetime. If the number of particles is exceeded, no new particles will spawn from the subemitter until enough particles have expired. 
bool sub_emitter_keep_velocity = false
  void set_sub_emitter_keep_velocity ( bool value )
 
bool get_sub_emitter_keep_velocity ( )
  If true, the subemitter inherits the parent particle's velocity when it spawns. 
SubEmitterMode sub_emitter_mode = 0
  void set_sub_emitter_mode ( SubEmitterMode value )
 
SubEmitterMode get_sub_emitter_mode ( )
  The particle subemitter mode (see GPUParticles2D.sub_emitter and GPUParticles3D.sub_emitter). 
Texture2D tangential_accel_curve  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Each particle's tangential acceleration will vary along this CurveTexture. 
float tangential_accel_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion. 
float tangential_accel_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of tangential_accel_max. 
bool turbulence_enabled = false
  void set_turbulence_enabled ( bool value )
 
bool get_turbulence_enabled ( )
  If true, enables turbulence for the particle system. Turbulence can be used to vary particle movement according to its position (based on a 3D noise pattern). In 3D, GPUParticlesAttractorVectorField3D with NoiseTexture3D can be used as an alternative to turbulence that works in world space and with multiple particle systems reacting in the same way. Note: Enabling turbulence has a high performance cost on the GPU. Only enable turbulence on a few particle systems at once at most, and consider disabling it when targeting mobile/web platforms. 
float turbulence_influence_max = 0.1
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum turbulence influence on each particle. The actual amount of turbulence influence on each particle is calculated as a random value between turbulence_influence_min and turbulence_influence_max and multiplied by the amount of turbulence influence from turbulence_influence_over_life. 
float turbulence_influence_min = 0.1
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum turbulence influence on each particle. The actual amount of turbulence influence on each particle is calculated as a random value between turbulence_influence_min and turbulence_influence_max and multiplied by the amount of turbulence influence from turbulence_influence_over_life. 
Texture2D turbulence_influence_over_life  void set_param_texture ( Parameter param, Texture2D texture )
 
Texture2D get_param_texture ( Parameter param ) const
  Each particle's amount of turbulence will be influenced along this CurveTexture over its life time. 
float turbulence_initial_displacement_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum displacement of each particle's spawn position by the turbulence. The actual amount of displacement will be a factor of the underlying turbulence multiplied by a random value between turbulence_initial_displacement_min and turbulence_initial_displacement_max. 
float turbulence_initial_displacement_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum displacement of each particle's spawn position by the turbulence. The actual amount of displacement will be a factor of the underlying turbulence multiplied by a random value between turbulence_initial_displacement_min and turbulence_initial_displacement_max. 
float turbulence_noise_scale = 9.0
  void set_turbulence_noise_scale ( float value )
 
float get_turbulence_noise_scale ( )
  This value controls the overall scale/frequency of the turbulence noise pattern. A small scale will result in smaller features with more detail while a high scale will result in smoother noise with larger features. 
Vector3 turbulence_noise_speed = Vector3(0, 0, 0)
  void set_turbulence_noise_speed ( Vector3 value )
 
Vector3 get_turbulence_noise_speed ( )
  A scrolling velocity for the turbulence field. This sets a directional trend for the pattern to move in over time. The default value of Vector3(0, 0, 0) turns off the scrolling. 
float turbulence_noise_speed_random = 0.2
  void set_turbulence_noise_speed_random ( float value )
 
float get_turbulence_noise_speed_random ( )
  The in-place rate of change of the turbulence field. This defines how quickly the noise pattern varies over time. A value of 0.0 will result in a fixed pattern. 
float turbulence_noise_strength = 1.0
  void set_turbulence_noise_strength ( float value )
 
float get_turbulence_noise_strength ( )
  The turbulence noise strength. Increasing this will result in a stronger, more contrasting, flow pattern. 
Texture2D velocity_limit_curve  void set_velocity_limit_curve ( Texture2D value )
 
Texture2D get_velocity_limit_curve ( )
  A CurveTexture that defines the maximum velocity of a particle during its lifetime. 
Vector3 velocity_pivot = Vector3(0, 0, 0)
  void set_velocity_pivot ( Vector3 value )
 
Vector3 get_velocity_pivot ( )
  A pivot point used to calculate radial and orbital velocity of particles.   Method Descriptions 
float get_param_max ( Parameter param ) const
 Returns the maximum value range for the given parameter. 
float get_param_min ( Parameter param ) const
 Returns the minimum value range for the given parameter. 
Texture2D get_param_texture ( Parameter param ) const
 Returns the Texture2D used by the specified parameter. 
bool get_particle_flag ( ParticleFlags particle_flag ) const
 Returns true if the specified particle flag is enabled. See ParticleFlags for options. void set_param_max ( Parameter param, float value ) Sets the maximum value range for the given parameter. void set_param_min ( Parameter param, float value ) Sets the minimum value range for the given parameter. void set_param_texture ( Parameter param, Texture2D texture ) Sets the Texture2D for the specified Parameter. void set_particle_flag ( ParticleFlags particle_flag, bool enable ) If true, enables the specified particle flag. See ParticleFlags for options.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_particleprocessmaterial.html


classes/class_acceptdialog
-----------------------------------------------------------
AcceptDialog Inherits: Window < Viewport < Node < Object Inherited By: ConfirmationDialog A base dialog used for user notification.  Description The default use of AcceptDialog is to allow it to only be accepted or closed, with the same result. However, the confirmed and canceled signals allow to make the two actions different, and the add_button method allows to add custom buttons and actions.   Properties  
bool dialog_autowrap false  
bool dialog_close_on_escape true  
bool dialog_hide_on_ok true  
String dialog_text ""  
bool exclusive true (overrides Window)  
bool keep_title_visible true (overrides Window)  
String ok_button_text "OK"  
String title "Alert!" (overrides Window)  
bool transient true (overrides Window)  
bool visible false (overrides Window)  
bool wrap_controls true (overrides Window)     Methods  
Button add_button ( String text, bool right=false, String action="" )  
Button add_cancel_button ( String name )  
Label get_label ( )  
Button get_ok_button ( )  
void register_text_enter ( Control line_edit )  
void remove_button ( Control button )     Theme Properties  
int buttons_separation 10  
StyleBox panel      Signals canceled ( ) Emitted when the dialog is closed or the button created with add_cancel_button is pressed. confirmed ( ) Emitted when the dialog is accepted, i.e. the OK button is pressed. custom_action ( StringName action ) Emitted when a custom button is pressed. See add_button.   Property Descriptions 
bool dialog_autowrap = false
  void set_autowrap ( bool value )
 
bool has_autowrap ( )
  Sets autowrapping for the text in the dialog. 
bool dialog_close_on_escape = true
  void set_close_on_escape ( bool value )
 
bool get_close_on_escape ( )
  If true, the dialog will be hidden when the escape key (@GlobalScope.KEY_ESCAPE) is pressed. 
bool dialog_hide_on_ok = true
  void set_hide_on_ok ( bool value )
 
bool get_hide_on_ok ( )
  If true, the dialog is hidden when the OK button is pressed. You can set it to false if you want to do e.g. input validation when receiving the confirmed signal, and handle hiding the dialog in your own logic. Note: Some nodes derived from this class can have a different default value, and potentially their own built-in logic overriding this setting. For example FileDialog defaults to false, and has its own input validation code that is called when you press OK, which eventually hides the dialog if the input is valid. As such, this property can't be used in FileDialog to disable hiding the dialog when pressing OK. 
String dialog_text = ""
  void set_text ( String value )
 
String get_text ( )
  The text displayed by the dialog. 
String ok_button_text = "OK"
  void set_ok_button_text ( String value )
 
String get_ok_button_text ( )
  The text displayed by the OK button (see get_ok_button).   Method Descriptions 
Button add_button ( String text, bool right=false, String action="" ) Adds a button with label text and a custom action to the dialog and returns the created button. action will be passed to the custom_action signal when pressed. If true, right will place the button to the right of any sibling buttons. You can use remove_button method to remove a button created with this method from the dialog. 
Button add_cancel_button ( String name ) Adds a button with label name and a cancel action to the dialog and returns the created button. You can use remove_button method to remove a button created with this method from the dialog. 
Label get_label ( ) Returns the label used for built-in text. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their CanvasItem.visible property. 
Button get_ok_button ( ) Returns the OK Button instance. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their CanvasItem.visible property. void register_text_enter ( Control line_edit ) Registers a LineEdit in the dialog. When the enter key is pressed, the dialog will be accepted. void remove_button ( Control button ) Removes the button from the dialog. Does NOT free the button. The button must be a Button added with add_button or add_cancel_button method. After removal, pressing the button will no longer emit this dialog's custom_action or canceled signals.   Theme Property Descriptions 
int buttons_separation = 10
 The size of the vertical space between the dialog's content and the button row. 
StyleBox panel The panel that fills the background of the window.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_acceptdialog.html


classes/class_tilesetatlassource
-----------------------------------------------------------
TileSetAtlasSource Inherits: TileSetSource < Resource < RefCounted < Object Exposes a 2D atlas texture as a set of tiles for a TileSet resource.  Description An atlas is a grid of tiles laid out on a texture. Each tile in the grid must be exposed using create_tile. Those tiles are then indexed using their coordinates in the grid. Each tile can also have a size in the grid coordinates, making it more or less cells in the atlas. Alternatives version of a tile can be created using create_alternative_tile, which are then indexed using an alternative ID. The main tile (the one in the grid), is accessed with an alternative ID equal to 0. Each tile alternate has a set of properties that is defined by the source's TileSet layers. Those properties are stored in a TileData object that can be accessed and modified using get_tile_data. As TileData properties are stored directly in the TileSetAtlasSource resource, their properties might also be set using TileSetAtlasSource.set("<coords_x>:<coords_y>/<alternative_id>/<tile_data_property>").   Properties  
Vector2i margins Vector2i(0, 0)  
Vector2i separation Vector2i(0, 0)  
Texture2D texture   
Vector2i texture_region_size Vector2i(16, 16)  
bool use_texture_padding true     Methods  
void clear_tiles_outside_texture ( )  
int create_alternative_tile ( Vector2i atlas_coords, int alternative_id_override=-1 )  
void create_tile ( Vector2i atlas_coords, Vector2i size=Vector2i(1, 1) )  
Vector2i get_atlas_grid_size ( ) const  
int get_next_alternative_tile_id ( Vector2i atlas_coords ) const  
Texture2D get_runtime_texture ( ) const  
Rect2i get_runtime_tile_texture_region ( Vector2i atlas_coords, int frame ) const  
int get_tile_animation_columns ( Vector2i atlas_coords ) const  
float get_tile_animation_frame_duration ( Vector2i atlas_coords, int frame_index ) const  
int get_tile_animation_frames_count ( Vector2i atlas_coords ) const  
TileAnimationMode get_tile_animation_mode ( Vector2i atlas_coords ) const  
Vector2i get_tile_animation_separation ( Vector2i atlas_coords ) const  
float get_tile_animation_speed ( Vector2i atlas_coords ) const  
float get_tile_animation_total_duration ( Vector2i atlas_coords ) const  
Vector2i get_tile_at_coords ( Vector2i atlas_coords ) const  
TileData get_tile_data ( Vector2i atlas_coords, int alternative_tile ) const  
Vector2i get_tile_size_in_atlas ( Vector2i atlas_coords ) const  
Rect2i get_tile_texture_region ( Vector2i atlas_coords, int frame=0 ) const  
PackedVector2Array get_tiles_to_be_removed_on_change ( Texture2D texture, Vector2i margins, Vector2i separation, Vector2i texture_region_size )  
bool has_room_for_tile ( Vector2i atlas_coords, Vector2i size, int animation_columns, Vector2i animation_separation, int frames_count, Vector2i ignored_tile=Vector2i(-1, -1) ) const  
bool has_tiles_outside_texture ( ) const  
void move_tile_in_atlas ( Vector2i atlas_coords, Vector2i new_atlas_coords=Vector2i(-1, -1), Vector2i new_size=Vector2i(-1, -1) )  
void remove_alternative_tile ( Vector2i atlas_coords, int alternative_tile )  
void remove_tile ( Vector2i atlas_coords )  
void set_alternative_tile_id ( Vector2i atlas_coords, int alternative_tile, int new_id )  
void set_tile_animation_columns ( Vector2i atlas_coords, int frame_columns )  
void set_tile_animation_frame_duration ( Vector2i atlas_coords, int frame_index, float duration )  
void set_tile_animation_frames_count ( Vector2i atlas_coords, int frames_count )  
void set_tile_animation_mode ( Vector2i atlas_coords, TileAnimationMode mode )  
void set_tile_animation_separation ( Vector2i atlas_coords, Vector2i separation )  
void set_tile_animation_speed ( Vector2i atlas_coords, float speed )     Enumerations enum TileAnimationMode: 
TileAnimationMode TILE_ANIMATION_MODE_DEFAULT = 0
 Tile animations start at same time, looking identical. 
TileAnimationMode TILE_ANIMATION_MODE_RANDOM_START_TIMES = 1
 Tile animations start at random times, looking varied. 
TileAnimationMode TILE_ANIMATION_MODE_MAX = 2
 Represents the size of the TileAnimationMode enum.   Constants TRANSFORM_FLIP_H = 4096
 Represents cell's horizontal flip flag. Should be used directly with TileMap to flip placed tiles by altering their alternative IDs. var alternate_id = $TileMap.get_cell_alternative_tile(0, Vector2i(2, 2))
if not alternate_id & TileSetAtlasSource.TRANSFORM_FLIP_H:
    # If tile is not already flipped, flip it.
    $TileMap.set_cell(0, Vector2i(2, 2), source_id, atlas_coords, alternate_id | TileSetAtlasSource.TRANSFORM_FLIP_H)
 TRANSFORM_FLIP_V = 8192
 Represents cell's vertical flip flag. See TRANSFORM_FLIP_H for usage. TRANSFORM_TRANSPOSE = 16384
 Represents cell's transposed flag. See TRANSFORM_FLIP_H for usage.   Property Descriptions 
Vector2i margins = Vector2i(0, 0)
  void set_margins ( Vector2i value )
 
Vector2i get_margins ( )
  Margins, in pixels, to offset the origin of the grid in the texture. 
Vector2i separation = Vector2i(0, 0)
  void set_separation ( Vector2i value )
 
Vector2i get_separation ( )
  Separation, in pixels, between each tile texture region of the grid. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  The atlas texture. 
Vector2i texture_region_size = Vector2i(16, 16)
  void set_texture_region_size ( Vector2i value )
 
Vector2i get_texture_region_size ( )
  The base tile size in the texture (in pixel). This size must be bigger than the TileSet's tile_size value. 
bool use_texture_padding = true
  void set_use_texture_padding ( bool value )
 
bool get_use_texture_padding ( )
  If true, generates an internal texture with an additional one pixel padding around each tile. Texture padding avoids a common artifact where lines appear between tiles. Disabling this setting might lead a small performance improvement, as generating the internal texture requires both memory and processing time when the TileSetAtlasSource resource is modified.   Method Descriptions void clear_tiles_outside_texture ( ) Removes all tiles that don't fit the available texture area. This method iterates over all the source's tiles, so it's advised to use has_tiles_outside_texture beforehand. 
int create_alternative_tile ( Vector2i atlas_coords, int alternative_id_override=-1 ) Creates an alternative tile for the tile at coordinates atlas_coords. If alternative_id_override is -1, give it an automatically generated unique ID, or assigns it the given ID otherwise. Returns the new alternative identifier, or -1 if the alternative could not be created with a provided alternative_id_override. void create_tile ( Vector2i atlas_coords, Vector2i size=Vector2i(1, 1) ) Creates a new tile at coordinates atlas_coords with the given size. 
Vector2i get_atlas_grid_size ( ) const
 Returns the atlas grid size, which depends on how many tiles can fit in the texture. It thus depends on the texture's size, the atlas margins, and the tiles' texture_region_size. 
int get_next_alternative_tile_id ( Vector2i atlas_coords ) const
 Returns the alternative ID a following call to create_alternative_tile would return. 
Texture2D get_runtime_texture ( ) const
 If use_texture_padding is false, returns texture. Otherwise, returns and internal ImageTexture created that includes the padding. 
Rect2i get_runtime_tile_texture_region ( Vector2i atlas_coords, int frame ) const
 Returns the region of the tile at coordinates atlas_coords for the given frame inside the texture returned by get_runtime_texture. Note: If use_texture_padding is false, returns the same as get_tile_texture_region. 
int get_tile_animation_columns ( Vector2i atlas_coords ) const
 Returns how many columns the tile at atlas_coords has in its animation layout. 
float get_tile_animation_frame_duration ( Vector2i atlas_coords, int frame_index ) const
 Returns the animation frame duration of frame frame_index for the tile at coordinates atlas_coords. 
int get_tile_animation_frames_count ( Vector2i atlas_coords ) const
 Returns how many animation frames has the tile at coordinates atlas_coords. 
TileAnimationMode get_tile_animation_mode ( Vector2i atlas_coords ) const
 Returns the TileAnimationMode of the tile at atlas_coords. See also set_tile_animation_mode. 
Vector2i get_tile_animation_separation ( Vector2i atlas_coords ) const
 Returns the separation (as in the atlas grid) between each frame of an animated tile at coordinates atlas_coords. 
float get_tile_animation_speed ( Vector2i atlas_coords ) const
 Returns the animation speed of the tile at coordinates atlas_coords. 
float get_tile_animation_total_duration ( Vector2i atlas_coords ) const
 Returns the sum of the sum of the frame durations of the tile at coordinates atlas_coords. This value needs to be divided by the animation speed to get the actual animation loop duration. 
Vector2i get_tile_at_coords ( Vector2i atlas_coords ) const
 If there is a tile covering the atlas_coords coordinates, returns the top-left coordinates of the tile (thus its coordinate ID). Returns Vector2i(-1, -1) otherwise. 
TileData get_tile_data ( Vector2i atlas_coords, int alternative_tile ) const
 Returns the TileData object for the given atlas coordinates and alternative ID. 
Vector2i get_tile_size_in_atlas ( Vector2i atlas_coords ) const
 Returns the size of the tile (in the grid coordinates system) at coordinates atlas_coords. 
Rect2i get_tile_texture_region ( Vector2i atlas_coords, int frame=0 ) const
 Returns a tile's texture region in the atlas texture. For animated tiles, a frame argument might be provided for the different frames of the animation. 
PackedVector2Array get_tiles_to_be_removed_on_change ( Texture2D texture, Vector2i margins, Vector2i separation, Vector2i texture_region_size ) Returns an array of tiles coordinates ID that will be automatically removed when modifying one or several of those properties: texture, margins, separation or texture_region_size. This can be used to undo changes that would have caused tiles data loss. 
bool has_room_for_tile ( Vector2i atlas_coords, Vector2i size, int animation_columns, Vector2i animation_separation, int frames_count, Vector2i ignored_tile=Vector2i(-1, -1) ) const
 Returns whether there is enough room in an atlas to create/modify a tile with the given properties. If ignored_tile is provided, act as is the given tile was not present in the atlas. This may be used when you want to modify a tile's properties. 
bool has_tiles_outside_texture ( ) const
 Checks if the source has any tiles that don't fit the texture area (either partially or completely). void move_tile_in_atlas ( Vector2i atlas_coords, Vector2i new_atlas_coords=Vector2i(-1, -1), Vector2i new_size=Vector2i(-1, -1) ) Move the tile and its alternatives at the atlas_coords coordinates to the new_atlas_coords coordinates with the new_size size. This functions will fail if a tile is already present in the given area. If new_atlas_coords is Vector2i(-1, -1), keeps the tile's coordinates. If new_size is Vector2i(-1, -1), keeps the tile's size. To avoid an error, first check if a move is possible using has_room_for_tile. void remove_alternative_tile ( Vector2i atlas_coords, int alternative_tile ) Remove a tile's alternative with alternative ID alternative_tile. Calling this function with alternative_tile equals to 0 will fail, as the base tile alternative cannot be removed. void remove_tile ( Vector2i atlas_coords ) Remove a tile and its alternative at coordinates atlas_coords. void set_alternative_tile_id ( Vector2i atlas_coords, int alternative_tile, int new_id ) Change a tile's alternative ID from alternative_tile to new_id. Calling this function with new_id of 0 will fail, as the base tile alternative cannot be moved. void set_tile_animation_columns ( Vector2i atlas_coords, int frame_columns ) Sets the number of columns in the animation layout of the tile at coordinates atlas_coords. If set to 0, then the different frames of the animation are laid out as a single horizontal line in the atlas. void set_tile_animation_frame_duration ( Vector2i atlas_coords, int frame_index, float duration ) Sets the animation frame duration of frame frame_index for the tile at coordinates atlas_coords. void set_tile_animation_frames_count ( Vector2i atlas_coords, int frames_count ) Sets how many animation frames the tile at coordinates atlas_coords has. void set_tile_animation_mode ( Vector2i atlas_coords, TileAnimationMode mode ) Sets the TileAnimationMode of the tile at atlas_coords to mode. See also get_tile_animation_mode. void set_tile_animation_separation ( Vector2i atlas_coords, Vector2i separation ) Sets the margin (in grid tiles) between each tile in the animation layout of the tile at coordinates atlas_coords has. void set_tile_animation_speed ( Vector2i atlas_coords, float speed ) Sets the animation speed of the tile at coordinates atlas_coords has.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_tilesetatlassource.html


classes/class_csgshape3d
-----------------------------------------------------------
CSGShape3D Inherits: GeometryInstance3D < VisualInstance3D < Node3D < Node < Object Inherited By: CSGCombiner3D, CSGPrimitive3D The CSG base class.  Description This is the CSG base class that provides CSG operation support to the various CSG nodes in Godot. Note: CSG nodes are intended to be used for level prototyping. Creating CSG nodes has a significant CPU cost compared to creating a MeshInstance3D with a PrimitiveMesh. Moving a CSG node within another CSG node also has a significant CPU cost, so it should be avoided during gameplay.   Tutorials  Prototyping levels with CSG    Properties  
bool calculate_tangents true  
int collision_layer 1  
int collision_mask 1  
float collision_priority 1.0  
Operation operation 0  
float snap 0.001  
bool use_collision false     Methods  
bool get_collision_layer_value ( int layer_number ) const  
bool get_collision_mask_value ( int layer_number ) const  
Array get_meshes ( ) const  
bool is_root_shape ( ) const  
void set_collision_layer_value ( int layer_number, bool value )  
void set_collision_mask_value ( int layer_number, bool value )     Enumerations enum Operation: 
Operation OPERATION_UNION = 0
 Geometry of both primitives is merged, intersecting geometry is removed. 
Operation OPERATION_INTERSECTION = 1
 Only intersecting geometry remains, the rest is removed. 
Operation OPERATION_SUBTRACTION = 2
 The second shape is subtracted from the first, leaving a dent with its shape.   Property Descriptions 
bool calculate_tangents = true
  void set_calculate_tangents ( bool value )
 
bool is_calculating_tangents ( )
  Calculate tangents for the CSG shape which allows the use of normal maps. This is only applied on the root shape, this setting is ignored on any child. 
int collision_layer = 1
  void set_collision_layer ( int value )
 
int get_collision_layer ( )
  The physics layers this area is in. Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property. A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. See Collision layers and masks in the documentation for more information. 
int collision_mask = 1
  void set_collision_mask ( int value )
 
int get_collision_mask ( )
  The physics layers this CSG shape scans for collisions. Only effective if use_collision is true. See Collision layers and masks in the documentation for more information. 
float collision_priority = 1.0
  void set_collision_priority ( float value )
 
float get_collision_priority ( )
  The priority used to solve colliding when occurring penetration. Only effective if use_collision is true. The higher the priority is, the lower the penetration into the object will be. This can for example be used to prevent the player from breaking through the boundaries of a level. 
Operation operation = 0
  void set_operation ( Operation value )
 
Operation get_operation ( )
  The operation that is performed on this shape. This is ignored for the first CSG child node as the operation is between this node and the previous child of this nodes parent. 
float snap = 0.001
  void set_snap ( float value )
 
float get_snap ( )
  Snap makes the mesh vertices snap to a given distance so that the faces of two meshes can be perfectly aligned. A lower value results in greater precision but may be harder to adjust. 
bool use_collision = false
  void set_use_collision ( bool value )
 
bool is_using_collision ( )
  Adds a collision shape to the physics engine for our CSG shape. This will always act like a static body. Note that the collision shape is still active even if the CSG shape itself is hidden. See also collision_mask and collision_priority.   Method Descriptions 
bool get_collision_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_layer is enabled, given a layer_number between 1 and 32. 
bool get_collision_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_mask is enabled, given a layer_number between 1 and 32. 
Array get_meshes ( ) const
 Returns an Array with two elements, the first is the Transform3D of this node and the second is the root Mesh of this node. Only works when this node is the root shape. 
bool is_root_shape ( ) const
 Returns true if this is a root shape and is thus the object that is rendered. void set_collision_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_layer, given a layer_number between 1 and 32. void set_collision_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_mask, given a layer_number between 1 and 32.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_csgshape3d.html


classes/class_lightmapgi
-----------------------------------------------------------
LightmapGI Inherits: VisualInstance3D < Node3D < Node < Object Computes and stores baked lightmaps for fast global illumination.  Description The LightmapGI node is used to compute and store baked lightmaps. Lightmaps are used to provide high-quality indirect lighting with very little light leaking. LightmapGI can also provide rough reflections using spherical harmonics if directional is enabled. Dynamic objects can receive indirect lighting thanks to light probes, which can be automatically placed by setting generate_probes_subdiv to a value other than GENERATE_PROBES_DISABLED. Additional lightmap probes can also be added by creating LightmapProbe nodes. The downside is that lightmaps are fully static and cannot be baked in an exported project. Baking a LightmapGI node is also slower compared to VoxelGI. Procedural generation: Lightmap baking functionality is only available in the editor. This means LightmapGI is not suited to procedurally generated or user-built levels. For procedurally generated or user-built levels, use VoxelGI or SDFGI instead (see Environment.sdfgi_enabled). Performance: LightmapGI provides the best possible run-time performance for global illumination. It is suitable for low-end hardware including integrated graphics and mobile devices. Note: Due to how lightmaps work, most properties only have a visible effect once lightmaps are baked again. Note: Lightmap baking on CSGShape3Ds and PrimitiveMeshes is not supported, as these cannot store UV2 data required for baking. Note: If no custom lightmappers are installed, LightmapGI can only be baked when using the Vulkan backend (Forward+ or Mobile), not OpenGL. Additionally, LightmapGI rendering is not currently supported when using the OpenGL backend (Compatibility).   Tutorials  Using Lightmap global illumination    Properties  
float bias 0.0005  
float bounce_indirect_energy 1.0  
int bounces 3  
CameraAttributes camera_attributes   
float denoiser_strength 0.1  
bool directional false  
Color environment_custom_color   
float environment_custom_energy   
Sky environment_custom_sky   
EnvironmentMode environment_mode 1  
GenerateProbes generate_probes_subdiv 2  
bool interior false  
LightmapGIData light_data   
int max_texture_size 16384  
BakeQuality quality 1  
bool use_denoiser true  
bool use_texture_for_bounces true     Enumerations enum BakeQuality: 
BakeQuality BAKE_QUALITY_LOW = 0
 Low bake quality (fastest bake times). The quality of this preset can be adjusted by changing ProjectSettings.rendering/lightmapping/bake_quality/low_quality_ray_count and ProjectSettings.rendering/lightmapping/bake_quality/low_quality_probe_ray_count. 
BakeQuality BAKE_QUALITY_MEDIUM = 1
 Medium bake quality (fast bake times). The quality of this preset can be adjusted by changing ProjectSettings.rendering/lightmapping/bake_quality/medium_quality_ray_count and ProjectSettings.rendering/lightmapping/bake_quality/medium_quality_probe_ray_count. 
BakeQuality BAKE_QUALITY_HIGH = 2
 High bake quality (slow bake times). The quality of this preset can be adjusted by changing ProjectSettings.rendering/lightmapping/bake_quality/high_quality_ray_count and ProjectSettings.rendering/lightmapping/bake_quality/high_quality_probe_ray_count. 
BakeQuality BAKE_QUALITY_ULTRA = 3
 Highest bake quality (slowest bake times). The quality of this preset can be adjusted by changing ProjectSettings.rendering/lightmapping/bake_quality/ultra_quality_ray_count and ProjectSettings.rendering/lightmapping/bake_quality/ultra_quality_probe_ray_count. enum GenerateProbes: 
GenerateProbes GENERATE_PROBES_DISABLED = 0
 Don't generate lightmap probes for lighting dynamic objects. 
GenerateProbes GENERATE_PROBES_SUBDIV_4 = 1
 Lowest level of subdivision (fastest bake times, smallest file sizes). 
GenerateProbes GENERATE_PROBES_SUBDIV_8 = 2
 Low level of subdivision (fast bake times, small file sizes). 
GenerateProbes GENERATE_PROBES_SUBDIV_16 = 3
 High level of subdivision (slow bake times, large file sizes). 
GenerateProbes GENERATE_PROBES_SUBDIV_32 = 4
 Highest level of subdivision (slowest bake times, largest file sizes). enum BakeError: 
BakeError BAKE_ERROR_OK = 0
 Lightmap baking was successful. 
BakeError BAKE_ERROR_NO_SCENE_ROOT = 1
 Lightmap baking failed because the root node for the edited scene could not be accessed. 
BakeError BAKE_ERROR_FOREIGN_DATA = 2
 Lightmap baking failed as the lightmap data resource is embedded in a foreign resource. 
BakeError BAKE_ERROR_NO_LIGHTMAPPER = 3
 Lightmap baking failed as there is no lightmapper available in this Godot build. 
BakeError BAKE_ERROR_NO_SAVE_PATH = 4
 Lightmap baking failed as the LightmapGIData save path isn't configured in the resource. 
BakeError BAKE_ERROR_NO_MESHES = 5
 Lightmap baking failed as there are no meshes whose GeometryInstance3D.gi_mode is GeometryInstance3D.GI_MODE_STATIC and with valid UV2 mapping in the current scene. You may need to select 3D scenes in the Import dock and change their global illumination mode accordingly. 
BakeError BAKE_ERROR_MESHES_INVALID = 6
 Lightmap baking failed as the lightmapper failed to analyze some of the meshes marked as static for baking. 
BakeError BAKE_ERROR_CANT_CREATE_IMAGE = 7
 Lightmap baking failed as the resulting image couldn't be saved or imported by Godot after it was saved. 
BakeError BAKE_ERROR_USER_ABORTED = 8
 The user aborted the lightmap baking operation (typically by clicking the Cancel button in the progress dialog). 
BakeError BAKE_ERROR_TEXTURE_SIZE_TOO_SMALL = 9
 Lightmap baking failed as the maximum texture size is too small to fit some of the meshes marked for baking. enum EnvironmentMode: 
EnvironmentMode ENVIRONMENT_MODE_DISABLED = 0
 Ignore environment lighting when baking lightmaps. 
EnvironmentMode ENVIRONMENT_MODE_SCENE = 1
 Use the scene's environment lighting when baking lightmaps. Note: If baking lightmaps in a scene with no WorldEnvironment node, this will act like ENVIRONMENT_MODE_DISABLED. The editor's preview sky and sun is not taken into account by LightmapGI when baking lightmaps. 
EnvironmentMode ENVIRONMENT_MODE_CUSTOM_SKY = 2
 Use environment_custom_sky as a source of environment lighting when baking lightmaps. 
EnvironmentMode ENVIRONMENT_MODE_CUSTOM_COLOR = 3
 Use environment_custom_color multiplied by environment_custom_energy as a constant source of environment lighting when baking lightmaps.   Property Descriptions 
float bias = 0.0005
  void set_bias ( float value )
 
float get_bias ( )
  The bias to use when computing shadows. Increasing bias can fix shadow acne on the resulting baked lightmap, but can introduce peter-panning (shadows not connecting to their casters). Real-time Light3D shadows are not affected by this bias property. 
float bounce_indirect_energy = 1.0
  void set_bounce_indirect_energy ( float value )
 
float get_bounce_indirect_energy ( )
  The energy multiplier for each bounce. Higher values will make indirect lighting brighter. A value of 1.0 represents physically accurate behavior, but higher values can be used to make indirect lighting propagate more visibly when using a low number of bounces. This can be used to speed up bake times by lowering the number of bounces then increasing bounce_indirect_energy. Note: bounce_indirect_energy only has an effect if bounces is set to a value greater than or equal to 1. 
int bounces = 3
  void set_bounces ( int value )
 
int get_bounces ( )
  Number of light bounces that are taken into account during baking. Higher values result in brighter, more realistic lighting, at the cost of longer bake times. If set to 0, only environment lighting, direct light and emissive lighting is baked. 
CameraAttributes camera_attributes  void set_camera_attributes ( CameraAttributes value )
 
CameraAttributes get_camera_attributes ( )
  The CameraAttributes resource that specifies exposure levels to bake at. Auto-exposure and non exposure properties will be ignored. Exposure settings should be used to reduce the dynamic range present when baking. If exposure is too high, the LightmapGI will have banding artifacts or may have over-exposure artifacts. 
float denoiser_strength = 0.1
  void set_denoiser_strength ( float value )
 
float get_denoiser_strength ( )
  The strength of denoising step applied to the generated lightmaps. Only effective if use_denoiser is true and ProjectSettings.rendering/lightmapping/denoising/denoiser is set to JNLM. 
bool directional = false
  void set_directional ( bool value )
 
bool is_directional ( )
  If true, bakes lightmaps to contain directional information as spherical harmonics. This results in more realistic lighting appearance, especially with normal mapped materials and for lights that have their direct light baked (Light3D.light_bake_mode set to Light3D.BAKE_STATIC and with Light3D.editor_only set to false). The directional information is also used to provide rough reflections for static and dynamic objects. This has a small run-time performance cost as the shader has to perform more work to interpret the direction information from the lightmap. Directional lightmaps also take longer to bake and result in larger file sizes. Note: The property's name has no relationship with DirectionalLight3D. directional works with all light types. 
Color environment_custom_color  void set_environment_custom_color ( Color value )
 
Color get_environment_custom_color ( )
  The color to use for environment lighting. Only effective if environment_mode is ENVIRONMENT_MODE_CUSTOM_COLOR. 
float environment_custom_energy  void set_environment_custom_energy ( float value )
 
float get_environment_custom_energy ( )
  The color multiplier to use for environment lighting. Only effective if environment_mode is ENVIRONMENT_MODE_CUSTOM_COLOR. 
Sky environment_custom_sky  void set_environment_custom_sky ( Sky value )
 
Sky get_environment_custom_sky ( )
  The sky to use as a source of environment lighting. Only effective if environment_mode is ENVIRONMENT_MODE_CUSTOM_SKY. 
EnvironmentMode environment_mode = 1
  void set_environment_mode ( EnvironmentMode value )
 
EnvironmentMode get_environment_mode ( )
  The environment mode to use when baking lightmaps. 
GenerateProbes generate_probes_subdiv = 2
  void set_generate_probes ( GenerateProbes value )
 
GenerateProbes get_generate_probes ( )
  The level of subdivision to use when automatically generating LightmapProbes for dynamic object lighting. Higher values result in more accurate indirect lighting on dynamic objects, at the cost of longer bake times and larger file sizes. Note: Automatically generated LightmapProbes are not visible as nodes in the Scene tree dock, and cannot be modified this way after they are generated. Note: Regardless of generate_probes_subdiv, direct lighting on dynamic objects is always applied using Light3D nodes in real-time. 
bool interior = false
  void set_interior ( bool value )
 
bool is_interior ( )
  If true, ignore environment lighting when baking lightmaps. 
LightmapGIData light_data  void set_light_data ( LightmapGIData value )
 
LightmapGIData get_light_data ( )
  The LightmapGIData associated to this LightmapGI node. This resource is automatically created after baking, and is not meant to be created manually. 
int max_texture_size = 16384
  void set_max_texture_size ( int value )
 
int get_max_texture_size ( )
  The maximum texture size for the generated texture atlas. Higher values will result in fewer slices being generated, but may not work on all hardware as a result of hardware limitations on texture sizes. Leave max_texture_size at its default value of 16384 if unsure. 
BakeQuality quality = 1
  void set_bake_quality ( BakeQuality value )
 
BakeQuality get_bake_quality ( )
  The quality preset to use when baking lightmaps. This affects bake times, but output file sizes remain mostly identical across quality levels. To further speed up bake times, decrease bounces, disable use_denoiser and increase the lightmap texel size on 3D scenes in the Import doc. 
bool use_denoiser = true
  void set_use_denoiser ( bool value )
 
bool is_using_denoiser ( )
  If true, uses a GPU-based denoising algorithm on the generated lightmap. This eliminates most noise within the generated lightmap at the cost of longer bake times. File sizes are generally not impacted significantly by the use of a denoiser, although lossless compression may do a better job at compressing a denoised image. 
bool use_texture_for_bounces = true
  void set_use_texture_for_bounces ( bool value )
 
bool is_using_texture_for_bounces ( )
  If true, a texture with the lighting information will be generated to speed up the generation of indirect lighting at the cost of some accuracy. The geometry might exhibit extra light leak artifacts when using low resolution lightmaps or UVs that stretch the lightmap significantly across surfaces. Leave use_texture_for_bounces at its default value of true if unsure. Note: use_texture_for_bounces only has an effect if bounces is set to a value greater than or equal to 1.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_lightmapgi.html


classes/class_gpuparticlescollisionsdf3d
-----------------------------------------------------------
GPUParticlesCollisionSDF3D Inherits: GPUParticlesCollision3D < VisualInstance3D < Node3D < Node < Object A baked signed distance field 3D particle collision shape affecting GPUParticles3D nodes.  Description A baked signed distance field 3D particle collision shape affecting GPUParticles3D nodes. Signed distance fields (SDF) allow for efficiently representing approximate collision shapes for convex and concave objects of any shape. This is more flexible than GPUParticlesCollisionHeightField3D, but it requires a baking step. Baking: The signed distance field texture can be baked by selecting the GPUParticlesCollisionSDF3D node in the editor, then clicking Bake SDF at the top of the 3D viewport. Any visible MeshInstance3Ds within the size will be taken into account for baking, regardless of their GeometryInstance3D.gi_mode. Note: Baking a GPUParticlesCollisionSDF3D's texture is only possible within the editor, as there is no bake method exposed for use in exported projects. However, it's still possible to load pre-baked Texture3Ds into its texture property in an exported project. Note: ParticleProcessMaterial.collision_mode must be ParticleProcessMaterial.COLLISION_RIGID or ParticleProcessMaterial.COLLISION_HIDE_ON_CONTACT on the GPUParticles3D's process material for collision to work. Note: Particle collision only affects GPUParticles3D, not CPUParticles3D.   Properties  
int bake_mask 4294967295  
Resolution resolution 2  
Vector3 size Vector3(2, 2, 2)  
Texture3D texture   
float thickness 1.0     Methods  
bool get_bake_mask_value ( int layer_number ) const  
void set_bake_mask_value ( int layer_number, bool value )     Enumerations enum Resolution: 
Resolution RESOLUTION_16 = 0
 Bake a 16Ã—16Ã—16 signed distance field. This is the fastest option, but also the least precise. 
Resolution RESOLUTION_32 = 1
 Bake a 32Ã—32Ã—32 signed distance field. 
Resolution RESOLUTION_64 = 2
 Bake a 64Ã—64Ã—64 signed distance field. 
Resolution RESOLUTION_128 = 3
 Bake a 128Ã—128Ã—128 signed distance field. 
Resolution RESOLUTION_256 = 4
 Bake a 256Ã—256Ã—256 signed distance field. 
Resolution RESOLUTION_512 = 5
 Bake a 512Ã—512Ã—512 signed distance field. This is the slowest option, but also the most precise. 
Resolution RESOLUTION_MAX = 6
 Represents the size of the Resolution enum.   Property Descriptions 
int bake_mask = 4294967295
  void set_bake_mask ( int value )
 
int get_bake_mask ( )
  The visual layers to account for when baking the particle collision SDF. Only MeshInstance3Ds whose VisualInstance3D.layers match with this bake_mask will be included in the generated particle collision SDF. By default, all objects are taken into account for the particle collision SDF baking. 
Resolution resolution = 2
  void set_resolution ( Resolution value )
 
Resolution get_resolution ( )
  The bake resolution to use for the signed distance field texture. The texture must be baked again for changes to the resolution property to be effective. Higher resolutions have a greater performance cost and take more time to bake. Higher resolutions also result in larger baked textures, leading to increased VRAM and storage space requirements. To improve performance and reduce bake times, use the lowest resolution possible for the object you're representing the collision of. 
Vector3 size = Vector3(2, 2, 2)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The collision SDF's size in 3D units. To improve SDF quality, the size should be set as small as possible while covering the parts of the scene you need. 
Texture3D texture  void set_texture ( Texture3D value )
 
Texture3D get_texture ( )
  The 3D texture representing the signed distance field. 
float thickness = 1.0
  void set_thickness ( float value )
 
float get_thickness ( )
  The collision shape's thickness. Unlike other particle colliders, GPUParticlesCollisionSDF3D is actually hollow on the inside. thickness can be increased to prevent particles from tunneling through the collision shape at high speeds, or when the GPUParticlesCollisionSDF3D is moved.   Method Descriptions 
bool get_bake_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the bake_mask is enabled, given a layer_number between 1 and 32. void set_bake_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the bake_mask, given a layer_number between 1 and 32.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gpuparticlescollisionsdf3d.html


classes/class_skeletonik3d
-----------------------------------------------------------
SkeletonIK3D Inherits: Node < Object A node used to rotate all bones of a Skeleton3D bone chain a way that places the end bone at a desired 3D position.  Description SkeletonIK3D is used to rotate all bones of a Skeleton3D bone chain a way that places the end bone at a desired 3D position. A typical scenario for IK in games is to place a character's feet on the ground or a character's hands on a currently held object. SkeletonIK uses FabrikInverseKinematic internally to solve the bone chain and applies the results to the Skeleton3D bones_global_pose_override property for all affected bones in the chain. If fully applied, this overwrites any bone transform from Animations or bone custom poses set by users. The applied amount can be controlled with the interpolation property. # Apply IK effect automatically on every new frame (not the current)
skeleton_ik_node.start()
# Apply IK effect only on the current frame
skeleton_ik_node.start(true)
# Stop IK effect and reset bones_global_pose_override on Skeleton
skeleton_ik_node.stop()
# Apply full IK effect
skeleton_ik_node.set_interpolation(1.0)
# Apply half IK effect
skeleton_ik_node.set_interpolation(0.5)
# Apply zero IK effect (a value at or below 0.01 also removes bones_global_pose_override on Skeleton)
skeleton_ik_node.set_interpolation(0.0)
 Deprecated. This class is deprecated, and might be removed in a future release.   Tutorials  3D Inverse Kinematics Demo    Properties  
float interpolation 1.0  
Vector3 magnet Vector3(0, 0, 0)  
int max_iterations 10  
float min_distance 0.01  
bool override_tip_basis true  
StringName root_bone &""  
Transform3D target Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)  
NodePath target_node NodePath("")  
StringName tip_bone &""  
bool use_magnet false     Methods  
Skeleton3D get_parent_skeleton ( ) const  
bool is_running ( )  
void start ( bool one_time=false )  
void stop ( )     Property Descriptions 
float interpolation = 1.0
  void set_interpolation ( float value )
 
float get_interpolation ( )
  Interpolation value for how much the IK results are applied to the current skeleton bone chain. A value of 1.0 will overwrite all skeleton bone transforms completely while a value of 0.0 will visually disable the SkeletonIK. A value at or below 0.01 also calls Skeleton3D.clear_bones_global_pose_override. 
Vector3 magnet = Vector3(0, 0, 0)
  void set_magnet_position ( Vector3 value )
 
Vector3 get_magnet_position ( )
  Secondary target position (first is target property or target_node) for the IK chain. Use magnet position (pole target) to control the bending of the IK chain. Only works if the bone chain has more than 2 bones. The middle chain bone position will be linearly interpolated with the magnet position. 
int max_iterations = 10
  void set_max_iterations ( int value )
 
int get_max_iterations ( )
  Number of iteration loops used by the IK solver to produce more accurate (and elegant) bone chain results. 
float min_distance = 0.01
  void set_min_distance ( float value )
 
float get_min_distance ( )
  The minimum distance between bone and goal target. If the distance is below this value, the IK solver stops further iterations. 
bool override_tip_basis = true
  void set_override_tip_basis ( bool value )
 
bool is_override_tip_basis ( )
  If true overwrites the rotation of the tip bone with the rotation of the target (or target_node if defined). 
StringName root_bone = &""
  void set_root_bone ( StringName value )
 
StringName get_root_bone ( )
  The name of the current root bone, the first bone in the IK chain. 
Transform3D target = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
  void set_target_transform ( Transform3D value )
 
Transform3D get_target_transform ( )
  First target of the IK chain where the tip bone is placed and, if override_tip_basis is true, how the tip bone is rotated. If a target_node path is available the nodes transform is used instead and this property is ignored. 
NodePath target_node = NodePath("")
  void set_target_node ( NodePath value )
 
NodePath get_target_node ( )
  Target node NodePath for the IK chain. If available, the node's current Transform3D is used instead of the target property. 
StringName tip_bone = &""
  void set_tip_bone ( StringName value )
 
StringName get_tip_bone ( )
  The name of the current tip bone, the last bone in the IK chain placed at the target transform (or target_node if defined). 
bool use_magnet = false
  void set_use_magnet ( bool value )
 
bool is_using_magnet ( )
  If true, instructs the IK solver to consider the secondary magnet target (pole target) when calculating the bone chain. Use the magnet position (pole target) to control the bending of the IK chain.   Method Descriptions 
Skeleton3D get_parent_skeleton ( ) const
 Returns the parent Skeleton3D Node that was present when SkeletonIK entered the SceneTree. Returns null if the parent node was not a Skeleton3D Node when SkeletonIK3D entered the SceneTree. 
bool is_running ( ) Returns true if SkeletonIK is applying IK effects on continues frames to the Skeleton3D bones. Returns false if SkeletonIK is stopped or start was used with the one_time parameter set to true. void start ( bool one_time=false ) Starts applying IK effects on each frame to the Skeleton3D bones but will only take effect starting on the next frame. If one_time is true, this will take effect immediately but also reset on the next frame. void stop ( ) Stops applying IK effects on each frame to the Skeleton3D bones and also calls Skeleton3D.clear_bones_global_pose_override to remove existing overrides on all bones.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeletonik3d.html


classes/class_light2d
-----------------------------------------------------------
Light2D Inherits: Node2D < CanvasItem < Node < Object Inherited By: DirectionalLight2D, PointLight2D Casts light in a 2D environment.  Description Casts light in a 2D environment. A light is defined as a color, an energy value, a mode (see constants), and various other parameters (range and shadows-related).   Tutorials  2D lights and shadows    Properties  
BlendMode blend_mode 0  
Color color Color(1, 1, 1, 1)  
bool editor_only false  
bool enabled true  
float energy 1.0  
int range_item_cull_mask 1  
int range_layer_max 0  
int range_layer_min 0  
int range_z_max 1024  
int range_z_min -1024  
Color shadow_color Color(0, 0, 0, 0)  
bool shadow_enabled false  
ShadowFilter shadow_filter 0  
float shadow_filter_smooth 0.0  
int shadow_item_cull_mask 1     Methods  
float get_height ( ) const  
void set_height ( float height )     Enumerations enum ShadowFilter: 
ShadowFilter SHADOW_FILTER_NONE = 0
 No filter applies to the shadow map. This provides hard shadow edges and is the fastest to render. See shadow_filter. 
ShadowFilter SHADOW_FILTER_PCF5 = 1
 Percentage closer filtering (5 samples) applies to the shadow map. This is slower compared to hard shadow rendering. See shadow_filter. 
ShadowFilter SHADOW_FILTER_PCF13 = 2
 Percentage closer filtering (13 samples) applies to the shadow map. This is the slowest shadow filtering mode, and should be used sparingly. See shadow_filter. enum BlendMode: 
BlendMode BLEND_MODE_ADD = 0
 Adds the value of pixels corresponding to the Light2D to the values of pixels under it. This is the common behavior of a light. 
BlendMode BLEND_MODE_SUB = 1
 Subtracts the value of pixels corresponding to the Light2D to the values of pixels under it, resulting in inversed light effect. 
BlendMode BLEND_MODE_MIX = 2
 Mix the value of pixels corresponding to the Light2D to the values of pixels under it by linear interpolation.   Property Descriptions 
BlendMode blend_mode = 0
  void set_blend_mode ( BlendMode value )
 
BlendMode get_blend_mode ( )
  The Light2D's blend mode. See BlendMode constants for values. 
Color color = Color(1, 1, 1, 1)
  void set_color ( Color value )
 
Color get_color ( )
  The Light2D's Color. 
bool editor_only = false
  void set_editor_only ( bool value )
 
bool is_editor_only ( )
  If true, Light2D will only appear when editing the scene. 
bool enabled = true
  void set_enabled ( bool value )
 
bool is_enabled ( )
  If true, Light2D will emit light. 
float energy = 1.0
  void set_energy ( float value )
 
float get_energy ( )
  The Light2D's energy value. The larger the value, the stronger the light. 
int range_item_cull_mask = 1
  void set_item_cull_mask ( int value )
 
int get_item_cull_mask ( )
  The layer mask. Only objects with a matching CanvasItem.light_mask will be affected by the Light2D. See also shadow_item_cull_mask, which affects which objects can cast shadows. Note: range_item_cull_mask is ignored by DirectionalLight2D, which will always light a 2D node regardless of the 2D node's CanvasItem.light_mask. 
int range_layer_max = 0
  void set_layer_range_max ( int value )
 
int get_layer_range_max ( )
  Maximum layer value of objects that are affected by the Light2D. 
int range_layer_min = 0
  void set_layer_range_min ( int value )
 
int get_layer_range_min ( )
  Minimum layer value of objects that are affected by the Light2D. 
int range_z_max = 1024
  void set_z_range_max ( int value )
 
int get_z_range_max ( )
  Maximum z value of objects that are affected by the Light2D. 
int range_z_min = -1024
  void set_z_range_min ( int value )
 
int get_z_range_min ( )
  Minimum z value of objects that are affected by the Light2D. 
Color shadow_color = Color(0, 0, 0, 0)
  void set_shadow_color ( Color value )
 
Color get_shadow_color ( )
  Color of shadows cast by the Light2D. 
bool shadow_enabled = false
  void set_shadow_enabled ( bool value )
 
bool is_shadow_enabled ( )
  If true, the Light2D will cast shadows. 
ShadowFilter shadow_filter = 0
  void set_shadow_filter ( ShadowFilter value )
 
ShadowFilter get_shadow_filter ( )
  Shadow filter type. See ShadowFilter for possible values. 
float shadow_filter_smooth = 0.0
  void set_shadow_smooth ( float value )
 
float get_shadow_smooth ( )
  Smoothing value for shadows. Higher values will result in softer shadows, at the cost of visible streaks that can appear in shadow rendering. shadow_filter_smooth only has an effect if shadow_filter is SHADOW_FILTER_PCF5 or SHADOW_FILTER_PCF13. 
int shadow_item_cull_mask = 1
  void set_item_shadow_cull_mask ( int value )
 
int get_item_shadow_cull_mask ( )
  The shadow mask. Used with LightOccluder2D to cast shadows. Only occluders with a matching CanvasItem.light_mask will cast shadows. See also range_item_cull_mask, which affects which objects can receive the light.   Method Descriptions 
float get_height ( ) const
 Returns the light's height, which is used in 2D normal mapping. See PointLight2D.height and DirectionalLight2D.height. void set_height ( float height ) Sets the light's height, which is used in 2D normal mapping. See PointLight2D.height and DirectionalLight2D.height.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_light2d.html


classes/class_hflowcontainer
-----------------------------------------------------------
HFlowContainer Inherits: FlowContainer < Container < Control < CanvasItem < Node < Object A container that arranges its child controls horizontally and wraps them around at the borders.  Description A variant of FlowContainer that can only arrange its child controls horizontally, wrapping them around at the borders. This is similar to how text in a book wraps around when no more words can fit on a line.   Tutorials  Using Containers   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_hflowcontainer.html


classes/class_cpuparticles3d
-----------------------------------------------------------
CPUParticles3D Inherits: GeometryInstance3D < VisualInstance3D < Node3D < Node < Object A CPU-based 3D particle emitter.  Description CPU-based 3D particle node used to create a variety of particle systems and effects. See also GPUParticles3D, which provides the same functionality with hardware acceleration, but may not run on older devices.   Tutorials  Particle systems (3D)    Properties  
int amount 8  
Curve angle_curve   
float angle_max 0.0  
float angle_min 0.0  
Curve angular_velocity_curve   
float angular_velocity_max 0.0  
float angular_velocity_min 0.0  
Curve anim_offset_curve   
float anim_offset_max 0.0  
float anim_offset_min 0.0  
Curve anim_speed_curve   
float anim_speed_max 0.0  
float anim_speed_min 0.0  
Color color Color(1, 1, 1, 1)  
Gradient color_initial_ramp   
Gradient color_ramp   
Curve damping_curve   
float damping_max 0.0  
float damping_min 0.0  
Vector3 direction Vector3(1, 0, 0)  
DrawOrder draw_order 0  
Vector3 emission_box_extents   
PackedColorArray emission_colors PackedColorArray()  
PackedVector3Array emission_normals   
PackedVector3Array emission_points   
Vector3 emission_ring_axis   
float emission_ring_height   
float emission_ring_inner_radius   
float emission_ring_radius   
EmissionShape emission_shape 0  
float emission_sphere_radius   
bool emitting true  
float explosiveness 0.0  
int fixed_fps 0  
float flatness 0.0  
bool fract_delta true  
Vector3 gravity Vector3(0, -9.8, 0)  
Curve hue_variation_curve   
float hue_variation_max 0.0  
float hue_variation_min 0.0  
float initial_velocity_max 0.0  
float initial_velocity_min 0.0  
float lifetime 1.0  
float lifetime_randomness 0.0  
Curve linear_accel_curve   
float linear_accel_max 0.0  
float linear_accel_min 0.0  
bool local_coords false  
Mesh mesh   
bool one_shot false  
Curve orbit_velocity_curve   
float orbit_velocity_max   
float orbit_velocity_min   
bool particle_flag_align_y false  
bool particle_flag_disable_z false  
bool particle_flag_rotate_y false  
float preprocess 0.0  
Curve radial_accel_curve   
float radial_accel_max 0.0  
float radial_accel_min 0.0  
float randomness 0.0  
Curve scale_amount_curve   
float scale_amount_max 1.0  
float scale_amount_min 1.0  
Curve scale_curve_x   
Curve scale_curve_y   
Curve scale_curve_z   
float speed_scale 1.0  
bool split_scale false  
float spread 45.0  
Curve tangential_accel_curve   
float tangential_accel_max 0.0  
float tangential_accel_min 0.0     Methods  
void convert_from_particles ( Node particles )  
Curve get_param_curve ( Parameter param ) const  
float get_param_max ( Parameter param ) const  
float get_param_min ( Parameter param ) const  
bool get_particle_flag ( ParticleFlags particle_flag ) const  
void restart ( )  
void set_param_curve ( Parameter param, Curve curve )  
void set_param_max ( Parameter param, float value )  
void set_param_min ( Parameter param, float value )  
void set_particle_flag ( ParticleFlags particle_flag, bool enable )     Signals finished ( ) Emitted when all active particles have finished processing. When one_shot is disabled, particles will process continuously, so this is never emitted.   Enumerations enum DrawOrder: 
DrawOrder DRAW_ORDER_INDEX = 0
 Particles are drawn in the order emitted. 
DrawOrder DRAW_ORDER_LIFETIME = 1
 Particles are drawn in order of remaining lifetime. In other words, the particle with the highest lifetime is drawn at the front. 
DrawOrder DRAW_ORDER_VIEW_DEPTH = 2
 Particles are drawn in order of depth. enum Parameter: 
Parameter PARAM_INITIAL_LINEAR_VELOCITY = 0
 Use with set_param_min, set_param_max, and set_param_curve to set initial velocity properties. 
Parameter PARAM_ANGULAR_VELOCITY = 1
 Use with set_param_min, set_param_max, and set_param_curve to set angular velocity properties. 
Parameter PARAM_ORBIT_VELOCITY = 2
 Use with set_param_min, set_param_max, and set_param_curve to set orbital velocity properties. 
Parameter PARAM_LINEAR_ACCEL = 3
 Use with set_param_min, set_param_max, and set_param_curve to set linear acceleration properties. 
Parameter PARAM_RADIAL_ACCEL = 4
 Use with set_param_min, set_param_max, and set_param_curve to set radial acceleration properties. 
Parameter PARAM_TANGENTIAL_ACCEL = 5
 Use with set_param_min, set_param_max, and set_param_curve to set tangential acceleration properties. 
Parameter PARAM_DAMPING = 6
 Use with set_param_min, set_param_max, and set_param_curve to set damping properties. 
Parameter PARAM_ANGLE = 7
 Use with set_param_min, set_param_max, and set_param_curve to set angle properties. 
Parameter PARAM_SCALE = 8
 Use with set_param_min, set_param_max, and set_param_curve to set scale properties. 
Parameter PARAM_HUE_VARIATION = 9
 Use with set_param_min, set_param_max, and set_param_curve to set hue variation properties. 
Parameter PARAM_ANIM_SPEED = 10
 Use with set_param_min, set_param_max, and set_param_curve to set animation speed properties. 
Parameter PARAM_ANIM_OFFSET = 11
 Use with set_param_min, set_param_max, and set_param_curve to set animation offset properties. 
Parameter PARAM_MAX = 12
 Represents the size of the Parameter enum. enum ParticleFlags: 
ParticleFlags PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY = 0
 Use with set_particle_flag to set particle_flag_align_y. 
ParticleFlags PARTICLE_FLAG_ROTATE_Y = 1
 Use with set_particle_flag to set particle_flag_rotate_y. 
ParticleFlags PARTICLE_FLAG_DISABLE_Z = 2
 Use with set_particle_flag to set particle_flag_disable_z. 
ParticleFlags PARTICLE_FLAG_MAX = 3
 Represents the size of the ParticleFlags enum. enum EmissionShape: 
EmissionShape EMISSION_SHAPE_POINT = 0
 All particles will be emitted from a single point. 
EmissionShape EMISSION_SHAPE_SPHERE = 1
 Particles will be emitted in the volume of a sphere. 
EmissionShape EMISSION_SHAPE_SPHERE_SURFACE = 2
 Particles will be emitted on the surface of a sphere. 
EmissionShape EMISSION_SHAPE_BOX = 3
 Particles will be emitted in the volume of a box. 
EmissionShape EMISSION_SHAPE_POINTS = 4
 Particles will be emitted at a position chosen randomly among emission_points. Particle color will be modulated by emission_colors. 
EmissionShape EMISSION_SHAPE_DIRECTED_POINTS = 5
 Particles will be emitted at a position chosen randomly among emission_points. Particle velocity and rotation will be set based on emission_normals. Particle color will be modulated by emission_colors. 
EmissionShape EMISSION_SHAPE_RING = 6
 Particles will be emitted in a ring or cylinder. 
EmissionShape EMISSION_SHAPE_MAX = 7
 Represents the size of the EmissionShape enum.   Property Descriptions 
int amount = 8
  void set_amount ( int value )
 
int get_amount ( )
  Number of particles emitted in one emission cycle. 
Curve angle_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's rotation will be animated along this Curve. 
float angle_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum angle. 
float angle_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum angle. 
Curve angular_velocity_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's angular velocity (rotation speed) will vary along this Curve over its lifetime. 
float angular_velocity_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum initial angular velocity (rotation speed) applied to each particle in degrees per second. 
float angular_velocity_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum initial angular velocity (rotation speed) applied to each particle in degrees per second. 
Curve anim_offset_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's animation offset will vary along this Curve. 
float anim_offset_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum animation offset. 
float anim_offset_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum animation offset. 
Curve anim_speed_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's animation speed will vary along this Curve. 
float anim_speed_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum particle animation speed. 
float anim_speed_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum particle animation speed. 
Color color = Color(1, 1, 1, 1)
  void set_color ( Color value )
 
Color get_color ( )
  Each particle's initial color. Note: color multiplies the particle mesh's vertex colors. To have a visible effect on a BaseMaterial3D, BaseMaterial3D.vertex_color_use_as_albedo must be true. For a ShaderMaterial, ALBEDO *= COLOR.rgb; must be inserted in the shader's fragment() function. Otherwise, color will have no visible effect. 
Gradient color_initial_ramp  void set_color_initial_ramp ( Gradient value )
 
Gradient get_color_initial_ramp ( )
  Each particle's initial color will vary along this GradientTexture1D (multiplied with color). Note: color_initial_ramp multiplies the particle mesh's vertex colors. To have a visible effect on a BaseMaterial3D, BaseMaterial3D.vertex_color_use_as_albedo must be true. For a ShaderMaterial, ALBEDO *= COLOR.rgb; must be inserted in the shader's fragment() function. Otherwise, color_initial_ramp will have no visible effect. 
Gradient color_ramp  void set_color_ramp ( Gradient value )
 
Gradient get_color_ramp ( )
  Each particle's color will vary along this GradientTexture1D over its lifetime (multiplied with color). Note: color_ramp multiplies the particle mesh's vertex colors. To have a visible effect on a BaseMaterial3D, BaseMaterial3D.vertex_color_use_as_albedo must be true. For a ShaderMaterial, ALBEDO *= COLOR.rgb; must be inserted in the shader's fragment() function. Otherwise, color_ramp will have no visible effect. 
Curve damping_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Damping will vary along this Curve. 
float damping_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum damping. 
float damping_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum damping. 
Vector3 direction = Vector3(1, 0, 0)
  void set_direction ( Vector3 value )
 
Vector3 get_direction ( )
  Unit vector specifying the particles' emission direction. 
DrawOrder draw_order = 0
  void set_draw_order ( DrawOrder value )
 
DrawOrder get_draw_order ( )
  Particle draw order. Uses DrawOrder values. 
Vector3 emission_box_extents  void set_emission_box_extents ( Vector3 value )
 
Vector3 get_emission_box_extents ( )
  The rectangle's extents if emission_shape is set to EMISSION_SHAPE_BOX. 
PackedColorArray emission_colors = PackedColorArray()
  void set_emission_colors ( PackedColorArray value )
 
PackedColorArray get_emission_colors ( )
  Sets the Colors to modulate particles by when using EMISSION_SHAPE_POINTS or EMISSION_SHAPE_DIRECTED_POINTS. Note: emission_colors multiplies the particle mesh's vertex colors. To have a visible effect on a BaseMaterial3D, BaseMaterial3D.vertex_color_use_as_albedo must be true. For a ShaderMaterial, ALBEDO *= COLOR.rgb; must be inserted in the shader's fragment() function. Otherwise, emission_colors will have no visible effect. 
PackedVector3Array emission_normals  void set_emission_normals ( PackedVector3Array value )
 
PackedVector3Array get_emission_normals ( )
  Sets the direction the particles will be emitted in when using EMISSION_SHAPE_DIRECTED_POINTS. 
PackedVector3Array emission_points  void set_emission_points ( PackedVector3Array value )
 
PackedVector3Array get_emission_points ( )
  Sets the initial positions to spawn particles when using EMISSION_SHAPE_POINTS or EMISSION_SHAPE_DIRECTED_POINTS. 
Vector3 emission_ring_axis  void set_emission_ring_axis ( Vector3 value )
 
Vector3 get_emission_ring_axis ( )
  The axis of the ring when using the emitter EMISSION_SHAPE_RING. 
float emission_ring_height  void set_emission_ring_height ( float value )
 
float get_emission_ring_height ( )
  The height of the ring when using the emitter EMISSION_SHAPE_RING. 
float emission_ring_inner_radius  void set_emission_ring_inner_radius ( float value )
 
float get_emission_ring_inner_radius ( )
  The inner radius of the ring when using the emitter EMISSION_SHAPE_RING. 
float emission_ring_radius  void set_emission_ring_radius ( float value )
 
float get_emission_ring_radius ( )
  The radius of the ring when using the emitter EMISSION_SHAPE_RING. 
EmissionShape emission_shape = 0
  void set_emission_shape ( EmissionShape value )
 
EmissionShape get_emission_shape ( )
  Particles will be emitted inside this region. See EmissionShape for possible values. 
float emission_sphere_radius  void set_emission_sphere_radius ( float value )
 
float get_emission_sphere_radius ( )
  The sphere's radius if EmissionShape is set to EMISSION_SHAPE_SPHERE. 
bool emitting = true
  void set_emitting ( bool value )
 
bool is_emitting ( )
  If true, particles are being emitted. emitting can be used to start and stop particles from emitting. However, if one_shot is true setting emitting to true will not restart the emission cycle until after all active particles finish processing. You can use the finished signal to be notified once all active particles finish processing. 
float explosiveness = 0.0
  void set_explosiveness_ratio ( float value )
 
float get_explosiveness_ratio ( )
  How rapidly particles in an emission cycle are emitted. If greater than 0, there will be a gap in emissions before the next cycle begins. 
int fixed_fps = 0
  void set_fixed_fps ( int value )
 
int get_fixed_fps ( )
  The particle system's frame rate is fixed to a value. For example, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the particle system itself. 
float flatness = 0.0
  void set_flatness ( float value )
 
float get_flatness ( )
  Amount of spread in Y/Z plane. A value of 1 restricts particles to X/Z plane. 
bool fract_delta = true
  void set_fractional_delta ( bool value )
 
bool get_fractional_delta ( )
  If true, results in fractional delta calculation which has a smoother particles display effect. 
Vector3 gravity = Vector3(0, -9.8, 0)
  void set_gravity ( Vector3 value )
 
Vector3 get_gravity ( )
  Gravity applied to every particle. 
Curve hue_variation_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's hue will vary along this Curve. 
float hue_variation_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum hue variation. 
float hue_variation_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum hue variation. 
float initial_velocity_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum value of the initial velocity. 
float initial_velocity_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum value of the initial velocity. 
float lifetime = 1.0
  void set_lifetime ( float value )
 
float get_lifetime ( )
  Amount of time each particle will exist. 
float lifetime_randomness = 0.0
  void set_lifetime_randomness ( float value )
 
float get_lifetime_randomness ( )
  Particle lifetime randomness ratio. 
Curve linear_accel_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's linear acceleration will vary along this Curve. 
float linear_accel_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum linear acceleration. 
float linear_accel_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum linear acceleration. 
bool local_coords = false
  void set_use_local_coordinates ( bool value )
 
bool get_use_local_coordinates ( )
  If true, particles use the parent node's coordinate space (known as local coordinates). This will cause particles to move and rotate along the CPUParticles3D node (and its parents) when it is moved or rotated. If false, particles use global coordinates; they will not move or rotate along the CPUParticles3D node (and its parents) when it is moved or rotated. 
Mesh mesh  void set_mesh ( Mesh value )
 
Mesh get_mesh ( )
  The Mesh used for each particle. If null, particles will be spheres. 
bool one_shot = false
  void set_one_shot ( bool value )
 
bool get_one_shot ( )
  If true, only one emission cycle occurs. If set true during a cycle, emission will stop at the cycle's end. 
Curve orbit_velocity_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's orbital velocity will vary along this Curve. 
float orbit_velocity_max  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum orbit velocity. 
float orbit_velocity_min  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum orbit velocity. 
bool particle_flag_align_y = false
  void set_particle_flag ( ParticleFlags particle_flag, bool enable )
 
bool get_particle_flag ( ParticleFlags particle_flag ) const
  Align Y axis of particle with the direction of its velocity. 
bool particle_flag_disable_z = false
  void set_particle_flag ( ParticleFlags particle_flag, bool enable )
 
bool get_particle_flag ( ParticleFlags particle_flag ) const
  If true, particles will not move on the Z axis. 
bool particle_flag_rotate_y = false
  void set_particle_flag ( ParticleFlags particle_flag, bool enable )
 
bool get_particle_flag ( ParticleFlags particle_flag ) const
  If true, particles rotate around Y axis by angle_min. 
float preprocess = 0.0
  void set_pre_process_time ( float value )
 
float get_pre_process_time ( )
  Particle system starts as if it had already run for this many seconds. 
Curve radial_accel_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's radial acceleration will vary along this Curve. 
float radial_accel_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum radial acceleration. 
float radial_accel_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum radial acceleration. 
float randomness = 0.0
  void set_randomness_ratio ( float value )
 
float get_randomness_ratio ( )
  Emission lifetime randomness ratio. 
Curve scale_amount_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's scale will vary along this Curve. 
float scale_amount_max = 1.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum scale. 
float scale_amount_min = 1.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum scale. 
Curve scale_curve_x  void set_scale_curve_x ( Curve value )
 
Curve get_scale_curve_x ( )
  Curve for the scale over life, along the x axis. 
Curve scale_curve_y  void set_scale_curve_y ( Curve value )
 
Curve get_scale_curve_y ( )
  Curve for the scale over life, along the y axis. 
Curve scale_curve_z  void set_scale_curve_z ( Curve value )
 
Curve get_scale_curve_z ( )
  Curve for the scale over life, along the z axis. 
float speed_scale = 1.0
  void set_speed_scale ( float value )
 
float get_speed_scale ( )
  Particle system's running speed scaling ratio. A value of 0 can be used to pause the particles. 
bool split_scale = false
  void set_split_scale ( bool value )
 
bool get_split_scale ( )
  If set to true, three different scale curves can be specified, one per scale axis. 
float spread = 45.0
  void set_spread ( float value )
 
float get_spread ( )
  Each particle's initial direction range from +spread to -spread degrees. Applied to X/Z plane and Y/Z planes. 
Curve tangential_accel_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's tangential acceleration will vary along this Curve. 
float tangential_accel_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum tangent acceleration. 
float tangential_accel_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum tangent acceleration.   Method Descriptions void convert_from_particles ( Node particles ) Sets this node's properties to match a given GPUParticles3D node with an assigned ParticleProcessMaterial. 
Curve get_param_curve ( Parameter param ) const
 Returns the Curve of the parameter specified by Parameter. 
float get_param_max ( Parameter param ) const
 Returns the maximum value range for the given parameter. 
float get_param_min ( Parameter param ) const
 Returns the minimum value range for the given parameter. 
bool get_particle_flag ( ParticleFlags particle_flag ) const
 Returns the enabled state of the given particle flag (see ParticleFlags for options). void restart ( ) Restarts the particle emitter. void set_param_curve ( Parameter param, Curve curve ) Sets the Curve of the parameter specified by Parameter. void set_param_max ( Parameter param, float value ) Sets the maximum value for the given parameter. void set_param_min ( Parameter param, float value ) Sets the minimum value for the given parameter. void set_particle_flag ( ParticleFlags particle_flag, bool enable ) Enables or disables the given particle flag (see ParticleFlags for options).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_cpuparticles3d.html


classes/class_navigationagent2d
-----------------------------------------------------------
NavigationAgent2D Inherits: Node < Object A 2D agent used to pathfind to a position while avoiding obstacles.  Description A 2D agent used to pathfind to a position while avoiding static and dynamic obstacles. The calculation can be used by the parent node to dynamically move it along the path. Requires navigation data to work correctly. Dynamic obstacles are avoided using RVO collision avoidance. Avoidance is computed before physics, so the pathfinding information can be used safely in the physics step. Note: After setting the target_position property, the get_next_path_position method must be used once every physics frame to update the internal path logic of the navigation agent. The vector position it returns should be used as the next movement position for the agent's parent node.   Tutorials  Using NavigationAgents    Properties  
bool avoidance_enabled false  
int avoidance_layers 1  
int avoidance_mask 1  
float avoidance_priority 1.0  
bool debug_enabled false  
Color debug_path_custom_color Color(1, 1, 1, 1)  
float debug_path_custom_line_width -1.0  
float debug_path_custom_point_size 4.0  
bool debug_use_custom false  
int max_neighbors 10  
float max_speed 100.0  
int navigation_layers 1  
float neighbor_distance 500.0  
float path_desired_distance 20.0  
float path_max_distance 100.0  
BitField<PathMetadataFlags> path_metadata_flags 7  
PathPostProcessing path_postprocessing 0  
PathfindingAlgorithm pathfinding_algorithm 0  
float radius 10.0  
float target_desired_distance 10.0  
Vector2 target_position Vector2(0, 0)  
float time_horizon_agents 1.0  
float time_horizon_obstacles 0.0  
Vector2 velocity Vector2(0, 0)     Methods  
float distance_to_target ( ) const  
bool get_avoidance_layer_value ( int layer_number ) const  
bool get_avoidance_mask_value ( int mask_number ) const  
PackedVector2Array get_current_navigation_path ( ) const  
int get_current_navigation_path_index ( ) const  
NavigationPathQueryResult2D get_current_navigation_result ( ) const  
Vector2 get_final_position ( )  
bool get_navigation_layer_value ( int layer_number ) const  
RID get_navigation_map ( ) const  
Vector2 get_next_path_position ( )  
RID get_rid ( ) const  
bool is_navigation_finished ( )  
bool is_target_reachable ( )  
bool is_target_reached ( ) const  
void set_avoidance_layer_value ( int layer_number, bool value )  
void set_avoidance_mask_value ( int mask_number, bool value )  
void set_navigation_layer_value ( int layer_number, bool value )  
void set_navigation_map ( RID navigation_map )  
void set_velocity_forced ( Vector2 velocity )     Signals link_reached ( Dictionary details ) Notifies when a navigation link has been reached. The details dictionary may contain the following keys depending on the value of path_metadata_flags:  
position: The start position of the link that was reached. 
type: Always NavigationPathQueryResult2D.PATH_SEGMENT_TYPE_LINK. 
rid: The RID of the link. 
owner: The object which manages the link (usually NavigationLink2D). 
link_entry_position: If owner is available and the owner is a NavigationLink2D, it will contain the global position of the link's point the agent is entering. 
link_exit_position: If owner is available and the owner is a NavigationLink2D, it will contain the global position of the link's point which the agent is exiting.  navigation_finished ( ) Emitted once per loaded path when the agent internal navigation path index reaches the last index of the loaded path array. The agent internal navigation path index can be received with get_current_navigation_path_index. path_changed ( ) Emitted when the agent had to update the loaded path:  because path was previously empty. because navigation map has changed. because agent pushed further away from the current path segment than the path_max_distance.  target_reached ( ) Emitted once per loaded path when the agent's global position is the first time within target_desired_distance to the target_position. velocity_computed ( Vector2 safe_velocity ) Notifies when the collision avoidance velocity is calculated. Emitted when velocity is set. Only emitted when avoidance_enabled is true. waypoint_reached ( Dictionary details ) Notifies when a waypoint along the path has been reached. The details dictionary may contain the following keys depending on the value of path_metadata_flags:  
position: The position of the waypoint that was reached. 
type: The type of navigation primitive (region or link) that contains this waypoint. 
rid: The RID of the containing navigation primitive (region or link). 
owner: The object which manages the containing navigation primitive (region or link).    Property Descriptions 
bool avoidance_enabled = false
  void set_avoidance_enabled ( bool value )
 
bool get_avoidance_enabled ( )
  If true the agent is registered for an RVO avoidance callback on the NavigationServer2D. When velocity is used and the processing is completed a safe_velocity Vector2 is received with a signal connection to velocity_computed. Avoidance processing with many registered agents has a significant performance cost and should only be enabled on agents that currently require it. 
int avoidance_layers = 1
  void set_avoidance_layers ( int value )
 
int get_avoidance_layers ( )
  A bitfield determining the avoidance layers for this NavigationAgent. Other agents with a matching bit on the avoidance_mask will avoid this agent. 
int avoidance_mask = 1
  void set_avoidance_mask ( int value )
 
int get_avoidance_mask ( )
  A bitfield determining what other avoidance agents and obstacles this NavigationAgent will avoid when a bit matches at least one of their avoidance_layers. 
float avoidance_priority = 1.0
  void set_avoidance_priority ( float value )
 
float get_avoidance_priority ( )
  The agent does not adjust the velocity for other agents that would match the avoidance_mask but have a lower avoidance_priority. This in turn makes the other agents with lower priority adjust their velocities even more to avoid collision with this agent. 
bool debug_enabled = false
  void set_debug_enabled ( bool value )
 
bool get_debug_enabled ( )
  If true shows debug visuals for this agent. 
Color debug_path_custom_color = Color(1, 1, 1, 1)
  void set_debug_path_custom_color ( Color value )
 
Color get_debug_path_custom_color ( )
  If debug_use_custom is true uses this color for this agent instead of global color. 
float debug_path_custom_line_width = -1.0
  void set_debug_path_custom_line_width ( float value )
 
float get_debug_path_custom_line_width ( )
  If debug_use_custom is true uses this line width for rendering paths for this agent instead of global line width. 
float debug_path_custom_point_size = 4.0
  void set_debug_path_custom_point_size ( float value )
 
float get_debug_path_custom_point_size ( )
  If debug_use_custom is true uses this rasterized point size for rendering path points for this agent instead of global point size. 
bool debug_use_custom = false
  void set_debug_use_custom ( bool value )
 
bool get_debug_use_custom ( )
  If true uses the defined debug_path_custom_color for this agent instead of global color. 
int max_neighbors = 10
  void set_max_neighbors ( int value )
 
int get_max_neighbors ( )
  The maximum number of neighbors for the agent to consider. 
float max_speed = 100.0
  void set_max_speed ( float value )
 
float get_max_speed ( )
  The maximum speed that an agent can move. 
int navigation_layers = 1
  void set_navigation_layers ( int value )
 
int get_navigation_layers ( )
  A bitfield determining which navigation layers of navigation regions this agent will use to calculate a path. Changing it during runtime will clear the current navigation path and generate a new one, according to the new navigation layers. 
float neighbor_distance = 500.0
  void set_neighbor_distance ( float value )
 
float get_neighbor_distance ( )
  The distance to search for other agents. 
float path_desired_distance = 20.0
  void set_path_desired_distance ( float value )
 
float get_path_desired_distance ( )
  The distance threshold before a path point is considered to be reached. This allows agents to not have to hit a path point on the path exactly, but only to reach its general area. If this value is set too high, the NavigationAgent will skip points on the path, which can lead to leaving the navigation mesh. If this value is set too low, the NavigationAgent will be stuck in a repath loop because it will constantly overshoot or undershoot the distance to the next point on each physics frame update. 
float path_max_distance = 100.0
  void set_path_max_distance ( float value )
 
float get_path_max_distance ( )
  The maximum distance the agent is allowed away from the ideal path to the final position. This can happen due to trying to avoid collisions. When the maximum distance is exceeded, it recalculates the ideal path. 
BitField<PathMetadataFlags> path_metadata_flags = 7
  void set_path_metadata_flags ( BitField<PathMetadataFlags> value )
 
BitField<PathMetadataFlags> get_path_metadata_flags ( )
  Additional information to return with the navigation path. 
PathPostProcessing path_postprocessing = 0
  void set_path_postprocessing ( PathPostProcessing value )
 
PathPostProcessing get_path_postprocessing ( )
  The path postprocessing applied to the raw path corridor found by the pathfinding_algorithm. 
PathfindingAlgorithm pathfinding_algorithm = 0
  void set_pathfinding_algorithm ( PathfindingAlgorithm value )
 
PathfindingAlgorithm get_pathfinding_algorithm ( )
  The pathfinding algorithm used in the path query. 
float radius = 10.0
  void set_radius ( float value )
 
float get_radius ( )
  The radius of the avoidance agent. This is the "body" of the avoidance agent and not the avoidance maneuver starting radius (which is controlled by neighbor_distance). Does not affect normal pathfinding. To change an actor's pathfinding radius bake NavigationMesh resources with a different NavigationMesh.agent_radius property and use different navigation maps for each actor size. 
float target_desired_distance = 10.0
  void set_target_desired_distance ( float value )
 
float get_target_desired_distance ( )
  The distance threshold before the final target point is considered to be reached. This allows agents to not have to hit the point of the final target exactly, but only to reach its general area. If this value is set too low, the NavigationAgent will be stuck in a repath loop because it will constantly overshoot or undershoot the distance to the final target point on each physics frame update. 
Vector2 target_position = Vector2(0, 0)
  void set_target_position ( Vector2 value )
 
Vector2 get_target_position ( )
  If set, a new navigation path from the current agent position to the target_position is requested from the NavigationServer. 
float time_horizon_agents = 1.0
  void set_time_horizon_agents ( float value )
 
float get_time_horizon_agents ( )
  The minimal amount of time for which this agent's velocities, that are computed with the collision avoidance algorithm, are safe with respect to other agents. The larger the number, the sooner the agent will respond to other agents, but less freedom in choosing its velocities. A too high value will slow down agents movement considerably. Must be positive. 
float time_horizon_obstacles = 0.0
  void set_time_horizon_obstacles ( float value )
 
float get_time_horizon_obstacles ( )
  The minimal amount of time for which this agent's velocities, that are computed with the collision avoidance algorithm, are safe with respect to static avoidance obstacles. The larger the number, the sooner the agent will respond to static avoidance obstacles, but less freedom in choosing its velocities. A too high value will slow down agents movement considerably. Must be positive. 
Vector2 velocity = Vector2(0, 0)
  void set_velocity ( Vector2 value )
 
Vector2 get_velocity ( )
  Sets the new wanted velocity for the agent. The avoidance simulation will try to fulfill this velocity if possible but will modify it to avoid collision with other agents and obstacles. When an agent is teleported to a new position, use set_velocity_forced as well to reset the internal simulation velocity.   Method Descriptions 
float distance_to_target ( ) const
 Returns the distance to the target position, using the agent's global position. The user must set target_position in order for this to be accurate. 
bool get_avoidance_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the avoidance_layers bitmask is enabled, given a layer_number between 1 and 32. 
bool get_avoidance_mask_value ( int mask_number ) const
 Returns whether or not the specified mask of the avoidance_mask bitmask is enabled, given a mask_number between 1 and 32. 
PackedVector2Array get_current_navigation_path ( ) const
 Returns this agent's current path from start to finish in global coordinates. The path only updates when the target position is changed or the agent requires a repath. The path array is not intended to be used in direct path movement as the agent has its own internal path logic that would get corrupted by changing the path array manually. Use the intended get_next_path_position once every physics frame to receive the next path point for the agents movement as this function also updates the internal path logic. 
int get_current_navigation_path_index ( ) const
 Returns which index the agent is currently on in the navigation path's PackedVector2Array. 
NavigationPathQueryResult2D get_current_navigation_result ( ) const
 Returns the path query result for the path the agent is currently following. 
Vector2 get_final_position ( ) Returns the reachable final position of the current navigation path in global coordinates. This position can change if the agent needs to update the navigation path which makes the agent emit the path_changed signal. 
bool get_navigation_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the navigation_layers bitmask is enabled, given a layer_number between 1 and 32. 
RID get_navigation_map ( ) const
 Returns the RID of the navigation map for this NavigationAgent node. This function returns always the map set on the NavigationAgent node and not the map of the abstract agent on the NavigationServer. If the agent map is changed directly with the NavigationServer API the NavigationAgent node will not be aware of the map change. Use set_navigation_map to change the navigation map for the NavigationAgent and also update the agent on the NavigationServer. 
Vector2 get_next_path_position ( ) Returns the next position in global coordinates that can be moved to, making sure that there are no static objects in the way. If the agent does not have a navigation path, it will return the position of the agent's parent. The use of this function once every physics frame is required to update the internal path logic of the NavigationAgent. 
RID get_rid ( ) const
 Returns the RID of this agent on the NavigationServer2D. 
bool is_navigation_finished ( ) Returns true if the end of the currently loaded navigation path has been reached. Note: While true prefer to stop calling update functions like get_next_path_position. This avoids jittering the standing agent due to calling repeated path updates. 
bool is_target_reachable ( ) Returns true if get_final_position is within target_desired_distance of the target_position. 
bool is_target_reached ( ) const
 Returns true if target_position is reached. It may not always be possible to reach the target position. It should always be possible to reach the final position though. See get_final_position. void set_avoidance_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the avoidance_layers bitmask, given a layer_number between 1 and 32. void set_avoidance_mask_value ( int mask_number, bool value ) Based on value, enables or disables the specified mask in the avoidance_mask bitmask, given a mask_number between 1 and 32. void set_navigation_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the navigation_layers bitmask, given a layer_number between 1 and 32. void set_navigation_map ( RID navigation_map ) Sets the RID of the navigation map this NavigationAgent node should use and also updates the agent on the NavigationServer. void set_velocity_forced ( Vector2 velocity ) Replaces the internal velocity in the collision avoidance simulation with velocity. When an agent is teleported to a new position this function should be used in the same frame. If called frequently this function can get agents stuck.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_navigationagent2d.html


classes/class_audioeffectlowpassfilter
-----------------------------------------------------------
AudioEffectLowPassFilter Inherits: AudioEffectFilter < AudioEffect < Resource < RefCounted < Object Adds a low-pass filter to the audio bus.  Description Cuts frequencies higher than the AudioEffectFilter.cutoff_hz and allows lower frequencies to pass.   Tutorials  Audio buses   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectlowpassfilter.html


classes/class_inputeventjoypadbutton
-----------------------------------------------------------
InputEventJoypadButton Inherits: InputEvent < Resource < RefCounted < Object Represents a gamepad button being pressed or released.  Description Input event type for gamepad buttons. For gamepad analog sticks and joysticks, see InputEventJoypadMotion.   Tutorials  Using InputEvent    Properties  
JoyButton button_index 0  
bool pressed false  
float pressure 0.0     Property Descriptions 
JoyButton button_index = 0
  void set_button_index ( JoyButton value )
 
JoyButton get_button_index ( )
  Button identifier. One of the JoyButton button constants. 
bool pressed = false
  void set_pressed ( bool value )
 
bool is_pressed ( )
  If true, the button's state is pressed. If false, the button's state is released. 
float pressure = 0.0
  void set_pressure ( float value )
 
float get_pressure ( )
  Represents the pressure the user puts on a pressure-sensitive button. Deprecated. This property is never set by the engine and is always 0.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventjoypadbutton.html


classes/class_meshtexture
-----------------------------------------------------------
MeshTexture Inherits: Texture2D < Texture < Resource < RefCounted < Object Simple texture that uses a mesh to draw itself.  Description Simple texture that uses a mesh to draw itself. It's limited because flags can't be changed and region drawing is not supported.   Properties  
Texture2D base_texture   
Vector2 image_size Vector2(0, 0)  
Mesh mesh   
bool resource_local_to_scene false (overrides Resource)     Property Descriptions 
Texture2D base_texture  void set_base_texture ( Texture2D value )
 
Texture2D get_base_texture ( )
  Sets the base texture that the Mesh will use to draw. 
Vector2 image_size = Vector2(0, 0)
  void set_image_size ( Vector2 value )
 
Vector2 get_image_size ( )
  Sets the size of the image, needed for reference. 
Mesh mesh  void set_mesh ( Mesh value )
 
Mesh get_mesh ( )
  Sets the mesh used to draw. It must be a mesh using 2D vertices.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_meshtexture.html


classes/class_inputeventpangesture
-----------------------------------------------------------
InputEventPanGesture Inherits: InputEventGesture < InputEventWithModifiers < InputEventFromWindow < InputEvent < Resource < RefCounted < Object Represents a panning touch gesture.  Description Stores information about pan gestures. A pan gesture is performed when the user swipes the touch screen with two fingers. It's typically used for panning/scrolling. Note: On Android, this requires the ProjectSettings.input_devices/pointing/android/enable_pan_and_scale_gestures project setting to be enabled.   Tutorials  Using InputEvent    Properties  
Vector2 delta Vector2(0, 0)     Property Descriptions 
Vector2 delta = Vector2(0, 0)
  void set_delta ( Vector2 value )
 
Vector2 get_delta ( )
  Panning amount since last pan event.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventpangesture.html


classes/class_skeletonmodification2d
-----------------------------------------------------------
SkeletonModification2D Inherits: Resource < RefCounted < Object Inherited By: SkeletonModification2DCCDIK, SkeletonModification2DFABRIK, SkeletonModification2DJiggle, SkeletonModification2DLookAt, SkeletonModification2DPhysicalBones, SkeletonModification2DStackHolder, SkeletonModification2DTwoBoneIK Base class for resources that operate on Bone2Ds in a Skeleton2D.  Description This resource provides an interface that can be expanded so code that operates on Bone2D nodes in a Skeleton2D can be mixed and matched together to create complex interactions. This is used to provide Godot with a flexible and powerful Inverse Kinematics solution that can be adapted for many different uses.   Properties  
bool enabled true  
int execution_mode 0     Methods  
void _draw_editor_gizmo ( ) virtual  
void _execute ( float delta ) virtual  
void _setup_modification ( SkeletonModificationStack2D modification_stack ) virtual  
float clamp_angle ( float angle, float min, float max, bool invert )  
bool get_editor_draw_gizmo ( ) const  
bool get_is_setup ( ) const  
SkeletonModificationStack2D get_modification_stack ( )  
void set_editor_draw_gizmo ( bool draw_gizmo )  
void set_is_setup ( bool is_setup )     Property Descriptions 
bool enabled = true
  void set_enabled ( bool value )
 
bool get_enabled ( )
  If true, the modification's _execute function will be called by the SkeletonModificationStack2D. 
int execution_mode = 0
  void set_execution_mode ( int value )
 
int get_execution_mode ( )
  The execution mode for the modification. This tells the modification stack when to execute the modification. Some modifications have settings that are only available in certain execution modes.   Method Descriptions void _draw_editor_gizmo ( ) virtual
 Used for drawing editor-only modification gizmos. This function will only be called in the Godot editor and can be overridden to draw custom gizmos. Note: You will need to use the Skeleton2D from SkeletonModificationStack2D.get_skeleton and it's draw functions, as the SkeletonModification2D resource cannot draw on its own. void _execute ( float delta ) virtual
 Executes the given modification. This is where the modification performs whatever function it is designed to do. void _setup_modification ( SkeletonModificationStack2D modification_stack ) virtual
 Called when the modification is setup. This is where the modification performs initialization. 
float clamp_angle ( float angle, float min, float max, bool invert ) Takes an angle and clamps it so it is within the passed-in min and max range. invert will inversely clamp the angle, clamping it to the range outside of the given bounds. 
bool get_editor_draw_gizmo ( ) const
 Returns whether this modification will call _draw_editor_gizmo in the Godot editor to draw modification-specific gizmos. 
bool get_is_setup ( ) const
 Returns whether this modification has been successfully setup or not. 
SkeletonModificationStack2D get_modification_stack ( ) Returns the SkeletonModificationStack2D that this modification is bound to. Through the modification stack, you can access the Skeleton2D the modification is operating on. void set_editor_draw_gizmo ( bool draw_gizmo ) Sets whether this modification will call _draw_editor_gizmo in the Godot editor to draw modification-specific gizmos. void set_is_setup ( bool is_setup ) Manually allows you to set the setup state of the modification. This function should only rarely be used, as the SkeletonModificationStack2D the modification is bound to should handle setting the modification up.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeletonmodification2d.html


classes/class_pinjoint3d
-----------------------------------------------------------
PinJoint3D Inherits: Joint3D < Node3D < Node < Object A physics joint that attaches two 3D physics bodies at a single point, allowing them to freely rotate.  Description A physics joint that attaches two 3D physics bodies at a single point, allowing them to freely rotate. For example, a RigidBody3D can be attached to a StaticBody3D to create a pendulum or a seesaw.   Properties  
float params/bias 0.3  
float params/damping 1.0  
float params/impulse_clamp 0.0     Methods  
float get_param ( Param param ) const  
void set_param ( Param param, float value )     Enumerations enum Param: 
Param PARAM_BIAS = 0
 The force with which the pinned objects stay in positional relation to each other. The higher, the stronger. 
Param PARAM_DAMPING = 1
 The force with which the pinned objects stay in velocity relation to each other. The higher, the stronger. 
Param PARAM_IMPULSE_CLAMP = 2
 If above 0, this value is the maximum value for an impulse that this Joint3D produces.   Property Descriptions 
float params/bias = 0.3
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The force with which the pinned objects stay in positional relation to each other. The higher, the stronger. 
float params/damping = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The force with which the pinned objects stay in velocity relation to each other. The higher, the stronger. 
float params/impulse_clamp = 0.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  If above 0, this value is the maximum value for an impulse that this Joint3D produces.   Method Descriptions 
float get_param ( Param param ) const
 Returns the value of the specified parameter. void set_param ( Param param, float value ) Sets the value of the specified parameter.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_pinjoint3d.html


classes/class_httprequest
-----------------------------------------------------------
HTTPRequest Inherits: Node < Object A node with the ability to send HTTP(S) requests.  Description A node with the ability to send HTTP requests. Uses HTTPClient internally. Can be used to make HTTP requests, i.e. download or upload files or web content via HTTP. Warning: See the notes and warnings on HTTPClient for limitations, especially regarding TLS security. Note: When exporting to Android, make sure to enable the INTERNET permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android. Example of contacting a REST API and printing one of its returned fields:  GDScriptfunc _ready():
    # Create an HTTP request node and connect its completion signal.
    var http_request = HTTPRequest.new()
    add_child(http_request)
    http_request.request_completed.connect(self._http_request_completed)
    # Perform a GET request. The URL below returns JSON as of writing.
    var error = http_request.request("https://httpbin.org/get")
    if error != OK:
        push_error("An error occurred in the HTTP request.")
    # Perform a POST request. The URL below returns JSON as of writing.
    # Note: Don't make simultaneous requests using a single HTTPRequest node.
    # The snippet below is provided for reference only.
    var body = JSON.new().stringify({"name": "Godette"})
    error = http_request.request("https://httpbin.org/post", [], HTTPClient.METHOD_POST, body)
    if error != OK:
        push_error("An error occurred in the HTTP request.")
# Called when the HTTP request is completed.
func _http_request_completed(result, response_code, headers, body):
    var json = JSON.new()
    json.parse(body.get_string_from_utf8())
    var response = json.get_data()
    # Will print the user agent string used by the HTTPRequest node (as recognized by httpbin.org).
    print(response.headers["User-Agent"])
 C#public override void _Ready()
{
    // Create an HTTP request node and connect its completion signal.
    var httpRequest = new HttpRequest();
    AddChild(httpRequest);
    httpRequest.RequestCompleted += HttpRequestCompleted;
    // Perform a GET request. The URL below returns JSON as of writing.
    Error error = httpRequest.Request("https://httpbin.org/get");
    if (error != Error.Ok)
    {
        GD.PushError("An error occurred in the HTTP request.");
    }
    // Perform a POST request. The URL below returns JSON as of writing.
    // Note: Don't make simultaneous requests using a single HTTPRequest node.
    // The snippet below is provided for reference only.
    string body = new Json().Stringify(new Godot.Collections.Dictionary
    {
        { "name", "Godette" }
    });
    error = httpRequest.Request("https://httpbin.org/post", null, HttpClient.Method.Post, body);
    if (error != Error.Ok)
    {
        GD.PushError("An error occurred in the HTTP request.");
    }
}
// Called when the HTTP request is completed.
private void HttpRequestCompleted(long result, long responseCode, string[] headers, byte[] body)
{
    var json = new Json();
    json.Parse(body.GetStringFromUtf8());
    var response = json.GetData().AsGodotDictionary();
    // Will print the user agent string used by the HTTPRequest node (as recognized by httpbin.org).
    GD.Print((response["headers"].AsGodotDictionary())["User-Agent"]);
}
  Example of loading and displaying an image using HTTPRequest:  GDScriptfunc _ready():
    # Create an HTTP request node and connect its completion signal.
    var http_request = HTTPRequest.new()
    add_child(http_request)
    http_request.request_completed.connect(self._http_request_completed)
    # Perform the HTTP request. The URL below returns a PNG image as of writing.
    var error = http_request.request("https://via.placeholder.com/512")
    if error != OK:
        push_error("An error occurred in the HTTP request.")
# Called when the HTTP request is completed.
func _http_request_completed(result, response_code, headers, body):
    if result != HTTPRequest.RESULT_SUCCESS:
        push_error("Image couldn't be downloaded. Try a different image.")
    var image = Image.new()
    var error = image.load_png_from_buffer(body)
    if error != OK:
        push_error("Couldn't load the image.")
    var texture = ImageTexture.create_from_image(image)
    # Display the image in a TextureRect node.
    var texture_rect = TextureRect.new()
    add_child(texture_rect)
    texture_rect.texture = texture
 C#public override void _Ready()
{
    // Create an HTTP request node and connect its completion signal.
    var httpRequest = new HttpRequest();
    AddChild(httpRequest);
    httpRequest.RequestCompleted += HttpRequestCompleted;
    // Perform the HTTP request. The URL below returns a PNG image as of writing.
    Error error = httpRequest.Request("https://via.placeholder.com/512");
    if (error != Error.Ok)
    {
        GD.PushError("An error occurred in the HTTP request.");
    }
}
// Called when the HTTP request is completed.
private void HttpRequestCompleted(long result, long responseCode, string[] headers, byte[] body)
{
    if (result != (long)HttpRequest.Result.Success)
    {
        GD.PushError("Image couldn't be downloaded. Try a different image.");
    }
    var image = new Image();
    Error error = image.LoadPngFromBuffer(body);
    if (error != Error.Ok)
    {
        GD.PushError("Couldn't load the image.");
    }
    var texture = ImageTexture.CreateFromImage(image);
    // Display the image in a TextureRect node.
    var textureRect = new TextureRect();
    AddChild(textureRect);
    textureRect.Texture = texture;
}
  Gzipped response bodies: HTTPRequest will automatically handle decompression of response bodies. A Accept-Encoding header will be automatically added to each of your requests, unless one is already specified. Any response with a Content-Encoding: gzip header will automatically be decompressed and delivered to you as uncompressed bytes.   Tutorials  Making HTTP requests TLS certificates    Properties  
bool accept_gzip true  
int body_size_limit -1  
int download_chunk_size 65536  
String download_file ""  
int max_redirects 8  
float timeout 0.0  
bool use_threads false     Methods  
void cancel_request ( )  
int get_body_size ( ) const  
int get_downloaded_bytes ( ) const  
Status get_http_client_status ( ) const  
Error request ( String url, PackedStringArray custom_headers=PackedStringArray(), Method method=0, String request_data="" )  
Error request_raw ( String url, PackedStringArray custom_headers=PackedStringArray(), Method method=0, PackedByteArray request_data_raw=PackedByteArray() )  
void set_http_proxy ( String host, int port )  
void set_https_proxy ( String host, int port )  
void set_tls_options ( TLSOptions client_options )     Signals request_completed ( int result, int response_code, PackedStringArray headers, PackedByteArray body ) Emitted when a request is completed.   Enumerations enum Result: 
Result RESULT_SUCCESS = 0
 Request successful. 
Result RESULT_CHUNKED_BODY_SIZE_MISMATCH = 1
 
Result RESULT_CANT_CONNECT = 2
 Request failed while connecting. 
Result RESULT_CANT_RESOLVE = 3
 Request failed while resolving. 
Result RESULT_CONNECTION_ERROR = 4
 Request failed due to connection (read/write) error. 
Result RESULT_TLS_HANDSHAKE_ERROR = 5
 Request failed on TLS handshake. 
Result RESULT_NO_RESPONSE = 6
 Request does not have a response (yet). 
Result RESULT_BODY_SIZE_LIMIT_EXCEEDED = 7
 Request exceeded its maximum size limit, see body_size_limit. 
Result RESULT_BODY_DECOMPRESS_FAILED = 8
 
Result RESULT_REQUEST_FAILED = 9
 Request failed (currently unused). 
Result RESULT_DOWNLOAD_FILE_CANT_OPEN = 10
 HTTPRequest couldn't open the download file. 
Result RESULT_DOWNLOAD_FILE_WRITE_ERROR = 11
 HTTPRequest couldn't write to the download file. 
Result RESULT_REDIRECT_LIMIT_REACHED = 12
 Request reached its maximum redirect limit, see max_redirects. 
Result RESULT_TIMEOUT = 13
 Request failed due to a timeout. If you expect requests to take a long time, try increasing the value of timeout or setting it to 0.0 to remove the timeout completely.   Property Descriptions 
bool accept_gzip = true
  void set_accept_gzip ( bool value )
 
bool is_accepting_gzip ( )
  If true, this header will be added to each request: Accept-Encoding: gzip, deflate telling servers that it's okay to compress response bodies. Any Response body declaring a Content-Encoding of either gzip or deflate will then be automatically decompressed, and the uncompressed bytes will be delivered via request_completed. If the user has specified their own Accept-Encoding header, then no header will be added regardless of accept_gzip. If false no header will be added, and no decompression will be performed on response bodies. The raw bytes of the response body will be returned via request_completed. 
int body_size_limit = -1
  void set_body_size_limit ( int value )
 
int get_body_size_limit ( )
  Maximum allowed size for response bodies. If the response body is compressed, this will be used as the maximum allowed size for the decompressed body. 
int download_chunk_size = 65536
  void set_download_chunk_size ( int value )
 
int get_download_chunk_size ( )
  The size of the buffer used and maximum bytes to read per iteration. See HTTPClient.read_chunk_size. Set this to a lower value (e.g. 4096 for 4 KiB) when downloading small files to decrease memory usage at the cost of download speeds. 
String download_file = ""
  void set_download_file ( String value )
 
String get_download_file ( )
  The file to download into. Will output any received file into it. 
int max_redirects = 8
  void set_max_redirects ( int value )
 
int get_max_redirects ( )
  Maximum number of allowed redirects. 
float timeout = 0.0
  void set_timeout ( float value )
 
float get_timeout ( )
  The duration to wait in seconds before a request times out. If timeout is set to 0.0 then the request will never time out. For simple requests, such as communication with a REST API, it is recommended that timeout is set to a value suitable for the server response time (e.g. between 1.0 and 10.0). This will help prevent unwanted timeouts caused by variation in server response times while still allowing the application to detect when a request has timed out. For larger requests such as file downloads it is suggested the timeout be set to 0.0, disabling the timeout functionality. This will help to prevent large transfers from failing due to exceeding the timeout value. 
bool use_threads = false
  void set_use_threads ( bool value )
 
bool is_using_threads ( )
  If true, multithreading is used to improve performance.   Method Descriptions void cancel_request ( ) Cancels the current request. 
int get_body_size ( ) const
 Returns the response body length. Note: Some Web servers may not send a body length. In this case, the value returned will be -1. If using chunked transfer encoding, the body length will also be -1. 
int get_downloaded_bytes ( ) const
 Returns the number of bytes this HTTPRequest downloaded. 
Status get_http_client_status ( ) const
 Returns the current status of the underlying HTTPClient. See Status. 
Error request ( String url, PackedStringArray custom_headers=PackedStringArray(), Method method=0, String request_data="" ) Creates request on the underlying HTTPClient. If there is no configuration errors, it tries to connect using HTTPClient.connect_to_host and passes parameters onto HTTPClient.request. Returns @GlobalScope.OK if request is successfully created. (Does not imply that the server has responded), @GlobalScope.ERR_UNCONFIGURED if not in the tree, @GlobalScope.ERR_BUSY if still processing previous request, @GlobalScope.ERR_INVALID_PARAMETER if given string is not a valid URL format, or @GlobalScope.ERR_CANT_CONNECT if not using thread and the HTTPClient cannot connect to host. Note: When method is HTTPClient.METHOD_GET, the payload sent via request_data might be ignored by the server or even cause the server to reject the request (check RFC 7231 section 4.3.1 for more details). As a workaround, you can send data as a query string in the URL (see String.uri_encode for an example). Note: It's recommended to use transport encryption (TLS) and to avoid sending sensitive information (such as login credentials) in HTTP GET URL parameters. Consider using HTTP POST requests or HTTP headers for such information instead. 
Error request_raw ( String url, PackedStringArray custom_headers=PackedStringArray(), Method method=0, PackedByteArray request_data_raw=PackedByteArray() ) Creates request on the underlying HTTPClient using a raw array of bytes for the request body. If there is no configuration errors, it tries to connect using HTTPClient.connect_to_host and passes parameters onto HTTPClient.request. Returns @GlobalScope.OK if request is successfully created. (Does not imply that the server has responded), @GlobalScope.ERR_UNCONFIGURED if not in the tree, @GlobalScope.ERR_BUSY if still processing previous request, @GlobalScope.ERR_INVALID_PARAMETER if given string is not a valid URL format, or @GlobalScope.ERR_CANT_CONNECT if not using thread and the HTTPClient cannot connect to host. void set_http_proxy ( String host, int port ) Sets the proxy server for HTTP requests. The proxy server is unset if host is empty or port is -1. void set_https_proxy ( String host, int port ) Sets the proxy server for HTTPS requests. The proxy server is unset if host is empty or port is -1. void set_tls_options ( TLSOptions client_options ) Sets the TLSOptions to be used when connecting to an HTTPS server. See TLSOptions.client.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_httprequest.html


classes/class_pathfollow3d
-----------------------------------------------------------
PathFollow3D Inherits: Node3D < Node < Object Point sampler for a Path3D.  Description This node takes its parent Path3D, and returns the coordinates of a point within it, given a distance from the first vertex. It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be children of this node. The descendant nodes will then move accordingly when setting the progress in this node.   Properties  
bool cubic_interp true  
float h_offset 0.0  
bool loop true  
float progress 0.0  
float progress_ratio 0.0  
RotationMode rotation_mode 3  
bool tilt_enabled true  
bool use_model_front false  
float v_offset 0.0     Methods  
Transform3D correct_posture ( Transform3D transform, RotationMode rotation_mode ) static     Enumerations enum RotationMode: 
RotationMode ROTATION_NONE = 0
 Forbids the PathFollow3D to rotate. 
RotationMode ROTATION_Y = 1
 Allows the PathFollow3D to rotate in the Y axis only. 
RotationMode ROTATION_XY = 2
 Allows the PathFollow3D to rotate in both the X, and Y axes. 
RotationMode ROTATION_XYZ = 3
 Allows the PathFollow3D to rotate in any axis. 
RotationMode ROTATION_ORIENTED = 4
 Uses the up vector information in a Curve3D to enforce orientation. This rotation mode requires the Path3D's Curve3D.up_vector_enabled property to be set to true.   Property Descriptions 
bool cubic_interp = true
  void set_cubic_interpolation ( bool value )
 
bool get_cubic_interpolation ( )
  If true, the position between two cached points is interpolated cubically, and linearly otherwise. The points along the Curve3D of the Path3D are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough. There are two answers to this problem: either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations. 
float h_offset = 0.0
  void set_h_offset ( float value )
 
float get_h_offset ( )
  The node's offset along the curve. 
bool loop = true
  void set_loop ( bool value )
 
bool has_loop ( )
  If true, any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths. 
float progress = 0.0
  void set_progress ( float value )
 
float get_progress ( )
  The distance from the first vertex, measured in 3D units along the path. Changing this value sets this node's position to a point within the path. 
float progress_ratio = 0.0
  void set_progress_ratio ( float value )
 
float get_progress_ratio ( )
  The distance from the first vertex, considering 0.0 as the first vertex and 1.0 as the last. This is just another way of expressing the progress within the path, as the progress supplied is multiplied internally by the path's length. 
RotationMode rotation_mode = 3
  void set_rotation_mode ( RotationMode value )
 
RotationMode get_rotation_mode ( )
  Allows or forbids rotation on one or more axes, depending on the RotationMode constants being used. 
bool tilt_enabled = true
  void set_tilt_enabled ( bool value )
 
bool is_tilt_enabled ( )
  If true, the tilt property of Curve3D takes effect. 
bool use_model_front = false
  void set_use_model_front ( bool value )
 
bool is_using_model_front ( )
  If true, the node moves on the travel path with orienting the +Z axis as forward. See also Vector3.FORWARD and Vector3.MODEL_FRONT. 
float v_offset = 0.0
  void set_v_offset ( float value )
 
float get_v_offset ( )
  The node's offset perpendicular to the curve.   Method Descriptions 
Transform3D correct_posture ( Transform3D transform, RotationMode rotation_mode ) static
 Correct the transform. rotation_mode implicitly specifies how posture (forward, up and sideway direction) is calculated.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_pathfollow3d.html


classes/class_audioeffecteq
-----------------------------------------------------------
AudioEffectEQ Inherits: AudioEffect < Resource < RefCounted < Object Inherited By: AudioEffectEQ10, AudioEffectEQ21, AudioEffectEQ6 Base class for audio equalizers. Gives you control over frequencies. Use it to create a custom equalizer if AudioEffectEQ6, AudioEffectEQ10 or AudioEffectEQ21 don't fit your needs.  Description AudioEffectEQ gives you control over frequencies. Use it to compensate for existing deficiencies in audio. AudioEffectEQs are useful on the Master bus to completely master a mix and give it more character. They are also useful when a game is run on a mobile device, to adjust the mix to that kind of speakers (it can be added but disabled when headphones are plugged).   Tutorials  Audio buses    Methods  
int get_band_count ( ) const  
float get_band_gain_db ( int band_idx ) const  
void set_band_gain_db ( int band_idx, float volume_db )     Method Descriptions 
int get_band_count ( ) const
 Returns the number of bands of the equalizer. 
float get_band_gain_db ( int band_idx ) const
 Returns the band's gain at the specified index, in dB. void set_band_gain_db ( int band_idx, float volume_db ) Sets band's gain at the specified index, in dB.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffecteq.html


classes/class_fontvariation
-----------------------------------------------------------
FontVariation Inherits: Font < Resource < RefCounted < Object A variation of a font with additional settings.  Description Provides OpenType variations, simulated bold / slant, and additional font settings like OpenType features and extra spacing. To use simulated bold font variant:  GDScriptvar fv = FontVariation.new()
fv.set_base_font(load("res://BarlowCondensed-Regular.ttf"))
fv.set_variation_embolden(1.2)
$Label.add_theme_font_override("font", fv)
$Label.add_theme_font_size_override("font_size", 64)
 C#var fv = new FontVariation();
fv.SetBaseFont(ResourceLoader.Load<FontFile>("res://BarlowCondensed-Regular.ttf"));
fv.SetVariationEmbolden(1.2);
GetNode("Label").AddThemeFontOverride("font", fv);
GetNode("Label").AddThemeFontSizeOverride("font_size", 64);
  To set the coordinate of multiple variation axes: var fv = FontVariation.new();
var ts = TextServerManager.get_primary_interface()
fv.base_font = load("res://BarlowCondensed-Regular.ttf")
fv.variation_opentype = { ts.name_to_tag("wght"): 900, ts.name_to_tag("custom_hght"): 900 }
   Properties  
Font base_font   
Dictionary opentype_features {}  
int spacing_bottom 0  
int spacing_glyph 0  
int spacing_space 0  
int spacing_top 0  
float variation_embolden 0.0  
int variation_face_index 0  
Dictionary variation_opentype {}  
Transform2D variation_transform Transform2D(1, 0, 0, 1, 0, 0)     Methods  
void set_spacing ( SpacingType spacing, int value )     Property Descriptions 
Font base_font  void set_base_font ( Font value )
 
Font get_base_font ( )
  Base font used to create a variation. If not set, default Theme font is used. 
Dictionary opentype_features = {}
  void set_opentype_features ( Dictionary value )
 
Dictionary get_opentype_features ( )
  A set of OpenType feature tags. More info: OpenType feature tags. 
int spacing_bottom = 0
  void set_spacing ( SpacingType spacing, int value )
 
int get_spacing ( )
  Extra spacing at the bottom of the line in pixels. 
int spacing_glyph = 0
  void set_spacing ( SpacingType spacing, int value )
 
int get_spacing ( )
  Extra spacing between graphical glyphs. 
int spacing_space = 0
  void set_spacing ( SpacingType spacing, int value )
 
int get_spacing ( )
  Extra width of the space glyphs. 
int spacing_top = 0
  void set_spacing ( SpacingType spacing, int value )
 
int get_spacing ( )
  Extra spacing at the top of the line in pixels. 
float variation_embolden = 0.0
  void set_variation_embolden ( float value )
 
float get_variation_embolden ( )
  If is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness. Note: Emboldened fonts might have self-intersecting outlines, which will prevent MSDF fonts and TextMesh from working correctly. 
int variation_face_index = 0
  void set_variation_face_index ( int value )
 
int get_variation_face_index ( )
  Active face index in the TrueType / OpenType collection file. 
Dictionary variation_opentype = {}
  void set_variation_opentype ( Dictionary value )
 
Dictionary get_variation_opentype ( )
  Font OpenType variation coordinates. More info: OpenType variation tags. Note: This Dictionary uses OpenType tags as keys. Variation axes can be identified both by tags (int, e.g. 0x77678674) and names (String, e.g. wght). Some axes might be accessible by multiple names. For example, wght refers to the same axis as weight. Tags on the other hand are unique. To convert between names and tags, use TextServer.name_to_tag and TextServer.tag_to_name. Note: To get available variation axes of a font, use Font.get_supported_variation_list. 
Transform2D variation_transform = Transform2D(1, 0, 0, 1, 0, 0)
  void set_variation_transform ( Transform2D value )
 
Transform2D get_variation_transform ( )
  2D transform, applied to the font outlines, can be used for slanting, flipping and rotating glyphs. For example, to simulate italic typeface by slanting, apply the following transform Transform2D(1.0, slant, 0.0, 1.0, 0.0, 0.0).   Method Descriptions void set_spacing ( SpacingType spacing, int value ) Sets the spacing for spacing (see SpacingType) to value in pixels (not relative to the font size).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_fontvariation.html


classes/class_imagetexture
-----------------------------------------------------------
ImageTexture Inherits: Texture2D < Texture < Resource < RefCounted < Object A Texture2D based on an Image.  Description A Texture2D based on an Image. For an image to be displayed, an ImageTexture has to be created from it using the create_from_image method: var image = Image.load_from_file("res://icon.svg")
var texture = ImageTexture.create_from_image(image)
$Sprite2D.texture = texture
 This way, textures can be created at run-time by loading images both from within the editor and externally. Warning: Prefer to load imported textures with @GDScript.load over loading them from within the filesystem dynamically with Image.load, as it may not work in exported projects: var texture = load("res://icon.svg")
$Sprite2D.texture = texture
 This is because images have to be imported as a CompressedTexture2D first to be loaded with @GDScript.load. If you'd still like to load an image file just like any other Resource, import it as an Image resource instead, and then load it normally using the @GDScript.load method. Note: The image can be retrieved from an imported texture using the Texture2D.get_image method, which returns a copy of the image: var texture = load("res://icon.svg")
var image: Image = texture.get_image()
 An ImageTexture is not meant to be operated from within the editor interface directly, and is mostly useful for rendering images on screen dynamically via code. If you need to generate images procedurally from within the editor, consider saving and importing images as custom texture resources implementing a new EditorImportPlugin. Note: The maximum texture size is 16384Ã—16384 pixels due to graphics hardware limitations.   Tutorials  Importing images    Properties  
bool resource_local_to_scene false (overrides Resource)     Methods  
ImageTexture create_from_image ( Image image ) static  
Format get_format ( ) const  
void set_image ( Image image )  
void set_size_override ( Vector2i size )  
void update ( Image image )     Method Descriptions 
ImageTexture create_from_image ( Image image ) static
 Creates a new ImageTexture and initializes it by allocating and setting the data from an Image. 
Format get_format ( ) const
 Returns the format of the texture, one of Format. void set_image ( Image image ) Replaces the texture's data with a new Image. This will re-allocate new memory for the texture. If you want to update the image, but don't need to change its parameters (format, size), use update instead for better performance. void set_size_override ( Vector2i size ) Resizes the texture to the specified dimensions. void update ( Image image ) Replaces the texture's data with a new Image. Note: The texture has to be created using create_from_image or initialized first with the set_image method before it can be updated. The new image dimensions, format, and mipmaps configuration should match the existing texture's image configuration. Use this method over set_image if you need to update the texture frequently, which is faster than allocating additional memory for a new texture each time.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_imagetexture.html


classes/class_margincontainer
-----------------------------------------------------------
MarginContainer Inherits: Container < Control < CanvasItem < Node < Object A container that keeps a margin around its child controls.  Description MarginContainer adds an adjustable margin on each side of its child controls. The margins are added around all children, not around each individual one. To control the MarginContainer's margins, use the margin_* theme properties listed below. Note: The margin sizes are theme overrides, not normal properties. This is an example of how to change them in code:  GDScript# This code sample assumes the current script is extending MarginContainer.
var margin_value = 100
add_theme_constant_override("margin_top", margin_value)
add_theme_constant_override("margin_left", margin_value)
add_theme_constant_override("margin_bottom", margin_value)
add_theme_constant_override("margin_right", margin_value)
 C#// This code sample assumes the current script is extending MarginContainer.
int marginValue = 100;
AddThemeConstantOverride("margin_top", marginValue);
AddThemeConstantOverride("margin_left", marginValue);
AddThemeConstantOverride("margin_bottom", marginValue);
AddThemeConstantOverride("margin_right", marginValue);
    Tutorials  Using Containers    Theme Properties  
int margin_bottom 0  
int margin_left 0  
int margin_right 0  
int margin_top 0     Theme Property Descriptions 
int margin_bottom = 0
 Offsets towards the inside direct children of the container by this amount of pixels from the bottom. 
int margin_left = 0
 Offsets towards the inside direct children of the container by this amount of pixels from the left. 
int margin_right = 0
 Offsets towards the inside direct children of the container by this amount of pixels from the right. 
int margin_top = 0
 Offsets towards the inside direct children of the container by this amount of pixels from the top.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_margincontainer.html


classes/class_texturelayered
-----------------------------------------------------------
TextureLayered Inherits: Texture < Resource < RefCounted < Object Inherited By: CompressedTextureLayered, ImageTextureLayered, PlaceholderTextureLayered, TextureLayeredRD Base class for texture types which contain the data of multiple Images. Each image is of the same size and format.  Description Base class for ImageTextureLayered and CompressedTextureLayered. Cannot be used directly, but contains all the functions necessary for accessing the derived resource types. See also Texture3D. Data is set on a per-layer basis. For Texture2DArrays, the layer specifies the array layer. All images need to have the same width, height and number of mipmap levels. A TextureLayered can be loaded with ResourceLoader.load. Internally, Godot maps these files to their respective counterparts in the target rendering driver (Vulkan, OpenGL3).   Methods  
Format _get_format ( ) virtual const  
int _get_height ( ) virtual const  
Image _get_layer_data ( int layer_index ) virtual const  
int _get_layered_type ( ) virtual const  
int _get_layers ( ) virtual const  
int _get_width ( ) virtual const  
bool _has_mipmaps ( ) virtual const  
Format get_format ( ) const  
int get_height ( ) const  
Image get_layer_data ( int layer ) const  
LayeredType get_layered_type ( ) const  
int get_layers ( ) const  
int get_width ( ) const  
bool has_mipmaps ( ) const     Enumerations enum LayeredType: 
LayeredType LAYERED_TYPE_2D_ARRAY = 0
 Texture is a generic Texture2DArray. 
LayeredType LAYERED_TYPE_CUBEMAP = 1
 Texture is a Cubemap, with each side in its own layer (6 in total). 
LayeredType LAYERED_TYPE_CUBEMAP_ARRAY = 2
 Texture is a CubemapArray, with each cubemap being made of 6 layers.   Method Descriptions 
Format _get_format ( ) virtual const
 Called when the TextureLayered's format is queried. 
int _get_height ( ) virtual const
 Called when the TextureLayered's height is queried. 
Image _get_layer_data ( int layer_index ) virtual const
 Called when the data for a layer in the TextureLayered is queried. 
int _get_layered_type ( ) virtual const
 Called when the layers' type in the TextureLayered is queried. 
int _get_layers ( ) virtual const
 Called when the number of layers in the TextureLayered is queried. 
int _get_width ( ) virtual const
 Called when the TextureLayered's width queried. 
bool _has_mipmaps ( ) virtual const
 Called when the presence of mipmaps in the TextureLayered is queried. 
Format get_format ( ) const
 Returns the current format being used by this texture. See Format for details. 
int get_height ( ) const
 Returns the height of the texture in pixels. Height is typically represented by the Y axis. 
Image get_layer_data ( int layer ) const
 Returns an Image resource with the data from specified layer. 
LayeredType get_layered_type ( ) const
 Returns the TextureLayered's type. The type determines how the data is accessed, with cubemaps having special types. 
int get_layers ( ) const
 Returns the number of referenced Images. 
int get_width ( ) const
 Returns the width of the texture in pixels. Width is typically represented by the X axis. 
bool has_mipmaps ( ) const
 Returns true if the layers have generated mipmaps.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texturelayered.html


classes/class_vflowcontainer
-----------------------------------------------------------
VFlowContainer Inherits: FlowContainer < Container < Control < CanvasItem < Node < Object A container that arranges its child controls vertically and wraps them around at the borders.  Description A variant of FlowContainer that can only arrange its child controls vertically, wrapping them around at the borders. This is similar to how text in a book wraps around when no more words can fit on a line, except vertically.   Tutorials  Using Containers   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_vflowcontainer.html


classes/class_splitcontainer
-----------------------------------------------------------
SplitContainer Inherits: Container < Control < CanvasItem < Node < Object Inherited By: HSplitContainer, VSplitContainer A container that splits two child controls horizontally or vertically and provides a grabber for adjusting the split ratio.  Description A container that accepts only two child controls, then arranges them horizontally or vertically and creates a divisor between them. The divisor can be dragged around to change the size relation between the child controls.   Tutorials  Using Containers    Properties  
bool collapsed false  
DraggerVisibility dragger_visibility 0  
int split_offset 0  
bool vertical false     Methods  
void clamp_split_offset ( )     Theme Properties  
int autohide 1  
int minimum_grab_thickness 6  
int separation 12  
Texture2D grabber   
Texture2D h_grabber   
Texture2D v_grabber      Signals dragged ( int offset ) Emitted when the dragger is dragged by user.   Enumerations enum DraggerVisibility: 
DraggerVisibility DRAGGER_VISIBLE = 0
 The split dragger is visible when the cursor hovers it. 
DraggerVisibility DRAGGER_HIDDEN = 1
 The split dragger is never visible. 
DraggerVisibility DRAGGER_HIDDEN_COLLAPSED = 2
 The split dragger is never visible and its space collapsed.   Property Descriptions 
bool collapsed = false
  void set_collapsed ( bool value )
 
bool is_collapsed ( )
  If true, the area of the first Control will be collapsed and the dragger will be disabled. 
DraggerVisibility dragger_visibility = 0
  void set_dragger_visibility ( DraggerVisibility value )
 
DraggerVisibility get_dragger_visibility ( )
  Determines the dragger's visibility. See DraggerVisibility for details. 
int split_offset = 0
  void set_split_offset ( int value )
 
int get_split_offset ( )
  The initial offset of the splitting between the two Controls, with 0 being at the end of the first Control. 
bool vertical = false
  void set_vertical ( bool value )
 
bool is_vertical ( )
  If true, the SplitContainer will arrange its children vertically, rather than horizontally. Can't be changed when using HSplitContainer and VSplitContainer.   Method Descriptions void clamp_split_offset ( ) Clamps the split_offset value to not go outside the currently possible minimal and maximum values.   Theme Property Descriptions 
int autohide = 1
 Boolean value. If 1 (true), the grabber will hide automatically when it isn't under the cursor. If 0 (false), it's always visible. 
int minimum_grab_thickness = 6
 The minimum thickness of the area users can click on to grab the splitting line. If separation or h_grabber / v_grabber's thickness are too small, this ensure that the splitting line can still be dragged. 
int separation = 12
 The space between sides of the container. 
Texture2D grabber The icon used for the grabber drawn in the middle area. 
Texture2D h_grabber The icon used for the grabber drawn in the middle area when vertical is false. 
Texture2D v_grabber The icon used for the grabber drawn in the middle area when vertical is true.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_splitcontainer.html


classes/class_gpuparticlesattractor3d
-----------------------------------------------------------
GPUParticlesAttractor3D Inherits: VisualInstance3D < Node3D < Node < Object Inherited By: GPUParticlesAttractorBox3D, GPUParticlesAttractorSphere3D, GPUParticlesAttractorVectorField3D Abstract base class for 3D particle attractors.  Description Particle attractors can be used to attract particles towards the attractor's origin, or to push them away from the attractor's origin. Particle attractors work in real-time and can be moved, rotated and scaled during gameplay. Unlike collision shapes, non-uniform scaling of attractors is also supported. Attractors can be temporarily disabled by hiding them, or by setting their strength to 0.0. Note: Particle attractors only affect GPUParticles3D, not CPUParticles3D.   Properties  
float attenuation 1.0  
int cull_mask 4294967295  
float directionality 0.0  
float strength 1.0     Property Descriptions 
float attenuation = 1.0
  void set_attenuation ( float value )
 
float get_attenuation ( )
  The particle attractor's attenuation. Higher values result in more gradual pushing of particles as they come closer to the attractor's origin. Zero or negative values will cause particles to be pushed very fast as soon as the touch the attractor's edges. 
int cull_mask = 4294967295
  void set_cull_mask ( int value )
 
int get_cull_mask ( )
  The particle rendering layers (VisualInstance3D.layers) that will be affected by the attractor. By default, all particles are affected by an attractor. After configuring particle nodes accordingly, specific layers can be unchecked to prevent certain particles from being affected by attractors. For example, this can be used if you're using an attractor as part of a spell effect but don't want the attractor to affect unrelated weather particles at the same position. Particle attraction can also be disabled on a per-process material basis by setting ParticleProcessMaterial.attractor_interaction_enabled on the GPUParticles3D node. 
float directionality = 0.0
  void set_directionality ( float value )
 
float get_directionality ( )
  Adjusts how directional the attractor is. At 0.0, the attractor is not directional at all: it will attract particles towards its center. At 1.0, the attractor is fully directional: particles will always be pushed towards local -Z (or +Z if strength is negative). Note: If directionality is greater than 0.0, the direction in which particles are pushed can be changed by rotating the GPUParticlesAttractor3D node. 
float strength = 1.0
  void set_strength ( float value )
 
float get_strength ( )
  Adjusts the strength of the attractor. If strength is negative, particles will be pushed in the opposite direction. Particles will be pushed away from the attractor's origin if directionality is 0.0, or towards local +Z if directionality is greater than 0.0.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gpuparticlesattractor3d.html


classes/class_joint2d
-----------------------------------------------------------
Joint2D Inherits: Node2D < CanvasItem < Node < Object Inherited By: DampedSpringJoint2D, GrooveJoint2D, PinJoint2D Abstract base class for all 2D physics joints.  Description Abstract base class for all joints in 2D physics. 2D joints bind together two physics bodies and apply a constraint.   Properties  
float bias 0.0  
bool disable_collision true  
NodePath node_a NodePath("")  
NodePath node_b NodePath("")     Methods  
RID get_rid ( ) const     Property Descriptions 
float bias = 0.0
  void set_bias ( float value )
 
float get_bias ( )
  When node_a and node_b move in different directions the bias controls how fast the joint pulls them back to their original position. The lower the bias the more the two bodies can pull on the joint. When set to 0, the default value from ProjectSettings.physics/2d/solver/default_constraint_bias is used. 
bool disable_collision = true
  void set_exclude_nodes_from_collision ( bool value )
 
bool get_exclude_nodes_from_collision ( )
  If true, node_a and node_b can not collide. 
NodePath node_a = NodePath("")
  void set_node_a ( NodePath value )
 
NodePath get_node_a ( )
  The first body attached to the joint. Must derive from PhysicsBody2D. 
NodePath node_b = NodePath("")
  void set_node_b ( NodePath value )
 
NodePath get_node_b ( )
  The second body attached to the joint. Must derive from PhysicsBody2D.   Method Descriptions 
RID get_rid ( ) const
 Returns the joint's RID.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_joint2d.html


classes/class_aspectratiocontainer
-----------------------------------------------------------
AspectRatioContainer Inherits: Container < Control < CanvasItem < Node < Object A container that preserves the proportions of its child controls.  Description A container type that arranges its child controls in a way that preserves their proportions automatically when the container is resized. Useful when a container has a dynamic size and the child nodes must adjust their sizes accordingly without losing their aspect ratios.   Tutorials  Using Containers    Properties  
AlignmentMode alignment_horizontal 1  
AlignmentMode alignment_vertical 1  
float ratio 1.0  
StretchMode stretch_mode 2     Enumerations enum StretchMode: 
StretchMode STRETCH_WIDTH_CONTROLS_HEIGHT = 0
 The height of child controls is automatically adjusted based on the width of the container. 
StretchMode STRETCH_HEIGHT_CONTROLS_WIDTH = 1
 The width of child controls is automatically adjusted based on the height of the container. 
StretchMode STRETCH_FIT = 2
 The bounding rectangle of child controls is automatically adjusted to fit inside the container while keeping the aspect ratio. 
StretchMode STRETCH_COVER = 3
 The width and height of child controls is automatically adjusted to make their bounding rectangle cover the entire area of the container while keeping the aspect ratio. When the bounding rectangle of child controls exceed the container's size and Control.clip_contents is enabled, this allows to show only the container's area restricted by its own bounding rectangle. enum AlignmentMode: 
AlignmentMode ALIGNMENT_BEGIN = 0
 Aligns child controls with the beginning (left or top) of the container. 
AlignmentMode ALIGNMENT_CENTER = 1
 Aligns child controls with the center of the container. 
AlignmentMode ALIGNMENT_END = 2
 Aligns child controls with the end (right or bottom) of the container.   Property Descriptions 
AlignmentMode alignment_horizontal = 1
  void set_alignment_horizontal ( AlignmentMode value )
 
AlignmentMode get_alignment_horizontal ( )
  Specifies the horizontal relative position of child controls. 
AlignmentMode alignment_vertical = 1
  void set_alignment_vertical ( AlignmentMode value )
 
AlignmentMode get_alignment_vertical ( )
  Specifies the vertical relative position of child controls. 
float ratio = 1.0
  void set_ratio ( float value )
 
float get_ratio ( )
  The aspect ratio to enforce on child controls. This is the width divided by the height. The ratio depends on the stretch_mode. 
StretchMode stretch_mode = 2
  void set_stretch_mode ( StretchMode value )
 
StretchMode get_stretch_mode ( )
  The stretch mode used to align child controls.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_aspectratiocontainer.html


classes/class_skin
-----------------------------------------------------------
Skin Inherits: Resource < RefCounted < Object  There is currently no description for this class. Please help us by contributing one!   Methods  
void add_bind ( int bone, Transform3D pose )  
void add_named_bind ( String name, Transform3D pose )  
void clear_binds ( )  
int get_bind_bone ( int bind_index ) const  
int get_bind_count ( ) const  
StringName get_bind_name ( int bind_index ) const  
Transform3D get_bind_pose ( int bind_index ) const  
void set_bind_bone ( int bind_index, int bone )  
void set_bind_count ( int bind_count )  
void set_bind_name ( int bind_index, StringName name )  
void set_bind_pose ( int bind_index, Transform3D pose )     Method Descriptions void add_bind ( int bone, Transform3D pose )  There is currently no description for this method. Please help us by contributing one!  void add_named_bind ( String name, Transform3D pose )  There is currently no description for this method. Please help us by contributing one!  void clear_binds ( )  There is currently no description for this method. Please help us by contributing one!  
int get_bind_bone ( int bind_index ) const
  There is currently no description for this method. Please help us by contributing one!  
int get_bind_count ( ) const
  There is currently no description for this method. Please help us by contributing one!  
StringName get_bind_name ( int bind_index ) const
  There is currently no description for this method. Please help us by contributing one!  
Transform3D get_bind_pose ( int bind_index ) const
  There is currently no description for this method. Please help us by contributing one!  void set_bind_bone ( int bind_index, int bone )  There is currently no description for this method. Please help us by contributing one!  void set_bind_count ( int bind_count )  There is currently no description for this method. Please help us by contributing one!  void set_bind_name ( int bind_index, StringName name )  There is currently no description for this method. Please help us by contributing one!  void set_bind_pose ( int bind_index, Transform3D pose )  There is currently no description for this method. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skin.html


classes/class_placeholdercubemaparray
-----------------------------------------------------------
PlaceholderCubemapArray Inherits: PlaceholderTextureLayered < TextureLayered < Texture < Resource < RefCounted < Object A CubemapArray without image data.  Description This class replaces a CubemapArray or a CubemapArray-derived class in 2 conditions:  In dedicated server mode, where the image data shouldn't affect game logic. This allows reducing the exported PCK's size significantly. When the CubemapArray-derived class is missing, for example when using a different engine version.  Note: This class is not intended for rendering or for use in shaders. Operations like calculating UV are not guaranteed to work.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_placeholdercubemaparray.html


classes/class_ribbontrailmesh
-----------------------------------------------------------
RibbonTrailMesh Inherits: PrimitiveMesh < Mesh < Resource < RefCounted < Object Represents a straight ribbon-shaped PrimitiveMesh with variable width.  Description RibbonTrailMesh represents a straight ribbon-shaped mesh with variable width. The ribbon is composed of a number of flat or cross-shaped sections, each with the same section_length and number of section_segments. A curve is sampled along the total length of the ribbon, meaning that the curve determines the size of the ribbon along its length. This primitive mesh is usually used for particle trails.   Tutorials  3D Particle trails Particle systems (3D)    Properties  
Curve curve   
float section_length 0.2  
int section_segments 3  
int sections 5  
Shape shape 1  
float size 1.0     Enumerations enum Shape: 
Shape SHAPE_FLAT = 0
 Gives the mesh a single flat face. 
Shape SHAPE_CROSS = 1
 Gives the mesh two perpendicular flat faces, making a cross shape.   Property Descriptions 
Curve curve  void set_curve ( Curve value )
 
Curve get_curve ( )
  Determines the size of the ribbon along its length. The size of a particular section segment is obtained by multiplying the baseline size by the value of this curve at the given distance. For values smaller than 0, the faces will be inverted. 
float section_length = 0.2
  void set_section_length ( float value )
 
float get_section_length ( )
  The length of a section of the ribbon. 
int section_segments = 3
  void set_section_segments ( int value )
 
int get_section_segments ( )
  The number of segments in a section. The curve is sampled on each segment to determine its size. Higher values result in a more detailed ribbon at the cost of performance. 
int sections = 5
  void set_sections ( int value )
 
int get_sections ( )
  The total number of sections on the ribbon. 
Shape shape = 1
  void set_shape ( Shape value )
 
Shape get_shape ( )
  Determines the shape of the ribbon. 
float size = 1.0
  void set_size ( float value )
 
float get_size ( )
  The baseline size of the ribbon. The size of a particular section segment is obtained by multiplying this size by the value of the curve at the given distance.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_ribbontrailmesh.html


classes/class_scrollbar
-----------------------------------------------------------
ScrollBar Inherits: Range < Control < CanvasItem < Node < Object Inherited By: HScrollBar, VScrollBar Abstract base class for scrollbars.  Description Abstract base class for scrollbars, typically used to navigate through content that extends beyond the visible area of a control. Scrollbars are Range-based controls.   Properties  
float custom_step -1.0  
float step 0.0 (overrides Range)     Theme Properties  
Texture2D decrement  
Texture2D decrement_highlight  
Texture2D decrement_pressed  
Texture2D increment  
Texture2D increment_highlight  
Texture2D increment_pressed  
StyleBox grabber  
StyleBox grabber_highlight  
StyleBox grabber_pressed  
StyleBox scroll  
StyleBox scroll_focus     Signals scrolling ( ) Emitted when the scrollbar is being scrolled.   Property Descriptions 
float custom_step = -1.0
  void set_custom_step ( float value )
 
float get_custom_step ( )
  Overrides the step used when clicking increment and decrement buttons or when using arrow keys when the ScrollBar is focused.   Theme Property Descriptions 
Texture2D decrement Icon used as a button to scroll the ScrollBar left/up. Supports custom step using the custom_step property. 
Texture2D decrement_highlight Displayed when the mouse cursor hovers over the decrement button. 
Texture2D decrement_pressed Displayed when the decrement button is being pressed. 
Texture2D increment Icon used as a button to scroll the ScrollBar right/down. Supports custom step using the custom_step property. 
Texture2D increment_highlight Displayed when the mouse cursor hovers over the increment button. 
Texture2D increment_pressed Displayed when the increment button is being pressed. 
StyleBox grabber Used as texture for the grabber, the draggable element representing current scroll. 
StyleBox grabber_highlight Used when the mouse hovers over the grabber. 
StyleBox grabber_pressed Used when the grabber is being dragged. 
StyleBox scroll Used as background of this ScrollBar. 
StyleBox scroll_focus Used as background when the ScrollBar has the GUI focus.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_scrollbar.html


classes/class_spritebase3d
-----------------------------------------------------------
SpriteBase3D Inherits: GeometryInstance3D < VisualInstance3D < Node3D < Node < Object Inherited By: AnimatedSprite3D, Sprite3D 2D sprite node in 3D environment.  Description A node that displays 2D texture information in a 3D environment. See also Sprite3D where many other properties are defined.   Properties  
float alpha_antialiasing_edge 0.0  
AlphaAntiAliasing alpha_antialiasing_mode 0  
AlphaCutMode alpha_cut 0  
float alpha_hash_scale 1.0  
float alpha_scissor_threshold 0.5  
Vector3.Axis axis 2  
BillboardMode billboard 0  
bool centered true  
bool double_sided true  
bool fixed_size false  
bool flip_h false  
bool flip_v false  
Color modulate Color(1, 1, 1, 1)  
bool no_depth_test false  
Vector2 offset Vector2(0, 0)  
float pixel_size 0.01  
int render_priority 0  
bool shaded false  
TextureFilter texture_filter 3  
bool transparent true     Methods  
TriangleMesh generate_triangle_mesh ( ) const  
bool get_draw_flag ( DrawFlags flag ) const  
Rect2 get_item_rect ( ) const  
void set_draw_flag ( DrawFlags flag, bool enabled )     Enumerations enum DrawFlags: 
DrawFlags FLAG_TRANSPARENT = 0
 If set, the texture's transparency and the opacity are used to make those parts of the sprite invisible. 
DrawFlags FLAG_SHADED = 1
 If set, lights in the environment affect the sprite. 
DrawFlags FLAG_DOUBLE_SIDED = 2
 If set, texture can be seen from the back as well. If not, the texture is invisible when looking at it from behind. 
DrawFlags FLAG_DISABLE_DEPTH_TEST = 3
 Disables the depth test, so this object is drawn on top of all others. However, objects drawn after it in the draw order may cover it. 
DrawFlags FLAG_FIXED_SIZE = 4
 Label is scaled by depth so that it always appears the same size on screen. 
DrawFlags FLAG_MAX = 5
 Represents the size of the DrawFlags enum. enum AlphaCutMode: 
AlphaCutMode ALPHA_CUT_DISABLED = 0
 This mode performs standard alpha blending. It can display translucent areas, but transparency sorting issues may be visible when multiple transparent materials are overlapping. 
AlphaCutMode ALPHA_CUT_DISCARD = 1
 This mode only allows fully transparent or fully opaque pixels. Harsh edges will be visible unless some form of screen-space antialiasing is enabled (see ProjectSettings.rendering/anti_aliasing/quality/screen_space_aa). On the bright side, this mode doesn't suffer from transparency sorting issues when multiple transparent materials are overlapping. This mode is also known as alpha testing or 1-bit transparency. 
AlphaCutMode ALPHA_CUT_OPAQUE_PREPASS = 2
 This mode draws fully opaque pixels in the depth prepass. This is slower than ALPHA_CUT_DISABLED or ALPHA_CUT_DISCARD, but it allows displaying translucent areas and smooth edges while using proper sorting. 
AlphaCutMode ALPHA_CUT_HASH = 3
 This mode draws cuts off all values below a spatially-deterministic threshold, the rest will remain opaque.   Property Descriptions 
float alpha_antialiasing_edge = 0.0
  void set_alpha_antialiasing_edge ( float value )
 
float get_alpha_antialiasing_edge ( )
  Threshold at which antialiasing will be applied on the alpha channel. 
AlphaAntiAliasing alpha_antialiasing_mode = 0
  void set_alpha_antialiasing ( AlphaAntiAliasing value )
 
AlphaAntiAliasing get_alpha_antialiasing ( )
  The type of alpha antialiasing to apply. See AlphaAntiAliasing. 
AlphaCutMode alpha_cut = 0
  void set_alpha_cut_mode ( AlphaCutMode value )
 
AlphaCutMode get_alpha_cut_mode ( )
  The alpha cutting mode to use for the sprite. See AlphaCutMode for possible values. 
float alpha_hash_scale = 1.0
  void set_alpha_hash_scale ( float value )
 
float get_alpha_hash_scale ( )
  The hashing scale for Alpha Hash. Recommended values between 0 and 2. 
float alpha_scissor_threshold = 0.5
  void set_alpha_scissor_threshold ( float value )
 
float get_alpha_scissor_threshold ( )
  Threshold at which the alpha scissor will discard values. Vector3.Axis axis = 2
  void set_axis ( Vector3.Axis value )
 Vector3.Axis get_axis ( )
  The direction in which the front of the texture faces. 
BillboardMode billboard = 0
  void set_billboard_mode ( BillboardMode value )
 
BillboardMode get_billboard_mode ( )
  The billboard mode to use for the sprite. See BillboardMode for possible values. 
bool centered = true
  void set_centered ( bool value )
 
bool is_centered ( )
  If true, texture will be centered. 
bool double_sided = true
  void set_draw_flag ( DrawFlags flag, bool enabled )
 
bool get_draw_flag ( DrawFlags flag ) const
  If true, texture can be seen from the back as well, if false, it is invisible when looking at it from behind. 
bool fixed_size = false
  void set_draw_flag ( DrawFlags flag, bool enabled )
 
bool get_draw_flag ( DrawFlags flag ) const
  If true, the label is rendered at the same size regardless of distance. 
bool flip_h = false
  void set_flip_h ( bool value )
 
bool is_flipped_h ( )
  If true, texture is flipped horizontally. 
bool flip_v = false
  void set_flip_v ( bool value )
 
bool is_flipped_v ( )
  If true, texture is flipped vertically. 
Color modulate = Color(1, 1, 1, 1)
  void set_modulate ( Color value )
 
Color get_modulate ( )
  A color value used to multiply the texture's colors. Can be used for mood-coloring or to simulate the color of ambient light. Note: Unlike CanvasItem.modulate for 2D, colors with values above 1.0 (overbright) are not supported. Note: If a GeometryInstance3D.material_override is defined on the SpriteBase3D, the material override must be configured to take vertex colors into account for albedo. Otherwise, the color defined in modulate will be ignored. For a BaseMaterial3D, BaseMaterial3D.vertex_color_use_as_albedo must be true. For a ShaderMaterial, ALBEDO *= COLOR.rgb; must be inserted in the shader's fragment() function. 
bool no_depth_test = false
  void set_draw_flag ( DrawFlags flag, bool enabled )
 
bool get_draw_flag ( DrawFlags flag ) const
  If true, depth testing is disabled and the object will be drawn in render order. 
Vector2 offset = Vector2(0, 0)
  void set_offset ( Vector2 value )
 
Vector2 get_offset ( )
  The texture's drawing offset. 
float pixel_size = 0.01
  void set_pixel_size ( float value )
 
float get_pixel_size ( )
  The size of one pixel's width on the sprite to scale it in 3D. 
int render_priority = 0
  void set_render_priority ( int value )
 
int get_render_priority ( )
  Sets the render priority for the sprite. Higher priority objects will be sorted in front of lower priority objects. Note: This only applies if alpha_cut is set to ALPHA_CUT_DISABLED (default value). Note: This only applies to sorting of transparent objects. This will not impact how transparent objects are sorted relative to opaque objects. This is because opaque objects are not sorted, while transparent objects are sorted from back to front (subject to priority). 
bool shaded = false
  void set_draw_flag ( DrawFlags flag, bool enabled )
 
bool get_draw_flag ( DrawFlags flag ) const
  If true, the Light3D in the Environment has effects on the sprite. 
TextureFilter texture_filter = 3
  void set_texture_filter ( TextureFilter value )
 
TextureFilter get_texture_filter ( )
  Filter flags for the texture. See TextureFilter for options. Note: Linear filtering may cause artifacts around the edges, which are especially noticeable on opaque textures. To prevent this, use textures with transparent or identical colors around the edges. 
bool transparent = true
  void set_draw_flag ( DrawFlags flag, bool enabled )
 
bool get_draw_flag ( DrawFlags flag ) const
  If true, the texture's transparency and the opacity are used to make those parts of the sprite invisible.   Method Descriptions 
TriangleMesh generate_triangle_mesh ( ) const
 Returns a TriangleMesh with the sprite's vertices following its current configuration (such as its axis and pixel_size). 
bool get_draw_flag ( DrawFlags flag ) const
 Returns the value of the specified flag. 
Rect2 get_item_rect ( ) const
 Returns the rectangle representing this sprite. void set_draw_flag ( DrawFlags flag, bool enabled ) If true, the specified flag will be enabled. See DrawFlags for a list of flags.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_spritebase3d.html


classes/class_placeholdermesh
-----------------------------------------------------------
PlaceholderMesh Inherits: Mesh < Resource < RefCounted < Object Placeholder class for a mesh.  Description This class is used when loading a project that uses a Mesh subclass in 2 conditions:  When running the project exported in dedicated server mode, only the texture's dimensions are kept (as they may be relied upon for gameplay purposes or positioning of other elements). This allows reducing the exported PCK's size significantly. When this subclass is missing due to using a different engine version or build (e.g. modules disabled).    Properties  
AABB aabb AABB(0, 0, 0, 0, 0, 0)     Property Descriptions 
AABB aabb = AABB(0, 0, 0, 0, 0, 0)
  void set_aabb ( AABB value )
 
AABB get_aabb ( )
  The smallest AABB enclosing this mesh in local space.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_placeholdermesh.html


classes/class_material
-----------------------------------------------------------
Material Inherits: Resource < RefCounted < Object Inherited By: BaseMaterial3D, CanvasItemMaterial, FogMaterial, PanoramaSkyMaterial, ParticleProcessMaterial, PhysicalSkyMaterial, PlaceholderMaterial, ProceduralSkyMaterial, ShaderMaterial Virtual base class for applying visual properties to an object, such as color and roughness.  Description Material is a base resource used for coloring and shading geometry. All materials inherit from it and almost all VisualInstance3D derived nodes carry a Material. A few flags and parameters are shared between all material types and are configured here. Importantly, you can inherit from Material to create your own custom material type in script or in GDExtension.   Tutorials  3D Material Testers Demo Third Person Shooter Demo    Properties  
Material next_pass  
int render_priority     Methods  
bool _can_do_next_pass ( ) virtual const  
bool _can_use_render_priority ( ) virtual const  
Mode _get_shader_mode ( ) virtual const  
RID _get_shader_rid ( ) virtual const  
Resource create_placeholder ( ) const  
void inspect_native_shader_code ( )     Constants RENDER_PRIORITY_MAX = 127
 Maximum value for the render_priority parameter. RENDER_PRIORITY_MIN = -128
 Minimum value for the render_priority parameter.   Property Descriptions 
Material next_pass  void set_next_pass ( Material value )
 
Material get_next_pass ( )
  Sets the Material to be used for the next pass. This renders the object again using a different material. Note: next_pass materials are not necessarily drawn immediately after the source Material. Draw order is determined by material properties, render_priority, and distance to camera. Note: This only applies to StandardMaterial3Ds and ShaderMaterials with type "Spatial". 
int render_priority  void set_render_priority ( int value )
 
int get_render_priority ( )
  Sets the render priority for objects in 3D scenes. Higher priority objects will be sorted in front of lower priority objects. In other words, all objects with render_priority 1 will render before all objects with render_priority 0). Note: This only applies to StandardMaterial3Ds and ShaderMaterials with type "Spatial". Note: This will not impact how transparent objects are sorted relative to opaque objects or how dynamic meshes will be sorted relative to other opaque meshes. This is because all transparent objects are drawn after all opaque objects and all dynamic opaque meshes are drawn before other opaque meshes.   Method Descriptions 
bool _can_do_next_pass ( ) virtual const
 Only exposed for the purpose of overriding. You cannot call this function directly. Used internally to determine if next_pass should be shown in the editor or not. 
bool _can_use_render_priority ( ) virtual const
 Only exposed for the purpose of overriding. You cannot call this function directly. Used internally to determine if render_priority should be shown in the editor or not. 
Mode _get_shader_mode ( ) virtual const
 Only exposed for the purpose of overriding. You cannot call this function directly. Used internally by various editor tools. 
RID _get_shader_rid ( ) virtual const
 Only exposed for the purpose of overriding. You cannot call this function directly. Used internally by various editor tools. Used to access the RID of the Material's Shader. 
Resource create_placeholder ( ) const
 Creates a placeholder version of this resource (PlaceholderMaterial). void inspect_native_shader_code ( ) Only available when running in the editor. Opens a popup that visualizes the generated shader code, including all variants and internal shader code.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_material.html


classes/class_visualshadernodecolorparameter
-----------------------------------------------------------
VisualShaderNodeColorParameter Inherits: VisualShaderNodeParameter < VisualShaderNode < Resource < RefCounted < Object A Color parameter to be used within the visual shader graph.  Description Translated to uniform vec4 in the shader language.   Properties  
Color default_value Color(1, 1, 1, 1)  
bool default_value_enabled false     Property Descriptions 
Color default_value = Color(1, 1, 1, 1)
  void set_default_value ( Color value )
 
Color get_default_value ( )
  A default value to be assigned within the shader. 
bool default_value_enabled = false
  void set_default_value_enabled ( bool value )
 
bool is_default_value_enabled ( )
  Enables usage of the default_value.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualshadernodecolorparameter.html


classes/class_checkbox
-----------------------------------------------------------
CheckBox Inherits: Button < BaseButton < Control < CanvasItem < Node < Object A button that represents a binary choice.  Description CheckBox allows the user to choose one of only two possible options. It's similar to CheckButton in functionality, but it has a different appearance. To follow established UX patterns, it's recommended to use CheckBox when toggling it has no immediate effect on something. For example, it could be used when toggling it will only do something once a confirmation button is pressed. See also BaseButton which contains common properties and methods associated with this node. When BaseButton.button_group specifies a ButtonGroup, CheckBox changes its appearance to that of a radio button and uses the various radio_* theme properties.   Properties  
HorizontalAlignment alignment 0 (overrides Button)  
bool toggle_mode true (overrides BaseButton)     Theme Properties  
int check_v_offset 0  
Texture2D checked   
Texture2D checked_disabled   
Texture2D radio_checked   
Texture2D radio_checked_disabled   
Texture2D radio_unchecked   
Texture2D radio_unchecked_disabled   
Texture2D unchecked   
Texture2D unchecked_disabled      Theme Property Descriptions 
int check_v_offset = 0
 The vertical offset used when rendering the check icons (in pixels). 
Texture2D checked The check icon to display when the CheckBox is checked. 
Texture2D checked_disabled The check icon to display when the CheckBox is checked and is disabled. 
Texture2D radio_checked The check icon to display when the CheckBox is configured as a radio button and is checked. 
Texture2D radio_checked_disabled The check icon to display when the CheckBox is configured as a radio button, is disabled, and is unchecked. 
Texture2D radio_unchecked The check icon to display when the CheckBox is configured as a radio button and is unchecked. 
Texture2D radio_unchecked_disabled The check icon to display when the CheckBox is configured as a radio button, is disabled, and is unchecked. 
Texture2D unchecked The check icon to display when the CheckBox is unchecked. 
Texture2D unchecked_disabled The check icon to display when the CheckBox is unchecked and is disabled.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_checkbox.html


classes/class_font
-----------------------------------------------------------
Font Inherits: Resource < RefCounted < Object Inherited By: FontFile, FontVariation, SystemFont Abstract base class for fonts and font variations.  Description Abstract base class for different font types. It has methods for drawing text and font character introspection.   Properties  
Font[] fallbacks []     Methods  
float draw_char ( RID canvas_item, Vector2 pos, int char, int font_size, Color modulate=Color(1, 1, 1, 1) ) const  
float draw_char_outline ( RID canvas_item, Vector2 pos, int char, int font_size, int size=-1, Color modulate=Color(1, 1, 1, 1) ) const  
void draw_multiline_string ( RID canvas_item, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int max_lines=-1, Color modulate=Color(1, 1, 1, 1), BitField<LineBreakFlag> brk_flags=3, BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const  
void draw_multiline_string_outline ( RID canvas_item, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int max_lines=-1, int size=1, Color modulate=Color(1, 1, 1, 1), BitField<LineBreakFlag> brk_flags=3, BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const  
void draw_string ( RID canvas_item, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, Color modulate=Color(1, 1, 1, 1), BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const  
void draw_string_outline ( RID canvas_item, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int size=1, Color modulate=Color(1, 1, 1, 1), BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const  
RID find_variation ( Dictionary variation_coordinates, int face_index=0, float strength=0.0, Transform2D transform=Transform2D(1, 0, 0, 1, 0, 0), int spacing_top=0, int spacing_bottom=0, int spacing_space=0, int spacing_glyph=0 ) const  
float get_ascent ( int font_size=16 ) const  
Vector2 get_char_size ( int char, int font_size ) const  
float get_descent ( int font_size=16 ) const  
int get_face_count ( ) const  
String get_font_name ( ) const  
int get_font_stretch ( ) const  
BitField<FontStyle> get_font_style ( ) const  
String get_font_style_name ( ) const  
int get_font_weight ( ) const  
float get_height ( int font_size=16 ) const  
Vector2 get_multiline_string_size ( String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int max_lines=-1, BitField<LineBreakFlag> brk_flags=3, BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const  
Dictionary get_opentype_features ( ) const  
Dictionary get_ot_name_strings ( ) const  
RID[] get_rids ( ) const  
int get_spacing ( SpacingType spacing ) const  
Vector2 get_string_size ( String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const  
String get_supported_chars ( ) const  
Dictionary get_supported_feature_list ( ) const  
Dictionary get_supported_variation_list ( ) const  
float get_underline_position ( int font_size=16 ) const  
float get_underline_thickness ( int font_size=16 ) const  
bool has_char ( int char ) const  
bool is_language_supported ( String language ) const  
bool is_script_supported ( String script ) const  
void set_cache_capacity ( int single_line, int multi_line )     Property Descriptions 
Font[] fallbacks = []
  void set_fallbacks ( Font[] value )
 
Font[] get_fallbacks ( )
  Array of fallback Fonts to use as a substitute if a glyph is not found in this current Font. If this array is empty in a FontVariation, the FontVariation.base_font's fallbacks are used instead.   Method Descriptions 
float draw_char ( RID canvas_item, Vector2 pos, int char, int font_size, Color modulate=Color(1, 1, 1, 1) ) const
 Draw a single Unicode character char into a canvas item using the font, at a given position, with modulate color. pos specifies the baseline, not the top. To draw from the top, ascent must be added to the Y axis. Note: Do not use this function to draw strings character by character, use draw_string or TextLine instead. 
float draw_char_outline ( RID canvas_item, Vector2 pos, int char, int font_size, int size=-1, Color modulate=Color(1, 1, 1, 1) ) const
 Draw a single Unicode character char outline into a canvas item using the font, at a given position, with modulate color and size outline size. pos specifies the baseline, not the top. To draw from the top, ascent must be added to the Y axis. Note: Do not use this function to draw strings character by character, use draw_string or TextLine instead. void draw_multiline_string ( RID canvas_item, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int max_lines=-1, Color modulate=Color(1, 1, 1, 1), BitField<LineBreakFlag> brk_flags=3, BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const
 Breaks text into lines using rules specified by brk_flags and draws it into a canvas item using the font, at a given position, with modulate color, optionally clipping the width and aligning horizontally. pos specifies the baseline of the first line, not the top. To draw from the top, ascent must be added to the Y axis. See also CanvasItem.draw_multiline_string. void draw_multiline_string_outline ( RID canvas_item, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int max_lines=-1, int size=1, Color modulate=Color(1, 1, 1, 1), BitField<LineBreakFlag> brk_flags=3, BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const
 Breaks text to the lines using rules specified by brk_flags and draws text outline into a canvas item using the font, at a given position, with modulate color and size outline size, optionally clipping the width and aligning horizontally. pos specifies the baseline of the first line, not the top. To draw from the top, ascent must be added to the Y axis. See also CanvasItem.draw_multiline_string_outline. void draw_string ( RID canvas_item, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, Color modulate=Color(1, 1, 1, 1), BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const
 Draw text into a canvas item using the font, at a given position, with modulate color, optionally clipping the width and aligning horizontally. pos specifies the baseline, not the top. To draw from the top, ascent must be added to the Y axis. See also CanvasItem.draw_string. void draw_string_outline ( RID canvas_item, Vector2 pos, String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int size=1, Color modulate=Color(1, 1, 1, 1), BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const
 Draw text outline into a canvas item using the font, at a given position, with modulate color and size outline size, optionally clipping the width and aligning horizontally. pos specifies the baseline, not the top. To draw from the top, ascent must be added to the Y axis. See also CanvasItem.draw_string_outline. 
RID find_variation ( Dictionary variation_coordinates, int face_index=0, float strength=0.0, Transform2D transform=Transform2D(1, 0, 0, 1, 0, 0), int spacing_top=0, int spacing_bottom=0, int spacing_space=0, int spacing_glyph=0 ) const
 Returns TextServer RID of the font cache for specific variation. 
float get_ascent ( int font_size=16 ) const
 Returns the average font ascent (number of pixels above the baseline). Note: Real ascent of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate (e.g. as the ascent of empty line). 
Vector2 get_char_size ( int char, int font_size ) const
 Returns the size of a character. Does not take kerning into account. Note: Do not use this function to calculate width of the string character by character, use get_string_size or TextLine instead. The height returned is the font height (see also get_height) and has no relation to the glyph height. 
float get_descent ( int font_size=16 ) const
 Returns the average font descent (number of pixels below the baseline). Note: Real descent of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate (e.g. as the descent of empty line). 
int get_face_count ( ) const
 Returns number of faces in the TrueType / OpenType collection. 
String get_font_name ( ) const
 Returns font family name. 
int get_font_stretch ( ) const
 Returns font stretch amount, compared to a normal width. A percentage value between 50% and 200%. 
BitField<FontStyle> get_font_style ( ) const
 Returns font style flags, see FontStyle. 
String get_font_style_name ( ) const
 Returns font style name. 
int get_font_weight ( ) const
 Returns weight (boldness) of the font. A value in the 100...999 range, normal font weight is 400, bold font weight is 700. 
float get_height ( int font_size=16 ) const
 Returns the total average font height (ascent plus descent) in pixels. Note: Real height of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate (e.g. as the height of empty line). 
Vector2 get_multiline_string_size ( String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, int max_lines=-1, BitField<LineBreakFlag> brk_flags=3, BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const
 Returns the size of a bounding box of a string broken into the lines, taking kerning and advance into account. See also draw_multiline_string. 
Dictionary get_opentype_features ( ) const
 Returns a set of OpenType feature tags. More info: OpenType feature tags. 
Dictionary get_ot_name_strings ( ) const
 Returns Dictionary with OpenType font name strings (localized font names, version, description, license information, sample text, etc.). 
RID[] get_rids ( ) const
 Returns Array of valid Font RIDs, which can be passed to the TextServer methods. 
int get_spacing ( SpacingType spacing ) const
 Returns the spacing for the given type (see SpacingType). 
Vector2 get_string_size ( String text, HorizontalAlignment alignment=0, float width=-1, int font_size=16, BitField<JustificationFlag> justification_flags=3, Direction direction=0, Orientation orientation=0 ) const
 Returns the size of a bounding box of a single-line string, taking kerning, advance and subpixel positioning into account. See also get_multiline_string_size and draw_string. For example, to get the string size as displayed by a single-line Label, use:  GDScriptvar string_size = $Label.get_theme_font("font").get_string_size($Label.text, HORIZONTAL_ALIGNMENT_LEFT, -1, $Label.get_theme_font_size("font_size"))
 C#Label label = GetNode<Label>("Label");
Vector2 stringSize = label.GetThemeFont("font").GetStringSize(label.Text, HorizontalAlignment.Left, -1, label.GetThemeFontSize("font_size"));
  Note: Since kerning, advance and subpixel positioning are taken into account by get_string_size, using separate get_string_size calls on substrings of a string then adding the results together will return a different result compared to using a single get_string_size call on the full string. Note: Real height of the string is context-dependent and can be significantly different from the value returned by get_height. 
String get_supported_chars ( ) const
 Returns a string containing all the characters available in the font. If a given character is included in more than one font data source, it appears only once in the returned string. 
Dictionary get_supported_feature_list ( ) const
 Returns list of OpenType features supported by font. 
Dictionary get_supported_variation_list ( ) const
 Returns list of supported variation coordinates, each coordinate is returned as tag: Vector3i(min_value,max_value,default_value). Font variations allow for continuous change of glyph characteristics along some given design axis, such as weight, width or slant. To print available variation axes of a variable font: var fv = FontVariation.new()
fv.set_base_font = load("res://RobotoFlex.ttf")
var variation_list = fv.get_supported_variation_list()
for tag in variation_list:
    var name = TextServerManager.get_primary_interface().tag_to_name(tag)
    var values = variation_list[tag]
    print("variation axis: %s (%d)
\tmin, max, default: %s" % [name, tag, values])
 Note: To set and get variation coordinates of a FontVariation, use FontVariation.variation_opentype. 
float get_underline_position ( int font_size=16 ) const
 Returns average pixel offset of the underline below the baseline. Note: Real underline position of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate. 
float get_underline_thickness ( int font_size=16 ) const
 Returns average thickness of the underline. Note: Real underline thickness of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate. 
bool has_char ( int char ) const
 Returns true if a Unicode char is available in the font. 
bool is_language_supported ( String language ) const
 Returns true, if font supports given language (ISO 639 code). 
bool is_script_supported ( String script ) const
 Returns true, if font supports given script (ISO 15924 code). void set_cache_capacity ( int single_line, int multi_line ) Sets LRU cache capacity for draw_* methods.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_font.html


classes/class_circleshape2d
-----------------------------------------------------------
CircleShape2D Inherits: Shape2D < Resource < RefCounted < Object A 2D circle shape used for physics collision.  Description A 2D circle shape, intended for use in physics. Usually used to provide a shape for a CollisionShape2D. Performance: CircleShape2D is fast to check collisions against. It is faster than RectangleShape2D and CapsuleShape2D.   Properties  
float radius 10.0     Property Descriptions 
float radius = 10.0
  void set_radius ( float value )
 
float get_radius ( )
  The circle's radius.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_circleshape2d.html


classes/class_shape2d
-----------------------------------------------------------
Shape2D Inherits: Resource < RefCounted < Object Inherited By: CapsuleShape2D, CircleShape2D, ConcavePolygonShape2D, ConvexPolygonShape2D, RectangleShape2D, SegmentShape2D, SeparationRayShape2D, WorldBoundaryShape2D Abstract base class for 2D shapes used for physics collision.  Description Abstract base class for all 2D shapes, intended for use in physics. Performance: Primitive shapes, especially CircleShape2D, are fast to check collisions against. ConvexPolygonShape2D is slower, and ConcavePolygonShape2D is the slowest.   Tutorials  Physics introduction    Properties  
float custom_solver_bias 0.0     Methods  
bool collide ( Transform2D local_xform, Shape2D with_shape, Transform2D shape_xform )  
PackedVector2Array collide_and_get_contacts ( Transform2D local_xform, Shape2D with_shape, Transform2D shape_xform )  
bool collide_with_motion ( Transform2D local_xform, Vector2 local_motion, Shape2D with_shape, Transform2D shape_xform, Vector2 shape_motion )  
PackedVector2Array collide_with_motion_and_get_contacts ( Transform2D local_xform, Vector2 local_motion, Shape2D with_shape, Transform2D shape_xform, Vector2 shape_motion )  
void draw ( RID canvas_item, Color color )  
Rect2 get_rect ( ) const     Property Descriptions 
float custom_solver_bias = 0.0
  void set_custom_solver_bias ( float value )
 
float get_custom_solver_bias ( )
  The shape's custom solver bias. Defines how much bodies react to enforce contact separation when this shape is involved. When set to 0, the default value from ProjectSettings.physics/2d/solver/default_contact_bias is used.   Method Descriptions 
bool collide ( Transform2D local_xform, Shape2D with_shape, Transform2D shape_xform ) Returns true if this shape is colliding with another. This method needs the transformation matrix for this shape (local_xform), the shape to check collisions with (with_shape), and the transformation matrix of that shape (shape_xform). 
PackedVector2Array collide_and_get_contacts ( Transform2D local_xform, Shape2D with_shape, Transform2D shape_xform ) Returns a list of contact point pairs where this shape touches another. If there are no collisions, the returned list is empty. Otherwise, the returned list contains contact points arranged in pairs, with entries alternating between points on the boundary of this shape and points on the boundary of with_shape. A collision pair A, B can be used to calculate the collision normal with (B - A).normalized(), and the collision depth with (B - A).length(). This information is typically used to separate shapes, particularly in collision solvers. This method needs the transformation matrix for this shape (local_xform), the shape to check collisions with (with_shape), and the transformation matrix of that shape (shape_xform). 
bool collide_with_motion ( Transform2D local_xform, Vector2 local_motion, Shape2D with_shape, Transform2D shape_xform, Vector2 shape_motion ) Returns whether this shape would collide with another, if a given movement was applied. This method needs the transformation matrix for this shape (local_xform), the movement to test on this shape (local_motion), the shape to check collisions with (with_shape), the transformation matrix of that shape (shape_xform), and the movement to test onto the other object (shape_motion). 
PackedVector2Array collide_with_motion_and_get_contacts ( Transform2D local_xform, Vector2 local_motion, Shape2D with_shape, Transform2D shape_xform, Vector2 shape_motion ) Returns a list of contact point pairs where this shape would touch another, if a given movement was applied. If there would be no collisions, the returned list is empty. Otherwise, the returned list contains contact points arranged in pairs, with entries alternating between points on the boundary of this shape and points on the boundary of with_shape. A collision pair A, B can be used to calculate the collision normal with (B - A).normalized(), and the collision depth with (B - A).length(). This information is typically used to separate shapes, particularly in collision solvers. This method needs the transformation matrix for this shape (local_xform), the movement to test on this shape (local_motion), the shape to check collisions with (with_shape), the transformation matrix of that shape (shape_xform), and the movement to test onto the other object (shape_motion). void draw ( RID canvas_item, Color color ) Draws a solid shape onto a CanvasItem with the RenderingServer API filled with the specified color. The exact drawing method is specific for each shape and cannot be configured. 
Rect2 get_rect ( ) const
 Returns a Rect2 representing the shapes boundary.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_shape2d.html


classes/class_animation
-----------------------------------------------------------
Animation Inherits: Resource < RefCounted < Object Holds data that can be used to animate anything in the engine.  Description This resource holds data that can be used to animate anything in the engine. Animations are divided into tracks and each track must be linked to a node. The state of that node can be changed through time, by adding timed keys (events) to the track.  GDScript# This creates an animation that makes the node "Enemy" move to the right by
# 100 pixels in 2.0 seconds.
var animation = Animation.new()
var track_index = animation.add_track(Animation.TYPE_VALUE)
animation.track_set_path(track_index, "Enemy:position:x")
animation.track_insert_key(track_index, 0.0, 0)
animation.track_insert_key(track_index, 2.0, 100)
animation.length = 2.0
 C#// This creates an animation that makes the node "Enemy" move to the right by
// 100 pixels in 2.0 seconds.
var animation = new Animation();
int trackIndex = animation.AddTrack(Animation.TrackType.Value);
animation.TrackSetPath(trackIndex, "Enemy:position:x");
animation.TrackInsertKey(trackIndex, 0.0f, 0);
animation.TrackInsertKey(trackIndex, 2.0f, 100);
animation.Length = 2.0f;
  Animations are just data containers, and must be added to nodes such as an AnimationPlayer to be played back. Animation tracks have different types, each with its own set of dedicated methods. Check TrackType to see available types. Note: For 3D position/rotation/scale, using the dedicated TYPE_POSITION_3D, TYPE_ROTATION_3D and TYPE_SCALE_3D track types instead of TYPE_VALUE is recommended for performance reasons.   Tutorials  Animation documentation index    Properties  
float length 1.0  
LoopMode loop_mode 0  
float step 0.1     Methods  
int add_track ( TrackType type, int at_position=-1 )  
StringName animation_track_get_key_animation ( int track_idx, int key_idx ) const  
int animation_track_insert_key ( int track_idx, float time, StringName animation )  
void animation_track_set_key_animation ( int track_idx, int key_idx, StringName animation )  
float audio_track_get_key_end_offset ( int track_idx, int key_idx ) const  
float audio_track_get_key_start_offset ( int track_idx, int key_idx ) const  
Resource audio_track_get_key_stream ( int track_idx, int key_idx ) const  
int audio_track_insert_key ( int track_idx, float time, Resource stream, float start_offset=0, float end_offset=0 )  
bool audio_track_is_use_blend ( int track_idx ) const  
void audio_track_set_key_end_offset ( int track_idx, int key_idx, float offset )  
void audio_track_set_key_start_offset ( int track_idx, int key_idx, float offset )  
void audio_track_set_key_stream ( int track_idx, int key_idx, Resource stream )  
void audio_track_set_use_blend ( int track_idx, bool enable )  
Vector2 bezier_track_get_key_in_handle ( int track_idx, int key_idx ) const  
Vector2 bezier_track_get_key_out_handle ( int track_idx, int key_idx ) const  
float bezier_track_get_key_value ( int track_idx, int key_idx ) const  
int bezier_track_insert_key ( int track_idx, float time, float value, Vector2 in_handle=Vector2(0, 0), Vector2 out_handle=Vector2(0, 0) )  
float bezier_track_interpolate ( int track_idx, float time ) const  
void bezier_track_set_key_in_handle ( int track_idx, int key_idx, Vector2 in_handle, float balanced_value_time_ratio=1.0 )  
void bezier_track_set_key_out_handle ( int track_idx, int key_idx, Vector2 out_handle, float balanced_value_time_ratio=1.0 )  
void bezier_track_set_key_value ( int track_idx, int key_idx, float value )  
int blend_shape_track_insert_key ( int track_idx, float time, float amount )  
float blend_shape_track_interpolate ( int track_idx, float time_sec ) const  
void clear ( )  
void compress ( int page_size=8192, int fps=120, float split_tolerance=4.0 )  
void copy_track ( int track_idx, Animation to_animation )  
int find_track ( NodePath path, TrackType type ) const  
int get_track_count ( ) const  
StringName method_track_get_name ( int track_idx, int key_idx ) const  
Array method_track_get_params ( int track_idx, int key_idx ) const  
int position_track_insert_key ( int track_idx, float time, Vector3 position )  
Vector3 position_track_interpolate ( int track_idx, float time_sec ) const  
void remove_track ( int track_idx )  
int rotation_track_insert_key ( int track_idx, float time, Quaternion rotation )  
Quaternion rotation_track_interpolate ( int track_idx, float time_sec ) const  
int scale_track_insert_key ( int track_idx, float time, Vector3 scale )  
Vector3 scale_track_interpolate ( int track_idx, float time_sec ) const  
int track_find_key ( int track_idx, float time, FindMode find_mode=0 ) const  
bool track_get_interpolation_loop_wrap ( int track_idx ) const  
InterpolationType track_get_interpolation_type ( int track_idx ) const  
int track_get_key_count ( int track_idx ) const  
float track_get_key_time ( int track_idx, int key_idx ) const  
float track_get_key_transition ( int track_idx, int key_idx ) const  
Variant track_get_key_value ( int track_idx, int key_idx ) const  
NodePath track_get_path ( int track_idx ) const  
TrackType track_get_type ( int track_idx ) const  
int track_insert_key ( int track_idx, float time, Variant key, float transition=1 )  
bool track_is_compressed ( int track_idx ) const  
bool track_is_enabled ( int track_idx ) const  
bool track_is_imported ( int track_idx ) const  
void track_move_down ( int track_idx )  
void track_move_to ( int track_idx, int to_idx )  
void track_move_up ( int track_idx )  
void track_remove_key ( int track_idx, int key_idx )  
void track_remove_key_at_time ( int track_idx, float time )  
void track_set_enabled ( int track_idx, bool enabled )  
void track_set_imported ( int track_idx, bool imported )  
void track_set_interpolation_loop_wrap ( int track_idx, bool interpolation )  
void track_set_interpolation_type ( int track_idx, InterpolationType interpolation )  
void track_set_key_time ( int track_idx, int key_idx, float time )  
void track_set_key_transition ( int track_idx, int key_idx, float transition )  
void track_set_key_value ( int track_idx, int key, Variant value )  
void track_set_path ( int track_idx, NodePath path )  
void track_swap ( int track_idx, int with_idx )  
UpdateMode value_track_get_update_mode ( int track_idx ) const  
Variant value_track_interpolate ( int track_idx, float time_sec ) const  
void value_track_set_update_mode ( int track_idx, UpdateMode mode )     Enumerations enum TrackType: 
TrackType TYPE_VALUE = 0
 Value tracks set values in node properties, but only those which can be interpolated. For 3D position/rotation/scale, using the dedicated TYPE_POSITION_3D, TYPE_ROTATION_3D and TYPE_SCALE_3D track types instead of TYPE_VALUE is recommended for performance reasons. 
TrackType TYPE_POSITION_3D = 1
 3D position track (values are stored in Vector3s). 
TrackType TYPE_ROTATION_3D = 2
 3D rotation track (values are stored in Quaternions). 
TrackType TYPE_SCALE_3D = 3
 3D scale track (values are stored in Vector3s). 
TrackType TYPE_BLEND_SHAPE = 4
 Blend shape track. 
TrackType TYPE_METHOD = 5
 Method tracks call functions with given arguments per key. 
TrackType TYPE_BEZIER = 6
 Bezier tracks are used to interpolate a value using custom curves. They can also be used to animate sub-properties of vectors and colors (e.g. alpha value of a Color). 
TrackType TYPE_AUDIO = 7
 Audio tracks are used to play an audio stream with either type of AudioStreamPlayer. The stream can be trimmed and previewed in the animation. 
TrackType TYPE_ANIMATION = 8
 Animation tracks play animations in other AnimationPlayer nodes. enum InterpolationType: 
InterpolationType INTERPOLATION_NEAREST = 0
 No interpolation (nearest value). 
InterpolationType INTERPOLATION_LINEAR = 1
 Linear interpolation. 
InterpolationType INTERPOLATION_CUBIC = 2
 Cubic interpolation. This looks smoother than linear interpolation, but is more expensive to interpolate. Stick to INTERPOLATION_LINEAR for complex 3D animations imported from external software, even if it requires using a higher animation framerate in return. 
InterpolationType INTERPOLATION_LINEAR_ANGLE = 3
 Linear interpolation with shortest path rotation. Note: The result value is always normalized and may not match the key value. 
InterpolationType INTERPOLATION_CUBIC_ANGLE = 4
 Cubic interpolation with shortest path rotation. Note: The result value is always normalized and may not match the key value. enum UpdateMode: 
UpdateMode UPDATE_CONTINUOUS = 0
 Update between keyframes and hold the value. 
UpdateMode UPDATE_DISCRETE = 1
 Update at the keyframes. 
UpdateMode UPDATE_CAPTURE = 2
 Same as linear interpolation, but also interpolates from the current value (i.e. dynamically at runtime) if the first key isn't at 0 seconds. enum LoopMode: 
LoopMode LOOP_NONE = 0
 At both ends of the animation, the animation will stop playing. 
LoopMode LOOP_LINEAR = 1
 At both ends of the animation, the animation will be repeated without changing the playback direction. 
LoopMode LOOP_PINGPONG = 2
 Repeats playback and reverse playback at both ends of the animation. enum LoopedFlag: 
LoopedFlag LOOPED_FLAG_NONE = 0
 This flag indicates that the animation proceeds without any looping. 
LoopedFlag LOOPED_FLAG_END = 1
 This flag indicates that the animation has reached the end of the animation and just after loop processed. 
LoopedFlag LOOPED_FLAG_START = 2
 This flag indicates that the animation has reached the start of the animation and just after loop processed. enum FindMode: 
FindMode FIND_MODE_NEAREST = 0
 Finds the nearest time key. 
FindMode FIND_MODE_APPROX = 1
 Finds only the key with approximating the time. 
FindMode FIND_MODE_EXACT = 2
 Finds only the key with matching the time.   Property Descriptions 
float length = 1.0
  void set_length ( float value )
 
float get_length ( )
  The total length of the animation (in seconds). Note: Length is not delimited by the last key, as this one may be before or after the end to ensure correct interpolation and looping. 
LoopMode loop_mode = 0
  void set_loop_mode ( LoopMode value )
 
LoopMode get_loop_mode ( )
  Determines the behavior of both ends of the animation timeline during animation playback. This is used for correct interpolation of animation cycles, and for hinting the player that it must restart the animation. 
float step = 0.1
  void set_step ( float value )
 
float get_step ( )
  The animation step value.   Method Descriptions 
int add_track ( TrackType type, int at_position=-1 ) Adds a track to the Animation. 
StringName animation_track_get_key_animation ( int track_idx, int key_idx ) const
 Returns the animation name at the key identified by key_idx. The track_idx must be the index of an Animation Track. 
int animation_track_insert_key ( int track_idx, float time, StringName animation ) Inserts a key with value animation at the given time (in seconds). The track_idx must be the index of an Animation Track. void animation_track_set_key_animation ( int track_idx, int key_idx, StringName animation ) Sets the key identified by key_idx to value animation. The track_idx must be the index of an Animation Track. 
float audio_track_get_key_end_offset ( int track_idx, int key_idx ) const
 Returns the end offset of the key identified by key_idx. The track_idx must be the index of an Audio Track. End offset is the number of seconds cut off at the ending of the audio stream. 
float audio_track_get_key_start_offset ( int track_idx, int key_idx ) const
 Returns the start offset of the key identified by key_idx. The track_idx must be the index of an Audio Track. Start offset is the number of seconds cut off at the beginning of the audio stream. 
Resource audio_track_get_key_stream ( int track_idx, int key_idx ) const
 Returns the audio stream of the key identified by key_idx. The track_idx must be the index of an Audio Track. 
int audio_track_insert_key ( int track_idx, float time, Resource stream, float start_offset=0, float end_offset=0 ) Inserts an Audio Track key at the given time in seconds. The track_idx must be the index of an Audio Track. stream is the AudioStream resource to play. start_offset is the number of seconds cut off at the beginning of the audio stream, while end_offset is at the ending. 
bool audio_track_is_use_blend ( int track_idx ) const
 Returns true if the track at track_idx will be blended with other animations. void audio_track_set_key_end_offset ( int track_idx, int key_idx, float offset ) Sets the end offset of the key identified by key_idx to value offset. The track_idx must be the index of an Audio Track. void audio_track_set_key_start_offset ( int track_idx, int key_idx, float offset ) Sets the start offset of the key identified by key_idx to value offset. The track_idx must be the index of an Audio Track. void audio_track_set_key_stream ( int track_idx, int key_idx, Resource stream ) Sets the stream of the key identified by key_idx to value stream. The track_idx must be the index of an Audio Track. void audio_track_set_use_blend ( int track_idx, bool enable ) Sets whether the track will be blended with other animations. If true, the audio playback volume changes depending on the blend value. 
Vector2 bezier_track_get_key_in_handle ( int track_idx, int key_idx ) const
 Returns the in handle of the key identified by key_idx. The track_idx must be the index of a Bezier Track. 
Vector2 bezier_track_get_key_out_handle ( int track_idx, int key_idx ) const
 Returns the out handle of the key identified by key_idx. The track_idx must be the index of a Bezier Track. 
float bezier_track_get_key_value ( int track_idx, int key_idx ) const
 Returns the value of the key identified by key_idx. The track_idx must be the index of a Bezier Track. 
int bezier_track_insert_key ( int track_idx, float time, float value, Vector2 in_handle=Vector2(0, 0), Vector2 out_handle=Vector2(0, 0) ) Inserts a Bezier Track key at the given time in seconds. The track_idx must be the index of a Bezier Track. in_handle is the left-side weight of the added Bezier curve point, out_handle is the right-side one, while value is the actual value at this point. 
float bezier_track_interpolate ( int track_idx, float time ) const
 Returns the interpolated value at the given time (in seconds). The track_idx must be the index of a Bezier Track. void bezier_track_set_key_in_handle ( int track_idx, int key_idx, Vector2 in_handle, float balanced_value_time_ratio=1.0 ) Sets the in handle of the key identified by key_idx to value in_handle. The track_idx must be the index of a Bezier Track. void bezier_track_set_key_out_handle ( int track_idx, int key_idx, Vector2 out_handle, float balanced_value_time_ratio=1.0 ) Sets the out handle of the key identified by key_idx to value out_handle. The track_idx must be the index of a Bezier Track. void bezier_track_set_key_value ( int track_idx, int key_idx, float value ) Sets the value of the key identified by key_idx to the given value. The track_idx must be the index of a Bezier Track. 
int blend_shape_track_insert_key ( int track_idx, float time, float amount ) Inserts a key in a given blend shape track. Returns the key index. 
float blend_shape_track_interpolate ( int track_idx, float time_sec ) const
 Returns the interpolated blend shape value at the given time (in seconds). The track_idx must be the index of a blend shape track. void clear ( ) Clear the animation (clear all tracks and reset all). void compress ( int page_size=8192, int fps=120, float split_tolerance=4.0 ) Compress the animation and all its tracks in-place. This will make track_is_compressed return true once called on this Animation. Compressed tracks require less memory to be played, and are designed to be used for complex 3D animations (such as cutscenes) imported from external 3D software. Compression is lossy, but the difference is usually not noticeable in real world conditions. Note: Compressed tracks have various limitations (such as not being editable from the editor), so only use compressed animations if you actually need them. void copy_track ( int track_idx, Animation to_animation ) Adds a new track to to_animation that is a copy of the given track from this animation. 
int find_track ( NodePath path, TrackType type ) const
 Returns the index of the specified track. If the track is not found, return -1. 
int get_track_count ( ) const
 Returns the amount of tracks in the animation. 
StringName method_track_get_name ( int track_idx, int key_idx ) const
 Returns the method name of a method track. 
Array method_track_get_params ( int track_idx, int key_idx ) const
 Returns the arguments values to be called on a method track for a given key in a given track. 
int position_track_insert_key ( int track_idx, float time, Vector3 position ) Inserts a key in a given 3D position track. Returns the key index. 
Vector3 position_track_interpolate ( int track_idx, float time_sec ) const
 Returns the interpolated position value at the given time (in seconds). The track_idx must be the index of a 3D position track. void remove_track ( int track_idx ) Removes a track by specifying the track index. 
int rotation_track_insert_key ( int track_idx, float time, Quaternion rotation ) Inserts a key in a given 3D rotation track. Returns the key index. 
Quaternion rotation_track_interpolate ( int track_idx, float time_sec ) const
 Returns the interpolated rotation value at the given time (in seconds). The track_idx must be the index of a 3D rotation track. 
int scale_track_insert_key ( int track_idx, float time, Vector3 scale ) Inserts a key in a given 3D scale track. Returns the key index. 
Vector3 scale_track_interpolate ( int track_idx, float time_sec ) const
 Returns the interpolated scale value at the given time (in seconds). The track_idx must be the index of a 3D scale track. 
int track_find_key ( int track_idx, float time, FindMode find_mode=0 ) const
 Finds the key index by time in a given track. Optionally, only find it if the approx/exact time is given. 
bool track_get_interpolation_loop_wrap ( int track_idx ) const
 Returns true if the track at track_idx wraps the interpolation loop. New tracks wrap the interpolation loop by default. 
InterpolationType track_get_interpolation_type ( int track_idx ) const
 Returns the interpolation type of a given track. 
int track_get_key_count ( int track_idx ) const
 Returns the number of keys in a given track. 
float track_get_key_time ( int track_idx, int key_idx ) const
 Returns the time at which the key is located. 
float track_get_key_transition ( int track_idx, int key_idx ) const
 Returns the transition curve (easing) for a specific key (see the built-in math function @GlobalScope.ease). 
Variant track_get_key_value ( int track_idx, int key_idx ) const
 Returns the value of a given key in a given track. 
NodePath track_get_path ( int track_idx ) const
 Gets the path of a track. For more information on the path format, see track_set_path. 
TrackType track_get_type ( int track_idx ) const
 Gets the type of a track. 
int track_insert_key ( int track_idx, float time, Variant key, float transition=1 ) Inserts a generic key in a given track. Returns the key index. 
bool track_is_compressed ( int track_idx ) const
 Returns true if the track is compressed, false otherwise. See also compress. 
bool track_is_enabled ( int track_idx ) const
 Returns true if the track at index track_idx is enabled. 
bool track_is_imported ( int track_idx ) const
 Returns true if the given track is imported. Else, return false. void track_move_down ( int track_idx ) Moves a track down. void track_move_to ( int track_idx, int to_idx ) Changes the index position of track track_idx to the one defined in to_idx. void track_move_up ( int track_idx ) Moves a track up. void track_remove_key ( int track_idx, int key_idx ) Removes a key by index in a given track. void track_remove_key_at_time ( int track_idx, float time ) Removes a key at time in a given track. void track_set_enabled ( int track_idx, bool enabled ) Enables/disables the given track. Tracks are enabled by default. void track_set_imported ( int track_idx, bool imported ) Sets the given track as imported or not. void track_set_interpolation_loop_wrap ( int track_idx, bool interpolation ) If true, the track at track_idx wraps the interpolation loop. void track_set_interpolation_type ( int track_idx, InterpolationType interpolation ) Sets the interpolation type of a given track. void track_set_key_time ( int track_idx, int key_idx, float time ) Sets the time of an existing key. void track_set_key_transition ( int track_idx, int key_idx, float transition ) Sets the transition curve (easing) for a specific key (see the built-in math function @GlobalScope.ease). void track_set_key_value ( int track_idx, int key, Variant value ) Sets the value of an existing key. void track_set_path ( int track_idx, NodePath path ) Sets the path of a track. Paths must be valid scene-tree paths to a node and must be specified starting from the parent node of the node that will reproduce the animation. Tracks that control properties or bones must append their name after the path, separated by ":". For example, "character/skeleton:ankle" or "character/mesh:transform/local". void track_swap ( int track_idx, int with_idx ) Swaps the track track_idx's index position with the track with_idx. 
UpdateMode value_track_get_update_mode ( int track_idx ) const
 Returns the update mode of a value track. 
Variant value_track_interpolate ( int track_idx, float time_sec ) const
 Returns the interpolated value at the given time (in seconds). The track_idx must be the index of a value track. void value_track_set_update_mode ( int track_idx, UpdateMode mode ) Sets the update mode (see UpdateMode) of a value track.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animation.html


classes/class_animatedsprite2d
-----------------------------------------------------------
AnimatedSprite2D Inherits: Node2D < CanvasItem < Node < Object Sprite node that contains multiple textures as frames to play for animation.  Description AnimatedSprite2D is similar to the Sprite2D node, except it carries multiple textures as animation frames. Animations are created using a SpriteFrames resource, which allows you to import image files (or a folder containing said files) to provide the animation frames for the sprite. The SpriteFrames resource can be configured in the editor via the SpriteFrames bottom panel.   Tutorials  2D Sprite animation 2D Dodge The Creeps Demo    Properties  
StringName animation &"default"  
String autoplay ""  
bool centered true  
bool flip_h false  
bool flip_v false  
int frame 0  
float frame_progress 0.0  
Vector2 offset Vector2(0, 0)  
float speed_scale 1.0  
SpriteFrames sprite_frames      Methods  
float get_playing_speed ( ) const  
bool is_playing ( ) const  
void pause ( )  
void play ( StringName name=&"", float custom_speed=1.0, bool from_end=false )  
void play_backwards ( StringName name=&"" )  
void set_frame_and_progress ( int frame, float progress )  
void stop ( )     Signals animation_changed ( ) Emitted when animation changes. animation_finished ( ) Emitted when the animation reaches the end, or the start if it is played in reverse. When the animation finishes, it pauses the playback. animation_looped ( ) Emitted when the animation loops. frame_changed ( ) Emitted when frame changes. sprite_frames_changed ( ) Emitted when sprite_frames changes.   Property Descriptions 
StringName animation = &"default"
  void set_animation ( StringName value )
 
StringName get_animation ( )
  The current animation from the sprite_frames resource. If this value is changed, the frame counter and the frame_progress are reset. 
String autoplay = ""
  void set_autoplay ( String value )
 
String get_autoplay ( )
  The key of the animation to play when the scene loads. 
bool centered = true
  void set_centered ( bool value )
 
bool is_centered ( )
  If true, texture will be centered. 
bool flip_h = false
  void set_flip_h ( bool value )
 
bool is_flipped_h ( )
  If true, texture is flipped horizontally. 
bool flip_v = false
  void set_flip_v ( bool value )
 
bool is_flipped_v ( )
  If true, texture is flipped vertically. 
int frame = 0
  void set_frame ( int value )
 
int get_frame ( )
  The displayed animation frame's index. Setting this property also resets frame_progress. If this is not desired, use set_frame_and_progress. 
float frame_progress = 0.0
  void set_frame_progress ( float value )
 
float get_frame_progress ( )
  The progress value between 0.0 and 1.0 until the current frame transitions to the next frame. If the animation is playing backwards, the value transitions from 1.0 to 0.0. 
Vector2 offset = Vector2(0, 0)
  void set_offset ( Vector2 value )
 
Vector2 get_offset ( )
  The texture's drawing offset. 
float speed_scale = 1.0
  void set_speed_scale ( float value )
 
float get_speed_scale ( )
  The speed scaling ratio. For example, if this value is 1, then the animation plays at normal speed. If it's 0.5, then it plays at half speed. If it's 2, then it plays at double speed. If set to a negative value, the animation is played in reverse. If set to 0, the animation will not advance. 
SpriteFrames sprite_frames  void set_sprite_frames ( SpriteFrames value )
 
SpriteFrames get_sprite_frames ( )
  The SpriteFrames resource containing the animation(s). Allows you the option to load, edit, clear, make unique and save the states of the SpriteFrames resource.   Method Descriptions 
float get_playing_speed ( ) const
 Returns the actual playing speed of current animation or 0 if not playing. This speed is the speed_scale property multiplied by custom_speed argument specified when calling the play method. Returns a negative value if the current animation is playing backwards. 
bool is_playing ( ) const
 Returns true if an animation is currently playing (even if speed_scale and/or custom_speed are 0). void pause ( ) Pauses the currently playing animation. The frame and frame_progress will be kept and calling play or play_backwards without arguments will resume the animation from the current playback position. See also stop. void play ( StringName name=&"", float custom_speed=1.0, bool from_end=false ) Plays the animation with key name. If custom_speed is negative and from_end is true, the animation will play backwards (which is equivalent to calling play_backwards). If this method is called with that same animation name, or with no name parameter, the assigned animation will resume playing if it was paused. void play_backwards ( StringName name=&"" ) Plays the animation with key name in reverse. This method is a shorthand for play with custom_speed = -1.0 and from_end = true, so see its description for more information. void set_frame_and_progress ( int frame, float progress ) The setter of frame resets the frame_progress to 0.0 implicitly, but this method avoids that. This is useful when you want to carry over the current frame_progress to another frame. Example:  GDScript# Change the animation with keeping the frame index and progress.
var current_frame = animated_sprite.get_frame()
var current_progress = animated_sprite.get_frame_progress()
animated_sprite.play("walk_another_skin")
animated_sprite.set_frame_and_progress(current_frame, current_progress)
  void stop ( ) Stops the currently playing animation. The animation position is reset to 0 and the custom_speed is reset to 1.0. See also pause.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animatedsprite2d.html


classes/class_sliderjoint3d
-----------------------------------------------------------
SliderJoint3D Inherits: Joint3D < Node3D < Node < Object A physics joint that restricts the movement of a 3D physics body along an axis relative to another physics body.  Description A physics joint that restricts the movement of a 3D physics body along an axis relative to another physics body. For example, Body A could be a StaticBody3D representing a piston base, while Body B could be a RigidBody3D representing the piston head, moving up and down.   Properties  
float angular_limit/damping 0.0  
float angular_limit/lower_angle 0.0  
float angular_limit/restitution 0.7  
float angular_limit/softness 1.0  
float angular_limit/upper_angle 0.0  
float angular_motion/damping 1.0  
float angular_motion/restitution 0.7  
float angular_motion/softness 1.0  
float angular_ortho/damping 1.0  
float angular_ortho/restitution 0.7  
float angular_ortho/softness 1.0  
float linear_limit/damping 1.0  
float linear_limit/lower_distance -1.0  
float linear_limit/restitution 0.7  
float linear_limit/softness 1.0  
float linear_limit/upper_distance 1.0  
float linear_motion/damping 0.0  
float linear_motion/restitution 0.7  
float linear_motion/softness 1.0  
float linear_ortho/damping 1.0  
float linear_ortho/restitution 0.7  
float linear_ortho/softness 1.0     Methods  
float get_param ( Param param ) const  
void set_param ( Param param, float value )     Enumerations enum Param: 
Param PARAM_LINEAR_LIMIT_UPPER = 0
 The maximum difference between the pivot points on their X axis before damping happens. 
Param PARAM_LINEAR_LIMIT_LOWER = 1
 The minimum difference between the pivot points on their X axis before damping happens. 
Param PARAM_LINEAR_LIMIT_SOFTNESS = 2
 A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement. 
Param PARAM_LINEAR_LIMIT_RESTITUTION = 3
 The amount of restitution once the limits are surpassed. The lower, the more velocity-energy gets lost. 
Param PARAM_LINEAR_LIMIT_DAMPING = 4
 The amount of damping once the slider limits are surpassed. 
Param PARAM_LINEAR_MOTION_SOFTNESS = 5
 A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement. 
Param PARAM_LINEAR_MOTION_RESTITUTION = 6
 The amount of restitution inside the slider limits. 
Param PARAM_LINEAR_MOTION_DAMPING = 7
 The amount of damping inside the slider limits. 
Param PARAM_LINEAR_ORTHOGONAL_SOFTNESS = 8
 A factor applied to the movement across axes orthogonal to the slider. 
Param PARAM_LINEAR_ORTHOGONAL_RESTITUTION = 9
 The amount of restitution when movement is across axes orthogonal to the slider. 
Param PARAM_LINEAR_ORTHOGONAL_DAMPING = 10
 The amount of damping when movement is across axes orthogonal to the slider. 
Param PARAM_ANGULAR_LIMIT_UPPER = 11
 The upper limit of rotation in the slider. 
Param PARAM_ANGULAR_LIMIT_LOWER = 12
 The lower limit of rotation in the slider. 
Param PARAM_ANGULAR_LIMIT_SOFTNESS = 13
 A factor applied to the all rotation once the limit is surpassed. 
Param PARAM_ANGULAR_LIMIT_RESTITUTION = 14
 The amount of restitution of the rotation when the limit is surpassed. 
Param PARAM_ANGULAR_LIMIT_DAMPING = 15
 The amount of damping of the rotation when the limit is surpassed. 
Param PARAM_ANGULAR_MOTION_SOFTNESS = 16
 A factor applied to the all rotation in the limits. 
Param PARAM_ANGULAR_MOTION_RESTITUTION = 17
 The amount of restitution of the rotation in the limits. 
Param PARAM_ANGULAR_MOTION_DAMPING = 18
 The amount of damping of the rotation in the limits. 
Param PARAM_ANGULAR_ORTHOGONAL_SOFTNESS = 19
 A factor applied to the all rotation across axes orthogonal to the slider. 
Param PARAM_ANGULAR_ORTHOGONAL_RESTITUTION = 20
 The amount of restitution of the rotation across axes orthogonal to the slider. 
Param PARAM_ANGULAR_ORTHOGONAL_DAMPING = 21
 The amount of damping of the rotation across axes orthogonal to the slider. 
Param PARAM_MAX = 22
 Represents the size of the Param enum.   Property Descriptions 
float angular_limit/damping = 0.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The amount of damping of the rotation when the limit is surpassed. A lower damping value allows a rotation initiated by body A to travel to body B slower. 
float angular_limit/lower_angle = 0.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The lower limit of rotation in the slider. 
float angular_limit/restitution = 0.7
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The amount of restitution of the rotation when the limit is surpassed. Does not affect damping. 
float angular_limit/softness = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  A factor applied to the all rotation once the limit is surpassed. Makes all rotation slower when between 0 and 1. 
float angular_limit/upper_angle = 0.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The upper limit of rotation in the slider. 
float angular_motion/damping = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The amount of damping of the rotation in the limits. 
float angular_motion/restitution = 0.7
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The amount of restitution of the rotation in the limits. 
float angular_motion/softness = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  A factor applied to the all rotation in the limits. 
float angular_ortho/damping = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The amount of damping of the rotation across axes orthogonal to the slider. 
float angular_ortho/restitution = 0.7
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The amount of restitution of the rotation across axes orthogonal to the slider. 
float angular_ortho/softness = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  A factor applied to the all rotation across axes orthogonal to the slider. 
float linear_limit/damping = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The amount of damping that happens once the limit defined by linear_limit/lower_distance and linear_limit/upper_distance is surpassed. 
float linear_limit/lower_distance = -1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The minimum difference between the pivot points on their X axis before damping happens. 
float linear_limit/restitution = 0.7
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The amount of restitution once the limits are surpassed. The lower, the more velocity-energy gets lost. 
float linear_limit/softness = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement. 
float linear_limit/upper_distance = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The maximum difference between the pivot points on their X axis before damping happens. 
float linear_motion/damping = 0.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The amount of damping inside the slider limits. 
float linear_motion/restitution = 0.7
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The amount of restitution inside the slider limits. 
float linear_motion/softness = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement. 
float linear_ortho/damping = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The amount of damping when movement is across axes orthogonal to the slider. 
float linear_ortho/restitution = 0.7
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The amount of restitution when movement is across axes orthogonal to the slider. 
float linear_ortho/softness = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  A factor applied to the movement across axes orthogonal to the slider.   Method Descriptions 
float get_param ( Param param ) const
  There is currently no description for this method. Please help us by contributing one!  void set_param ( Param param, float value )  There is currently no description for this method. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_sliderjoint3d.html


classes/class_gdextension
-----------------------------------------------------------
GDExtension Inherits: Resource < RefCounted < Object  There is currently no description for this class. Please help us by contributing one!   Methods  
void close_library ( )  
InitializationLevel get_minimum_library_initialization_level ( ) const  
void initialize_library ( InitializationLevel level )  
bool is_library_open ( ) const  
Error open_library ( String path, String entry_symbol )     Enumerations enum InitializationLevel: 
InitializationLevel INITIALIZATION_LEVEL_CORE = 0
 
InitializationLevel INITIALIZATION_LEVEL_SERVERS = 1
 
InitializationLevel INITIALIZATION_LEVEL_SCENE = 2
 
InitializationLevel INITIALIZATION_LEVEL_EDITOR = 3
   Method Descriptions void close_library ( )  There is currently no description for this method. Please help us by contributing one!  
InitializationLevel get_minimum_library_initialization_level ( ) const
  There is currently no description for this method. Please help us by contributing one!  void initialize_library ( InitializationLevel level )  There is currently no description for this method. Please help us by contributing one!  
bool is_library_open ( ) const
  There is currently no description for this method. Please help us by contributing one!  
Error open_library ( String path, String entry_symbol )  There is currently no description for this method. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gdextension.html


classes/class_multiplayerspawner
-----------------------------------------------------------
MultiplayerSpawner Inherits: Node < Object Automatically replicates spawnable nodes from the authority to other multiplayer peers.  Description Spawnable scenes can be configured in the editor or through code (see add_spawnable_scene). Also supports custom node spawns through spawn, calling spawn_function on all peers. Internally, MultiplayerSpawner uses MultiplayerAPI.object_configuration_add to notify spawns passing the spawned node as the object and itself as the configuration, and MultiplayerAPI.object_configuration_remove to notify despawns in a similar way.   Properties  
Callable spawn_function   
int spawn_limit 0  
NodePath spawn_path NodePath("")     Methods  
void add_spawnable_scene ( String path )  
void clear_spawnable_scenes ( )  
String get_spawnable_scene ( int index ) const  
int get_spawnable_scene_count ( ) const  
Node spawn ( Variant data=null )     Signals despawned ( Node node ) Emitted when a spawnable scene or custom spawn was despawned by the multiplayer authority. Only called on puppets. spawned ( Node node ) Emitted when a spawnable scene or custom spawn was spawned by the multiplayer authority. Only called on puppets.   Property Descriptions 
Callable spawn_function  void set_spawn_function ( Callable value )
 
Callable get_spawn_function ( )
  Method called on all peers when for every custom spawn requested by the authority. Will receive the data parameter, and should return a Node that is not in the scene tree. Note: The returned node should not be added to the scene with Node.add_child. This is done automatically. 
int spawn_limit = 0
  void set_spawn_limit ( int value )
 
int get_spawn_limit ( )
  Maximum nodes that is allowed to be spawned by this spawner. Includes both spawnable scenes and custom spawns. When set to 0 (the default), there is no limit. 
NodePath spawn_path = NodePath("")
  void set_spawn_path ( NodePath value )
 
NodePath get_spawn_path ( )
  Path to the spawn root. Spawnable scenes that are added as direct children are replicated to other peers.   Method Descriptions void add_spawnable_scene ( String path ) Adds a scene path to spawnable scenes, making it automatically replicated from the multiplayer authority to other peers when added as children of the node pointed by spawn_path. void clear_spawnable_scenes ( ) Clears all spawnable scenes. Does not despawn existing instances on remote peers. 
String get_spawnable_scene ( int index ) const
 Returns the spawnable scene path by index. 
int get_spawnable_scene_count ( ) const
 Returns the count of spawnable scene paths. 
Node spawn ( Variant data=null ) Requests a custom spawn, with data passed to spawn_function on all peers. Returns the locally spawned node instance already inside the scene tree, and added as a child of the node pointed by spawn_path. Note: Spawnable scenes are spawned automatically. spawn is only needed for custom spawns.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_multiplayerspawner.html


classes/class_geometryinstance3d
-----------------------------------------------------------
GeometryInstance3D Inherits: VisualInstance3D < Node3D < Node < Object Inherited By: CPUParticles3D, CSGShape3D, GPUParticles3D, Label3D, MeshInstance3D, MultiMeshInstance3D, SpriteBase3D Base node for geometry-based visual instances.  Description Base node for geometry-based visual instances. Shares some common functionality like visibility and custom materials.   Tutorials  Visibility ranges (HLOD)    Properties  
ShadowCastingSetting cast_shadow 1  
AABB custom_aabb AABB(0, 0, 0, 0, 0, 0)  
float extra_cull_margin 0.0  
LightmapScale gi_lightmap_scale 0  
GIMode gi_mode 1  
bool ignore_occlusion_culling false  
float lod_bias 1.0  
Material material_overlay   
Material material_override   
float transparency 0.0  
float visibility_range_begin 0.0  
float visibility_range_begin_margin 0.0  
float visibility_range_end 0.0  
float visibility_range_end_margin 0.0  
VisibilityRangeFadeMode visibility_range_fade_mode 0     Methods  
Variant get_instance_shader_parameter ( StringName name ) const  
void set_instance_shader_parameter ( StringName name, Variant value )     Enumerations enum ShadowCastingSetting: 
ShadowCastingSetting SHADOW_CASTING_SETTING_OFF = 0
 Will not cast any shadows. Use this to improve performance for small geometry that is unlikely to cast noticeable shadows (such as debris). 
ShadowCastingSetting SHADOW_CASTING_SETTING_ON = 1
 Will cast shadows from all visible faces in the GeometryInstance3D. Will take culling into account, so faces not being rendered will not be taken into account when shadow casting. 
ShadowCastingSetting SHADOW_CASTING_SETTING_DOUBLE_SIDED = 2
 Will cast shadows from all visible faces in the GeometryInstance3D. Will not take culling into account, so all faces will be taken into account when shadow casting. 
ShadowCastingSetting SHADOW_CASTING_SETTING_SHADOWS_ONLY = 3
 Will only show the shadows casted from this object. In other words, the actual mesh will not be visible, only the shadows casted from the mesh will be. enum GIMode: 
GIMode GI_MODE_DISABLED = 0
 Disabled global illumination mode. Use for dynamic objects that do not contribute to global illumination (such as characters). When using VoxelGI and SDFGI, the geometry will receive indirect lighting and reflections but the geometry will not be considered in GI baking. 
GIMode GI_MODE_STATIC = 1
 Baked global illumination mode. Use for static objects that contribute to global illumination (such as level geometry). This GI mode is effective when using VoxelGI, SDFGI and LightmapGI. 
GIMode GI_MODE_DYNAMIC = 2
 Dynamic global illumination mode. Use for dynamic objects that contribute to global illumination. This GI mode is only effective when using VoxelGI, but it has a higher performance impact than GI_MODE_STATIC. When using other GI methods, this will act the same as GI_MODE_DISABLED. When using LightmapGI, the object will receive indirect lighting using lightmap probes instead of using the baked lightmap texture. enum LightmapScale: 
LightmapScale LIGHTMAP_SCALE_1X = 0
 The standard texel density for lightmapping with LightmapGI. 
LightmapScale LIGHTMAP_SCALE_2X = 1
 Multiplies texel density by 2Ã— for lightmapping with LightmapGI. To ensure consistency in texel density, use this when scaling a mesh by a factor between 1.5 and 3.0. 
LightmapScale LIGHTMAP_SCALE_4X = 2
 Multiplies texel density by 4Ã— for lightmapping with LightmapGI. To ensure consistency in texel density, use this when scaling a mesh by a factor between 3.0 and 6.0. 
LightmapScale LIGHTMAP_SCALE_8X = 3
 Multiplies texel density by 8Ã— for lightmapping with LightmapGI. To ensure consistency in texel density, use this when scaling a mesh by a factor greater than 6.0. 
LightmapScale LIGHTMAP_SCALE_MAX = 4
 Represents the size of the LightmapScale enum. enum VisibilityRangeFadeMode: 
VisibilityRangeFadeMode VISIBILITY_RANGE_FADE_DISABLED = 0
 Will not fade itself nor its visibility dependencies, hysteresis will be used instead. This is the fastest approach to manual LOD, but it can result in noticeable LOD transitions depending on how the LOD meshes are authored. See visibility_range_begin and Node3D.visibility_parent for more information. 
VisibilityRangeFadeMode VISIBILITY_RANGE_FADE_SELF = 1
 Will fade-out itself when reaching the limits of its own visibility range. This is slower than VISIBILITY_RANGE_FADE_DISABLED, but it can provide smoother transitions. The fading range is determined by visibility_range_begin_margin and visibility_range_end_margin. 
VisibilityRangeFadeMode VISIBILITY_RANGE_FADE_DEPENDENCIES = 2
 Will fade-in its visibility dependencies (see Node3D.visibility_parent) when reaching the limits of its own visibility range. This is slower than VISIBILITY_RANGE_FADE_DISABLED, but it can provide smoother transitions. The fading range is determined by visibility_range_begin_margin and visibility_range_end_margin.   Property Descriptions 
ShadowCastingSetting cast_shadow = 1
  void set_cast_shadows_setting ( ShadowCastingSetting value )
 
ShadowCastingSetting get_cast_shadows_setting ( )
  The selected shadow casting flag. See ShadowCastingSetting for possible values. 
AABB custom_aabb = AABB(0, 0, 0, 0, 0, 0)
  void set_custom_aabb ( AABB value )
 
AABB get_custom_aabb ( )
  Overrides the bounding box of this node with a custom one. This can be used to avoid the expensive AABB recalculation that happens when a skeleton is used with a MeshInstance3D or to have precise control over the MeshInstance3D's bounding box. To use the default AABB, set value to an AABB with all fields set to 0.0. To avoid frustum culling, set custom_aabb to a very large AABB that covers your entire game world such as AABB(-10000, -10000, -10000, 20000, 20000, 20000). To disable all forms of culling (including occlusion culling), call RenderingServer.instance_set_ignore_culling on the GeometryInstance3D's RID. 
float extra_cull_margin = 0.0
  void set_extra_cull_margin ( float value )
 
float get_extra_cull_margin ( )
  The extra distance added to the GeometryInstance3D's bounding box (AABB) to increase its cull box. 
LightmapScale gi_lightmap_scale = 0
  void set_lightmap_scale ( LightmapScale value )
 
LightmapScale get_lightmap_scale ( )
  The texel density to use for lightmapping in LightmapGI. Greater scale values provide higher resolution in the lightmap, which can result in sharper shadows for lights that have both direct and indirect light baked. However, greater scale values will also increase the space taken by the mesh in the lightmap texture, which increases the memory, storage, and bake time requirements. When using a single mesh at different scales, consider adjusting this value to keep the lightmap texel density consistent across meshes. 
GIMode gi_mode = 1
  void set_gi_mode ( GIMode value )
 
GIMode get_gi_mode ( )
  The global illumination mode to use for the whole geometry. To avoid inconsistent results, use a mode that matches the purpose of the mesh during gameplay (static/dynamic). Note: Lights' bake mode will also affect the global illumination rendering. See Light3D.light_bake_mode. 
bool ignore_occlusion_culling = false
  void set_ignore_occlusion_culling ( bool value )
 
bool is_ignoring_occlusion_culling ( )
  If true, disables occlusion culling for this instance. Useful for gizmos that must be rendered even when occlusion culling is in use. Note: ignore_occlusion_culling does not affect frustum culling (which is what happens when an object is not visible given the camera's angle). To avoid frustum culling, set custom_aabb to a very large AABB that covers your entire game world such as AABB(-10000, -10000, -10000, 20000, 20000, 20000). 
float lod_bias = 1.0
  void set_lod_bias ( float value )
 
float get_lod_bias ( )
  Changes how quickly the mesh transitions to a lower level of detail. A value of 0 will force the mesh to its lowest level of detail, a value of 1 will use the default settings, and larger values will keep the mesh in a higher level of detail at farther distances. Useful for testing level of detail transitions in the editor. 
Material material_overlay  void set_material_overlay ( Material value )
 
Material get_material_overlay ( )
  The material overlay for the whole geometry. If a material is assigned to this property, it will be rendered on top of any other active material for all the surfaces. 
Material material_override  void set_material_override ( Material value )
 
Material get_material_override ( )
  The material override for the whole geometry. If a material is assigned to this property, it will be used instead of any material set in any material slot of the mesh. 
float transparency = 0.0
  void set_transparency ( float value )
 
float get_transparency ( )
  The transparency applied to the whole geometry (as a multiplier of the materials' existing transparency). 0.0 is fully opaque, while 1.0 is fully transparent. Values greater than 0.0 (exclusive) will force the geometry's materials to go through the transparent pipeline, which is slower to render and can exhibit rendering issues due to incorrect transparency sorting. However, unlike using a transparent material, setting transparency to a value greater than 0.0 (exclusive) will not disable shadow rendering. In spatial shaders, 1.0 - transparency is set as the default value of the ALPHA built-in. Note: transparency is clamped between 0.0 and 1.0, so this property cannot be used to make transparent materials more opaque than they originally are. 
float visibility_range_begin = 0.0
  void set_visibility_range_begin ( float value )
 
float get_visibility_range_begin ( )
  Starting distance from which the GeometryInstance3D will be visible, taking visibility_range_begin_margin into account as well. The default value of 0 is used to disable the range check. 
float visibility_range_begin_margin = 0.0
  void set_visibility_range_begin_margin ( float value )
 
float get_visibility_range_begin_margin ( )
  Margin for the visibility_range_begin threshold. The GeometryInstance3D will only change its visibility state when it goes over or under the visibility_range_begin threshold by this amount. If visibility_range_fade_mode is VISIBILITY_RANGE_FADE_DISABLED, this acts as a hysteresis distance. If visibility_range_fade_mode is VISIBILITY_RANGE_FADE_SELF or VISIBILITY_RANGE_FADE_DEPENDENCIES, this acts as a fade transition distance and must be set to a value greater than 0.0 for the effect to be noticeable. 
float visibility_range_end = 0.0
  void set_visibility_range_end ( float value )
 
float get_visibility_range_end ( )
  Distance from which the GeometryInstance3D will be hidden, taking visibility_range_end_margin into account as well. The default value of 0 is used to disable the range check. 
float visibility_range_end_margin = 0.0
  void set_visibility_range_end_margin ( float value )
 
float get_visibility_range_end_margin ( )
  Margin for the visibility_range_end threshold. The GeometryInstance3D will only change its visibility state when it goes over or under the visibility_range_end threshold by this amount. If visibility_range_fade_mode is VISIBILITY_RANGE_FADE_DISABLED, this acts as a hysteresis distance. If visibility_range_fade_mode is VISIBILITY_RANGE_FADE_SELF or VISIBILITY_RANGE_FADE_DEPENDENCIES, this acts as a fade transition distance and must be set to a value greater than 0.0 for the effect to be noticeable. 
VisibilityRangeFadeMode visibility_range_fade_mode = 0
  void set_visibility_range_fade_mode ( VisibilityRangeFadeMode value )
 
VisibilityRangeFadeMode get_visibility_range_fade_mode ( )
  Controls which instances will be faded when approaching the limits of the visibility range. See VisibilityRangeFadeMode for possible values.   Method Descriptions 
Variant get_instance_shader_parameter ( StringName name ) const
 Get the value of a shader parameter as set on this instance. void set_instance_shader_parameter ( StringName name, Variant value ) Set the value of a shader uniform for this instance only (per-instance uniform). See also ShaderMaterial.set_shader_parameter to assign a uniform on all instances using the same ShaderMaterial. Note: For a shader uniform to be assignable on a per-instance basis, it must be defined with instance uniform ... rather than uniform ... in the shader code. Note: name is case-sensitive and must match the name of the uniform in the code exactly (not the capitalized name in the inspector). Note: Per-instance shader uniforms are currently only available in 3D, so there is no 2D equivalent of this method.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_geometryinstance3d.html


classes/class_csgmesh3d
-----------------------------------------------------------
CSGMesh3D Inherits: CSGPrimitive3D < CSGShape3D < GeometryInstance3D < VisualInstance3D < Node3D < Node < Object A CSG Mesh shape that uses a mesh resource.  Description This CSG node allows you to use any mesh resource as a CSG shape, provided it is closed, does not self-intersect, does not contain internal faces and has no edges that connect to more than two faces. See also CSGPolygon3D for drawing 2D extruded polygons to be used as CSG nodes. Note: CSG nodes are intended to be used for level prototyping. Creating CSG nodes has a significant CPU cost compared to creating a MeshInstance3D with a PrimitiveMesh. Moving a CSG node within another CSG node also has a significant CPU cost, so it should be avoided during gameplay.   Tutorials  Prototyping levels with CSG    Properties  
Material material  
Mesh mesh     Property Descriptions 
Material material  void set_material ( Material value )
 
Material get_material ( )
  The Material used in drawing the CSG shape. 
Mesh mesh  void set_mesh ( Mesh value )
 
Mesh get_mesh ( )
  The Mesh resource to use as a CSG shape. Note: When using an ArrayMesh, all vertex attributes except Mesh.ARRAY_VERTEX, Mesh.ARRAY_NORMAL and Mesh.ARRAY_TEX_UV are left unused. Only Mesh.ARRAY_VERTEX and Mesh.ARRAY_TEX_UV will be passed to the GPU. Mesh.ARRAY_NORMAL is only used to determine which faces require the use of flat shading. By default, CSGMesh will ignore the mesh's vertex normals, recalculate them for each vertex and use a smooth shader. If a flat shader is required for a face, ensure that all vertex normals of the face are approximately equal.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_csgmesh3d.html


classes/class_animationnodeadd3
-----------------------------------------------------------
AnimationNodeAdd3 Inherits: AnimationNodeSync < AnimationNode < Resource < RefCounted < Object Blends two of three animations additively inside of an AnimationNodeBlendTree.  Description A resource to add to an AnimationNodeBlendTree. Blends two animations out of three additively out of three based on the amount value. This animation node has three inputs:  The base animation to add to A "-add" animation to blend with when the blend amount is negative A "+add" animation to blend with when the blend amount is positive  If the absolute value of the amount is greater than 1.0, the animation connected to "in" port is blended with the amplified animation connected to "-add"/"+add" port.   Tutorials  Using AnimationTree Third Person Shooter Demo   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodeadd3.html


classes/class_cameraattributespractical
-----------------------------------------------------------
CameraAttributesPractical Inherits: CameraAttributes < Resource < RefCounted < Object Camera settings in an easy to use format.  Description Controls camera-specific attributes such as auto-exposure, depth of field, and exposure override. When used in a WorldEnvironment it provides default settings for exposure, auto-exposure, and depth of field that will be used by all cameras without their own CameraAttributes, including the editor camera. When used in a Camera3D it will override any CameraAttributes set in the WorldEnvironment. When used in VoxelGI or LightmapGI, only the exposure settings will be used.   Properties  
float auto_exposure_max_sensitivity 800.0  
float auto_exposure_min_sensitivity 0.0  
float dof_blur_amount 0.1  
float dof_blur_far_distance 10.0  
bool dof_blur_far_enabled false  
float dof_blur_far_transition 5.0  
float dof_blur_near_distance 2.0  
bool dof_blur_near_enabled false  
float dof_blur_near_transition 1.0     Property Descriptions 
float auto_exposure_max_sensitivity = 800.0
  void set_auto_exposure_max_sensitivity ( float value )
 
float get_auto_exposure_max_sensitivity ( )
  The maximum sensitivity (in ISO) used when calculating auto exposure. When calculating scene average luminance, color values will be clamped to at least this value. This limits the auto-exposure from exposing below a certain brightness, resulting in a cut off point where the scene will remain bright. 
float auto_exposure_min_sensitivity = 0.0
  void set_auto_exposure_min_sensitivity ( float value )
 
float get_auto_exposure_min_sensitivity ( )
  The minimum sensitivity (in ISO) used when calculating auto exposure. When calculating scene average luminance, color values will be clamped to at least this value. This limits the auto-exposure from exposing above a certain brightness, resulting in a cut off point where the scene will remain dark. 
float dof_blur_amount = 0.1
  void set_dof_blur_amount ( float value )
 
float get_dof_blur_amount ( )
  Sets the maximum amount of blur. When using physically-based blur amounts, will instead act as a multiplier. High values lead to an increased amount of blurriness, but can be much more expensive to calculate. It is best to keep this as low as possible for a given art style. 
float dof_blur_far_distance = 10.0
  void set_dof_blur_far_distance ( float value )
 
float get_dof_blur_far_distance ( )
  Objects further from the Camera3D by this amount will be blurred by the depth of field effect. Measured in meters. 
bool dof_blur_far_enabled = false
  void set_dof_blur_far_enabled ( bool value )
 
bool is_dof_blur_far_enabled ( )
  Enables depth of field blur for objects further than dof_blur_far_distance. Strength of blur is controlled by dof_blur_amount and modulated by dof_blur_far_transition. Note: Depth of field blur is only supported in the Forward+ and Mobile rendering methods, not Compatibility. 
float dof_blur_far_transition = 5.0
  void set_dof_blur_far_transition ( float value )
 
float get_dof_blur_far_transition ( )
  When positive, distance over which (starting from dof_blur_far_distance) blur effect will scale from 0 to dof_blur_amount. When negative, uses physically-based scaling so depth of field effect will scale from 0 at dof_blur_far_distance and will increase in a physically accurate way as objects get further from the Camera3D. 
float dof_blur_near_distance = 2.0
  void set_dof_blur_near_distance ( float value )
 
float get_dof_blur_near_distance ( )
  Objects closer from the Camera3D by this amount will be blurred by the depth of field effect. Measured in meters. 
bool dof_blur_near_enabled = false
  void set_dof_blur_near_enabled ( bool value )
 
bool is_dof_blur_near_enabled ( )
  Enables depth of field blur for objects closer than dof_blur_near_distance. Strength of blur is controlled by dof_blur_amount and modulated by dof_blur_near_transition. Note: Depth of field blur is only supported in the Forward+ and Mobile rendering methods, not Compatibility. 
float dof_blur_near_transition = 1.0
  void set_dof_blur_near_transition ( float value )
 
float get_dof_blur_near_transition ( )
  When positive, distance over which blur effect will scale from 0 to dof_blur_amount, ending at dof_blur_near_distance. When negative, uses physically-based scaling so depth of field effect will scale from 0 at dof_blur_near_distance and will increase in a physically accurate way as objects get closer to the Camera3D.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_cameraattributespractical.html


classes/class_navigationagent3d
-----------------------------------------------------------
NavigationAgent3D Inherits: Node < Object A 3D agent used to pathfind to a position while avoiding obstacles.  Description A 3D agent used to pathfind to a position while avoiding static and dynamic obstacles. The calculation can be used by the parent node to dynamically move it along the path. Requires navigation data to work correctly. Dynamic obstacles are avoided using RVO collision avoidance. Avoidance is computed before physics, so the pathfinding information can be used safely in the physics step. Note: After setting the target_position property, the get_next_path_position method must be used once every physics frame to update the internal path logic of the navigation agent. The vector position it returns should be used as the next movement position for the agent's parent node.   Tutorials  Using NavigationAgents    Properties  
bool avoidance_enabled false  
int avoidance_layers 1  
int avoidance_mask 1  
float avoidance_priority 1.0  
bool debug_enabled false  
Color debug_path_custom_color Color(1, 1, 1, 1)  
float debug_path_custom_point_size 4.0  
bool debug_use_custom false  
float height 1.0  
bool keep_y_velocity true  
int max_neighbors 10  
float max_speed 10.0  
int navigation_layers 1  
float neighbor_distance 50.0  
float path_desired_distance 1.0  
float path_height_offset 0.0  
float path_max_distance 5.0  
BitField<PathMetadataFlags> path_metadata_flags 7  
PathPostProcessing path_postprocessing 0  
PathfindingAlgorithm pathfinding_algorithm 0  
float radius 0.5  
float target_desired_distance 1.0  
Vector3 target_position Vector3(0, 0, 0)  
float time_horizon_agents 1.0  
float time_horizon_obstacles 0.0  
bool use_3d_avoidance false  
Vector3 velocity Vector3(0, 0, 0)     Methods  
float distance_to_target ( ) const  
bool get_avoidance_layer_value ( int layer_number ) const  
bool get_avoidance_mask_value ( int mask_number ) const  
PackedVector3Array get_current_navigation_path ( ) const  
int get_current_navigation_path_index ( ) const  
NavigationPathQueryResult3D get_current_navigation_result ( ) const  
Vector3 get_final_position ( )  
bool get_navigation_layer_value ( int layer_number ) const  
RID get_navigation_map ( ) const  
Vector3 get_next_path_position ( )  
RID get_rid ( ) const  
bool is_navigation_finished ( )  
bool is_target_reachable ( )  
bool is_target_reached ( ) const  
void set_avoidance_layer_value ( int layer_number, bool value )  
void set_avoidance_mask_value ( int mask_number, bool value )  
void set_navigation_layer_value ( int layer_number, bool value )  
void set_navigation_map ( RID navigation_map )  
void set_velocity_forced ( Vector3 velocity )     Signals link_reached ( Dictionary details ) Notifies when a navigation link has been reached. The details dictionary may contain the following keys depending on the value of path_metadata_flags:  
position: The start position of the link that was reached. 
type: Always NavigationPathQueryResult3D.PATH_SEGMENT_TYPE_LINK. 
rid: The RID of the link. 
owner: The object which manages the link (usually NavigationLink3D). 
link_entry_position: If owner is available and the owner is a NavigationLink3D, it will contain the global position of the link's point the agent is entering. 
link_exit_position: If owner is available and the owner is a NavigationLink3D, it will contain the global position of the link's point which the agent is exiting.  navigation_finished ( ) Emitted once per loaded path when the agent internal navigation path index reaches the last index of the loaded path array. The agent internal navigation path index can be received with get_current_navigation_path_index. path_changed ( ) Emitted when the agent had to update the loaded path:  because path was previously empty. because navigation map has changed. because agent pushed further away from the current path segment than the path_max_distance.  target_reached ( ) Emitted once per loaded path when the agent's global position is the first time within target_desired_distance to the target_position. velocity_computed ( Vector3 safe_velocity ) Notifies when the collision avoidance velocity is calculated. Emitted when velocity is set. Only emitted when avoidance_enabled is true. waypoint_reached ( Dictionary details ) Notifies when a waypoint along the path has been reached. The details dictionary may contain the following keys depending on the value of path_metadata_flags:  
position: The position of the waypoint that was reached. 
type: The type of navigation primitive (region or link) that contains this waypoint. 
rid: The RID of the containing navigation primitive (region or link). 
owner: The object which manages the containing navigation primitive (region or link).    Property Descriptions 
bool avoidance_enabled = false
  void set_avoidance_enabled ( bool value )
 
bool get_avoidance_enabled ( )
  If true the agent is registered for an RVO avoidance callback on the NavigationServer3D. When velocity is set and the processing is completed a safe_velocity Vector3 is received with a signal connection to velocity_computed. Avoidance processing with many registered agents has a significant performance cost and should only be enabled on agents that currently require it. 
int avoidance_layers = 1
  void set_avoidance_layers ( int value )
 
int get_avoidance_layers ( )
  A bitfield determining the avoidance layers for this NavigationAgent. Other agents with a matching bit on the avoidance_mask will avoid this agent. 
int avoidance_mask = 1
  void set_avoidance_mask ( int value )
 
int get_avoidance_mask ( )
  A bitfield determining what other avoidance agents and obstacles this NavigationAgent will avoid when a bit matches at least one of their avoidance_layers. 
float avoidance_priority = 1.0
  void set_avoidance_priority ( float value )
 
float get_avoidance_priority ( )
  The agent does not adjust the velocity for other agents that would match the avoidance_mask but have a lower avoidance_priority. This in turn makes the other agents with lower priority adjust their velocities even more to avoid collision with this agent. 
bool debug_enabled = false
  void set_debug_enabled ( bool value )
 
bool get_debug_enabled ( )
  If true shows debug visuals for this agent. 
Color debug_path_custom_color = Color(1, 1, 1, 1)
  void set_debug_path_custom_color ( Color value )
 
Color get_debug_path_custom_color ( )
  If debug_use_custom is true uses this color for this agent instead of global color. 
float debug_path_custom_point_size = 4.0
  void set_debug_path_custom_point_size ( float value )
 
float get_debug_path_custom_point_size ( )
  If debug_use_custom is true uses this rasterized point size for rendering path points for this agent instead of global point size. 
bool debug_use_custom = false
  void set_debug_use_custom ( bool value )
 
bool get_debug_use_custom ( )
  If true uses the defined debug_path_custom_color for this agent instead of global color. 
float height = 1.0
  void set_height ( float value )
 
float get_height ( )
  The height of the avoidance agent. Agents will ignore other agents or obstacles that are above or below their current position + height in 2D avoidance. Does nothing in 3D avoidance which uses radius spheres alone. 
bool keep_y_velocity = true
  void set_keep_y_velocity ( bool value )
 
bool get_keep_y_velocity ( )
  If true, and the agent uses 2D avoidance, it will remember the set y-axis velocity and reapply it after the avoidance step. While 2D avoidance has no y-axis and simulates on a flat plane this setting can help mitigate the most obvious clipping on uneven 3D geometry. 
int max_neighbors = 10
  void set_max_neighbors ( int value )
 
int get_max_neighbors ( )
  The maximum number of neighbors for the agent to consider. 
float max_speed = 10.0
  void set_max_speed ( float value )
 
float get_max_speed ( )
  The maximum speed that an agent can move. 
int navigation_layers = 1
  void set_navigation_layers ( int value )
 
int get_navigation_layers ( )
  A bitfield determining which navigation layers of navigation regions this agent will use to calculate a path. Changing it during runtime will clear the current navigation path and generate a new one, according to the new navigation layers. 
float neighbor_distance = 50.0
  void set_neighbor_distance ( float value )
 
float get_neighbor_distance ( )
  The distance to search for other agents. 
float path_desired_distance = 1.0
  void set_path_desired_distance ( float value )
 
float get_path_desired_distance ( )
  The distance threshold before a path point is considered to be reached. This allows agents to not have to hit a path point on the path exactly, but only to reach its general area. If this value is set too high, the NavigationAgent will skip points on the path, which can lead to leaving the navigation mesh. If this value is set too low, the NavigationAgent will be stuck in a repath loop because it will constantly overshoot or undershoot the distance to the next point on each physics frame update. 
float path_height_offset = 0.0
  void set_path_height_offset ( float value )
 
float get_path_height_offset ( )
  The height offset is subtracted from the y-axis value of any vector path position for this NavigationAgent. The NavigationAgent height offset does not change or influence the navigation mesh or pathfinding query result. Additional navigation maps that use regions with navigation meshes that the developer baked with appropriate agent radius or height values are required to support different-sized agents. 
float path_max_distance = 5.0
  void set_path_max_distance ( float value )
 
float get_path_max_distance ( )
  The maximum distance the agent is allowed away from the ideal path to the final position. This can happen due to trying to avoid collisions. When the maximum distance is exceeded, it recalculates the ideal path. 
BitField<PathMetadataFlags> path_metadata_flags = 7
  void set_path_metadata_flags ( BitField<PathMetadataFlags> value )
 
BitField<PathMetadataFlags> get_path_metadata_flags ( )
  Additional information to return with the navigation path. 
PathPostProcessing path_postprocessing = 0
  void set_path_postprocessing ( PathPostProcessing value )
 
PathPostProcessing get_path_postprocessing ( )
  The path postprocessing applied to the raw path corridor found by the pathfinding_algorithm. 
PathfindingAlgorithm pathfinding_algorithm = 0
  void set_pathfinding_algorithm ( PathfindingAlgorithm value )
 
PathfindingAlgorithm get_pathfinding_algorithm ( )
  The pathfinding algorithm used in the path query. 
float radius = 0.5
  void set_radius ( float value )
 
float get_radius ( )
  The radius of the avoidance agent. This is the "body" of the avoidance agent and not the avoidance maneuver starting radius (which is controlled by neighbor_distance). Does not affect normal pathfinding. To change an actor's pathfinding radius bake NavigationMesh resources with a different NavigationMesh.agent_radius property and use different navigation maps for each actor size. 
float target_desired_distance = 1.0
  void set_target_desired_distance ( float value )
 
float get_target_desired_distance ( )
  The distance threshold before the final target point is considered to be reached. This allows agents to not have to hit the point of the final target exactly, but only to reach its general area. If this value is set too low, the NavigationAgent will be stuck in a repath loop because it will constantly overshoot or undershoot the distance to the final target point on each physics frame update. 
Vector3 target_position = Vector3(0, 0, 0)
  void set_target_position ( Vector3 value )
 
Vector3 get_target_position ( )
  If set, a new navigation path from the current agent position to the target_position is requested from the NavigationServer. 
float time_horizon_agents = 1.0
  void set_time_horizon_agents ( float value )
 
float get_time_horizon_agents ( )
  The minimal amount of time for which this agent's velocities, that are computed with the collision avoidance algorithm, are safe with respect to other agents. The larger the number, the sooner the agent will respond to other agents, but less freedom in choosing its velocities. A too high value will slow down agents movement considerably. Must be positive. 
float time_horizon_obstacles = 0.0
  void set_time_horizon_obstacles ( float value )
 
float get_time_horizon_obstacles ( )
  The minimal amount of time for which this agent's velocities, that are computed with the collision avoidance algorithm, are safe with respect to static avoidance obstacles. The larger the number, the sooner the agent will respond to static avoidance obstacles, but less freedom in choosing its velocities. A too high value will slow down agents movement considerably. Must be positive. 
bool use_3d_avoidance = false
  void set_use_3d_avoidance ( bool value )
 
bool get_use_3d_avoidance ( )
  If true, the agent calculates avoidance velocities in 3D omnidirectionally, e.g. for games that take place in air, underwater or space. Agents using 3D avoidance only avoid other agents using 3D avoidance, and react to radius-based avoidance obstacles. They ignore any vertex-based obstacles. If false, the agent calculates avoidance velocities in 2D along the x and z-axes, ignoring the y-axis. Agents using 2D avoidance only avoid other agents using 2D avoidance, and react to radius-based avoidance obstacles or vertex-based avoidance obstacles. Other agents using 2D avoidance that are below or above their current position including height are ignored. 
Vector3 velocity = Vector3(0, 0, 0)
  void set_velocity ( Vector3 value )
 
Vector3 get_velocity ( )
  Sets the new wanted velocity for the agent. The avoidance simulation will try to fulfill this velocity if possible but will modify it to avoid collision with other agents and obstacles. When an agent is teleported to a new position, use set_velocity_forced as well to reset the internal simulation velocity.   Method Descriptions 
float distance_to_target ( ) const
 Returns the distance to the target position, using the agent's global position. The user must set target_position in order for this to be accurate. 
bool get_avoidance_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the avoidance_layers bitmask is enabled, given a layer_number between 1 and 32. 
bool get_avoidance_mask_value ( int mask_number ) const
 Returns whether or not the specified mask of the avoidance_mask bitmask is enabled, given a mask_number between 1 and 32. 
PackedVector3Array get_current_navigation_path ( ) const
 Returns this agent's current path from start to finish in global coordinates. The path only updates when the target position is changed or the agent requires a repath. The path array is not intended to be used in direct path movement as the agent has its own internal path logic that would get corrupted by changing the path array manually. Use the intended get_next_path_position once every physics frame to receive the next path point for the agents movement as this function also updates the internal path logic. 
int get_current_navigation_path_index ( ) const
 Returns which index the agent is currently on in the navigation path's PackedVector3Array. 
NavigationPathQueryResult3D get_current_navigation_result ( ) const
 Returns the path query result for the path the agent is currently following. 
Vector3 get_final_position ( ) Returns the reachable final position of the current navigation path in global coordinates. This position can change if the agent needs to update the navigation path which makes the agent emit the path_changed signal. 
bool get_navigation_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the navigation_layers bitmask is enabled, given a layer_number between 1 and 32. 
RID get_navigation_map ( ) const
 Returns the RID of the navigation map for this NavigationAgent node. This function returns always the map set on the NavigationAgent node and not the map of the abstract agent on the NavigationServer. If the agent map is changed directly with the NavigationServer API the NavigationAgent node will not be aware of the map change. Use set_navigation_map to change the navigation map for the NavigationAgent and also update the agent on the NavigationServer. 
Vector3 get_next_path_position ( ) Returns the next position in global coordinates that can be moved to, making sure that there are no static objects in the way. If the agent does not have a navigation path, it will return the position of the agent's parent. The use of this function once every physics frame is required to update the internal path logic of the NavigationAgent. 
RID get_rid ( ) const
 Returns the RID of this agent on the NavigationServer3D. 
bool is_navigation_finished ( ) Returns true if the end of the currently loaded navigation path has been reached. Note: While true prefer to stop calling update functions like get_next_path_position. This avoids jittering the standing agent due to calling repeated path updates. 
bool is_target_reachable ( ) Returns true if get_final_position is within target_desired_distance of the target_position. 
bool is_target_reached ( ) const
 Returns true if target_position is reached. It may not always be possible to reach the target position. It should always be possible to reach the final position though. See get_final_position. void set_avoidance_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the avoidance_layers bitmask, given a layer_number between 1 and 32. void set_avoidance_mask_value ( int mask_number, bool value ) Based on value, enables or disables the specified mask in the avoidance_mask bitmask, given a mask_number between 1 and 32. void set_navigation_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the navigation_layers bitmask, given a layer_number between 1 and 32. void set_navigation_map ( RID navigation_map ) Sets the RID of the navigation map this NavigationAgent node should use and also updates the agent on the NavigationServer. void set_velocity_forced ( Vector3 velocity ) Replaces the internal velocity in the collision avoidance simulation with velocity. When an agent is teleported to a new position this function should be used in the same frame. If called frequently this function can get agents stuck.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_navigationagent3d.html


classes/class_texture
-----------------------------------------------------------
Texture Inherits: Resource < RefCounted < Object Inherited By: Texture2D, Texture3D, TextureLayered Base class for all texture types.  Description Texture is the base class for all texture types. Common texture types are Texture2D and ImageTexture. See also Image.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texture.html


classes/class_visualshadernodecomment
-----------------------------------------------------------
VisualShaderNodeComment Inherits: VisualShaderNodeResizableBase < VisualShaderNode < Resource < RefCounted < Object A comment node to be placed on visual shader graph.  Description A resizable rectangular area with changeable title and description used for better organizing of other visual shader nodes.   Properties  
String description ""  
String title "Comment"     Property Descriptions 
String description = ""
  void set_description ( String value )
 
String get_description ( )
  An additional description which placed below the title. 
String title = "Comment"
  void set_title ( String value )
 
String get_title ( )
  A title of the node.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualshadernodecomment.html


classes/class_cryptokey
-----------------------------------------------------------
CryptoKey Inherits: Resource < RefCounted < Object A cryptographic key (RSA).  Description The CryptoKey class represents a cryptographic key. Keys can be loaded and saved like any other Resource. They can be used to generate a self-signed X509Certificate via Crypto.generate_self_signed_certificate and as private key in StreamPeerTLS.accept_stream along with the appropriate certificate.   Tutorials  SSL certificates    Methods  
bool is_public_only ( ) const  
Error load ( String path, bool public_only=false )  
Error load_from_string ( String string_key, bool public_only=false )  
Error save ( String path, bool public_only=false )  
String save_to_string ( bool public_only=false )     Method Descriptions 
bool is_public_only ( ) const
 Returns true if this CryptoKey only has the public part, and not the private one. 
Error load ( String path, bool public_only=false ) Loads a key from path. If public_only is true, only the public key will be loaded. Note: path should be a "*.pub" file if public_only is true, a "*.key" file otherwise. 
Error load_from_string ( String string_key, bool public_only=false ) Loads a key from the given string_key. If public_only is true, only the public key will be loaded. 
Error save ( String path, bool public_only=false ) Saves a key to the given path. If public_only is true, only the public key will be saved. Note: path should be a "*.pub" file if public_only is true, a "*.key" file otherwise. 
String save_to_string ( bool public_only=false ) Returns a string containing the key in PEM format. If public_only is true, only the public key will be included.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_cryptokey.html


classes/class_cpuparticles2d
-----------------------------------------------------------
CPUParticles2D Inherits: Node2D < CanvasItem < Node < Object A CPU-based 2D particle emitter.  Description CPU-based 2D particle node used to create a variety of particle systems and effects. See also GPUParticles2D, which provides the same functionality with hardware acceleration, but may not run on older devices.   Tutorials  Particle systems (2D)    Properties  
int amount 8  
Curve angle_curve   
float angle_max 0.0  
float angle_min 0.0  
Curve angular_velocity_curve   
float angular_velocity_max 0.0  
float angular_velocity_min 0.0  
Curve anim_offset_curve   
float anim_offset_max 0.0  
float anim_offset_min 0.0  
Curve anim_speed_curve   
float anim_speed_max 0.0  
float anim_speed_min 0.0  
Color color Color(1, 1, 1, 1)  
Gradient color_initial_ramp   
Gradient color_ramp   
Curve damping_curve   
float damping_max 0.0  
float damping_min 0.0  
Vector2 direction Vector2(1, 0)  
DrawOrder draw_order 0  
PackedColorArray emission_colors   
PackedVector2Array emission_normals   
PackedVector2Array emission_points   
Vector2 emission_rect_extents   
EmissionShape emission_shape 0  
float emission_sphere_radius   
bool emitting true  
float explosiveness 0.0  
int fixed_fps 0  
bool fract_delta true  
Vector2 gravity Vector2(0, 980)  
Curve hue_variation_curve   
float hue_variation_max 0.0  
float hue_variation_min 0.0  
float initial_velocity_max 0.0  
float initial_velocity_min 0.0  
float lifetime 1.0  
float lifetime_randomness 0.0  
Curve linear_accel_curve   
float linear_accel_max 0.0  
float linear_accel_min 0.0  
bool local_coords false  
bool one_shot false  
Curve orbit_velocity_curve   
float orbit_velocity_max 0.0  
float orbit_velocity_min 0.0  
bool particle_flag_align_y false  
float preprocess 0.0  
Curve radial_accel_curve   
float radial_accel_max 0.0  
float radial_accel_min 0.0  
float randomness 0.0  
Curve scale_amount_curve   
float scale_amount_max 1.0  
float scale_amount_min 1.0  
Curve scale_curve_x   
Curve scale_curve_y   
float speed_scale 1.0  
bool split_scale false  
float spread 45.0  
Curve tangential_accel_curve   
float tangential_accel_max 0.0  
float tangential_accel_min 0.0  
Texture2D texture      Methods  
void convert_from_particles ( Node particles )  
Curve get_param_curve ( Parameter param ) const  
float get_param_max ( Parameter param ) const  
float get_param_min ( Parameter param ) const  
bool get_particle_flag ( ParticleFlags particle_flag ) const  
void restart ( )  
void set_param_curve ( Parameter param, Curve curve )  
void set_param_max ( Parameter param, float value )  
void set_param_min ( Parameter param, float value )  
void set_particle_flag ( ParticleFlags particle_flag, bool enable )     Signals finished ( ) Emitted when all active particles have finished processing. When one_shot is disabled, particles will process continuously, so this is never emitted.   Enumerations enum DrawOrder: 
DrawOrder DRAW_ORDER_INDEX = 0
 Particles are drawn in the order emitted. 
DrawOrder DRAW_ORDER_LIFETIME = 1
 Particles are drawn in order of remaining lifetime. In other words, the particle with the highest lifetime is drawn at the front. enum Parameter: 
Parameter PARAM_INITIAL_LINEAR_VELOCITY = 0
 Use with set_param_min, set_param_max, and set_param_curve to set initial velocity properties. 
Parameter PARAM_ANGULAR_VELOCITY = 1
 Use with set_param_min, set_param_max, and set_param_curve to set angular velocity properties. 
Parameter PARAM_ORBIT_VELOCITY = 2
 Use with set_param_min, set_param_max, and set_param_curve to set orbital velocity properties. 
Parameter PARAM_LINEAR_ACCEL = 3
 Use with set_param_min, set_param_max, and set_param_curve to set linear acceleration properties. 
Parameter PARAM_RADIAL_ACCEL = 4
 Use with set_param_min, set_param_max, and set_param_curve to set radial acceleration properties. 
Parameter PARAM_TANGENTIAL_ACCEL = 5
 Use with set_param_min, set_param_max, and set_param_curve to set tangential acceleration properties. 
Parameter PARAM_DAMPING = 6
 Use with set_param_min, set_param_max, and set_param_curve to set damping properties. 
Parameter PARAM_ANGLE = 7
 Use with set_param_min, set_param_max, and set_param_curve to set angle properties. 
Parameter PARAM_SCALE = 8
 Use with set_param_min, set_param_max, and set_param_curve to set scale properties. 
Parameter PARAM_HUE_VARIATION = 9
 Use with set_param_min, set_param_max, and set_param_curve to set hue variation properties. 
Parameter PARAM_ANIM_SPEED = 10
 Use with set_param_min, set_param_max, and set_param_curve to set animation speed properties. 
Parameter PARAM_ANIM_OFFSET = 11
 Use with set_param_min, set_param_max, and set_param_curve to set animation offset properties. 
Parameter PARAM_MAX = 12
 Represents the size of the Parameter enum. enum ParticleFlags: 
ParticleFlags PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY = 0
 Use with set_particle_flag to set particle_flag_align_y. 
ParticleFlags PARTICLE_FLAG_ROTATE_Y = 1
 Present for consistency with 3D particle nodes, not used in 2D. 
ParticleFlags PARTICLE_FLAG_DISABLE_Z = 2
 Present for consistency with 3D particle nodes, not used in 2D. 
ParticleFlags PARTICLE_FLAG_MAX = 3
 Represents the size of the ParticleFlags enum. enum EmissionShape: 
EmissionShape EMISSION_SHAPE_POINT = 0
 All particles will be emitted from a single point. 
EmissionShape EMISSION_SHAPE_SPHERE = 1
 Particles will be emitted in the volume of a sphere flattened to two dimensions. 
EmissionShape EMISSION_SHAPE_SPHERE_SURFACE = 2
 Particles will be emitted on the surface of a sphere flattened to two dimensions. 
EmissionShape EMISSION_SHAPE_RECTANGLE = 3
 Particles will be emitted in the area of a rectangle. 
EmissionShape EMISSION_SHAPE_POINTS = 4
 Particles will be emitted at a position chosen randomly among emission_points. Particle color will be modulated by emission_colors. 
EmissionShape EMISSION_SHAPE_DIRECTED_POINTS = 5
 Particles will be emitted at a position chosen randomly among emission_points. Particle velocity and rotation will be set based on emission_normals. Particle color will be modulated by emission_colors. 
EmissionShape EMISSION_SHAPE_MAX = 6
 Represents the size of the EmissionShape enum.   Property Descriptions 
int amount = 8
  void set_amount ( int value )
 
int get_amount ( )
  Number of particles emitted in one emission cycle. 
Curve angle_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's rotation will be animated along this Curve. 
float angle_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum initial rotation applied to each particle, in degrees. 
float angle_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of angle_max. 
Curve angular_velocity_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's angular velocity will vary along this Curve. 
float angular_velocity_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum initial angular velocity (rotation speed) applied to each particle in degrees per second. 
float angular_velocity_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of angular_velocity_max. 
Curve anim_offset_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's animation offset will vary along this Curve. 
float anim_offset_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum animation offset that corresponds to frame index in the texture. 0 is the first frame, 1 is the last one. See CanvasItemMaterial.particles_animation. 
float anim_offset_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of anim_offset_max. 
Curve anim_speed_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's animation speed will vary along this Curve. 
float anim_speed_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum particle animation speed. Animation speed of 1 means that the particles will make full 0 to 1 offset cycle during lifetime, 2 means 2 cycles etc. With animation speed greater than 1, remember to enable CanvasItemMaterial.particles_anim_loop property if you want the animation to repeat. 
float anim_speed_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of anim_speed_max. 
Color color = Color(1, 1, 1, 1)
  void set_color ( Color value )
 
Color get_color ( )
  Each particle's initial color. If texture is defined, it will be multiplied by this color. 
Gradient color_initial_ramp  void set_color_initial_ramp ( Gradient value )
 
Gradient get_color_initial_ramp ( )
  Each particle's initial color will vary along this GradientTexture1D (multiplied with color). 
Gradient color_ramp  void set_color_ramp ( Gradient value )
 
Gradient get_color_ramp ( )
  Each particle's color will vary along this Gradient (multiplied with color). 
Curve damping_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Damping will vary along this Curve. 
float damping_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  The maximum rate at which particles lose velocity. For example value of 100 means that the particle will go from 100 velocity to 0 in 1 second. 
float damping_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of damping_max. 
Vector2 direction = Vector2(1, 0)
  void set_direction ( Vector2 value )
 
Vector2 get_direction ( )
  Unit vector specifying the particles' emission direction. 
DrawOrder draw_order = 0
  void set_draw_order ( DrawOrder value )
 
DrawOrder get_draw_order ( )
  Particle draw order. Uses DrawOrder values. 
PackedColorArray emission_colors  void set_emission_colors ( PackedColorArray value )
 
PackedColorArray get_emission_colors ( )
  Sets the Colors to modulate particles by when using EMISSION_SHAPE_POINTS or EMISSION_SHAPE_DIRECTED_POINTS. 
PackedVector2Array emission_normals  void set_emission_normals ( PackedVector2Array value )
 
PackedVector2Array get_emission_normals ( )
  Sets the direction the particles will be emitted in when using EMISSION_SHAPE_DIRECTED_POINTS. 
PackedVector2Array emission_points  void set_emission_points ( PackedVector2Array value )
 
PackedVector2Array get_emission_points ( )
  Sets the initial positions to spawn particles when using EMISSION_SHAPE_POINTS or EMISSION_SHAPE_DIRECTED_POINTS. 
Vector2 emission_rect_extents  void set_emission_rect_extents ( Vector2 value )
 
Vector2 get_emission_rect_extents ( )
  The rectangle's extents if emission_shape is set to EMISSION_SHAPE_RECTANGLE. 
EmissionShape emission_shape = 0
  void set_emission_shape ( EmissionShape value )
 
EmissionShape get_emission_shape ( )
  Particles will be emitted inside this region. See EmissionShape for possible values. 
float emission_sphere_radius  void set_emission_sphere_radius ( float value )
 
float get_emission_sphere_radius ( )
  The sphere's radius if emission_shape is set to EMISSION_SHAPE_SPHERE. 
bool emitting = true
  void set_emitting ( bool value )
 
bool is_emitting ( )
  If true, particles are being emitted. emitting can be used to start and stop particles from emitting. However, if one_shot is true setting emitting to true will not restart the emission cycle until after all active particles finish processing. You can use the finished signal to be notified once all active particles finish processing. 
float explosiveness = 0.0
  void set_explosiveness_ratio ( float value )
 
float get_explosiveness_ratio ( )
  How rapidly particles in an emission cycle are emitted. If greater than 0, there will be a gap in emissions before the next cycle begins. 
int fixed_fps = 0
  void set_fixed_fps ( int value )
 
int get_fixed_fps ( )
  The particle system's frame rate is fixed to a value. For example, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself. 
bool fract_delta = true
  void set_fractional_delta ( bool value )
 
bool get_fractional_delta ( )
  If true, results in fractional delta calculation which has a smoother particles display effect. 
Vector2 gravity = Vector2(0, 980)
  void set_gravity ( Vector2 value )
 
Vector2 get_gravity ( )
  Gravity applied to every particle. 
Curve hue_variation_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's hue will vary along this Curve. 
float hue_variation_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum initial hue variation applied to each particle. It will shift the particle color's hue. 
float hue_variation_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of hue_variation_max. 
float initial_velocity_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum initial velocity magnitude for each particle. Direction comes from direction and spread. 
float initial_velocity_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of initial_velocity_max. 
float lifetime = 1.0
  void set_lifetime ( float value )
 
float get_lifetime ( )
  Amount of time each particle will exist. 
float lifetime_randomness = 0.0
  void set_lifetime_randomness ( float value )
 
float get_lifetime_randomness ( )
  Particle lifetime randomness ratio. 
Curve linear_accel_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's linear acceleration will vary along this Curve. 
float linear_accel_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum linear acceleration applied to each particle in the direction of motion. 
float linear_accel_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of linear_accel_max. 
bool local_coords = false
  void set_use_local_coordinates ( bool value )
 
bool get_use_local_coordinates ( )
  If true, particles use the parent node's coordinate space (known as local coordinates). This will cause particles to move and rotate along the CPUParticles2D node (and its parents) when it is moved or rotated. If false, particles use global coordinates; they will not move or rotate along the CPUParticles2D node (and its parents) when it is moved or rotated. 
bool one_shot = false
  void set_one_shot ( bool value )
 
bool get_one_shot ( )
  If true, only one emission cycle occurs. If set true during a cycle, emission will stop at the cycle's end. 
Curve orbit_velocity_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's orbital velocity will vary along this Curve. 
float orbit_velocity_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second. 
float orbit_velocity_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of orbit_velocity_max. 
bool particle_flag_align_y = false
  void set_particle_flag ( ParticleFlags particle_flag, bool enable )
 
bool get_particle_flag ( ParticleFlags particle_flag ) const
  Align Y axis of particle with the direction of its velocity. 
float preprocess = 0.0
  void set_pre_process_time ( float value )
 
float get_pre_process_time ( )
  Particle system starts as if it had already run for this many seconds. 
Curve radial_accel_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's radial acceleration will vary along this Curve. 
float radial_accel_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum radial acceleration applied to each particle. Makes particle accelerate away from the origin or towards it if negative. 
float radial_accel_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of radial_accel_max. 
float randomness = 0.0
  void set_randomness_ratio ( float value )
 
float get_randomness_ratio ( )
  Emission lifetime randomness ratio. 
Curve scale_amount_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's scale will vary along this Curve. 
float scale_amount_max = 1.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum initial scale applied to each particle. 
float scale_amount_min = 1.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of scale_amount_max. 
Curve scale_curve_x  void set_scale_curve_x ( Curve value )
 
Curve get_scale_curve_x ( )
  Each particle's horizontal scale will vary along this Curve. split_scale must be enabled. 
Curve scale_curve_y  void set_scale_curve_y ( Curve value )
 
Curve get_scale_curve_y ( )
  Each particle's vertical scale will vary along this Curve. split_scale must be enabled. 
float speed_scale = 1.0
  void set_speed_scale ( float value )
 
float get_speed_scale ( )
  Particle system's running speed scaling ratio. A value of 0 can be used to pause the particles. 
bool split_scale = false
  void set_split_scale ( bool value )
 
bool get_split_scale ( )
  If true, the scale curve will be split into x and y components. See scale_curve_x and scale_curve_y. 
float spread = 45.0
  void set_spread ( float value )
 
float get_spread ( )
  Each particle's initial direction range from +spread to -spread degrees. 
Curve tangential_accel_curve  void set_param_curve ( Parameter param, Curve curve )
 
Curve get_param_curve ( Parameter param ) const
  Each particle's tangential acceleration will vary along this Curve. 
float tangential_accel_max = 0.0
  void set_param_max ( Parameter param, float value )
 
float get_param_max ( Parameter param ) const
  Maximum tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion. 
float tangential_accel_min = 0.0
  void set_param_min ( Parameter param, float value )
 
float get_param_min ( Parameter param ) const
  Minimum equivalent of tangential_accel_max. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  Particle texture. If null, particles will be squares.   Method Descriptions void convert_from_particles ( Node particles ) Sets this node's properties to match a given GPUParticles2D node with an assigned ParticleProcessMaterial. 
Curve get_param_curve ( Parameter param ) const
 Returns the Curve of the parameter specified by Parameter. 
float get_param_max ( Parameter param ) const
 Returns the maximum value range for the given parameter. 
float get_param_min ( Parameter param ) const
 Returns the minimum value range for the given parameter. 
bool get_particle_flag ( ParticleFlags particle_flag ) const
 Returns the enabled state of the given flag (see ParticleFlags for options). void restart ( ) Restarts the particle emitter. void set_param_curve ( Parameter param, Curve curve ) Sets the Curve of the parameter specified by Parameter. void set_param_max ( Parameter param, float value ) Sets the maximum value for the given parameter. void set_param_min ( Parameter param, float value ) Sets the minimum value for the given parameter. void set_particle_flag ( ParticleFlags particle_flag, bool enable ) Enables or disables the given flag (see ParticleFlags for options).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_cpuparticles2d.html


classes/class_animationnode
-----------------------------------------------------------
AnimationNode Inherits: Resource < RefCounted < Object Inherited By: AnimationNodeOutput, AnimationNodeSync, AnimationNodeTimeScale, AnimationNodeTimeSeek, AnimationRootNode Base class for AnimationTree nodes. Not related to scene nodes.  Description Base resource for AnimationTree nodes. In general, it's not used directly, but you can create custom ones with custom blending formulas. Inherit this when creating animation nodes mainly for use in AnimationNodeBlendTree, otherwise AnimationRootNode should be used instead.   Tutorials  Using AnimationTree    Properties  
bool filter_enabled     Methods  
String _get_caption ( ) virtual const  
AnimationNode _get_child_by_name ( StringName name ) virtual const  
Dictionary _get_child_nodes ( ) virtual const  
Variant _get_parameter_default_value ( StringName parameter ) virtual const  
Array _get_parameter_list ( ) virtual const  
bool _has_filter ( ) virtual const  
bool _is_parameter_read_only ( StringName parameter ) virtual const  
float _process ( float time, bool seek, bool is_external_seeking, bool test_only ) virtual const  
bool add_input ( String name )  
void blend_animation ( StringName animation, float time, float delta, bool seeked, bool is_external_seeking, float blend, LoopedFlag looped_flag=0 )  
float blend_input ( int input_index, float time, bool seek, bool is_external_seeking, float blend, FilterAction filter=0, bool sync=true, bool test_only=false )  
float blend_node ( StringName name, AnimationNode node, float time, bool seek, bool is_external_seeking, float blend, FilterAction filter=0, bool sync=true, bool test_only=false )  
int find_input ( String name ) const  
int get_input_count ( ) const  
String get_input_name ( int input ) const  
Variant get_parameter ( StringName name ) const  
bool is_path_filtered ( NodePath path ) const  
void remove_input ( int index )  
void set_filter_path ( NodePath path, bool enable )  
bool set_input_name ( int input, String name )  
void set_parameter ( StringName name, Variant value )     Signals animation_node_removed ( int object_id, String name ) Emitted by nodes that inherit from this class and that have an internal tree when one of their animation nodes removes. The animation nodes that emit this signal are AnimationNodeBlendSpace1D, AnimationNodeBlendSpace2D, AnimationNodeStateMachine, and AnimationNodeBlendTree. animation_node_renamed ( int object_id, String old_name, String new_name ) Emitted by nodes that inherit from this class and that have an internal tree when one of their animation node names changes. The animation nodes that emit this signal are AnimationNodeBlendSpace1D, AnimationNodeBlendSpace2D, AnimationNodeStateMachine, and AnimationNodeBlendTree. tree_changed ( ) Emitted by nodes that inherit from this class and that have an internal tree when one of their animation nodes changes. The animation nodes that emit this signal are AnimationNodeBlendSpace1D, AnimationNodeBlendSpace2D, AnimationNodeStateMachine, AnimationNodeBlendTree and AnimationNodeTransition.   Enumerations enum FilterAction: 
FilterAction FILTER_IGNORE = 0
 Do not use filtering. 
FilterAction FILTER_PASS = 1
 Paths matching the filter will be allowed to pass. 
FilterAction FILTER_STOP = 2
 Paths matching the filter will be discarded. 
FilterAction FILTER_BLEND = 3
 Paths matching the filter will be blended (by the blend value).   Property Descriptions 
bool filter_enabled  void set_filter_enabled ( bool value )
 
bool is_filter_enabled ( )
  If true, filtering is enabled.   Method Descriptions 
String _get_caption ( ) virtual const
 When inheriting from AnimationRootNode, implement this virtual method to override the text caption for this animation node. 
AnimationNode _get_child_by_name ( StringName name ) virtual const
 When inheriting from AnimationRootNode, implement this virtual method to return a child animation node by its name. 
Dictionary _get_child_nodes ( ) virtual const
 When inheriting from AnimationRootNode, implement this virtual method to return all child animation nodes in order as a name: node dictionary. 
Variant _get_parameter_default_value ( StringName parameter ) virtual const
 When inheriting from AnimationRootNode, implement this virtual method to return the default value of a parameter. Parameters are custom local memory used for your animation nodes, given a resource can be reused in multiple trees. 
Array _get_parameter_list ( ) virtual const
 When inheriting from AnimationRootNode, implement this virtual method to return a list of the properties on this animation node. Parameters are custom local memory used for your animation nodes, given a resource can be reused in multiple trees. Format is similar to Object.get_property_list. 
bool _has_filter ( ) virtual const
 When inheriting from AnimationRootNode, implement this virtual method to return whether the blend tree editor should display filter editing on this animation node. 
bool _is_parameter_read_only ( StringName parameter ) virtual const
 When inheriting from AnimationRootNode, implement this virtual method to return whether the parameter is read-only. Parameters are custom local memory used for your animation nodes, given a resource can be reused in multiple trees. 
float _process ( float time, bool seek, bool is_external_seeking, bool test_only ) virtual const
 When inheriting from AnimationRootNode, implement this virtual method to run some code when this animation node is processed. The time parameter is a relative delta, unless seek is true, in which case it is absolute. Here, call the blend_input, blend_node or blend_animation functions. You can also use get_parameter and set_parameter to modify local memory. This function should return the time left for the current animation to finish (if unsure, pass the value from the main blend being called). 
bool add_input ( String name ) Adds an input to the animation node. This is only useful for animation nodes created for use in an AnimationNodeBlendTree. If the addition fails, returns false. void blend_animation ( StringName animation, float time, float delta, bool seeked, bool is_external_seeking, float blend, LoopedFlag looped_flag=0 ) Blend an animation by blend amount (name must be valid in the linked AnimationPlayer). A time and delta may be passed, as well as whether seeked happened. A looped_flag is used by internal processing immediately after the loop. See also LoopedFlag. 
float blend_input ( int input_index, float time, bool seek, bool is_external_seeking, float blend, FilterAction filter=0, bool sync=true, bool test_only=false ) Blend an input. This is only useful for animation nodes created for an AnimationNodeBlendTree. The time parameter is a relative delta, unless seek is true, in which case it is absolute. A filter mode may be optionally passed (see FilterAction for options). 
float blend_node ( StringName name, AnimationNode node, float time, bool seek, bool is_external_seeking, float blend, FilterAction filter=0, bool sync=true, bool test_only=false ) Blend another animation node (in case this animation node contains child animation nodes). This function is only useful if you inherit from AnimationRootNode instead, otherwise editors will not display your animation node for addition. 
int find_input ( String name ) const
 Returns the input index which corresponds to name. If not found, returns -1. 
int get_input_count ( ) const
 Amount of inputs in this animation node, only useful for animation nodes that go into AnimationNodeBlendTree. 
String get_input_name ( int input ) const
 Gets the name of an input by index. 
Variant get_parameter ( StringName name ) const
 Gets the value of a parameter. Parameters are custom local memory used for your animation nodes, given a resource can be reused in multiple trees. 
bool is_path_filtered ( NodePath path ) const
 Returns whether the given path is filtered. void remove_input ( int index ) Removes an input, call this only when inactive. void set_filter_path ( NodePath path, bool enable ) Adds or removes a path for the filter. 
bool set_input_name ( int input, String name ) Sets the name of the input at the given input index. If the setting fails, returns false. void set_parameter ( StringName name, Variant value ) Sets a custom parameter. These are used as local memory, because resources can be reused across the tree or scenes.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnode.html


classes/class_texture2darrayrd
-----------------------------------------------------------
Texture2DArrayRD Inherits: TextureLayeredRD < TextureLayered < Texture < Resource < RefCounted < Object Texture Array for 2D that is bound to a texture created on the RenderingDevice.  Description This texture array class allows you to use a 2D array texture created directly on the RenderingDevice as a texture for materials, meshes, etc.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texture2darrayrd.html


classes/class_scripteditorbase
-----------------------------------------------------------
ScriptEditorBase Inherits: VBoxContainer < BoxContainer < Container < Control < CanvasItem < Node < Object Base editor for editing scripts in the ScriptEditor.  Description Base editor for editing scripts in the ScriptEditor. This does not include documentation items.   Methods  
void add_syntax_highlighter ( EditorSyntaxHighlighter highlighter )  
Control get_base_editor ( ) const     Signals edited_script_changed ( ) Emitted after script validation. go_to_help ( String what ) Emitted when the user requests a specific documentation page. go_to_method ( Object script, String method ) Emitted when the user requests to view a specific method of a script, similar to request_open_script_at_line. name_changed ( ) Emitted after script validation or when the edited resource has changed. replace_in_files_requested ( String text ) Emitted when the user request to find and replace text in the file system. request_help ( String topic ) Emitted when the user requests contextual help. request_open_script_at_line ( Object script, int line ) Emitted when the user requests to view a specific line of a script, similar to go_to_method. request_save_history ( ) Emitted when the user contextual goto and the item is in the same script. search_in_files_requested ( String text ) Emitted when the user request to search text in the file system.   Method Descriptions void add_syntax_highlighter ( EditorSyntaxHighlighter highlighter ) Adds a EditorSyntaxHighlighter to the open script. 
Control get_base_editor ( ) const
 Returns the underlying Control used for editing scripts. For text scripts, this is a CodeEdit.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_scripteditorbase.html


classes/class_audioeffecteq21
-----------------------------------------------------------
AudioEffectEQ21 Inherits: AudioEffectEQ < AudioEffect < Resource < RefCounted < Object Adds a 21-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 22 Hz to 22000 Hz. Each frequency can be modulated between -60/+24 dB.  Description Frequency bands: Band 1: 22 Hz Band 2: 32 Hz Band 3: 44 Hz Band 4: 63 Hz Band 5: 90 Hz Band 6: 125 Hz Band 7: 175 Hz Band 8: 250 Hz Band 9: 350 Hz Band 10: 500 Hz Band 11: 700 Hz Band 12: 1000 Hz Band 13: 1400 Hz Band 14: 2000 Hz Band 15: 2800 Hz Band 16: 4000 Hz Band 17: 5600 Hz Band 18: 8000 Hz Band 19: 11000 Hz Band 20: 16000 Hz Band 21: 22000 Hz See also AudioEffectEQ, AudioEffectEQ6, AudioEffectEQ10.   Tutorials  Audio buses   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffecteq21.html


classes/class_inputeventmousemotion
-----------------------------------------------------------
InputEventMouseMotion Inherits: InputEventMouse < InputEventWithModifiers < InputEventFromWindow < InputEvent < Resource < RefCounted < Object Represents a mouse or a pen movement.  Description Stores information about a mouse or a pen motion. This includes relative position, absolute position, and velocity. See Node._input. Note: By default, this event is only emitted once per frame rendered at most. If you need more precise input reporting, set Input.use_accumulated_input to false to make events emitted as often as possible. If you use InputEventMouseMotion to draw lines, consider implementing Bresenham's line algorithm as well to avoid visible gaps in lines if the user is moving the mouse quickly.   Tutorials  Using InputEvent Mouse and input coordinates 3D Voxel Demo    Properties  
bool pen_inverted false  
float pressure 0.0  
Vector2 relative Vector2(0, 0)  
Vector2 tilt Vector2(0, 0)  
Vector2 velocity Vector2(0, 0)     Property Descriptions 
bool pen_inverted = false
  void set_pen_inverted ( bool value )
 
bool get_pen_inverted ( )
  Returns true when using the eraser end of a stylus pen. Note: This property is implemented on Linux, macOS and Windows. 
float pressure = 0.0
  void set_pressure ( float value )
 
float get_pressure ( )
  Represents the pressure the user puts on the pen. Ranges from 0.0 to 1.0. 
Vector2 relative = Vector2(0, 0)
  void set_relative ( Vector2 value )
 
Vector2 get_relative ( )
  The mouse position relative to the previous position (position at the last frame). Note: Since InputEventMouseMotion is only emitted when the mouse moves, the last event won't have a relative position of Vector2(0, 0) when the user stops moving the mouse. 
Vector2 tilt = Vector2(0, 0)
  void set_tilt ( Vector2 value )
 
Vector2 get_tilt ( )
  Represents the angles of tilt of the pen. Positive X-coordinate value indicates a tilt to the right. Positive Y-coordinate value indicates a tilt toward the user. Ranges from -1.0 to 1.0 for both axes. 
Vector2 velocity = Vector2(0, 0)
  void set_velocity ( Vector2 value )
 
Vector2 get_velocity ( )
  The mouse velocity in pixels per second.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventmousemotion.html


classes/class_gpuparticlesattractorsphere3d
-----------------------------------------------------------
GPUParticlesAttractorSphere3D Inherits: GPUParticlesAttractor3D < VisualInstance3D < Node3D < Node < Object A spheroid-shaped attractor that influences particles from GPUParticles3D nodes.  Description A spheroid-shaped attractor that influences particles from GPUParticles3D nodes. Can be used to attract particles towards its origin, or to push them away from its origin. Particle attractors work in real-time and can be moved, rotated and scaled during gameplay. Unlike collision shapes, non-uniform scaling of attractors is also supported. Note: Particle attractors only affect GPUParticles3D, not CPUParticles3D.   Properties  
float radius 1.0     Property Descriptions 
float radius = 1.0
  void set_radius ( float value )
 
float get_radius ( )
  The attractor sphere's radius in 3D units. Note: Stretched ellipses can be obtained by using non-uniform scaling on the GPUParticlesAttractorSphere3D node.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gpuparticlesattractorsphere3d.html


classes/class_inputeventaction
-----------------------------------------------------------
InputEventAction Inherits: InputEvent < Resource < RefCounted < Object An input event type for actions.  Description Contains a generic action which can be targeted from several types of inputs. Actions and their events can be set in the Input Map tab in Project > Project Settings, or with the InputMap class. Note: Unlike the other InputEvent subclasses which map to unique physical events, this virtual one is not emitted by the engine. This class is useful to emit actions manually with Input.parse_input_event, which are then received in Node._input. To check if a physical event matches an action from the Input Map, use InputEvent.is_action and InputEvent.is_action_pressed.   Tutorials  Using InputEvent: Actions 2D Dodge The Creeps Demo 3D Voxel Demo    Properties  
StringName action &""  
bool pressed false  
float strength 1.0     Property Descriptions 
StringName action = &""
  void set_action ( StringName value )
 
StringName get_action ( )
  The action's name. Actions are accessed via this String. 
bool pressed = false
  void set_pressed ( bool value )
 
bool is_pressed ( )
  If true, the action's state is pressed. If false, the action's state is released. 
float strength = 1.0
  void set_strength ( float value )
 
float get_strength ( )
  The action's strength between 0 and 1. This value is considered as equal to 0 if pressed is false. The event strength allows faking analog joypad motion events, by specifying how strongly the joypad axis is bent or pressed.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventaction.html


classes/class_tilemappattern
-----------------------------------------------------------
TileMapPattern Inherits: Resource < RefCounted < Object Holds a pattern to be copied from or pasted into TileMaps.  Description This resource holds a set of cells to help bulk manipulations of TileMap. A pattern always start at the (0,0) coordinates and cannot have cells with negative coordinates.   Methods  
int get_cell_alternative_tile ( Vector2i coords ) const  
Vector2i get_cell_atlas_coords ( Vector2i coords ) const  
int get_cell_source_id ( Vector2i coords ) const  
Vector2i get_size ( ) const  
Vector2i[] get_used_cells ( ) const  
bool has_cell ( Vector2i coords ) const  
bool is_empty ( ) const  
void remove_cell ( Vector2i coords, bool update_size )  
void set_cell ( Vector2i coords, int source_id=-1, Vector2i atlas_coords=Vector2i(-1, -1), int alternative_tile=-1 )  
void set_size ( Vector2i size )     Method Descriptions 
int get_cell_alternative_tile ( Vector2i coords ) const
 Returns the tile alternative ID of the cell at coords. 
Vector2i get_cell_atlas_coords ( Vector2i coords ) const
 Returns the tile atlas coordinates ID of the cell at coords. 
int get_cell_source_id ( Vector2i coords ) const
 Returns the tile source ID of the cell at coords. 
Vector2i get_size ( ) const
 Returns the size, in cells, of the pattern. 
Vector2i[] get_used_cells ( ) const
 Returns the list of used cell coordinates in the pattern. 
bool has_cell ( Vector2i coords ) const
 Returns whether the pattern has a tile at the given coordinates. 
bool is_empty ( ) const
 Returns whether the pattern is empty or not. void remove_cell ( Vector2i coords, bool update_size ) Remove the cell at the given coordinates. void set_cell ( Vector2i coords, int source_id=-1, Vector2i atlas_coords=Vector2i(-1, -1), int alternative_tile=-1 ) Sets the tile identifiers for the cell at coordinates coords. See TileMap.set_cell. void set_size ( Vector2i size ) Sets the size of the pattern.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_tilemappattern.html


classes/class_tabbar
-----------------------------------------------------------
TabBar Inherits: Control < CanvasItem < Node < Object A control that provides a horizontal bar with tabs.  Description A control that provides a horizontal bar with tabs. Similar to TabContainer but is only in charge of drawing tabs, not interacting with children.   Properties  
bool clip_tabs true  
int current_tab 0  
bool drag_to_rearrange_enabled false  
FocusMode focus_mode 2 (overrides Control)  
int max_tab_width 0  
bool scroll_to_selected true  
bool scrolling_enabled true  
bool select_with_rmb false  
AlignmentMode tab_alignment 0  
CloseButtonDisplayPolicy tab_close_display_policy 0  
int tab_count 0  
int tabs_rearrange_group -1     Methods  
void add_tab ( String title="", Texture2D icon=null )  
void clear_tabs ( )  
void ensure_tab_visible ( int idx )  
bool get_offset_buttons_visible ( ) const  
int get_previous_tab ( ) const  
Texture2D get_tab_button_icon ( int tab_idx ) const  
Texture2D get_tab_icon ( int tab_idx ) const  
int get_tab_icon_max_width ( int tab_idx ) const  
int get_tab_idx_at_point ( Vector2 point ) const  
String get_tab_language ( int tab_idx ) const  
Variant get_tab_metadata ( int tab_idx ) const  
int get_tab_offset ( ) const  
Rect2 get_tab_rect ( int tab_idx ) const  
TextDirection get_tab_text_direction ( int tab_idx ) const  
String get_tab_title ( int tab_idx ) const  
bool is_tab_disabled ( int tab_idx ) const  
bool is_tab_hidden ( int tab_idx ) const  
void move_tab ( int from, int to )  
void remove_tab ( int tab_idx )  
bool select_next_available ( )  
bool select_previous_available ( )  
void set_tab_button_icon ( int tab_idx, Texture2D icon )  
void set_tab_disabled ( int tab_idx, bool disabled )  
void set_tab_hidden ( int tab_idx, bool hidden )  
void set_tab_icon ( int tab_idx, Texture2D icon )  
void set_tab_icon_max_width ( int tab_idx, int width )  
void set_tab_language ( int tab_idx, String language )  
void set_tab_metadata ( int tab_idx, Variant metadata )  
void set_tab_text_direction ( int tab_idx, TextDirection direction )  
void set_tab_title ( int tab_idx, String title )     Theme Properties  
Color drop_mark_color Color(1, 1, 1, 1)  
Color font_disabled_color Color(0.875, 0.875, 0.875, 0.5)  
Color font_hovered_color Color(0.95, 0.95, 0.95, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
Color font_selected_color Color(0.95, 0.95, 0.95, 1)  
Color font_unselected_color Color(0.7, 0.7, 0.7, 1)  
int h_separation 4  
int icon_max_width 0  
int outline_size 0  
Font font   
int font_size   
Texture2D close   
Texture2D decrement   
Texture2D decrement_highlight   
Texture2D drop_mark   
Texture2D increment   
Texture2D increment_highlight   
StyleBox button_highlight   
StyleBox button_pressed   
StyleBox tab_disabled   
StyleBox tab_focus   
StyleBox tab_hovered   
StyleBox tab_selected   
StyleBox tab_unselected      Signals active_tab_rearranged ( int idx_to ) Emitted when the active tab is rearranged via mouse drag. See drag_to_rearrange_enabled. tab_button_pressed ( int tab ) Emitted when a tab's right button is pressed. See set_tab_button_icon. tab_changed ( int tab ) Emitted when switching to another tab. tab_clicked ( int tab ) Emitted when a tab is clicked, even if it is the current tab. tab_close_pressed ( int tab ) Emitted when a tab's close button is pressed. Note: Tabs are not removed automatically once the close button is pressed, this behavior needs to be programmed manually. For example:  GDScript$TabBar.tab_close_pressed.connect($TabBar.remove_tab)
 C#GetNode<TabBar>("TabBar").TabClosePressed += GetNode<TabBar>("TabBar").RemoveTab;
  tab_hovered ( int tab ) Emitted when a tab is hovered by the mouse. tab_rmb_clicked ( int tab ) Emitted when a tab is right-clicked. select_with_rmb must be enabled. tab_selected ( int tab ) Emitted when a tab is selected via click, directional input, or script, even if it is the current tab.   Enumerations enum AlignmentMode: 
AlignmentMode ALIGNMENT_LEFT = 0
 Places tabs to the left. 
AlignmentMode ALIGNMENT_CENTER = 1
 Places tabs in the middle. 
AlignmentMode ALIGNMENT_RIGHT = 2
 Places tabs to the right. 
AlignmentMode ALIGNMENT_MAX = 3
 Represents the size of the AlignmentMode enum. enum CloseButtonDisplayPolicy: 
CloseButtonDisplayPolicy CLOSE_BUTTON_SHOW_NEVER = 0
 Never show the close buttons. 
CloseButtonDisplayPolicy CLOSE_BUTTON_SHOW_ACTIVE_ONLY = 1
 Only show the close button on the currently active tab. 
CloseButtonDisplayPolicy CLOSE_BUTTON_SHOW_ALWAYS = 2
 Show the close button on all tabs. 
CloseButtonDisplayPolicy CLOSE_BUTTON_MAX = 3
 Represents the size of the CloseButtonDisplayPolicy enum.   Property Descriptions 
bool clip_tabs = true
  void set_clip_tabs ( bool value )
 
bool get_clip_tabs ( )
  If true, tabs overflowing this node's width will be hidden, displaying two navigation buttons instead. Otherwise, this node's minimum size is updated so that all tabs are visible. 
int current_tab = 0
  void set_current_tab ( int value )
 
int get_current_tab ( )
  Select tab at index tab_idx. 
bool drag_to_rearrange_enabled = false
  void set_drag_to_rearrange_enabled ( bool value )
 
bool get_drag_to_rearrange_enabled ( )
  If true, tabs can be rearranged with mouse drag. 
int max_tab_width = 0
  void set_max_tab_width ( int value )
 
int get_max_tab_width ( )
  Sets the maximum width which all tabs should be limited to. Unlimited if set to 0. 
bool scroll_to_selected = true
  void set_scroll_to_selected ( bool value )
 
bool get_scroll_to_selected ( )
  If true, the tab offset will be changed to keep the currently selected tab visible. 
bool scrolling_enabled = true
  void set_scrolling_enabled ( bool value )
 
bool get_scrolling_enabled ( )
  if true, the mouse's scroll wheel can be used to navigate the scroll view. 
bool select_with_rmb = false
  void set_select_with_rmb ( bool value )
 
bool get_select_with_rmb ( )
  If true, enables selecting a tab with the right mouse button. 
AlignmentMode tab_alignment = 0
  void set_tab_alignment ( AlignmentMode value )
 
AlignmentMode get_tab_alignment ( )
  Sets the position at which tabs will be placed. See AlignmentMode for details. 
CloseButtonDisplayPolicy tab_close_display_policy = 0
  void set_tab_close_display_policy ( CloseButtonDisplayPolicy value )
 
CloseButtonDisplayPolicy get_tab_close_display_policy ( )
  Sets when the close button will appear on the tabs. See CloseButtonDisplayPolicy for details. 
int tab_count = 0
  void set_tab_count ( int value )
 
int get_tab_count ( )
  The number of tabs currently in the bar. 
int tabs_rearrange_group = -1
  void set_tabs_rearrange_group ( int value )
 
int get_tabs_rearrange_group ( )
  TabBars with the same rearrange group ID will allow dragging the tabs between them. Enable drag with drag_to_rearrange_enabled. Setting this to -1 will disable rearranging between TabBars.   Method Descriptions void add_tab ( String title="", Texture2D icon=null ) Adds a new tab. void clear_tabs ( ) Clears all tabs. void ensure_tab_visible ( int idx ) Moves the scroll view to make the tab visible. 
bool get_offset_buttons_visible ( ) const
 Returns true if the offset buttons (the ones that appear when there's not enough space for all tabs) are visible. 
int get_previous_tab ( ) const
 Returns the previously active tab index. 
Texture2D get_tab_button_icon ( int tab_idx ) const
 Returns the icon for the right button of the tab at index tab_idx or null if the right button has no icon. 
Texture2D get_tab_icon ( int tab_idx ) const
 Returns the icon for the tab at index tab_idx or null if the tab has no icon. 
int get_tab_icon_max_width ( int tab_idx ) const
 Returns the maximum allowed width of the icon for the tab at index tab_idx. 
int get_tab_idx_at_point ( Vector2 point ) const
 Returns the index of the tab at local coordinates point. Returns -1 if the point is outside the control boundaries or if there's no tab at the queried position. 
String get_tab_language ( int tab_idx ) const
 Returns tab title language code. 
Variant get_tab_metadata ( int tab_idx ) const
 Returns the metadata value set to the tab at index tab_idx using set_tab_metadata. If no metadata was previously set, returns null by default. 
int get_tab_offset ( ) const
 Returns the number of hidden tabs offsetted to the left. 
Rect2 get_tab_rect ( int tab_idx ) const
 Returns tab Rect2 with local position and size. 
TextDirection get_tab_text_direction ( int tab_idx ) const
 Returns tab title text base writing direction. 
String get_tab_title ( int tab_idx ) const
 Returns the title of the tab at index tab_idx. 
bool is_tab_disabled ( int tab_idx ) const
 Returns true if the tab at index tab_idx is disabled. 
bool is_tab_hidden ( int tab_idx ) const
 Returns true if the tab at index tab_idx is hidden. void move_tab ( int from, int to ) Moves a tab from from to to. void remove_tab ( int tab_idx ) Removes the tab at index tab_idx. 
bool select_next_available ( ) Selects the first available tab with greater index than the currently selected. Returns true if tab selection changed. 
bool select_previous_available ( ) Selects the first available tab with lower index than the currently selected. Returns true if tab selection changed. void set_tab_button_icon ( int tab_idx, Texture2D icon ) Sets an icon for the button of the tab at index tab_idx (located to the right, before the close button), making it visible and clickable (See tab_button_pressed). Giving it a null value will hide the button. void set_tab_disabled ( int tab_idx, bool disabled ) If disabled is true, disables the tab at index tab_idx, making it non-interactable. void set_tab_hidden ( int tab_idx, bool hidden ) If hidden is true, hides the tab at index tab_idx, making it disappear from the tab area. void set_tab_icon ( int tab_idx, Texture2D icon ) Sets an icon for the tab at index tab_idx. void set_tab_icon_max_width ( int tab_idx, int width ) Sets the maximum allowed width of the icon for the tab at index tab_idx. This limit is applied on top of the default size of the icon and on top of icon_max_width. The height is adjusted according to the icon's ratio. void set_tab_language ( int tab_idx, String language ) Sets language code of tab title used for line-breaking and text shaping algorithms, if left empty current locale is used instead. void set_tab_metadata ( int tab_idx, Variant metadata ) Sets the metadata value for the tab at index tab_idx, which can be retrieved later using get_tab_metadata. void set_tab_text_direction ( int tab_idx, TextDirection direction ) Sets tab title base writing direction. void set_tab_title ( int tab_idx, String title ) Sets a title for the tab at index tab_idx.   Theme Property Descriptions 
Color drop_mark_color = Color(1, 1, 1, 1)
 Modulation color for the drop_mark icon. 
Color font_disabled_color = Color(0.875, 0.875, 0.875, 0.5)
 Font color of disabled tabs. 
Color font_hovered_color = Color(0.95, 0.95, 0.95, 1)
 Font color of the currently hovered tab. Does not apply to the selected tab. 
Color font_outline_color = Color(1, 1, 1, 1)
 The tint of text outline of the tab name. 
Color font_selected_color = Color(0.95, 0.95, 0.95, 1)
 Font color of the currently selected tab. 
Color font_unselected_color = Color(0.7, 0.7, 0.7, 1)
 Font color of the other, unselected tabs. 
int h_separation = 4
 The horizontal separation between the elements inside tabs. 
int icon_max_width = 0
 The maximum allowed width of the tab's icon. This limit is applied on top of the default size of the icon, but before the value set with set_tab_icon_max_width. The height is adjusted according to the icon's ratio. 
int outline_size = 0
 The size of the tab text outline. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. 
Font font The font used to draw tab names. 
int font_size Font size of the tab names. 
Texture2D close The icon for the close button (see tab_close_display_policy). 
Texture2D decrement Icon for the left arrow button that appears when there are too many tabs to fit in the container width. When the button is disabled (i.e. the first tab is visible), it appears semi-transparent. 
Texture2D decrement_highlight Icon for the left arrow button that appears when there are too many tabs to fit in the container width. Used when the button is being hovered with the cursor. 
Texture2D drop_mark Icon shown to indicate where a dragged tab is gonna be dropped (see drag_to_rearrange_enabled). 
Texture2D increment Icon for the right arrow button that appears when there are too many tabs to fit in the container width. When the button is disabled (i.e. the last tab is visible) it appears semi-transparent. 
Texture2D increment_highlight Icon for the right arrow button that appears when there are too many tabs to fit in the container width. Used when the button is being hovered with the cursor. 
StyleBox button_highlight Background of the tab and close buttons when they're being hovered with the cursor. 
StyleBox button_pressed Background of the tab and close buttons when it's being pressed. 
StyleBox tab_disabled The style of disabled tabs. 
StyleBox tab_focus StyleBox used when the TabBar is focused. The tab_focus StyleBox is displayed over the base StyleBox of the selected tab, so a partially transparent StyleBox should be used to ensure the base StyleBox remains visible. A StyleBox that represents an outline or an underline works well for this purpose. To disable the focus visual effect, assign a StyleBoxEmpty resource. Note that disabling the focus visual effect will harm keyboard/controller navigation usability, so this is not recommended for accessibility reasons. 
StyleBox tab_hovered The style of the currently hovered tab. Does not apply to the selected tab. Note: This style will be drawn with the same width as tab_unselected at minimum. 
StyleBox tab_selected The style of the currently selected tab. 
StyleBox tab_unselected The style of the other, unselected tabs.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_tabbar.html


classes/class_flowcontainer
-----------------------------------------------------------
FlowContainer Inherits: Container < Control < CanvasItem < Node < Object Inherited By: HFlowContainer, VFlowContainer A container that arranges its child controls horizontally or vertically and wraps them around at the borders.  Description A container that arranges its child controls horizontally or vertically and wraps them around at the borders. This is similar to how text in a book wraps around when no more words can fit on a line.   Tutorials  Using Containers    Properties  
AlignmentMode alignment 0  
bool vertical false     Methods  
int get_line_count ( ) const     Theme Properties  
int h_separation 4  
int v_separation 4     Enumerations enum AlignmentMode: 
AlignmentMode ALIGNMENT_BEGIN = 0
 The child controls will be arranged at the beginning of the container, i.e. top if orientation is vertical, left if orientation is horizontal (right for RTL layout). 
AlignmentMode ALIGNMENT_CENTER = 1
 The child controls will be centered in the container. 
AlignmentMode ALIGNMENT_END = 2
 The child controls will be arranged at the end of the container, i.e. bottom if orientation is vertical, right if orientation is horizontal (left for RTL layout).   Property Descriptions 
AlignmentMode alignment = 0
  void set_alignment ( AlignmentMode value )
 
AlignmentMode get_alignment ( )
  The alignment of the container's children (must be one of ALIGNMENT_BEGIN, ALIGNMENT_CENTER, or ALIGNMENT_END). 
bool vertical = false
  void set_vertical ( bool value )
 
bool is_vertical ( )
  If true, the FlowContainer will arrange its children vertically, rather than horizontally. Can't be changed when using HFlowContainer and VFlowContainer.   Method Descriptions 
int get_line_count ( ) const
 Returns the current line count.   Theme Property Descriptions 
int h_separation = 4
 The horizontal separation of child nodes. 
int v_separation = 4
 The vertical separation of child nodes.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_flowcontainer.html


classes/class_prismmesh
-----------------------------------------------------------
PrismMesh Inherits: PrimitiveMesh < Mesh < Resource < RefCounted < Object Class representing a prism-shaped PrimitiveMesh.  Description Class representing a prism-shaped PrimitiveMesh.   Properties  
float left_to_right 0.5  
Vector3 size Vector3(1, 1, 1)  
int subdivide_depth 0  
int subdivide_height 0  
int subdivide_width 0     Property Descriptions 
float left_to_right = 0.5
  void set_left_to_right ( float value )
 
float get_left_to_right ( )
  Displacement of the upper edge along the X axis. 0.0 positions edge straight above the bottom-left edge. 
Vector3 size = Vector3(1, 1, 1)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  Size of the prism. 
int subdivide_depth = 0
  void set_subdivide_depth ( int value )
 
int get_subdivide_depth ( )
  Number of added edge loops along the Z axis. 
int subdivide_height = 0
  void set_subdivide_height ( int value )
 
int get_subdivide_height ( )
  Number of added edge loops along the Y axis. 
int subdivide_width = 0
  void set_subdivide_width ( int value )
 
int get_subdivide_width ( )
  Number of added edge loops along the X axis.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_prismmesh.html


classes/class_container
-----------------------------------------------------------
Container Inherits: Control < CanvasItem < Node < Object Inherited By: AspectRatioContainer, BoxContainer, CenterContainer, EditorProperty, FlowContainer, GraphElement, GridContainer, MarginContainer, PanelContainer, ScrollContainer, SplitContainer, SubViewportContainer, TabContainer Base class for all GUI containers.  Description Base class for all GUI containers. A Container automatically arranges its child controls in a certain way. This class can be inherited to make custom container types.   Tutorials  Using Containers    Properties  
MouseFilter mouse_filter 1 (overrides Control)     Methods  
PackedInt32Array _get_allowed_size_flags_horizontal ( ) virtual const  
PackedInt32Array _get_allowed_size_flags_vertical ( ) virtual const  
void fit_child_in_rect ( Control child, Rect2 rect )  
void queue_sort ( )     Signals pre_sort_children ( ) Emitted when children are going to be sorted. sort_children ( ) Emitted when sorting the children is needed.   Constants NOTIFICATION_PRE_SORT_CHILDREN = 50
 Notification just before children are going to be sorted, in case there's something to process beforehand. NOTIFICATION_SORT_CHILDREN = 51
 Notification for when sorting the children, it must be obeyed immediately.   Method Descriptions 
PackedInt32Array _get_allowed_size_flags_horizontal ( ) virtual const
 Implement to return a list of allowed horizontal SizeFlags for child nodes. This doesn't technically prevent the usages of any other size flags, if your implementation requires that. This only limits the options available to the user in the Inspector dock. Note: Having no size flags is equal to having Control.SIZE_SHRINK_BEGIN. As such, this value is always implicitly allowed. 
PackedInt32Array _get_allowed_size_flags_vertical ( ) virtual const
 Implement to return a list of allowed vertical SizeFlags for child nodes. This doesn't technically prevent the usages of any other size flags, if your implementation requires that. This only limits the options available to the user in the Inspector dock. Note: Having no size flags is equal to having Control.SIZE_SHRINK_BEGIN. As such, this value is always implicitly allowed. void fit_child_in_rect ( Control child, Rect2 rect ) Fit a child control in a given rect. This is mainly a helper for creating custom container classes. void queue_sort ( ) Queue resort of the contained children. This is called automatically anyway, but can be called upon request.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_container.html


classes/class_editorproperty
-----------------------------------------------------------
EditorProperty Inherits: Container < Control < CanvasItem < Node < Object Custom control for editing properties that can be added to the EditorInspector.  Description A custom control for editing properties that can be added to the EditorInspector. It is added via EditorInspectorPlugin.   Properties  
bool checkable false  
bool checked false  
bool deletable false  
bool draw_warning false  
bool keying false  
String label ""  
bool read_only false     Methods  
void _set_read_only ( bool read_only ) virtual  
void _update_property ( ) virtual  
void add_focusable ( Control control )  
void emit_changed ( StringName property, Variant value, StringName field=&"", bool changing=false )  
Object get_edited_object ( )  
StringName get_edited_property ( ) const  
void set_bottom_editor ( Control editor )  
void update_property ( )     Signals multiple_properties_changed ( PackedStringArray properties, Array value ) Emit it if you want multiple properties modified at the same time. Do not use if added via EditorInspectorPlugin._parse_property. object_id_selected ( StringName property, int id ) Used by sub-inspectors. Emit it if what was selected was an Object ID. property_can_revert_changed ( StringName property, bool can_revert ) Emitted when the revertability (i.e., whether it has a non-default value and thus is displayed with a revert icon) of a property has changed. property_changed ( StringName property, Variant value, StringName field, bool changing ) Do not emit this manually, use the emit_changed method instead. property_checked ( StringName property, bool checked ) Emitted when a property was checked. Used internally. property_deleted ( StringName property ) Emitted when a property was deleted. Used internally. property_keyed ( StringName property ) Emit it if you want to add this value as an animation key (check for keying being enabled first). property_keyed_with_value ( StringName property, Variant value ) Emit it if you want to key a property with a single value. property_pinned ( StringName property, bool pinned ) Emit it if you want to mark (or unmark) the value of a property for being saved regardless of being equal to the default value. The default value is the one the property will get when the node is just instantiated and can come from an ancestor scene in the inheritance/instantiation chain, a script or a builtin class. resource_selected ( String path, Resource resource ) If you want a sub-resource to be edited, emit this signal with the resource. selected ( String path, int focusable_idx ) Emitted when selected. Used internally.   Property Descriptions 
bool checkable = false
  void set_checkable ( bool value )
 
bool is_checkable ( )
  Used by the inspector, set to true when the property is checkable. 
bool checked = false
  void set_checked ( bool value )
 
bool is_checked ( )
  Used by the inspector, set to true when the property is checked. 
bool deletable = false
  void set_deletable ( bool value )
 
bool is_deletable ( )
  Used by the inspector, set to true when the property can be deleted by the user. 
bool draw_warning = false
  void set_draw_warning ( bool value )
 
bool is_draw_warning ( )
  Used by the inspector, set to true when the property is drawn with the editor theme's warning color. This is used for editable children's properties. 
bool keying = false
  void set_keying ( bool value )
 
bool is_keying ( )
  Used by the inspector, set to true when the property can add keys for animation. 
String label = ""
  void set_label ( String value )
 
String get_label ( )
  Set this property to change the label (if you want to show one). 
bool read_only = false
  void set_read_only ( bool value )
 
bool is_read_only ( )
  Used by the inspector, set to true when the property is read-only.   Method Descriptions void _set_read_only ( bool read_only ) virtual
 Called when the read-only status of the property is changed. It may be used to change custom controls into a read-only or modifiable state. void _update_property ( ) virtual
 When this virtual function is called, you must update your editor. void add_focusable ( Control control ) If any of the controls added can gain keyboard focus, add it here. This ensures that focus will be restored if the inspector is refreshed. void emit_changed ( StringName property, Variant value, StringName field=&"", bool changing=false ) If one or several properties have changed, this must be called. field is used in case your editor can modify fields separately (as an example, Vector3.x). The changing argument avoids the editor requesting this property to be refreshed (leave as false if unsure). 
Object get_edited_object ( ) Gets the edited object. 
StringName get_edited_property ( ) const
 Gets the edited property. If your editor is for a single property (added via EditorInspectorPlugin._parse_property), then this will return the property. void set_bottom_editor ( Control editor ) Puts the editor control below the property label. The control must be previously added using Node.add_child. void update_property ( ) Forces refresh of the property display.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editorproperty.html


classes/class_visibleonscreennotifier3d
-----------------------------------------------------------
VisibleOnScreenNotifier3D Inherits: VisualInstance3D < Node3D < Node < Object Inherited By: VisibleOnScreenEnabler3D A box-shaped region of 3D space that detects whether it is visible on screen.  Description VisibleOnScreenEnabler3D represents a box-shaped region of 3D space. When any part of this region becomes visible on screen or in a Camera3D's view, it will emit a screen_entered signal, and likewise it will emit a screen_exited signal when no part of it remains visible. If you want a node to be enabled automatically when this region is visible on screen, use VisibleOnScreenEnabler3D. Note: VisibleOnScreenNotifier3D uses an approximate heuristic that doesn't take walls and other occlusion into account, unless occlusion culling is used. It also won't function unless Node3D.visible is set to true.   Properties  
AABB aabb AABB(-1, -1, -1, 2, 2, 2)     Methods  
bool is_on_screen ( ) const     Signals screen_entered ( ) Emitted when the VisibleOnScreenNotifier3D enters the screen. screen_exited ( ) Emitted when the VisibleOnScreenNotifier3D exits the screen.   Property Descriptions 
AABB aabb = AABB(-1, -1, -1, 2, 2, 2)
  void set_aabb ( AABB value )
 
AABB get_aabb ( )
  The VisibleOnScreenNotifier3D's bounding box.   Method Descriptions 
bool is_on_screen ( ) const
 Returns true if the bounding box is on the screen. Note: It takes one frame for the VisibleOnScreenNotifier3D's visibility to be assessed once added to the scene tree, so this method will always return false right after it is instantiated.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visibleonscreennotifier3d.html


classes/class_gltftexture
-----------------------------------------------------------
GLTFTexture Inherits: Resource < RefCounted < Object  There is currently no description for this class. Please help us by contributing one!   Tutorials  Runtime file loading and saving    Properties  
int sampler -1  
int src_image -1     Property Descriptions 
int sampler = -1
  void set_sampler ( int value )
 
int get_sampler ( )
  ID of the texture sampler to use when sampling the image. If -1, then the default texture sampler is used (linear filtering, and repeat wrapping in both axes). 
int src_image = -1
  void set_src_image ( int value )
 
int get_src_image ( )
  The index of the image associated with this texture, see GLTFState.get_images. If -1, then this texture does not have an image assigned.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltftexture.html


classes/class_visualshadernodecolorconstant
-----------------------------------------------------------
VisualShaderNodeColorConstant Inherits: VisualShaderNodeConstant < VisualShaderNode < Resource < RefCounted < Object A Color constant to be used within the visual shader graph.  Description Has two output ports representing RGB and alpha channels of Color. Translated to vec3 rgb and float alpha in the shader language.   Properties  
Color constant Color(1, 1, 1, 1)     Property Descriptions 
Color constant = Color(1, 1, 1, 1)
  void set_constant ( Color value )
 
Color get_constant ( )
  A Color constant which represents a state of this node.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualshadernodecolorconstant.html


classes/class_vscrollbar
-----------------------------------------------------------
VScrollBar Inherits: ScrollBar < Range < Control < CanvasItem < Node < Object A vertical scrollbar that goes from top (min) to bottom (max).  Description A vertical scrollbar, typically used to navigate through content that extends beyond the visible height of a control. It is a Range-based control and goes from top (min) to bottom (max). Note that this direction is the opposite of VSlider's.   Properties  
BitField<SizeFlags> size_flags_horizontal 0 (overrides Control)  
BitField<SizeFlags> size_flags_vertical 1 (overrides Control)    
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_vscrollbar.html


classes/class_audiostreampolyphonic
-----------------------------------------------------------
AudioStreamPolyphonic Inherits: AudioStream < Resource < RefCounted < Object AudioStream that lets the user play custom streams at any time from code, simultaneously using a single player.  Description AudioStream that lets the user play custom streams at any time from code, simultaneously using a single player. Playback control is done via the AudioStreamPlaybackPolyphonic instance set inside the player, which can be obtained via AudioStreamPlayer.get_stream_playback, AudioStreamPlayer2D.get_stream_playback or AudioStreamPlayer3D.get_stream_playback methods. Obtaining the playback instance is only valid after the stream property is set as an AudioStreamPolyphonic in those players.   Properties  
int polyphony 32     Property Descriptions 
int polyphony = 32
  void set_polyphony ( int value )
 
int get_polyphony ( )
  Maximum amount of simultaneous streams that can be played.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiostreampolyphonic.html


classes/class_gltfcamera
-----------------------------------------------------------
GLTFCamera Inherits: Resource < RefCounted < Object Represents a GLTF camera.  Description Represents a camera as defined by the base GLTF spec.   Tutorials  Runtime file loading and saving GLTF camera detailed specification GLTF camera spec and example file    Properties  
float depth_far 4000.0  
float depth_near 0.05  
float fov 1.309  
bool perspective true  
float size_mag 0.5     Methods  
GLTFCamera from_dictionary ( Dictionary dictionary ) static  
GLTFCamera from_node ( Camera3D camera_node ) static  
Dictionary to_dictionary ( ) const  
Camera3D to_node ( ) const     Property Descriptions 
float depth_far = 4000.0
  void set_depth_far ( float value )
 
float get_depth_far ( )
  The distance to the far culling boundary for this camera relative to its local Z axis, in meters. This maps to GLTF's zfar property. 
float depth_near = 0.05
  void set_depth_near ( float value )
 
float get_depth_near ( )
  The distance to the near culling boundary for this camera relative to its local Z axis, in meters. This maps to GLTF's znear property. 
float fov = 1.309
  void set_fov ( float value )
 
float get_fov ( )
  The FOV of the camera. This class and GLTF define the camera FOV in radians, while Godot uses degrees. This maps to GLTF's yfov property. This value is only used for perspective cameras, when perspective is true. 
bool perspective = true
  void set_perspective ( bool value )
 
bool get_perspective ( )
  Whether or not the camera is in perspective mode. If false, the camera is in orthographic/orthogonal mode. This maps to GLTF's camera type property. See Camera3D.projection and the GLTF spec for more information. 
float size_mag = 0.5
  void set_size_mag ( float value )
 
float get_size_mag ( )
  The size of the camera. This class and GLTF define the camera size magnitude as a radius in meters, while Godot defines it as a diameter in meters. This maps to GLTF's ymag property. This value is only used for orthographic/orthogonal cameras, when perspective is false.   Method Descriptions 
GLTFCamera from_dictionary ( Dictionary dictionary ) static
 Creates a new GLTFCamera instance by parsing the given Dictionary. 
GLTFCamera from_node ( Camera3D camera_node ) static
 Create a new GLTFCamera instance from the given Godot Camera3D node. 
Dictionary to_dictionary ( ) const
 Serializes this GLTFCamera instance into a Dictionary. 
Camera3D to_node ( ) const
 Converts this GLTFCamera instance into a Godot Camera3D node.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfcamera.html


classes/class_scriptcreatedialog
-----------------------------------------------------------
ScriptCreateDialog Inherits: ConfirmationDialog < AcceptDialog < Window < Viewport < Node < Object Godot editor's popup dialog for creating new Script files.  Description The ScriptCreateDialog creates script files according to a given template for a given scripting language. The standard use is to configure its fields prior to calling one of the Window.popup methods.  GDScriptfunc _ready():
    var dialog = ScriptCreateDialog.new();
    dialog.config("Node", "res://new_node.gd") # For in-engine types.
    dialog.config("\"res://base_node.gd\"", "res://derived_node.gd") # For script types.
    dialog.popup_centered()
 C#public override void _Ready()
{
    var dialog = new ScriptCreateDialog();
    dialog.Config("Node", "res://NewNode.cs"); // For in-engine types.
    dialog.Config("\"res://BaseNode.cs\"", "res://DerivedNode.cs"); // For script types.
    dialog.PopupCentered();
}
    Properties  
bool dialog_hide_on_ok false (overrides AcceptDialog)  
String ok_button_text "Create" (overrides AcceptDialog)  
String title "Attach Node Script" (overrides Window)     Methods  
void config ( String inherits, String path, bool built_in_enabled=true, bool load_enabled=true )     Signals script_created ( Script script ) Emitted when the user clicks the OK button.   Method Descriptions void config ( String inherits, String path, bool built_in_enabled=true, bool load_enabled=true ) Prefills required fields to configure the ScriptCreateDialog for use.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_scriptcreatedialog.html


classes/class_animationnodeblendtree
-----------------------------------------------------------
AnimationNodeBlendTree Inherits: AnimationRootNode < AnimationNode < Resource < RefCounted < Object A sub-tree of many type AnimationNodes used for complex animations. Used by AnimationTree.  Description This animation node may contain a sub-tree of any other type animation nodes, such as AnimationNodeTransition, AnimationNodeBlend2, AnimationNodeBlend3, AnimationNodeOneShot, etc. This is one of the most commonly used animation node roots. An AnimationNodeOutput node named output is created by default.   Tutorials  Using AnimationTree    Properties  
Vector2 graph_offset Vector2(0, 0)     Methods  
void add_node ( StringName name, AnimationNode node, Vector2 position=Vector2(0, 0) )  
void connect_node ( StringName input_node, int input_index, StringName output_node )  
void disconnect_node ( StringName input_node, int input_index )  
AnimationNode get_node ( StringName name ) const  
Vector2 get_node_position ( StringName name ) const  
bool has_node ( StringName name ) const  
void remove_node ( StringName name )  
void rename_node ( StringName name, StringName new_name )  
void set_node_position ( StringName name, Vector2 position )     Signals node_changed ( StringName node_name ) Emitted when the input port information is changed.   Constants CONNECTION_OK = 0
 The connection was successful. CONNECTION_ERROR_NO_INPUT = 1
 The input node is null. CONNECTION_ERROR_NO_INPUT_INDEX = 2
 The specified input port is out of range. CONNECTION_ERROR_NO_OUTPUT = 3
 The output node is null. CONNECTION_ERROR_SAME_NODE = 4
 Input and output nodes are the same. CONNECTION_ERROR_CONNECTION_EXISTS = 5
 The specified connection already exists.   Property Descriptions 
Vector2 graph_offset = Vector2(0, 0)
  void set_graph_offset ( Vector2 value )
 
Vector2 get_graph_offset ( )
  The global offset of all sub animation nodes.   Method Descriptions void add_node ( StringName name, AnimationNode node, Vector2 position=Vector2(0, 0) ) Adds an AnimationNode at the given position. The name is used to identify the created sub animation node later. void connect_node ( StringName input_node, int input_index, StringName output_node ) Connects the output of an AnimationNode as input for another AnimationNode, at the input port specified by input_index. void disconnect_node ( StringName input_node, int input_index ) Disconnects the animation node connected to the specified input. 
AnimationNode get_node ( StringName name ) const
 Returns the sub animation node with the specified name. 
Vector2 get_node_position ( StringName name ) const
 Returns the position of the sub animation node with the specified name. 
bool has_node ( StringName name ) const
 Returns true if a sub animation node with specified name exists. void remove_node ( StringName name ) Removes a sub animation node. void rename_node ( StringName name, StringName new_name ) Changes the name of a sub animation node. void set_node_position ( StringName name, Vector2 position ) Modifies the position of a sub animation node.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodeblendtree.html


classes/class_inputeventscreentouch
-----------------------------------------------------------
InputEventScreenTouch Inherits: InputEventFromWindow < InputEvent < Resource < RefCounted < Object Represents a screen touch event.  Description Stores information about multi-touch press/release input events. Supports touch press, touch release and index for multi-touch count and order.   Tutorials  Using InputEvent    Properties  
bool canceled false  
bool double_tap false  
int index 0  
Vector2 position Vector2(0, 0)  
bool pressed false     Property Descriptions 
bool canceled = false
  void set_canceled ( bool value )
 
bool is_canceled ( )
  If true, the touch event has been canceled. 
bool double_tap = false
  void set_double_tap ( bool value )
 
bool is_double_tap ( )
  If true, the touch's state is a double tap. 
int index = 0
  void set_index ( int value )
 
int get_index ( )
  The touch index in the case of a multi-touch event. One index = one finger. 
Vector2 position = Vector2(0, 0)
  void set_position ( Vector2 value )
 
Vector2 get_position ( )
  The touch position in the viewport the node is in, using the coordinate system of this viewport. 
bool pressed = false
  void set_pressed ( bool value )
 
bool is_pressed ( )
  If true, the touch's state is pressed. If false, the touch's state is released.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventscreentouch.html


classes/class_xrorigin3d
-----------------------------------------------------------
XROrigin3D Inherits: Node3D < Node < Object The origin point in AR/VR.  Description This is a special node within the AR/VR system that maps the physical location of the center of our tracking space to the virtual location within our game world. Multiple origin points can be added to the scene tree, but only one can used at a time. All the XRCamera3D, XRController3D, and XRAnchor3D nodes should be direct children of this node for spatial tracking to work correctly. It is the position of this node that you update when your character needs to move through your game world while we're not moving in the real world. Movement in the real world is always in relation to this origin point. For example, if your character is driving a car, the XROrigin3D node should be a child node of this car. Or, if you're implementing a teleport system to move your character, you should change the position of this node.   Tutorials  XR documentation index    Properties  
bool current false  
float world_scale 1.0     Property Descriptions 
bool current = false
  void set_current ( bool value )
 
bool is_current ( )
  If true, this origin node is currently being used by the XRServer. Only one origin point can be used at a time. 
float world_scale = 1.0
  void set_world_scale ( float value )
 
float get_world_scale ( )
  The scale of the game world compared to the real world. This is the same as XRServer.world_scale. By default, most AR/VR platforms assume that 1 game unit corresponds to 1 real world meter.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_xrorigin3d.html


classes/class_audioeffectrecord
-----------------------------------------------------------
AudioEffectRecord Inherits: AudioEffect < Resource < RefCounted < Object Audio effect used for recording the sound from an audio bus.  Description Allows the user to record the sound from an audio bus. This can include all audio output by Godot when used on the "Master" audio bus. Can be used (with an AudioStreamMicrophone) to record from a microphone. It sets and gets the format in which the audio file will be recorded (8-bit, 16-bit, or compressed). It checks whether or not the recording is active, and if it is, records the sound. It then returns the recorded sample.   Tutorials  Recording with microphone Audio Mic Record Demo    Properties  
Format format 1     Methods  
AudioStreamWAV get_recording ( ) const  
bool is_recording_active ( ) const  
void set_recording_active ( bool record )     Property Descriptions 
Format format = 1
  void set_format ( Format value )
 
Format get_format ( )
  Specifies the format in which the sample will be recorded. See Format for available formats.   Method Descriptions 
AudioStreamWAV get_recording ( ) const
 Returns the recorded sample. 
bool is_recording_active ( ) const
 Returns whether the recording is active or not. void set_recording_active ( bool record ) If true, the sound will be recorded. Note that restarting the recording will remove the previously recorded sample.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectrecord.html


classes/class_audioeffecthighpassfilter
-----------------------------------------------------------
AudioEffectHighPassFilter Inherits: AudioEffectFilter < AudioEffect < Resource < RefCounted < Object Adds a high-pass filter to the audio bus.  Description Cuts frequencies lower than the AudioEffectFilter.cutoff_hz and allows higher frequencies to pass.   Tutorials  Audio buses   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffecthighpassfilter.html


classes/class_skeletonprofilehumanoid
-----------------------------------------------------------
SkeletonProfileHumanoid Inherits: SkeletonProfile < Resource < RefCounted < Object A humanoid SkeletonProfile preset.  Description A SkeletonProfile as a preset that is optimized for the human form. This exists for standardization, so all parameters are read-only.   Tutorials  Retargeting 3D Skeletons    Properties  
int bone_size 56 (overrides SkeletonProfile)  
int group_size 4 (overrides SkeletonProfile)  
StringName root_bone &"Root" (overrides SkeletonProfile)  
StringName scale_base_bone &"Hips" (overrides SkeletonProfile)    
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeletonprofilehumanoid.html


classes/class_physicsmaterial
-----------------------------------------------------------
PhysicsMaterial Inherits: Resource < RefCounted < Object Holds physics-related properties of a surface, namely its roughness and bounciness.  Description Holds physics-related properties of a surface, namely its roughness and bounciness. This class is used to apply these properties to a physics body.   Properties  
bool absorbent false  
float bounce 0.0  
float friction 1.0  
bool rough false     Property Descriptions 
bool absorbent = false
  void set_absorbent ( bool value )
 
bool is_absorbent ( )
  If true, subtracts the bounciness from the colliding object's bounciness instead of adding it. 
float bounce = 0.0
  void set_bounce ( float value )
 
float get_bounce ( )
  The body's bounciness. Values range from 0 (no bounce) to 1 (full bounciness). Note: Even with bounce set to 1.0, some energy will be lost over time due to linear and angular damping. To have a PhysicsBody3D that preserves all its energy over time, set bounce to 1.0, the body's linear damp mode to Replace (if applicable), its linear damp to 0.0, its angular damp mode to Replace (if applicable), and its angular damp to 0.0. 
float friction = 1.0
  void set_friction ( float value )
 
float get_friction ( )
  The body's friction. Values range from 0 (frictionless) to 1 (maximum friction). 
bool rough = false
  void set_rough ( bool value )
 
bool is_rough ( )
  If true, the physics engine will use the friction of the object marked as "rough" when two objects collide. If false, the physics engine will use the lowest friction of all colliding objects instead. If true for both colliding objects, the physics engine will use the highest friction.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_physicsmaterial.html


classes/class_styleboxempty
-----------------------------------------------------------
StyleBoxEmpty Inherits: StyleBox < Resource < RefCounted < Object An empty StyleBox (does not display anything).  Description An empty StyleBox that can be used to display nothing instead of the default style (e.g. it can "disable" focus styles).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_styleboxempty.html


classes/class_popuppanel
-----------------------------------------------------------
PopupPanel Inherits: Popup < Window < Viewport < Node < Object A popup with a panel background.  Description A popup with a configurable panel background. Any child controls added to this node will be stretched to fit the panel's size (similar to how PanelContainer works). If you are making windows, see Window.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_popuppanel.html


classes/class_audioeffect
-----------------------------------------------------------
AudioEffect Inherits: Resource < RefCounted < Object Inherited By: AudioEffectAmplify, AudioEffectCapture, AudioEffectChorus, AudioEffectCompressor, AudioEffectDelay, AudioEffectDistortion, AudioEffectEQ, AudioEffectFilter, AudioEffectLimiter, AudioEffectPanner, AudioEffectPhaser, AudioEffectPitchShift, AudioEffectRecord, AudioEffectReverb, AudioEffectSpectrumAnalyzer, AudioEffectStereoEnhance Audio effect for audio.  Description Base resource for audio bus. Applies an audio effect on the bus that the resource is applied on.   Tutorials  Audio Mic Record Demo    Methods  
AudioEffectInstance _instantiate ( ) virtual     Method Descriptions 
AudioEffectInstance _instantiate ( ) virtual
  There is currently no description for this method. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffect.html


classes/class_primitivemesh
-----------------------------------------------------------
PrimitiveMesh Inherits: Mesh < Resource < RefCounted < Object Inherited By: BoxMesh, CapsuleMesh, CylinderMesh, PlaneMesh, PointMesh, PrismMesh, RibbonTrailMesh, SphereMesh, TextMesh, TorusMesh, TubeTrailMesh Base class for all primitive meshes. Handles applying a Material to a primitive mesh.  Description Base class for all primitive meshes. Handles applying a Material to a primitive mesh. Examples include BoxMesh, CapsuleMesh, CylinderMesh, PlaneMesh, PrismMesh, and SphereMesh.   Properties  
bool add_uv2 false  
AABB custom_aabb AABB(0, 0, 0, 0, 0, 0)  
bool flip_faces false  
Material material   
float uv2_padding 2.0     Methods  
Array _create_mesh_array ( ) virtual const  
Array get_mesh_arrays ( ) const     Property Descriptions 
bool add_uv2 = false
  void set_add_uv2 ( bool value )
 
bool get_add_uv2 ( )
  If set, generates UV2 UV coordinates applying a padding using the uv2_padding setting. UV2 is needed for lightmapping. 
AABB custom_aabb = AABB(0, 0, 0, 0, 0, 0)
  void set_custom_aabb ( AABB value )
 
AABB get_custom_aabb ( )
  Overrides the AABB with one defined by user for use with frustum culling. Especially useful to avoid unexpected culling when using a shader to offset vertices. 
bool flip_faces = false
  void set_flip_faces ( bool value )
 
bool get_flip_faces ( )
  If set, the order of the vertices in each triangle are reversed resulting in the backside of the mesh being drawn. This gives the same result as using BaseMaterial3D.CULL_FRONT in BaseMaterial3D.cull_mode. 
Material material  void set_material ( Material value )
 
Material get_material ( )
  The current Material of the primitive mesh. 
float uv2_padding = 2.0
  void set_uv2_padding ( float value )
 
float get_uv2_padding ( )
  If add_uv2 is set, specifies the padding in pixels applied along seams of the mesh. Lower padding values allow making better use of the lightmap texture (resulting in higher texel density), but may introduce visible lightmap bleeding along edges. If the size of the lightmap texture can't be determined when generating the mesh, UV2 is calculated assuming a texture size of 1024x1024.   Method Descriptions 
Array _create_mesh_array ( ) virtual const
 Override this method to customize how this primitive mesh should be generated. Should return an Array where each element is another Array of values required for the mesh (see the ArrayType constants). 
Array get_mesh_arrays ( ) const
 Returns mesh arrays used to constitute surface of Mesh. The result can be passed to ArrayMesh.add_surface_from_arrays to create a new surface. For example:  GDScriptvar c = CylinderMesh.new()
var arr_mesh = ArrayMesh.new()
arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, c.get_mesh_arrays())
 C#var c = new CylinderMesh();
var arrMesh = new ArrayMesh();
arrMesh.AddSurfaceFromArrays(Mesh.PrimitiveType.Triangles, c.GetMeshArrays());
   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_primitivemesh.html


classes/class_inputeventgesture
-----------------------------------------------------------
InputEventGesture Inherits: InputEventWithModifiers < InputEventFromWindow < InputEvent < Resource < RefCounted < Object Inherited By: InputEventMagnifyGesture, InputEventPanGesture Abstract base class for touch gestures.  Description InputEventGestures are sent when a user performs a supported gesture on a touch screen. Gestures can't be emulated using mouse, because they typically require multi-touch.   Tutorials  Using InputEvent    Properties  
Vector2 position Vector2(0, 0)     Property Descriptions 
Vector2 position = Vector2(0, 0)
  void set_position ( Vector2 value )
 
Vector2 get_position ( )
  The local gesture position relative to the Viewport. If used in Control._gui_input, the position is relative to the current Control that received this gesture.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventgesture.html


classes/class_editorfilesystem
-----------------------------------------------------------
EditorFileSystem Inherits: Node < Object Resource filesystem, as the editor sees it.  Description This object holds information of all resources in the filesystem, their types, etc. Note: This class shouldn't be instantiated directly. Instead, access the singleton using EditorInterface.get_resource_filesystem.   Methods  
String get_file_type ( String path ) const  
EditorFileSystemDirectory get_filesystem ( )  
EditorFileSystemDirectory get_filesystem_path ( String path )  
float get_scanning_progress ( ) const  
bool is_scanning ( ) const  
void reimport_files ( PackedStringArray files )  
void scan ( )  
void scan_sources ( )  
void update_file ( String path )     Signals filesystem_changed ( ) Emitted if the filesystem changed. resources_reimported ( PackedStringArray resources ) Emitted if a resource is reimported. resources_reload ( PackedStringArray resources ) Emitted if at least one resource is reloaded when the filesystem is scanned. script_classes_updated ( ) Emitted when the list of global script classes gets updated. sources_changed ( bool exist ) Emitted if the source of any imported file changed.   Method Descriptions 
String get_file_type ( String path ) const
 Returns the resource type of the file, given the full path. This returns a string such as "Resource" or "GDScript", not a file extension such as ".gd". 
EditorFileSystemDirectory get_filesystem ( ) Gets the root directory object. 
EditorFileSystemDirectory get_filesystem_path ( String path ) Returns a view into the filesystem at path. 
float get_scanning_progress ( ) const
 Returns the scan progress for 0 to 1 if the FS is being scanned. 
bool is_scanning ( ) const
 Returns true if the filesystem is being scanned. void reimport_files ( PackedStringArray files ) Reimports a set of files. Call this if these files or their .import files were directly edited by script or an external program. If the file type changed or the file was newly created, use update_file or scan. Note: This function blocks until the import is finished. However, the main loop iteration, including timers and Node._process, will occur during the import process due to progress bar updates. Avoid calls to reimport_files or scan while an import is in progress. void scan ( ) Scan the filesystem for changes. void scan_sources ( ) Check if the source of any imported resource changed. void update_file ( String path ) Add a file in an existing directory, or schedule file information to be updated on editor restart. Can be used to update text files saved by an external program. This will not import the file. To reimport, call reimport_files or scan methods.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editorfilesystem.html


classes/class_texturelayeredrd
-----------------------------------------------------------
TextureLayeredRD Inherits: TextureLayered < Texture < Resource < RefCounted < Object Inherited By: Texture2DArrayRD, TextureCubemapArrayRD, TextureCubemapRD Abstract base class for layered texture RD types.  Description Base class for Texture2DArrayRD, TextureCubemapRD and TextureCubemapArrayRD. Cannot be used directly, but contains all the functions necessary for accessing the derived resource types.   Properties  
RID texture_rd_rid RID()     Property Descriptions 
RID texture_rd_rid = RID()
  void set_texture_rd_rid ( RID value )
 
RID get_texture_rd_rid ( )
  The RID of the texture object created on the RenderingDevice.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texturelayeredrd.html


classes/class_gltfphysicsbody
-----------------------------------------------------------
GLTFPhysicsBody Inherits: Resource < RefCounted < Object Represents a GLTF physics body.  Description Represents a physics body as defined by the OMI_physics_body GLTF extension. This class is an intermediary between the GLTF data and Godot's nodes, and it's abstracted in a way that allows adding support for different GLTF physics extensions in the future.   Tutorials  Runtime file loading and saving OMI_physics_body GLTF extension    Properties  
Vector3 angular_velocity Vector3(0, 0, 0)  
String body_type "static"  
Vector3 center_of_mass Vector3(0, 0, 0)  
Basis inertia_tensor Basis(0, 0, 0, 0, 0, 0, 0, 0, 0)  
Vector3 linear_velocity Vector3(0, 0, 0)  
float mass 1.0     Methods  
GLTFPhysicsBody from_dictionary ( Dictionary dictionary ) static  
GLTFPhysicsBody from_node ( CollisionObject3D body_node ) static  
Dictionary to_dictionary ( ) const  
CollisionObject3D to_node ( ) const     Property Descriptions 
Vector3 angular_velocity = Vector3(0, 0, 0)
  void set_angular_velocity ( Vector3 value )
 
Vector3 get_angular_velocity ( )
  The angular velocity of the physics body, in radians per second. This is only used when the body type is "rigid" or "vehicle". 
String body_type = "static"
  void set_body_type ( String value )
 
String get_body_type ( )
  The type of the body. When importing, this controls what type of CollisionObject3D node Godot should generate. Valid values are "static", "kinematic", "character", "rigid", "vehicle", and "trigger". 
Vector3 center_of_mass = Vector3(0, 0, 0)
  void set_center_of_mass ( Vector3 value )
 
Vector3 get_center_of_mass ( )
  The center of mass of the body, in meters. This is in local space relative to the body. By default, the center of the mass is the body's origin. 
Basis inertia_tensor = Basis(0, 0, 0, 0, 0, 0, 0, 0, 0)
  void set_inertia_tensor ( Basis value )
 
Basis get_inertia_tensor ( )
  The inertia tensor of the physics body, in kilogram meter squared (kgâ‹…mÂ²). This is only used when the body type is "rigid" or "vehicle". When converted to a Godot RigidBody3D node, if this value is zero, then the inertia will be calculated automatically. 
Vector3 linear_velocity = Vector3(0, 0, 0)
  void set_linear_velocity ( Vector3 value )
 
Vector3 get_linear_velocity ( )
  The linear velocity of the physics body, in meters per second. This is only used when the body type is "rigid" or "vehicle". 
float mass = 1.0
  void set_mass ( float value )
 
float get_mass ( )
  The mass of the physics body, in kilograms. This is only used when the body type is "rigid" or "vehicle".   Method Descriptions 
GLTFPhysicsBody from_dictionary ( Dictionary dictionary ) static
 Creates a new GLTFPhysicsBody instance by parsing the given Dictionary. 
GLTFPhysicsBody from_node ( CollisionObject3D body_node ) static
 Create a new GLTFPhysicsBody instance from the given Godot CollisionObject3D node. 
Dictionary to_dictionary ( ) const
 Serializes this GLTFPhysicsBody instance into a Dictionary. 
CollisionObject3D to_node ( ) const
 Converts this GLTFPhysicsBody instance into a Godot CollisionObject3D node.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfphysicsbody.html


classes/class_inputeventmidi
-----------------------------------------------------------
InputEventMIDI Inherits: InputEvent < Resource < RefCounted < Object Represents a MIDI message from a MIDI device, such as a musical keyboard.  Description InputEventMIDI stores information about messages from MIDI (Musical Instrument Digital Interface) devices. These may include musical keyboards, synthesizers, and drum machines. MIDI messages can be received over a 5-pin MIDI connector or over USB. If your device supports both be sure to check the settings in the device to see which output it is using. By default, Godot does not detect MIDI devices. You need to call OS.open_midi_inputs, first. You can check which devices are detected with OS.get_connected_midi_inputs, and close the connection with OS.close_midi_inputs.  GDScriptfunc _ready():
    OS.open_midi_inputs()
    print(OS.get_connected_midi_inputs())
func _input(input_event):
    if input_event is InputEventMIDI:
        _print_midi_info(input_event)
func _print_midi_info(midi_event):
    print(midi_event)
    print("Channel ", midi_event.channel)
    print("Message ", midi_event.message)
    print("Pitch ", midi_event.pitch)
    print("Velocity ", midi_event.velocity)
    print("Instrument ", midi_event.instrument)
    print("Pressure ", midi_event.pressure)
    print("Controller number: ", midi_event.controller_number)
    print("Controller value: ", midi_event.controller_value)
 C#public override void _Ready()
{
    OS.OpenMidiInputs();
    GD.Print(OS.GetConnectedMidiInputs());
}
public override void _Input(InputEvent inputEvent)
{
    if (inputEvent is InputEventMidi midiEvent)
    {
        PrintMIDIInfo(midiEvent);
    }
}
private void PrintMIDIInfo(InputEventMidi midiEvent)
{
    GD.Print(midiEvent);
    GD.Print($"Channel {midiEvent.Channel}");
    GD.Print($"Message {midiEvent.Message}");
    GD.Print($"Pitch {midiEvent.Pitch}");
    GD.Print($"Velocity {midiEvent.Velocity}");
    GD.Print($"Instrument {midiEvent.Instrument}");
    GD.Print($"Pressure {midiEvent.Pressure}");
    GD.Print($"Controller number: {midiEvent.ControllerNumber}");
    GD.Print($"Controller value: {midiEvent.ControllerValue}");
}
  Note: Godot does not support MIDI output, so there is no way to emit MIDI messages from Godot. Only MIDI input is supported.   Tutorials  MIDI Message Status Byte List Wikipedia General MIDI Instrument List Wikipedia Piano Key Frequencies List    Properties  
int channel 0  
int controller_number 0  
int controller_value 0  
int instrument 0  
MIDIMessage message 0  
int pitch 0  
int pressure 0  
int velocity 0     Property Descriptions 
int channel = 0
  void set_channel ( int value )
 
int get_channel ( )
  The MIDI channel of this message, ranging from 0 to 15. MIDI channel 9 is reserved for percussion instruments. 
int controller_number = 0
  void set_controller_number ( int value )
 
int get_controller_number ( )
  The unique number of the controller, if message is @GlobalScope.MIDI_MESSAGE_CONTROL_CHANGE, otherwise this is 0. This value can be used to identify sliders for volume, balance, and panning, as well as switches and pedals on the MIDI device. See the General MIDI specification for a small list. 
int controller_value = 0
  void set_controller_value ( int value )
 
int get_controller_value ( )
  The value applied to the controller. If message is @GlobalScope.MIDI_MESSAGE_CONTROL_CHANGE, this value ranges from 0 to 127, otherwise it is 0. See also controller_value. 
int instrument = 0
  void set_instrument ( int value )
 
int get_instrument ( )
  The instrument (also called program or preset) used on this MIDI message. This value ranges from 0 to 127. To see what each value means, refer to the General MIDI's instrument list. Keep in mind that the list is off by 1 because it does not begin from 0. A value of 0 corresponds to the acoustic grand piano. 
MIDIMessage message = 0
  void set_message ( MIDIMessage value )
 
MIDIMessage get_message ( )
  Represents the type of MIDI message (see the MIDIMessage enum). For more information, see the MIDI message status byte list chart. 
int pitch = 0
  void set_pitch ( int value )
 
int get_pitch ( )
  The pitch index number of this MIDI message. This value ranges from 0 to 127. On a piano, the middle C is 60, followed by a C-sharp (61), then a D (62), and so on. Each octave is split in offsets of 12. See the "MIDI note number" column of the piano key frequency chart a full list. 
int pressure = 0
  void set_pressure ( int value )
 
int get_pressure ( )
  The strength of the key being pressed. This value ranges from 0 to 127. Note: For many devices, this value is always 0. Other devices such as musical keyboards may simulate pressure by changing the velocity, instead. 
int velocity = 0
  void set_velocity ( int value )
 
int get_velocity ( )
  The velocity of the MIDI message. This value ranges from 0 to 127. For a musical keyboard, this corresponds to how quickly the key was pressed, and is rarely above 110 in practice. Note: Some MIDI devices may send a @GlobalScope.MIDI_MESSAGE_NOTE_ON message with 0 velocity and expect it to be treated the same as a @GlobalScope.MIDI_MESSAGE_NOTE_OFF message. If necessary, this can be handled with a few lines of code: func _input(event):
    if event is InputEventMIDI:
        if event.message == MIDI_MESSAGE_NOTE_ON and event.velocity > 0:
            print("Note pressed!")
  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventmidi.html


classes/class_importermesh
-----------------------------------------------------------
ImporterMesh Inherits: Resource < RefCounted < Object A Resource that contains vertex array-based geometry during the import process.  Description ImporterMesh is a type of Resource analogous to ArrayMesh. It contains vertex array-based geometry, divided in surfaces. Each surface contains a completely separate array and a material used to draw it. Design wise, a mesh with multiple surfaces is preferred to a single surface, because objects created in 3D editing software commonly contain multiple materials. Unlike its runtime counterpart, ImporterMesh contains mesh data before various import steps, such as lod and shadow mesh generation, have taken place. Modify surface data by calling clear, followed by add_surface for each surface.   Properties  
Dictionary _data { "surfaces": [] }     Methods  
void add_blend_shape ( String name )  
void add_surface ( PrimitiveType primitive, Array arrays, Array[] blend_shapes=[], Dictionary lods={}, Material material=null, String name="", int flags=0 )  
void clear ( )  
void generate_lods ( float normal_merge_angle, float normal_split_angle, Array bone_transform_array )  
int get_blend_shape_count ( ) const  
BlendShapeMode get_blend_shape_mode ( ) const  
String get_blend_shape_name ( int blend_shape_idx ) const  
Vector2i get_lightmap_size_hint ( ) const  
ArrayMesh get_mesh ( ArrayMesh base_mesh=null )  
Array get_surface_arrays ( int surface_idx ) const  
Array get_surface_blend_shape_arrays ( int surface_idx, int blend_shape_idx ) const  
int get_surface_count ( ) const  
int get_surface_format ( int surface_idx ) const  
int get_surface_lod_count ( int surface_idx ) const  
PackedInt32Array get_surface_lod_indices ( int surface_idx, int lod_idx ) const  
float get_surface_lod_size ( int surface_idx, int lod_idx ) const  
Material get_surface_material ( int surface_idx ) const  
String get_surface_name ( int surface_idx ) const  
PrimitiveType get_surface_primitive_type ( int surface_idx )  
void set_blend_shape_mode ( BlendShapeMode mode )  
void set_lightmap_size_hint ( Vector2i size )  
void set_surface_material ( int surface_idx, Material material )  
void set_surface_name ( int surface_idx, String name )     Property Descriptions 
Dictionary _data = { "surfaces": [] }
  There is currently no description for this property. Please help us by contributing one!    Method Descriptions void add_blend_shape ( String name ) Adds name for a blend shape that will be added with add_surface. Must be called before surface is added. void add_surface ( PrimitiveType primitive, Array arrays, Array[] blend_shapes=[], Dictionary lods={}, Material material=null, String name="", int flags=0 ) Creates a new surface. Mesh.get_surface_count will become the surf_idx for this new surface. Surfaces are created to be rendered using a primitive, which may be any of the values defined in PrimitiveType. The arrays argument is an array of arrays. Each of the Mesh.ARRAY_MAX elements contains an array with some of the mesh data for this surface as described by the corresponding member of ArrayType or null if it is not used by the surface. For example, arrays[0] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this surface into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array (or be an exact multiple of the vertex array's length, when multiple elements of a sub-array correspond to a single vertex) or be empty, except for Mesh.ARRAY_INDEX if it is used. The blend_shapes argument is an array of vertex data for each blend shape. Each element is an array of the same structure as arrays, but Mesh.ARRAY_VERTEX, Mesh.ARRAY_NORMAL, and Mesh.ARRAY_TANGENT are set if and only if they are set in arrays and all other entries are null. The lods argument is a dictionary with float keys and PackedInt32Array values. Each entry in the dictionary represents a LOD level of the surface, where the value is the Mesh.ARRAY_INDEX array to use for the LOD level and the key is roughly proportional to the distance at which the LOD stats being used. I.e., increasing the key of a LOD also increases the distance that the objects has to be from the camera before the LOD is used. The flags argument is the bitwise or of, as required: One value of ArrayCustomFormat left shifted by ARRAY_FORMAT_CUSTOMn_SHIFT for each custom channel in use, Mesh.ARRAY_FLAG_USE_DYNAMIC_UPDATE, Mesh.ARRAY_FLAG_USE_8_BONE_WEIGHTS, or Mesh.ARRAY_FLAG_USES_EMPTY_VERTEX_ARRAY. Note: When using indices, it is recommended to only use points, lines, or triangles. void clear ( ) Removes all surfaces and blend shapes from this ImporterMesh. void generate_lods ( float normal_merge_angle, float normal_split_angle, Array bone_transform_array ) Generates all lods for this ImporterMesh. normal_merge_angle and normal_split_angle are in degrees and used in the same way as the importer settings in lods. As a good default, use 25 and 60 respectively. The number of generated lods can be accessed using get_surface_lod_count, and each LOD is available in get_surface_lod_size and get_surface_lod_indices. bone_transform_array is an Array which can be either empty or contain Transform3Ds which, for each of the mesh's bone IDs, will apply mesh skinning when generating the LOD mesh variations. This is usually used to account for discrepancies in scale between the mesh itself and its skinning data. 
int get_blend_shape_count ( ) const
 Returns the number of blend shapes that the mesh holds. 
BlendShapeMode get_blend_shape_mode ( ) const
 Returns the blend shape mode for this Mesh. 
String get_blend_shape_name ( int blend_shape_idx ) const
 Returns the name of the blend shape at this index. 
Vector2i get_lightmap_size_hint ( ) const
 Returns the size hint of this mesh for lightmap-unwrapping in UV-space. 
ArrayMesh get_mesh ( ArrayMesh base_mesh=null ) Returns the mesh data represented by this ImporterMesh as a usable ArrayMesh. This method caches the returned mesh, and subsequent calls will return the cached data until clear is called. If not yet cached and base_mesh is provided, base_mesh will be used and mutated. 
Array get_surface_arrays ( int surface_idx ) const
 Returns the arrays for the vertices, normals, UVs, etc. that make up the requested surface. See add_surface. 
Array get_surface_blend_shape_arrays ( int surface_idx, int blend_shape_idx ) const
 Returns a single set of blend shape arrays for the requested blend shape index for a surface. 
int get_surface_count ( ) const
 Returns the number of surfaces that the mesh holds. 
int get_surface_format ( int surface_idx ) const
 Returns the format of the surface that the mesh holds. 
int get_surface_lod_count ( int surface_idx ) const
 Returns the number of lods that the mesh holds on a given surface. 
PackedInt32Array get_surface_lod_indices ( int surface_idx, int lod_idx ) const
 Returns the index buffer of a lod for a surface. 
float get_surface_lod_size ( int surface_idx, int lod_idx ) const
 Returns the screen ratio which activates a lod for a surface. 
Material get_surface_material ( int surface_idx ) const
 Returns a Material in a given surface. Surface is rendered using this material. 
String get_surface_name ( int surface_idx ) const
 Gets the name assigned to this surface. 
PrimitiveType get_surface_primitive_type ( int surface_idx ) Returns the primitive type of the requested surface (see add_surface). void set_blend_shape_mode ( BlendShapeMode mode ) Sets the blend shape mode to one of BlendShapeMode. void set_lightmap_size_hint ( Vector2i size ) Sets the size hint of this mesh for lightmap-unwrapping in UV-space. void set_surface_material ( int surface_idx, Material material ) Sets a Material for a given surface. Surface will be rendered using this material. void set_surface_name ( int surface_idx, String name ) Sets a name for a given surface.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_importermesh.html


classes/class_editorinspector
-----------------------------------------------------------
EditorInspector Inherits: ScrollContainer < Container < Control < CanvasItem < Node < Object A control used to edit properties of an object.  Description This is the control that implements property editing in the editor's Settings dialogs, the Inspector dock, etc. To get the EditorInspector used in the editor's Inspector dock, use EditorInterface.get_inspector. EditorInspector will show properties in the same order as the array returned by Object.get_property_list. If a property's name is path-like (i.e. if it contains forward slashes), EditorInspector will create nested sections for "directories" along the path. For example, if a property is named highlighting/gdscript/node_path_color, it will be shown as "Node Path Color" inside the "GDScript" section nested inside the "Highlighting" section. If a property has @GlobalScope.PROPERTY_USAGE_GROUP usage, it will group subsequent properties whose name starts with the property's hint string. The group ends when a property does not start with that hint string or when a new group starts. An empty group name effectively ends the current group. EditorInspector will create a top-level section for each group. For example, if a property with group usage is named Collide With and its hint string is collide_with_, a subsequent collide_with_area property will be shown as "Area" inside the "Collide With" section. There is also a special case: when the hint string contains the name of a property, that property is grouped too. This is mainly to help grouping properties like font, font_color and font_size (using the hint string font_). If a property has @GlobalScope.PROPERTY_USAGE_SUBGROUP usage, a subgroup will be created in the same way as a group, and a second-level section will be created for each subgroup. Note: Unlike sections created from path-like property names, EditorInspector won't capitalize the name for sections created from groups. So properties with group usage usually use capitalized names instead of snake_cased names.   Properties  
ScrollMode horizontal_scroll_mode 0 (overrides ScrollContainer)     Methods  
Object get_edited_object ( )  
String get_selected_path ( ) const     Signals edited_object_changed ( ) Emitted when the object being edited by the inspector has changed. object_id_selected ( int id ) Emitted when the Edit button of an Object has been pressed in the inspector. This is mainly used in the remote scene tree Inspector. property_deleted ( String property ) Emitted when a property is removed from the inspector. property_edited ( String property ) Emitted when a property is edited in the inspector. property_keyed ( String property, Variant value, bool advance ) Emitted when a property is keyed in the inspector. Properties can be keyed by clicking the "key" icon next to a property when the Animation panel is toggled. property_selected ( String property ) Emitted when a property is selected in the inspector. property_toggled ( String property, bool checked ) Emitted when a boolean property is toggled in the inspector. Note: This signal is never emitted if the internal autoclear property enabled. Since this property is always enabled in the editor inspector, this signal is never emitted by the editor itself. resource_selected ( Resource resource, String path ) Emitted when a resource is selected in the inspector. restart_requested ( ) Emitted when a property that requires a restart to be applied is edited in the inspector. This is only used in the Project Settings and Editor Settings.   Method Descriptions 
Object get_edited_object ( ) Returns the object currently selected in this inspector. 
String get_selected_path ( ) const
 Gets the path of the currently selected property.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editorinspector.html


classes/class_editorresourcepicker
-----------------------------------------------------------
EditorResourcePicker Inherits: HBoxContainer < BoxContainer < Container < Control < CanvasItem < Node < Object Inherited By: EditorScriptPicker Godot editor's control for selecting Resource type properties.  Description This Control node is used in the editor's Inspector dock to allow editing of Resource type properties. It provides options for creating, loading, saving and converting resources. Can be used with EditorInspectorPlugin to recreate the same behavior. Note: This Control does not include any editor for the resource, as editing is controlled by the Inspector dock itself or sub-Inspectors.   Properties  
String base_type ""  
bool editable true  
Resource edited_resource   
bool toggle_mode false     Methods  
bool _handle_menu_selected ( int id ) virtual  
void _set_create_options ( Object menu_node ) virtual  
PackedStringArray get_allowed_types ( ) const  
void set_toggle_pressed ( bool pressed )     Signals resource_changed ( Resource resource ) Emitted when the value of the edited resource was changed. resource_selected ( Resource resource, bool inspect ) Emitted when the resource value was set and user clicked to edit it. When inspect is true, the signal was caused by the context menu "Edit" or "Inspect" option.   Property Descriptions 
String base_type = ""
  void set_base_type ( String value )
 
String get_base_type ( )
  The base type of allowed resource types. Can be a comma-separated list of several options. 
bool editable = true
  void set_editable ( bool value )
 
bool is_editable ( )
  If true, the value can be selected and edited. 
Resource edited_resource  void set_edited_resource ( Resource value )
 
Resource get_edited_resource ( )
  The edited resource value. 
bool toggle_mode = false
  void set_toggle_mode ( bool value )
 
bool is_toggle_mode ( )
  If true, the main button with the resource preview works in the toggle mode. Use set_toggle_pressed to manually set the state.   Method Descriptions 
bool _handle_menu_selected ( int id ) virtual
 This virtual method can be implemented to handle context menu items not handled by default. See _set_create_options. void _set_create_options ( Object menu_node ) virtual
 This virtual method is called when updating the context menu of EditorResourcePicker. Implement this method to override the "New ..." items with your own options. menu_node is a reference to the PopupMenu node. Note: Implement _handle_menu_selected to handle these custom items. 
PackedStringArray get_allowed_types ( ) const
 Returns a list of all allowed types and subtypes corresponding to the base_type. If the base_type is empty, an empty list is returned. void set_toggle_pressed ( bool pressed ) Sets the toggle mode state for the main button. Works only if toggle_mode is set to true.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editorresourcepicker.html


classes/class_inputeventwithmodifiers
-----------------------------------------------------------
InputEventWithModifiers Inherits: InputEventFromWindow < InputEvent < Resource < RefCounted < Object Inherited By: InputEventGesture, InputEventKey, InputEventMouse Abstract base class for input events affected by modifier keys like Shift and Alt.  Description Stores information about mouse, keyboard, and touch gesture input events. This includes information about which modifier keys are pressed, such as Shift or Alt. See Node._input.   Tutorials  Using InputEvent    Properties  
bool alt_pressed false  
bool command_or_control_autoremap false  
bool ctrl_pressed false  
bool meta_pressed false  
bool shift_pressed false     Methods  
BitField<KeyModifierMask> get_modifiers_mask ( ) const  
bool is_command_or_control_pressed ( ) const     Property Descriptions 
bool alt_pressed = false
  void set_alt_pressed ( bool value )
 
bool is_alt_pressed ( )
  State of the Alt modifier. 
bool command_or_control_autoremap = false
  void set_command_or_control_autoremap ( bool value )
 
bool is_command_or_control_autoremap ( )
  Automatically use Meta (Cmd) on macOS and Ctrl on other platforms. If true, ctrl_pressed and meta_pressed cannot be set. 
bool ctrl_pressed = false
  void set_ctrl_pressed ( bool value )
 
bool is_ctrl_pressed ( )
  State of the Ctrl modifier. 
bool meta_pressed = false
  void set_meta_pressed ( bool value )
 
bool is_meta_pressed ( )
  State of the Meta modifier. On Windows and Linux, this represents the Windows key (sometimes called "meta" or "super" on Linux). On macOS, this represents the Command key. 
bool shift_pressed = false
  void set_shift_pressed ( bool value )
 
bool is_shift_pressed ( )
  State of the Shift modifier.   Method Descriptions 
BitField<KeyModifierMask> get_modifiers_mask ( ) const
 Returns the keycode combination of modifier keys. 
bool is_command_or_control_pressed ( ) const
 On macOS, returns true if Meta (Cmd) is pressed. On other platforms, returns true if Ctrl is pressed.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventwithmodifiers.html


classes/class_canvasmodulate
-----------------------------------------------------------
CanvasModulate Inherits: Node2D < CanvasItem < Node < Object A node that applies a color tint to a canvas.  Description CanvasModulate applies a color tint to all nodes on a canvas. Only one can be used to tint a canvas, but CanvasLayers can be used to render things independently.   Properties  
Color color Color(1, 1, 1, 1)     Property Descriptions 
Color color = Color(1, 1, 1, 1)
  void set_color ( Color value )
 
Color get_color ( )
  The tint color to apply.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_canvasmodulate.html


classes/class_noisetexture2d
-----------------------------------------------------------
NoiseTexture2D Inherits: Texture2D < Texture < Resource < RefCounted < Object A 2D texture filled with noise generated by a Noise object.  Description Uses the FastNoiseLite library or other noise generators to fill the texture data of your desired size. NoiseTexture2D can also generate normal map textures. The class uses Threads to generate the texture data internally, so Texture2D.get_image may return null if the generation process has not completed yet. In that case, you need to wait for the texture to be generated before accessing the image and the generated byte data: var texture = NoiseTexture2D.new()
texture.noise = FastNoiseLite.new()
await texture.changed
var image = texture.get_image()
var data = image.get_data()
   Properties  
bool as_normal_map false  
float bump_strength 8.0  
Gradient color_ramp   
bool generate_mipmaps true  
int height 512  
bool in_3d_space false  
bool invert false  
Noise noise   
bool normalize true  
bool resource_local_to_scene false (overrides Resource)  
bool seamless false  
float seamless_blend_skirt 0.1  
int width 512     Property Descriptions 
bool as_normal_map = false
  void set_as_normal_map ( bool value )
 
bool is_normal_map ( )
  If true, the resulting texture contains a normal map created from the original noise interpreted as a bump map. 
float bump_strength = 8.0
  void set_bump_strength ( float value )
 
float get_bump_strength ( )
  Strength of the bump maps used in this texture. A higher value will make the bump maps appear larger while a lower value will make them appear softer. 
Gradient color_ramp  void set_color_ramp ( Gradient value )
 
Gradient get_color_ramp ( )
  A Gradient which is used to map the luminance of each pixel to a color value. 
bool generate_mipmaps = true
  void set_generate_mipmaps ( bool value )
 
bool is_generating_mipmaps ( )
  Determines whether mipmaps are generated for this texture. Enabling this results in less texture aliasing in the distance, at the cost of increasing memory usage by roughly 33% and making the noise texture generation take longer. Note: generate_mipmaps requires mipmap filtering to be enabled on the material using the NoiseTexture2D to have an effect. 
int height = 512
  void set_height ( int value )
 
int get_height ( )
  Height of the generated texture (in pixels). 
bool in_3d_space = false
  void set_in_3d_space ( bool value )
 
bool is_in_3d_space ( )
  Determines whether the noise image is calculated in 3D space. May result in reduced contrast. 
bool invert = false
  void set_invert ( bool value )
 
bool get_invert ( )
  If true, inverts the noise texture. White becomes black, black becomes white. 
Noise noise  void set_noise ( Noise value )
 
Noise get_noise ( )
  The instance of the Noise object. 
bool normalize = true
  void set_normalize ( bool value )
 
bool is_normalized ( )
  If true, the noise image coming from the noise generator is normalized to the range 0.0 to 1.0. Turning normalization off can affect the contrast and allows you to generate non repeating tileable noise textures. 
bool seamless = false
  void set_seamless ( bool value )
 
bool get_seamless ( )
  If true, a seamless texture is requested from the Noise resource. Note: Seamless noise textures may take longer to generate and/or can have a lower contrast compared to non-seamless noise depending on the used Noise resource. This is because some implementations use higher dimensions for generating seamless noise. Note: The default FastNoiseLite implementation uses the fallback path for seamless generation. If using a width or height lower than the default, you may need to increase seamless_blend_skirt to make seamless blending more effective. 
float seamless_blend_skirt = 0.1
  void set_seamless_blend_skirt ( float value )
 
float get_seamless_blend_skirt ( )
  Used for the default/fallback implementation of the seamless texture generation. It determines the distance over which the seams are blended. High values may result in less details and contrast. See Noise for further details. Note: If using a width or height lower than the default, you may need to increase seamless_blend_skirt to make seamless blending more effective. 
int width = 512
  void set_width ( int value )
 
int get_width ( )
  Width of the generated texture (in pixels).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_noisetexture2d.html


classes/class_basematerial3d
-----------------------------------------------------------
BaseMaterial3D Inherits: Material < Resource < RefCounted < Object Inherited By: ORMMaterial3D, StandardMaterial3D Abstract base class for defining the 3D rendering properties of meshes.  Description This class serves as a default material with a wide variety of rendering features and properties without the need to write shader code. See the tutorial below for details.   Tutorials  Standard Material 3D and ORM Material 3D    Properties  
Color albedo_color Color(1, 1, 1, 1)  
Texture2D albedo_texture   
bool albedo_texture_force_srgb false  
bool albedo_texture_msdf false  
float alpha_antialiasing_edge   
AlphaAntiAliasing alpha_antialiasing_mode   
float alpha_hash_scale   
float alpha_scissor_threshold   
float anisotropy 0.0  
bool anisotropy_enabled false  
Texture2D anisotropy_flowmap   
bool ao_enabled false  
float ao_light_affect 0.0  
bool ao_on_uv2 false  
Texture2D ao_texture   
TextureChannel ao_texture_channel 0  
Color backlight Color(0, 0, 0, 1)  
bool backlight_enabled false  
Texture2D backlight_texture   
bool billboard_keep_scale false  
BillboardMode billboard_mode 0  
BlendMode blend_mode 0  
float clearcoat 1.0  
bool clearcoat_enabled false  
float clearcoat_roughness 0.5  
Texture2D clearcoat_texture   
CullMode cull_mode 0  
DepthDrawMode depth_draw_mode 0  
Texture2D detail_albedo   
BlendMode detail_blend_mode 0  
bool detail_enabled false  
Texture2D detail_mask   
Texture2D detail_normal   
DetailUV detail_uv_layer 0  
DiffuseMode diffuse_mode 0  
bool disable_ambient_light false  
bool disable_fog false  
bool disable_receive_shadows false  
float distance_fade_max_distance 10.0  
float distance_fade_min_distance 0.0  
DistanceFadeMode distance_fade_mode 0  
Color emission Color(0, 0, 0, 1)  
bool emission_enabled false  
float emission_energy_multiplier 1.0  
float emission_intensity   
bool emission_on_uv2 false  
EmissionOperator emission_operator 0  
Texture2D emission_texture   
bool fixed_size false  
bool grow false  
float grow_amount 0.0  
bool heightmap_deep_parallax false  
bool heightmap_enabled false  
bool heightmap_flip_binormal false  
bool heightmap_flip_tangent false  
bool heightmap_flip_texture false  
int heightmap_max_layers   
int heightmap_min_layers   
float heightmap_scale 5.0  
Texture2D heightmap_texture   
float metallic 0.0  
float metallic_specular 0.5  
Texture2D metallic_texture   
TextureChannel metallic_texture_channel 0  
float msdf_outline_size 0.0  
float msdf_pixel_range 4.0  
bool no_depth_test false  
bool normal_enabled false  
float normal_scale 1.0  
Texture2D normal_texture   
Texture2D orm_texture   
int particles_anim_h_frames   
bool particles_anim_loop   
int particles_anim_v_frames   
float point_size 1.0  
float proximity_fade_distance 1.0  
bool proximity_fade_enabled false  
bool refraction_enabled false  
float refraction_scale 0.05  
Texture2D refraction_texture   
TextureChannel refraction_texture_channel 0  
float rim 1.0  
bool rim_enabled false  
Texture2D rim_texture   
float rim_tint 0.5  
float roughness 1.0  
Texture2D roughness_texture   
TextureChannel roughness_texture_channel 0  
ShadingMode shading_mode 1  
bool shadow_to_opacity false  
SpecularMode specular_mode 0  
bool subsurf_scatter_enabled false  
bool subsurf_scatter_skin_mode false  
float subsurf_scatter_strength 0.0  
Texture2D subsurf_scatter_texture   
float subsurf_scatter_transmittance_boost 0.0  
Color subsurf_scatter_transmittance_color Color(1, 1, 1, 1)  
float subsurf_scatter_transmittance_depth 0.1  
bool subsurf_scatter_transmittance_enabled false  
Texture2D subsurf_scatter_transmittance_texture   
TextureFilter texture_filter 3  
bool texture_repeat true  
Transparency transparency 0  
bool use_particle_trails false  
bool use_point_size false  
Vector3 uv1_offset Vector3(0, 0, 0)  
Vector3 uv1_scale Vector3(1, 1, 1)  
bool uv1_triplanar false  
float uv1_triplanar_sharpness 1.0  
bool uv1_world_triplanar false  
Vector3 uv2_offset Vector3(0, 0, 0)  
Vector3 uv2_scale Vector3(1, 1, 1)  
bool uv2_triplanar false  
float uv2_triplanar_sharpness 1.0  
bool uv2_world_triplanar false  
bool vertex_color_is_srgb false  
bool vertex_color_use_as_albedo false     Methods  
bool get_feature ( Feature feature ) const  
bool get_flag ( Flags flag ) const  
Texture2D get_texture ( TextureParam param ) const  
void set_feature ( Feature feature, bool enable )  
void set_flag ( Flags flag, bool enable )  
void set_texture ( TextureParam param, Texture2D texture )     Enumerations enum TextureParam: 
TextureParam TEXTURE_ALBEDO = 0
 Texture specifying per-pixel color. 
TextureParam TEXTURE_METALLIC = 1
 Texture specifying per-pixel metallic value. 
TextureParam TEXTURE_ROUGHNESS = 2
 Texture specifying per-pixel roughness value. 
TextureParam TEXTURE_EMISSION = 3
 Texture specifying per-pixel emission color. 
TextureParam TEXTURE_NORMAL = 4
 Texture specifying per-pixel normal vector. 
TextureParam TEXTURE_RIM = 5
 Texture specifying per-pixel rim value. 
TextureParam TEXTURE_CLEARCOAT = 6
 Texture specifying per-pixel clearcoat value. 
TextureParam TEXTURE_FLOWMAP = 7
 Texture specifying per-pixel flowmap direction for use with anisotropy. 
TextureParam TEXTURE_AMBIENT_OCCLUSION = 8
 Texture specifying per-pixel ambient occlusion value. 
TextureParam TEXTURE_HEIGHTMAP = 9
 Texture specifying per-pixel height. 
TextureParam TEXTURE_SUBSURFACE_SCATTERING = 10
 Texture specifying per-pixel subsurface scattering. 
TextureParam TEXTURE_SUBSURFACE_TRANSMITTANCE = 11
 Texture specifying per-pixel transmittance for subsurface scattering. 
TextureParam TEXTURE_BACKLIGHT = 12
 Texture specifying per-pixel backlight color. 
TextureParam TEXTURE_REFRACTION = 13
 Texture specifying per-pixel refraction strength. 
TextureParam TEXTURE_DETAIL_MASK = 14
 Texture specifying per-pixel detail mask blending value. 
TextureParam TEXTURE_DETAIL_ALBEDO = 15
 Texture specifying per-pixel detail color. 
TextureParam TEXTURE_DETAIL_NORMAL = 16
 Texture specifying per-pixel detail normal. 
TextureParam TEXTURE_ORM = 17
 Texture holding ambient occlusion, roughness, and metallic. 
TextureParam TEXTURE_MAX = 18
 Represents the size of the TextureParam enum. enum TextureFilter: 
TextureFilter TEXTURE_FILTER_NEAREST = 0
 The texture filter reads from the nearest pixel only. This makes the texture look pixelated from up close, and grainy from a distance (due to mipmaps not being sampled). 
TextureFilter TEXTURE_FILTER_LINEAR = 1
 The texture filter blends between the nearest 4 pixels. This makes the texture look smooth from up close, and grainy from a distance (due to mipmaps not being sampled). 
TextureFilter TEXTURE_FILTER_NEAREST_WITH_MIPMAPS = 2
 The texture filter reads from the nearest pixel and blends between the nearest 2 mipmaps (or uses the nearest mipmap if ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter is true). This makes the texture look pixelated from up close, and smooth from a distance. 
TextureFilter TEXTURE_FILTER_LINEAR_WITH_MIPMAPS = 3
 The texture filter blends between the nearest 4 pixels and between the nearest 2 mipmaps (or uses the nearest mipmap if ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter is true). This makes the texture look smooth from up close, and smooth from a distance. 
TextureFilter TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC = 4
 The texture filter reads from the nearest pixel and blends between 2 mipmaps (or uses the nearest mipmap if ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter is true) based on the angle between the surface and the camera view. This makes the texture look pixelated from up close, and smooth from a distance. Anisotropic filtering improves texture quality on surfaces that are almost in line with the camera, but is slightly slower. The anisotropic filtering level can be changed by adjusting ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level. 
TextureFilter TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC = 5
 The texture filter blends between the nearest 4 pixels and blends between 2 mipmaps (or uses the nearest mipmap if ProjectSettings.rendering/textures/default_filters/use_nearest_mipmap_filter is true) based on the angle between the surface and the camera view. This makes the texture look smooth from up close, and smooth from a distance. Anisotropic filtering improves texture quality on surfaces that are almost in line with the camera, but is slightly slower. The anisotropic filtering level can be changed by adjusting ProjectSettings.rendering/textures/default_filters/anisotropic_filtering_level. 
TextureFilter TEXTURE_FILTER_MAX = 6
 Represents the size of the TextureFilter enum. enum DetailUV: 
DetailUV DETAIL_UV_1 = 0
 Use UV with the detail texture. 
DetailUV DETAIL_UV_2 = 1
 Use UV2 with the detail texture. enum Transparency: 
Transparency TRANSPARENCY_DISABLED = 0
 The material will not use transparency. This is the fastest to render. 
Transparency TRANSPARENCY_ALPHA = 1
 The material will use the texture's alpha values for transparency. This is the slowest to render, and disables shadow casting. 
Transparency TRANSPARENCY_ALPHA_SCISSOR = 2
 The material will cut off all values below a threshold, the rest will remain opaque. The opaque portions will be rendered in the depth prepass. This is faster to render than alpha blending, but slower than opaque rendering. This also supports casting shadows. 
Transparency TRANSPARENCY_ALPHA_HASH = 3
 The material will cut off all values below a spatially-deterministic threshold, the rest will remain opaque. This is faster to render than alpha blending, but slower than opaque rendering. This also supports casting shadows. Alpha hashing is suited for hair rendering. 
Transparency TRANSPARENCY_ALPHA_DEPTH_PRE_PASS = 4
 The material will use the texture's alpha value for transparency, but will discard fragments with an alpha of less than 0.99 during the depth prepass and fragments with an alpha less than 0.1 during the shadow pass. This also supports casting shadows. 
Transparency TRANSPARENCY_MAX = 5
 Represents the size of the Transparency enum. enum ShadingMode: 
ShadingMode SHADING_MODE_UNSHADED = 0
 The object will not receive shadows. This is the fastest to render, but it disables all interactions with lights. 
ShadingMode SHADING_MODE_PER_PIXEL = 1
 The object will be shaded per pixel. Useful for realistic shading effects. 
ShadingMode SHADING_MODE_PER_VERTEX = 2
 The object will be shaded per vertex. Useful when you want cheaper shaders and do not care about visual quality. Not implemented yet (this mode will act like SHADING_MODE_PER_PIXEL). 
ShadingMode SHADING_MODE_MAX = 3
 Represents the size of the ShadingMode enum. enum Feature: 
Feature FEATURE_EMISSION = 0
 Constant for setting emission_enabled. 
Feature FEATURE_NORMAL_MAPPING = 1
 Constant for setting normal_enabled. 
Feature FEATURE_RIM = 2
 Constant for setting rim_enabled. 
Feature FEATURE_CLEARCOAT = 3
 Constant for setting clearcoat_enabled. 
Feature FEATURE_ANISOTROPY = 4
 Constant for setting anisotropy_enabled. 
Feature FEATURE_AMBIENT_OCCLUSION = 5
 Constant for setting ao_enabled. 
Feature FEATURE_HEIGHT_MAPPING = 6
 Constant for setting heightmap_enabled. 
Feature FEATURE_SUBSURFACE_SCATTERING = 7
 Constant for setting subsurf_scatter_enabled. 
Feature FEATURE_SUBSURFACE_TRANSMITTANCE = 8
 Constant for setting subsurf_scatter_transmittance_enabled. 
Feature FEATURE_BACKLIGHT = 9
 Constant for setting backlight_enabled. 
Feature FEATURE_REFRACTION = 10
 Constant for setting refraction_enabled. 
Feature FEATURE_DETAIL = 11
 Constant for setting detail_enabled. 
Feature FEATURE_MAX = 12
 Represents the size of the Feature enum. enum BlendMode: 
BlendMode BLEND_MODE_MIX = 0
 Default blend mode. The color of the object is blended over the background based on the object's alpha value. 
BlendMode BLEND_MODE_ADD = 1
 The color of the object is added to the background. 
BlendMode BLEND_MODE_SUB = 2
 The color of the object is subtracted from the background. 
BlendMode BLEND_MODE_MUL = 3
 The color of the object is multiplied by the background. enum AlphaAntiAliasing: 
AlphaAntiAliasing ALPHA_ANTIALIASING_OFF = 0
 Disables Alpha AntiAliasing for the material. 
AlphaAntiAliasing ALPHA_ANTIALIASING_ALPHA_TO_COVERAGE = 1
 Enables AlphaToCoverage. Alpha values in the material are passed to the AntiAliasing sample mask. 
AlphaAntiAliasing ALPHA_ANTIALIASING_ALPHA_TO_COVERAGE_AND_TO_ONE = 2
 Enables AlphaToCoverage and forces all non-zero alpha values to 1. Alpha values in the material are passed to the AntiAliasing sample mask. enum DepthDrawMode: 
DepthDrawMode DEPTH_DRAW_OPAQUE_ONLY = 0
 Default depth draw mode. Depth is drawn only for opaque objects during the opaque prepass (if any) and during the opaque pass. 
DepthDrawMode DEPTH_DRAW_ALWAYS = 1
 Objects will write to depth during the opaque and the transparent passes. Transparent objects that are close to the camera may obscure other transparent objects behind them. Note: This does not influence whether transparent objects are included in the depth prepass or not. For that, see Transparency. 
DepthDrawMode DEPTH_DRAW_DISABLED = 2
 Objects will not write their depth to the depth buffer, even during the depth prepass (if enabled). enum CullMode: 
CullMode CULL_BACK = 0
 Default cull mode. The back of the object is culled when not visible. Back face triangles will be culled when facing the camera. This results in only the front side of triangles being drawn. For closed-surface meshes, this means that only the exterior of the mesh will be visible. 
CullMode CULL_FRONT = 1
 Front face triangles will be culled when facing the camera. This results in only the back side of triangles being drawn. For closed-surface meshes, this means that the interior of the mesh will be drawn instead of the exterior. 
CullMode CULL_DISABLED = 2
 No face culling is performed; both the front face and back face will be visible. enum Flags: 
Flags FLAG_DISABLE_DEPTH_TEST = 0
 Disables the depth test, so this object is drawn on top of all others drawn before it. This puts the object in the transparent draw pass where it is sorted based on distance to camera. Objects drawn after it in the draw order may cover it. This also disables writing to depth. 
Flags FLAG_ALBEDO_FROM_VERTEX_COLOR = 1
 Set ALBEDO to the per-vertex color specified in the mesh. 
Flags FLAG_SRGB_VERTEX_COLOR = 2
 Vertex colors are considered to be stored in sRGB color space and are converted to linear color space during rendering. See also vertex_color_is_srgb. Note: Only effective when using the Forward+ and Mobile rendering methods. 
Flags FLAG_USE_POINT_SIZE = 3
 Uses point size to alter the size of primitive points. Also changes the albedo texture lookup to use POINT_COORD instead of UV. 
Flags FLAG_FIXED_SIZE = 4
 Object is scaled by depth so that it always appears the same size on screen. 
Flags FLAG_BILLBOARD_KEEP_SCALE = 5
 Shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when billboard_mode is BILLBOARD_ENABLED. 
Flags FLAG_UV1_USE_TRIPLANAR = 6
 Use triplanar texture lookup for all texture lookups that would normally use UV. 
Flags FLAG_UV2_USE_TRIPLANAR = 7
 Use triplanar texture lookup for all texture lookups that would normally use UV2. 
Flags FLAG_UV1_USE_WORLD_TRIPLANAR = 8
 Use triplanar texture lookup for all texture lookups that would normally use UV. 
Flags FLAG_UV2_USE_WORLD_TRIPLANAR = 9
 Use triplanar texture lookup for all texture lookups that would normally use UV2. 
Flags FLAG_AO_ON_UV2 = 10
 Use UV2 coordinates to look up from the ao_texture. 
Flags FLAG_EMISSION_ON_UV2 = 11
 Use UV2 coordinates to look up from the emission_texture. 
Flags FLAG_ALBEDO_TEXTURE_FORCE_SRGB = 12
 Forces the shader to convert albedo from sRGB space to linear space. See also albedo_texture_force_srgb. 
Flags FLAG_DONT_RECEIVE_SHADOWS = 13
 Disables receiving shadows from other objects. 
Flags FLAG_DISABLE_AMBIENT_LIGHT = 14
 Disables receiving ambient light. 
Flags FLAG_USE_SHADOW_TO_OPACITY = 15
 Enables the shadow to opacity feature. 
Flags FLAG_USE_TEXTURE_REPEAT = 16
 Enables the texture to repeat when UV coordinates are outside the 0-1 range. If using one of the linear filtering modes, this can result in artifacts at the edges of a texture when the sampler filters across the edges of the texture. 
Flags FLAG_INVERT_HEIGHTMAP = 17
 Invert values read from a depth texture to convert them to height values (heightmap). 
Flags FLAG_SUBSURFACE_MODE_SKIN = 18
 Enables the skin mode for subsurface scattering which is used to improve the look of subsurface scattering when used for human skin. 
Flags FLAG_PARTICLE_TRAILS_MODE = 19
 Enables parts of the shader required for GPUParticles3D trails to function. This also requires using a mesh with appropriate skinning, such as RibbonTrailMesh or TubeTrailMesh. Enabling this feature outside of materials used in GPUParticles3D meshes will break material rendering. 
Flags FLAG_ALBEDO_TEXTURE_MSDF = 20
 Enables multichannel signed distance field rendering shader. 
Flags FLAG_DISABLE_FOG = 21
 Disables receiving depth-based or volumetric fog. 
Flags FLAG_MAX = 22
 Represents the size of the Flags enum. enum DiffuseMode: 
DiffuseMode DIFFUSE_BURLEY = 0
 Default diffuse scattering algorithm. 
DiffuseMode DIFFUSE_LAMBERT = 1
 Diffuse scattering ignores roughness. 
DiffuseMode DIFFUSE_LAMBERT_WRAP = 2
 Extends Lambert to cover more than 90 degrees when roughness increases. 
DiffuseMode DIFFUSE_TOON = 3
 Uses a hard cut for lighting, with smoothing affected by roughness. enum SpecularMode: 
SpecularMode SPECULAR_SCHLICK_GGX = 0
 Default specular blob. 
SpecularMode SPECULAR_TOON = 1
 Toon blob which changes size based on roughness. 
SpecularMode SPECULAR_DISABLED = 2
 No specular blob. This is slightly faster to render than other specular modes. enum BillboardMode: 
BillboardMode BILLBOARD_DISABLED = 0
 Billboard mode is disabled. 
BillboardMode BILLBOARD_ENABLED = 1
 The object's Z axis will always face the camera. 
BillboardMode BILLBOARD_FIXED_Y = 2
 The object's X axis will always face the camera. 
BillboardMode BILLBOARD_PARTICLES = 3
 Used for particle systems when assigned to GPUParticles3D and CPUParticles3D nodes (flipbook animation). Enables particles_anim_* properties. The ParticleProcessMaterial.anim_speed_min or CPUParticles3D.anim_speed_min should also be set to a value bigger than zero for the animation to play. enum TextureChannel: 
TextureChannel TEXTURE_CHANNEL_RED = 0
 Used to read from the red channel of a texture. 
TextureChannel TEXTURE_CHANNEL_GREEN = 1
 Used to read from the green channel of a texture. 
TextureChannel TEXTURE_CHANNEL_BLUE = 2
 Used to read from the blue channel of a texture. 
TextureChannel TEXTURE_CHANNEL_ALPHA = 3
 Used to read from the alpha channel of a texture. 
TextureChannel TEXTURE_CHANNEL_GRAYSCALE = 4
 Used to read from the linear (non-perceptual) average of the red, green and blue channels of a texture. enum EmissionOperator: 
EmissionOperator EMISSION_OP_ADD = 0
 Adds the emission color to the color from the emission texture. 
EmissionOperator EMISSION_OP_MULTIPLY = 1
 Multiplies the emission color by the color from the emission texture. enum DistanceFadeMode: 
DistanceFadeMode DISTANCE_FADE_DISABLED = 0
 Do not use distance fade. 
DistanceFadeMode DISTANCE_FADE_PIXEL_ALPHA = 1
 Smoothly fades the object out based on each pixel's distance from the camera using the alpha channel. 
DistanceFadeMode DISTANCE_FADE_PIXEL_DITHER = 2
 Smoothly fades the object out based on each pixel's distance from the camera using a dithering approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware, this can be faster than DISTANCE_FADE_PIXEL_ALPHA. 
DistanceFadeMode DISTANCE_FADE_OBJECT_DITHER = 3
 Smoothly fades the object out based on the object's distance from the camera using a dithering approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware, this can be faster than DISTANCE_FADE_PIXEL_ALPHA and DISTANCE_FADE_PIXEL_DITHER.   Property Descriptions 
Color albedo_color = Color(1, 1, 1, 1)
  void set_albedo ( Color value )
 
Color get_albedo ( )
  The material's base color. Note: If detail_enabled is true and a detail_albedo texture is specified, albedo_color will not modulate the detail texture. This can be used to color partial areas of a material by not specifying an albedo texture and using a transparent detail_albedo texture instead. 
Texture2D albedo_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture to multiply by albedo_color. Used for basic texturing of objects. If the texture appears unexpectedly too dark or too bright, check albedo_texture_force_srgb. 
bool albedo_texture_force_srgb = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, forces a conversion of the albedo_texture from sRGB color space to linear color space. See also vertex_color_is_srgb. This should only be enabled when needed (typically when using a ViewportTexture as albedo_texture). If albedo_texture_force_srgb is true when it shouldn't be, the texture will appear to be too dark. If albedo_texture_force_srgb is false when it shouldn't be, the texture will appear to be too bright. 
bool albedo_texture_msdf = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  Enables multichannel signed distance field rendering shader. Use msdf_pixel_range and msdf_outline_size to configure MSDF parameters. 
float alpha_antialiasing_edge  void set_alpha_antialiasing_edge ( float value )
 
float get_alpha_antialiasing_edge ( )
  Threshold at which antialiasing will be applied on the alpha channel. 
AlphaAntiAliasing alpha_antialiasing_mode  void set_alpha_antialiasing ( AlphaAntiAliasing value )
 
AlphaAntiAliasing get_alpha_antialiasing ( )
  The type of alpha antialiasing to apply. See AlphaAntiAliasing. 
float alpha_hash_scale  void set_alpha_hash_scale ( float value )
 
float get_alpha_hash_scale ( )
  The hashing scale for Alpha Hash. Recommended values between 0 and 2. 
float alpha_scissor_threshold  void set_alpha_scissor_threshold ( float value )
 
float get_alpha_scissor_threshold ( )
  Threshold at which the alpha scissor will discard values. Higher values will result in more pixels being discarded. If the material becomes too opaque at a distance, try increasing alpha_scissor_threshold. If the material disappears at a distance, try decreasing alpha_scissor_threshold. 
float anisotropy = 0.0
  void set_anisotropy ( float value )
 
float get_anisotropy ( )
  The strength of the anisotropy effect. This is multiplied by anisotropy_flowmap's alpha channel if a texture is defined there and the texture contains an alpha channel. 
bool anisotropy_enabled = false
  void set_feature ( Feature feature, bool enable )
 
bool get_feature ( Feature feature ) const
  If true, anisotropy is enabled. Anisotropy changes the shape of the specular blob and aligns it to tangent space. This is useful for brushed aluminium and hair reflections. Note: Mesh tangents are needed for anisotropy to work. If the mesh does not contain tangents, the anisotropy effect will appear broken. Note: Material anisotropy should not to be confused with anisotropic texture filtering, which can be enabled by setting texture_filter to TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC. 
Texture2D anisotropy_flowmap  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture that offsets the tangent map for anisotropy calculations and optionally controls the anisotropy effect (if an alpha channel is present). The flowmap texture is expected to be a derivative map, with the red channel representing distortion on the X axis and green channel representing distortion on the Y axis. Values below 0.5 will result in negative distortion, whereas values above 0.5 will result in positive distortion. If present, the texture's alpha channel will be used to multiply the strength of the anisotropy effect. Fully opaque pixels will keep the anisotropy effect's original strength while fully transparent pixels will disable the anisotropy effect entirely. The flowmap texture's blue channel is ignored. 
bool ao_enabled = false
  void set_feature ( Feature feature, bool enable )
 
bool get_feature ( Feature feature ) const
  If true, ambient occlusion is enabled. Ambient occlusion darkens areas based on the ao_texture. 
float ao_light_affect = 0.0
  void set_ao_light_affect ( float value )
 
float get_ao_light_affect ( )
  Amount that ambient occlusion affects lighting from lights. If 0, ambient occlusion only affects ambient light. If 1, ambient occlusion affects lights just as much as it affects ambient light. This can be used to impact the strength of the ambient occlusion effect, but typically looks unrealistic. 
bool ao_on_uv2 = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, use UV2 coordinates to look up from the ao_texture. 
Texture2D ao_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture that defines the amount of ambient occlusion for a given point on the object. 
TextureChannel ao_texture_channel = 0
  void set_ao_texture_channel ( TextureChannel value )
 
TextureChannel get_ao_texture_channel ( )
  Specifies the channel of the ao_texture in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use. 
Color backlight = Color(0, 0, 0, 1)
  void set_backlight ( Color value )
 
Color get_backlight ( )
  The color used by the backlight effect. Represents the light passing through an object. 
bool backlight_enabled = false
  void set_feature ( Feature feature, bool enable )
 
bool get_feature ( Feature feature ) const
  If true, the backlight effect is enabled. See also subsurf_scatter_transmittance_enabled. 
Texture2D backlight_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture used to control the backlight effect per-pixel. Added to backlight. 
bool billboard_keep_scale = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, the shader will keep the scale set for the mesh. Otherwise, the scale is lost when billboarding. Only applies when billboard_mode is not BILLBOARD_DISABLED. 
BillboardMode billboard_mode = 0
  void set_billboard_mode ( BillboardMode value )
 
BillboardMode get_billboard_mode ( )
  Controls how the object faces the camera. See BillboardMode. Note: Billboard mode is not suitable for VR because the left-right vector of the camera is not horizontal when the screen is attached to your head instead of on the table. See GitHub issue #41567 for details. 
BlendMode blend_mode = 0
  void set_blend_mode ( BlendMode value )
 
BlendMode get_blend_mode ( )
  The material's blend mode. Note: Values other than Mix force the object into the transparent pipeline. See BlendMode. 
float clearcoat = 1.0
  void set_clearcoat ( float value )
 
float get_clearcoat ( )
  Sets the strength of the clearcoat effect. Setting to 0 looks the same as disabling the clearcoat effect. 
bool clearcoat_enabled = false
  void set_feature ( Feature feature, bool enable )
 
bool get_feature ( Feature feature ) const
  If true, clearcoat rendering is enabled. Adds a secondary transparent pass to the lighting calculation resulting in an added specular blob. This makes materials appear as if they have a clear layer on them that can be either glossy or rough. Note: Clearcoat rendering is not visible if the material's shading_mode is SHADING_MODE_UNSHADED. 
float clearcoat_roughness = 0.5
  void set_clearcoat_roughness ( float value )
 
float get_clearcoat_roughness ( )
  Sets the roughness of the clearcoat pass. A higher value results in a rougher clearcoat while a lower value results in a smoother clearcoat. 
Texture2D clearcoat_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture that defines the strength of the clearcoat effect and the glossiness of the clearcoat. Strength is specified in the red channel while glossiness is specified in the green channel. 
CullMode cull_mode = 0
  void set_cull_mode ( CullMode value )
 
CullMode get_cull_mode ( )
  Determines which side of the triangle to cull depending on whether the triangle faces towards or away from the camera. See CullMode. 
DepthDrawMode depth_draw_mode = 0
  void set_depth_draw_mode ( DepthDrawMode value )
 
DepthDrawMode get_depth_draw_mode ( )
  Determines when depth rendering takes place. See DepthDrawMode. See also transparency. 
Texture2D detail_albedo  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture that specifies the color of the detail overlay. detail_albedo's alpha channel is used as a mask, even when the material is opaque. To use a dedicated texture as a mask, see detail_mask. Note: detail_albedo is not modulated by albedo_color. 
BlendMode detail_blend_mode = 0
  void set_detail_blend_mode ( BlendMode value )
 
BlendMode get_detail_blend_mode ( )
  Specifies how the detail_albedo should blend with the current ALBEDO. See BlendMode for options. 
bool detail_enabled = false
  void set_feature ( Feature feature, bool enable )
 
bool get_feature ( Feature feature ) const
  If true, enables the detail overlay. Detail is a second texture that gets mixed over the surface of the object based on detail_mask and detail_albedo's alpha channel. This can be used to add variation to objects, or to blend between two different albedo/normal textures. 
Texture2D detail_mask  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture used to specify how the detail textures get blended with the base textures. detail_mask can be used together with detail_albedo's alpha channel (if any). 
Texture2D detail_normal  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture that specifies the per-pixel normal of the detail overlay. The detail_normal texture only uses the red and green channels; the blue and alpha channels are ignored. The normal read from detail_normal is oriented around the surface normal provided by the Mesh. Note: Godot expects the normal map to use X+, Y+, and Z+ coordinates. See this page for a comparison of normal map coordinates expected by popular engines. 
DetailUV detail_uv_layer = 0
  void set_detail_uv ( DetailUV value )
 
DetailUV get_detail_uv ( )
  Specifies whether to use UV or UV2 for the detail layer. See DetailUV for options. 
DiffuseMode diffuse_mode = 0
  void set_diffuse_mode ( DiffuseMode value )
 
DiffuseMode get_diffuse_mode ( )
  The algorithm used for diffuse light scattering. See DiffuseMode. 
bool disable_ambient_light = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, the object receives no ambient light. 
bool disable_fog = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, the object will not be affected by fog (neither volumetric nor depth fog). This is useful for unshaded or transparent materials (e.g. particles), which without this setting will be affected even if fully transparent. 
bool disable_receive_shadows = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, the object receives no shadow that would otherwise be cast onto it. 
float distance_fade_max_distance = 10.0
  void set_distance_fade_max_distance ( float value )
 
float get_distance_fade_max_distance ( )
  Distance at which the object appears fully opaque. Note: If distance_fade_max_distance is less than distance_fade_min_distance, the behavior will be reversed. The object will start to fade away at distance_fade_max_distance and will fully disappear once it reaches distance_fade_min_distance. 
float distance_fade_min_distance = 0.0
  void set_distance_fade_min_distance ( float value )
 
float get_distance_fade_min_distance ( )
  Distance at which the object starts to become visible. If the object is less than this distance away, it will be invisible. Note: If distance_fade_min_distance is greater than distance_fade_max_distance, the behavior will be reversed. The object will start to fade away at distance_fade_max_distance and will fully disappear once it reaches distance_fade_min_distance. 
DistanceFadeMode distance_fade_mode = 0
  void set_distance_fade ( DistanceFadeMode value )
 
DistanceFadeMode get_distance_fade ( )
  Specifies which type of fade to use. Can be any of the DistanceFadeModes. 
Color emission = Color(0, 0, 0, 1)
  void set_emission ( Color value )
 
Color get_emission ( )
  The emitted light's color. See emission_enabled. 
bool emission_enabled = false
  void set_feature ( Feature feature, bool enable )
 
bool get_feature ( Feature feature ) const
  If true, the body emits light. Emitting light makes the object appear brighter. The object can also cast light on other objects if a VoxelGI, SDFGI, or LightmapGI is used and this object is used in baked lighting. 
float emission_energy_multiplier = 1.0
  void set_emission_energy_multiplier ( float value )
 
float get_emission_energy_multiplier ( )
  Multiplier for emitted light. See emission_enabled. 
float emission_intensity  void set_emission_intensity ( float value )
 
float get_emission_intensity ( )
  Luminance of emitted light, measured in nits (candela per square meter). Only available when ProjectSettings.rendering/lights_and_shadows/use_physical_light_units is enabled. The default is roughly equivalent to an indoor lightbulb. 
bool emission_on_uv2 = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  Use UV2 to read from the emission_texture. 
EmissionOperator emission_operator = 0
  void set_emission_operator ( EmissionOperator value )
 
EmissionOperator get_emission_operator ( )
  Sets how emission interacts with emission_texture. Can either add or multiply. See EmissionOperator for options. 
Texture2D emission_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture that specifies how much surface emits light at a given point. 
bool fixed_size = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, the object is rendered at the same size regardless of distance. 
bool grow = false
  void set_grow_enabled ( bool value )
 
bool is_grow_enabled ( )
  If true, enables the vertex grow setting. This can be used to create mesh-based outlines using a second material pass and its cull_mode set to CULL_FRONT. See also grow_amount. Note: Vertex growth cannot create new vertices, which means that visible gaps may occur in sharp corners. This can be alleviated by designing the mesh to use smooth normals exclusively using face weighted normals in the 3D authoring software. In this case, grow will be able to join every outline together, just like in the original mesh. 
float grow_amount = 0.0
  void set_grow ( float value )
 
float get_grow ( )
  Grows object vertices in the direction of their normals. Only effective if grow is true. 
bool heightmap_deep_parallax = false
  void set_heightmap_deep_parallax ( bool value )
 
bool is_heightmap_deep_parallax_enabled ( )
  If true, uses parallax occlusion mapping to represent depth in the material instead of simple offset mapping (see heightmap_enabled). This results in a more convincing depth effect, but is much more expensive on the GPU. Only enable this on materials where it makes a significant visual difference. 
bool heightmap_enabled = false
  void set_feature ( Feature feature, bool enable )
 
bool get_feature ( Feature feature ) const
  If true, height mapping is enabled (also called "parallax mapping" or "depth mapping"). See also normal_enabled. Height mapping is a demanding feature on the GPU, so it should only be used on materials where it makes a significant visual difference. Note: Height mapping is not supported if triplanar mapping is used on the same material. The value of heightmap_enabled will be ignored if uv1_triplanar is enabled. 
bool heightmap_flip_binormal = false
  void set_heightmap_deep_parallax_flip_binormal ( bool value )
 
bool get_heightmap_deep_parallax_flip_binormal ( )
  If true, flips the mesh's binormal vectors when interpreting the height map. If the heightmap effect looks strange when the camera moves (even with a reasonable heightmap_scale), try setting this to true. 
bool heightmap_flip_tangent = false
  void set_heightmap_deep_parallax_flip_tangent ( bool value )
 
bool get_heightmap_deep_parallax_flip_tangent ( )
  If true, flips the mesh's tangent vectors when interpreting the height map. If the heightmap effect looks strange when the camera moves (even with a reasonable heightmap_scale), try setting this to true. 
bool heightmap_flip_texture = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, interprets the height map texture as a depth map, with brighter values appearing to be "lower" in altitude compared to darker values. This can be enabled for compatibility with some materials authored for Godot 3.x. This is not necessary if the Invert import option was used to invert the depth map in Godot 3.x, in which case heightmap_flip_texture should remain false. 
int heightmap_max_layers  void set_heightmap_deep_parallax_max_layers ( int value )
 
int get_heightmap_deep_parallax_max_layers ( )
  The number of layers to use for parallax occlusion mapping when the camera is up close to the material. Higher values result in a more convincing depth effect, especially in materials that have steep height changes. Higher values have a significant cost on the GPU, so it should only be increased on materials where it makes a significant visual difference. Note: Only effective if heightmap_deep_parallax is true. 
int heightmap_min_layers  void set_heightmap_deep_parallax_min_layers ( int value )
 
int get_heightmap_deep_parallax_min_layers ( )
  The number of layers to use for parallax occlusion mapping when the camera is far away from the material. Higher values result in a more convincing depth effect, especially in materials that have steep height changes. Higher values have a significant cost on the GPU, so it should only be increased on materials where it makes a significant visual difference. Note: Only effective if heightmap_deep_parallax is true. 
float heightmap_scale = 5.0
  void set_heightmap_scale ( float value )
 
float get_heightmap_scale ( )
  The heightmap scale to use for the parallax effect (see heightmap_enabled). The default value is tuned so that the highest point (value = 255) appears to be 5 cm higher than the lowest point (value = 0). Higher values result in a deeper appearance, but may result in artifacts appearing when looking at the material from oblique angles, especially when the camera moves. Negative values can be used to invert the parallax effect, but this is different from inverting the texture using heightmap_flip_texture as the material will also appear to be "closer" to the camera. In most cases, heightmap_scale should be kept to a positive value. Note: If the height map effect looks strange regardless of this value, try adjusting heightmap_flip_binormal and heightmap_flip_tangent. See also heightmap_texture for recommendations on authoring heightmap textures, as the way the heightmap texture is authored affects how heightmap_scale behaves. 
Texture2D heightmap_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  The texture to use as a height map. See also heightmap_enabled. For best results, the texture should be normalized (with heightmap_scale reduced to compensate). In GIMP, this can be done using Colors > Auto > Equalize. If the texture only uses a small part of its available range, the parallax effect may look strange, especially when the camera moves. Note: To reduce memory usage and improve loading times, you may be able to use a lower-resolution heightmap texture as most heightmaps are only comprised of low-frequency data. 
float metallic = 0.0
  void set_metallic ( float value )
 
float get_metallic ( )
  A high value makes the material appear more like a metal. Non-metals use their albedo as the diffuse color and add diffuse to the specular reflection. With non-metals, the reflection appears on top of the albedo color. Metals use their albedo as a multiplier to the specular reflection and set the diffuse color to black resulting in a tinted reflection. Materials work better when fully metal or fully non-metal, values between 0 and 1 should only be used for blending between metal and non-metal sections. To alter the amount of reflection use roughness. 
float metallic_specular = 0.5
  void set_specular ( float value )
 
float get_specular ( )
  Adjusts the strength of specular reflections. Specular reflections are composed of scene reflections and the specular lobe which is the bright spot that is reflected from light sources. When set to 0.0, no specular reflections will be visible. This differs from the SPECULAR_DISABLED SpecularMode as SPECULAR_DISABLED only applies to the specular lobe from the light source. Note: Unlike metallic, this is not energy-conserving, so it should be left at 0.5 in most cases. See also roughness. 
Texture2D metallic_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture used to specify metallic for an object. This is multiplied by metallic. 
TextureChannel metallic_texture_channel = 0
  void set_metallic_texture_channel ( TextureChannel value )
 
TextureChannel get_metallic_texture_channel ( )
  Specifies the channel of the metallic_texture in which the metallic information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use. 
float msdf_outline_size = 0.0
  void set_msdf_outline_size ( float value )
 
float get_msdf_outline_size ( )
  The width of the shape outline. 
float msdf_pixel_range = 4.0
  void set_msdf_pixel_range ( float value )
 
float get_msdf_pixel_range ( )
  The width of the range around the shape between the minimum and maximum representable signed distance. 
bool no_depth_test = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, depth testing is disabled and the object will be drawn in render order. 
bool normal_enabled = false
  void set_feature ( Feature feature, bool enable )
 
bool get_feature ( Feature feature ) const
  If true, normal mapping is enabled. This has a slight performance cost, especially on mobile GPUs. 
float normal_scale = 1.0
  void set_normal_scale ( float value )
 
float get_normal_scale ( )
  The strength of the normal map's effect. 
Texture2D normal_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture used to specify the normal at a given pixel. The normal_texture only uses the red and green channels; the blue and alpha channels are ignored. The normal read from normal_texture is oriented around the surface normal provided by the Mesh. Note: The mesh must have both normals and tangents defined in its vertex data. Otherwise, the normal map won't render correctly and will only appear to darken the whole surface. If creating geometry with SurfaceTool, you can use SurfaceTool.generate_normals and SurfaceTool.generate_tangents to automatically generate normals and tangents respectively. Note: Godot expects the normal map to use X+, Y+, and Z+ coordinates. See this page for a comparison of normal map coordinates expected by popular engines. Note: If detail_enabled is true, the detail_albedo texture is drawn below the normal_texture. To display a normal map above the detail_albedo texture, use detail_normal instead. 
Texture2D orm_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  The Occlusion/Roughness/Metallic texture to use. This is a more efficient replacement of ao_texture, roughness_texture and metallic_texture in ORMMaterial3D. Ambient occlusion is stored in the red channel. Roughness map is stored in the green channel. Metallic map is stored in the blue channel. The alpha channel is ignored. 
int particles_anim_h_frames  void set_particles_anim_h_frames ( int value )
 
int get_particles_anim_h_frames ( )
  The number of horizontal frames in the particle sprite sheet. Only enabled when using BILLBOARD_PARTICLES. See billboard_mode. 
bool particles_anim_loop  void set_particles_anim_loop ( bool value )
 
bool get_particles_anim_loop ( )
  If true, particle animations are looped. Only enabled when using BILLBOARD_PARTICLES. See billboard_mode. 
int particles_anim_v_frames  void set_particles_anim_v_frames ( int value )
 
int get_particles_anim_v_frames ( )
  The number of vertical frames in the particle sprite sheet. Only enabled when using BILLBOARD_PARTICLES. See billboard_mode. 
float point_size = 1.0
  void set_point_size ( float value )
 
float get_point_size ( )
  The point size in pixels. See use_point_size. 
float proximity_fade_distance = 1.0
  void set_proximity_fade_distance ( float value )
 
float get_proximity_fade_distance ( )
  Distance over which the fade effect takes place. The larger the distance the longer it takes for an object to fade. 
bool proximity_fade_enabled = false
  void set_proximity_fade_enabled ( bool value )
 
bool is_proximity_fade_enabled ( )
  If true, the proximity fade effect is enabled. The proximity fade effect fades out each pixel based on its distance to another object. 
bool refraction_enabled = false
  void set_feature ( Feature feature, bool enable )
 
bool get_feature ( Feature feature ) const
  If true, the refraction effect is enabled. Distorts transparency based on light from behind the object. 
float refraction_scale = 0.05
  void set_refraction ( float value )
 
float get_refraction ( )
  The strength of the refraction effect. 
Texture2D refraction_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture that controls the strength of the refraction per-pixel. Multiplied by refraction_scale. 
TextureChannel refraction_texture_channel = 0
  void set_refraction_texture_channel ( TextureChannel value )
 
TextureChannel get_refraction_texture_channel ( )
  Specifies the channel of the refraction_texture in which the refraction information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored refraction in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use. 
float rim = 1.0
  void set_rim ( float value )
 
float get_rim ( )
  Sets the strength of the rim lighting effect. 
bool rim_enabled = false
  void set_feature ( Feature feature, bool enable )
 
bool get_feature ( Feature feature ) const
  If true, rim effect is enabled. Rim lighting increases the brightness at glancing angles on an object. Note: Rim lighting is not visible if the material's shading_mode is SHADING_MODE_UNSHADED. 
Texture2D rim_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture used to set the strength of the rim lighting effect per-pixel. Multiplied by rim. 
float rim_tint = 0.5
  void set_rim_tint ( float value )
 
float get_rim_tint ( )
  The amount of to blend light and albedo color when rendering rim effect. If 0 the light color is used, while 1 means albedo color is used. An intermediate value generally works best. 
float roughness = 1.0
  void set_roughness ( float value )
 
float get_roughness ( )
  Surface reflection. A value of 0 represents a perfect mirror while a value of 1 completely blurs the reflection. See also metallic. 
Texture2D roughness_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture used to control the roughness per-pixel. Multiplied by roughness. 
TextureChannel roughness_texture_channel = 0
  void set_roughness_texture_channel ( TextureChannel value )
 
TextureChannel get_roughness_texture_channel ( )
  Specifies the channel of the roughness_texture in which the roughness information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use. 
ShadingMode shading_mode = 1
  void set_shading_mode ( ShadingMode value )
 
ShadingMode get_shading_mode ( )
  Sets whether the shading takes place, per-pixel, per-vertex or unshaded. Per-vertex lighting is faster, making it the best choice for mobile applications, however it looks considerably worse than per-pixel. Unshaded rendering is the fastest, but disables all interactions with lights. Note: Setting the shading mode vertex shading currently has no effect, as vertex shading is not implemented yet. 
bool shadow_to_opacity = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, enables the "shadow to opacity" render mode where lighting modifies the alpha so shadowed areas are opaque and non-shadowed areas are transparent. Useful for overlaying shadows onto a camera feed in AR. 
SpecularMode specular_mode = 0
  void set_specular_mode ( SpecularMode value )
 
SpecularMode get_specular_mode ( )
  The method for rendering the specular blob. See SpecularMode. Note: specular_mode only applies to the specular blob. It does not affect specular reflections from the sky, screen-space reflections, VoxelGI, SDFGI or ReflectionProbes. To disable reflections from these sources as well, set metallic_specular to 0.0 instead. 
bool subsurf_scatter_enabled = false
  void set_feature ( Feature feature, bool enable )
 
bool get_feature ( Feature feature ) const
  If true, subsurface scattering is enabled. Emulates light that penetrates an object's surface, is scattered, and then emerges. Subsurface scattering quality is controlled by ProjectSettings.rendering/environment/subsurface_scattering/subsurface_scattering_quality. 
bool subsurf_scatter_skin_mode = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, subsurface scattering will use a special mode optimized for the color and density of human skin, such as boosting the intensity of the red channel in subsurface scattering. 
float subsurf_scatter_strength = 0.0
  void set_subsurface_scattering_strength ( float value )
 
float get_subsurface_scattering_strength ( )
  The strength of the subsurface scattering effect. The depth of the effect is also controlled by ProjectSettings.rendering/environment/subsurface_scattering/subsurface_scattering_scale, which is set globally. 
Texture2D subsurf_scatter_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  Texture used to control the subsurface scattering strength. Stored in the red texture channel. Multiplied by subsurf_scatter_strength. 
float subsurf_scatter_transmittance_boost = 0.0
  void set_transmittance_boost ( float value )
 
float get_transmittance_boost ( )
  The intensity of the subsurface scattering transmittance effect. 
Color subsurf_scatter_transmittance_color = Color(1, 1, 1, 1)
  void set_transmittance_color ( Color value )
 
Color get_transmittance_color ( )
  The color to multiply the subsurface scattering transmittance effect with. Ignored if subsurf_scatter_skin_mode is true. 
float subsurf_scatter_transmittance_depth = 0.1
  void set_transmittance_depth ( float value )
 
float get_transmittance_depth ( )
  The depth of the subsurface scattering transmittance effect. 
bool subsurf_scatter_transmittance_enabled = false
  void set_feature ( Feature feature, bool enable )
 
bool get_feature ( Feature feature ) const
  If true, enables subsurface scattering transmittance. Only effective if subsurf_scatter_enabled is true. See also backlight_enabled. 
Texture2D subsurf_scatter_transmittance_texture  void set_texture ( TextureParam param, Texture2D texture )
 
Texture2D get_texture ( TextureParam param ) const
  The texture to use for multiplying the intensity of the subsurface scattering transmittance intensity. See also subsurf_scatter_texture. Ignored if subsurf_scatter_skin_mode is true. 
TextureFilter texture_filter = 3
  void set_texture_filter ( TextureFilter value )
 
TextureFilter get_texture_filter ( )
  Filter flags for the texture. See TextureFilter for options. Note: heightmap_texture is always sampled with linear filtering, even if nearest-neighbor filtering is selected here. This is to ensure the heightmap effect looks as intended. If you need sharper height transitions between pixels, resize the heightmap texture in an image editor with nearest-neighbor filtering. 
bool texture_repeat = true
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  Repeat flags for the texture. See TextureFilter for options. 
Transparency transparency = 0
  void set_transparency ( Transparency value )
 
Transparency get_transparency ( )
  The material's transparency mode. Some transparency modes will disable shadow casting. Any transparency mode other than TRANSPARENCY_DISABLED has a greater performance impact compared to opaque rendering. See also blend_mode. 
bool use_particle_trails = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, enables parts of the shader required for GPUParticles3D trails to function. This also requires using a mesh with appropriate skinning, such as RibbonTrailMesh or TubeTrailMesh. Enabling this feature outside of materials used in GPUParticles3D meshes will break material rendering. 
bool use_point_size = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, render point size can be changed. Note: This is only effective for objects whose geometry is point-based rather than triangle-based. See also point_size. 
Vector3 uv1_offset = Vector3(0, 0, 0)
  void set_uv1_offset ( Vector3 value )
 
Vector3 get_uv1_offset ( )
  How much to offset the UV coordinates. This amount will be added to UV in the vertex function. This can be used to offset a texture. The Z component is used when uv1_triplanar is enabled, but it is not used anywhere else. 
Vector3 uv1_scale = Vector3(1, 1, 1)
  void set_uv1_scale ( Vector3 value )
 
Vector3 get_uv1_scale ( )
  How much to scale the UV coordinates. This is multiplied by UV in the vertex function. The Z component is used when uv1_triplanar is enabled, but it is not used anywhere else. 
bool uv1_triplanar = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, instead of using UV textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing. 
float uv1_triplanar_sharpness = 1.0
  void set_uv1_triplanar_blend_sharpness ( float value )
 
float get_uv1_triplanar_blend_sharpness ( )
  A lower number blends the texture more softly while a higher number blends the texture more sharply. Note: uv1_triplanar_sharpness is clamped between 0.0 and 150.0 (inclusive) as values outside that range can look broken depending on the mesh. 
bool uv1_world_triplanar = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, triplanar mapping for UV is calculated in world space rather than object local space. See also uv1_triplanar. 
Vector3 uv2_offset = Vector3(0, 0, 0)
  void set_uv2_offset ( Vector3 value )
 
Vector3 get_uv2_offset ( )
  How much to offset the UV2 coordinates. This amount will be added to UV2 in the vertex function. This can be used to offset a texture. The Z component is used when uv2_triplanar is enabled, but it is not used anywhere else. 
Vector3 uv2_scale = Vector3(1, 1, 1)
  void set_uv2_scale ( Vector3 value )
 
Vector3 get_uv2_scale ( )
  How much to scale the UV2 coordinates. This is multiplied by UV2 in the vertex function. The Z component is used when uv2_triplanar is enabled, but it is not used anywhere else. 
bool uv2_triplanar = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, instead of using UV2 textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing. 
float uv2_triplanar_sharpness = 1.0
  void set_uv2_triplanar_blend_sharpness ( float value )
 
float get_uv2_triplanar_blend_sharpness ( )
  A lower number blends the texture more softly while a higher number blends the texture more sharply. Note: uv2_triplanar_sharpness is clamped between 0.0 and 150.0 (inclusive) as values outside that range can look broken depending on the mesh. 
bool uv2_world_triplanar = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, triplanar mapping for UV2 is calculated in world space rather than object local space. See also uv2_triplanar. 
bool vertex_color_is_srgb = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, vertex colors are considered to be stored in sRGB color space and are converted to linear color space during rendering. If false, vertex colors are considered to be stored in linear color space and are rendered as-is. See also albedo_texture_force_srgb. Note: Only effective when using the Forward+ and Mobile rendering methods, not Compatibility. 
bool vertex_color_use_as_albedo = false
  void set_flag ( Flags flag, bool enable )
 
bool get_flag ( Flags flag ) const
  If true, the vertex color is used as albedo color.   Method Descriptions 
bool get_feature ( Feature feature ) const
 Returns true, if the specified Feature is enabled. 
bool get_flag ( Flags flag ) const
 Returns true, if the specified flag is enabled. See Flags enumerator for options. 
Texture2D get_texture ( TextureParam param ) const
 Returns the Texture2D associated with the specified TextureParam. void set_feature ( Feature feature, bool enable ) If true, enables the specified Feature. Many features that are available in BaseMaterial3Ds need to be enabled before use. This way the cost for using the feature is only incurred when specified. Features can also be enabled by setting the corresponding member to true. void set_flag ( Flags flag, bool enable ) If true, enables the specified flag. Flags are optional behavior that can be turned on and off. Only one flag can be enabled at a time with this function, the flag enumerators cannot be bit-masked together to enable or disable multiple flags at once. Flags can also be enabled by setting the corresponding member to true. See Flags enumerator for options. void set_texture ( TextureParam param, Texture2D texture ) Sets the texture for the slot specified by param. See TextureParam for available slots.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_basematerial3d.html


classes/class_editorsyntaxhighlighter
-----------------------------------------------------------
EditorSyntaxHighlighter Inherits: SyntaxHighlighter < Resource < RefCounted < Object Base class for SyntaxHighlighter used by the ScriptEditor.  Description Base class that all SyntaxHighlighters used by the ScriptEditor extend from. Add a syntax highlighter to an individual script by calling ScriptEditorBase.add_syntax_highlighter. To apply to all scripts on open, call ScriptEditor.register_syntax_highlighter.   Methods  
String _get_name ( ) virtual const  
PackedStringArray _get_supported_languages ( ) virtual const     Method Descriptions 
String _get_name ( ) virtual const
 Virtual method which can be overridden to return the syntax highlighter name. 
PackedStringArray _get_supported_languages ( ) virtual const
 Virtual method which can be overridden to return the supported language names.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editorsyntaxhighlighter.html


classes/class_openxrinteractionprofile
-----------------------------------------------------------
OpenXRInteractionProfile Inherits: Resource < RefCounted < Object Suggested bindings object for OpenXR.  Description This object stores suggested bindings for an interaction profile. Interaction profiles define the metadata for a tracked XR device such as an XR controller. For more information see the interaction profiles info in the OpenXR specification.   Properties  
Array bindings []  
String interaction_profile_path ""     Methods  
OpenXRIPBinding get_binding ( int index ) const  
int get_binding_count ( ) const     Property Descriptions 
Array bindings = []
  void set_bindings ( Array value )
 
Array get_bindings ( )
  Action bindings for this interaction profile. 
String interaction_profile_path = ""
  void set_interaction_profile_path ( String value )
 
String get_interaction_profile_path ( )
  The interaction profile path identifying the XR device.   Method Descriptions 
OpenXRIPBinding get_binding ( int index ) const
 Retrieve the binding at this index. 
int get_binding_count ( ) const
 Get the number of bindings in this interaction profile.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_openxrinteractionprofile.html


classes/class_tileset
-----------------------------------------------------------
TileSet Inherits: Resource < RefCounted < Object Tile library for tilemaps.  Description A TileSet is a library of tiles for a TileMap. A TileSet handles a list of TileSetSource, each of them storing a set of tiles. Tiles can either be from a TileSetAtlasSource, which renders tiles out of a texture with support for physics, navigation, etc., or from a TileSetScenesCollectionSource, which exposes scene-based tiles. Tiles are referenced by using three IDs: their source ID, their atlas coordinates ID, and their alternative tile ID. A TileSet can be configured so that its tiles expose more or fewer properties. To do so, the TileSet resources use property layers, which you can add or remove depending on your needs. For example, adding a physics layer allows giving collision shapes to your tiles. Each layer has dedicated properties (physics layer and mask), so you may add several TileSet physics layers for each type of collision you need. See the functions to add new layers for more information.   Tutorials  Using Tilemaps 2D Platformer Demo 2D Isometric Demo 2D Hexagonal Demo 2D Navigation Astar Demo 2D Role Playing Game Demo 2D Kinematic Character Demo    Properties  
TileLayout tile_layout 0  
TileOffsetAxis tile_offset_axis 0  
TileShape tile_shape 0  
Vector2i tile_size Vector2i(16, 16)  
bool uv_clipping false     Methods  
void add_custom_data_layer ( int to_position=-1 )  
void add_navigation_layer ( int to_position=-1 )  
void add_occlusion_layer ( int to_position=-1 )  
int add_pattern ( TileMapPattern pattern, int index=-1 )  
void add_physics_layer ( int to_position=-1 )  
int add_source ( TileSetSource source, int atlas_source_id_override=-1 )  
void add_terrain ( int terrain_set, int to_position=-1 )  
void add_terrain_set ( int to_position=-1 )  
void cleanup_invalid_tile_proxies ( )  
void clear_tile_proxies ( )  
Array get_alternative_level_tile_proxy ( int source_from, Vector2i coords_from, int alternative_from )  
Array get_coords_level_tile_proxy ( int source_from, Vector2i coords_from )  
int get_custom_data_layer_by_name ( String layer_name ) const  
String get_custom_data_layer_name ( int layer_index ) const  
Variant.Type get_custom_data_layer_type ( int layer_index ) const  
int get_custom_data_layers_count ( ) const  
bool get_navigation_layer_layer_value ( int layer_index, int layer_number ) const  
int get_navigation_layer_layers ( int layer_index ) const  
int get_navigation_layers_count ( ) const  
int get_next_source_id ( ) const  
int get_occlusion_layer_light_mask ( int layer_index ) const  
bool get_occlusion_layer_sdf_collision ( int layer_index ) const  
int get_occlusion_layers_count ( ) const  
TileMapPattern get_pattern ( int index=-1 )  
int get_patterns_count ( )  
int get_physics_layer_collision_layer ( int layer_index ) const  
int get_physics_layer_collision_mask ( int layer_index ) const  
PhysicsMaterial get_physics_layer_physics_material ( int layer_index ) const  
int get_physics_layers_count ( ) const  
TileSetSource get_source ( int source_id ) const  
int get_source_count ( ) const  
int get_source_id ( int index ) const  
int get_source_level_tile_proxy ( int source_from )  
Color get_terrain_color ( int terrain_set, int terrain_index ) const  
String get_terrain_name ( int terrain_set, int terrain_index ) const  
TerrainMode get_terrain_set_mode ( int terrain_set ) const  
int get_terrain_sets_count ( ) const  
int get_terrains_count ( int terrain_set ) const  
bool has_alternative_level_tile_proxy ( int source_from, Vector2i coords_from, int alternative_from )  
bool has_coords_level_tile_proxy ( int source_from, Vector2i coords_from )  
bool has_source ( int source_id ) const  
bool has_source_level_tile_proxy ( int source_from )  
Array map_tile_proxy ( int source_from, Vector2i coords_from, int alternative_from ) const  
void move_custom_data_layer ( int layer_index, int to_position )  
void move_navigation_layer ( int layer_index, int to_position )  
void move_occlusion_layer ( int layer_index, int to_position )  
void move_physics_layer ( int layer_index, int to_position )  
void move_terrain ( int terrain_set, int terrain_index, int to_position )  
void move_terrain_set ( int terrain_set, int to_position )  
void remove_alternative_level_tile_proxy ( int source_from, Vector2i coords_from, int alternative_from )  
void remove_coords_level_tile_proxy ( int source_from, Vector2i coords_from )  
void remove_custom_data_layer ( int layer_index )  
void remove_navigation_layer ( int layer_index )  
void remove_occlusion_layer ( int layer_index )  
void remove_pattern ( int index )  
void remove_physics_layer ( int layer_index )  
void remove_source ( int source_id )  
void remove_source_level_tile_proxy ( int source_from )  
void remove_terrain ( int terrain_set, int terrain_index )  
void remove_terrain_set ( int terrain_set )  
void set_alternative_level_tile_proxy ( int source_from, Vector2i coords_from, int alternative_from, int source_to, Vector2i coords_to, int alternative_to )  
void set_coords_level_tile_proxy ( int p_source_from, Vector2i coords_from, int source_to, Vector2i coords_to )  
void set_custom_data_layer_name ( int layer_index, String layer_name )  
void set_custom_data_layer_type ( int layer_index, Variant.Type layer_type )  
void set_navigation_layer_layer_value ( int layer_index, int layer_number, bool value )  
void set_navigation_layer_layers ( int layer_index, int layers )  
void set_occlusion_layer_light_mask ( int layer_index, int light_mask )  
void set_occlusion_layer_sdf_collision ( int layer_index, bool sdf_collision )  
void set_physics_layer_collision_layer ( int layer_index, int layer )  
void set_physics_layer_collision_mask ( int layer_index, int mask )  
void set_physics_layer_physics_material ( int layer_index, PhysicsMaterial physics_material )  
void set_source_id ( int source_id, int new_source_id )  
void set_source_level_tile_proxy ( int source_from, int source_to )  
void set_terrain_color ( int terrain_set, int terrain_index, Color color )  
void set_terrain_name ( int terrain_set, int terrain_index, String name )  
void set_terrain_set_mode ( int terrain_set, TerrainMode mode )     Enumerations enum TileShape: 
TileShape TILE_SHAPE_SQUARE = 0
 Rectangular tile shape. 
TileShape TILE_SHAPE_ISOMETRIC = 1
 Diamond tile shape (for isometric look). Note: Isometric TileSet works best if TileMap and all its layers have Y-sort enabled. 
TileShape TILE_SHAPE_HALF_OFFSET_SQUARE = 2
 Rectangular tile shape with one row/column out of two offset by half a tile. 
TileShape TILE_SHAPE_HEXAGON = 3
 Hexagonal tile shape. enum TileLayout: 
TileLayout TILE_LAYOUT_STACKED = 0
 Tile coordinates layout where both axis stay consistent with their respective local horizontal and vertical axis. 
TileLayout TILE_LAYOUT_STACKED_OFFSET = 1
 Same as TILE_LAYOUT_STACKED, but the first half-offset is negative instead of positive. 
TileLayout TILE_LAYOUT_STAIRS_RIGHT = 2
 Tile coordinates layout where the horizontal axis stay horizontal, and the vertical one goes down-right. 
TileLayout TILE_LAYOUT_STAIRS_DOWN = 3
 Tile coordinates layout where the vertical axis stay vertical, and the horizontal one goes down-right. 
TileLayout TILE_LAYOUT_DIAMOND_RIGHT = 4
 Tile coordinates layout where the horizontal axis goes up-right, and the vertical one goes down-right. 
TileLayout TILE_LAYOUT_DIAMOND_DOWN = 5
 Tile coordinates layout where the horizontal axis goes down-right, and the vertical one goes down-left. enum TileOffsetAxis: 
TileOffsetAxis TILE_OFFSET_AXIS_HORIZONTAL = 0
 Horizontal half-offset. 
TileOffsetAxis TILE_OFFSET_AXIS_VERTICAL = 1
 Vertical half-offset. enum CellNeighbor: 
CellNeighbor CELL_NEIGHBOR_RIGHT_SIDE = 0
 Neighbor on the right side. 
CellNeighbor CELL_NEIGHBOR_RIGHT_CORNER = 1
 Neighbor in the right corner. 
CellNeighbor CELL_NEIGHBOR_BOTTOM_RIGHT_SIDE = 2
 Neighbor on the bottom right side. 
CellNeighbor CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER = 3
 Neighbor in the bottom right corner. 
CellNeighbor CELL_NEIGHBOR_BOTTOM_SIDE = 4
 Neighbor on the bottom side. 
CellNeighbor CELL_NEIGHBOR_BOTTOM_CORNER = 5
 Neighbor in the bottom corner. 
CellNeighbor CELL_NEIGHBOR_BOTTOM_LEFT_SIDE = 6
 Neighbor on the bottom left side. 
CellNeighbor CELL_NEIGHBOR_BOTTOM_LEFT_CORNER = 7
 Neighbor in the bottom left corner. 
CellNeighbor CELL_NEIGHBOR_LEFT_SIDE = 8
 Neighbor on the left side. 
CellNeighbor CELL_NEIGHBOR_LEFT_CORNER = 9
 Neighbor in the left corner. 
CellNeighbor CELL_NEIGHBOR_TOP_LEFT_SIDE = 10
 Neighbor on the top left side. 
CellNeighbor CELL_NEIGHBOR_TOP_LEFT_CORNER = 11
 Neighbor in the top left corner. 
CellNeighbor CELL_NEIGHBOR_TOP_SIDE = 12
 Neighbor on the top side. 
CellNeighbor CELL_NEIGHBOR_TOP_CORNER = 13
 Neighbor in the top corner. 
CellNeighbor CELL_NEIGHBOR_TOP_RIGHT_SIDE = 14
 Neighbor on the top right side. 
CellNeighbor CELL_NEIGHBOR_TOP_RIGHT_CORNER = 15
 Neighbor in the top right corner. enum TerrainMode: 
TerrainMode TERRAIN_MODE_MATCH_CORNERS_AND_SIDES = 0
 Requires both corners and side to match with neighboring tiles' terrains. 
TerrainMode TERRAIN_MODE_MATCH_CORNERS = 1
 Requires corners to match with neighboring tiles' terrains. 
TerrainMode TERRAIN_MODE_MATCH_SIDES = 2
 Requires sides to match with neighboring tiles' terrains.   Property Descriptions 
TileLayout tile_layout = 0
  void set_tile_layout ( TileLayout value )
 
TileLayout get_tile_layout ( )
  For all half-offset shapes (Isometric, Hexagonal and Half-Offset square), changes the way tiles are indexed in the TileMap grid. 
TileOffsetAxis tile_offset_axis = 0
  void set_tile_offset_axis ( TileOffsetAxis value )
 
TileOffsetAxis get_tile_offset_axis ( )
  For all half-offset shapes (Isometric, Hexagonal and Half-Offset square), determines the offset axis. 
TileShape tile_shape = 0
  void set_tile_shape ( TileShape value )
 
TileShape get_tile_shape ( )
  The tile shape. 
Vector2i tile_size = Vector2i(16, 16)
  void set_tile_size ( Vector2i value )
 
Vector2i get_tile_size ( )
  The tile size, in pixels. For all tile shapes, this size corresponds to the encompassing rectangle of the tile shape. This is thus the minimal cell size required in an atlas. 
bool uv_clipping = false
  void set_uv_clipping ( bool value )
 
bool is_uv_clipping ( )
  Enables/Disable uv clipping when rendering the tiles.   Method Descriptions void add_custom_data_layer ( int to_position=-1 ) Adds a custom data layer to the TileSet at the given position to_position in the array. If to_position is -1, adds it at the end of the array. Custom data layers allow assigning custom properties to atlas tiles. void add_navigation_layer ( int to_position=-1 ) Adds a navigation layer to the TileSet at the given position to_position in the array. If to_position is -1, adds it at the end of the array. Navigation layers allow assigning a navigable area to atlas tiles. void add_occlusion_layer ( int to_position=-1 ) Adds an occlusion layer to the TileSet at the given position to_position in the array. If to_position is -1, adds it at the end of the array. Occlusion layers allow assigning occlusion polygons to atlas tiles. 
int add_pattern ( TileMapPattern pattern, int index=-1 ) Adds a TileMapPattern to be stored in the TileSet resource. If provided, insert it at the given index. void add_physics_layer ( int to_position=-1 ) Adds a physics layer to the TileSet at the given position to_position in the array. If to_position is -1, adds it at the end of the array. Physics layers allow assigning collision polygons to atlas tiles. 
int add_source ( TileSetSource source, int atlas_source_id_override=-1 ) Adds a TileSetSource to the TileSet. If atlas_source_id_override is not -1, also set its source ID. Otherwise, a unique identifier is automatically generated. The function returns the added source ID or -1 if the source could not be added. Warning: A source cannot belong to two TileSets at the same time. If the added source was attached to another TileSet, it will be removed from that one. void add_terrain ( int terrain_set, int to_position=-1 ) Adds a new terrain to the given terrain set terrain_set at the given position to_position in the array. If to_position is -1, adds it at the end of the array. void add_terrain_set ( int to_position=-1 ) Adds a new terrain set at the given position to_position in the array. If to_position is -1, adds it at the end of the array. void cleanup_invalid_tile_proxies ( ) Clears tile proxies pointing to invalid tiles. void clear_tile_proxies ( ) Clears all tile proxies. 
Array get_alternative_level_tile_proxy ( int source_from, Vector2i coords_from, int alternative_from ) Returns the alternative-level proxy for the given identifiers. The returned array contains the three proxie's target identifiers (source ID, atlas coords ID and alternative tile ID). If the TileSet has no proxy for the given identifiers, returns an empty Array. 
Array get_coords_level_tile_proxy ( int source_from, Vector2i coords_from ) Returns the coordinate-level proxy for the given identifiers. The returned array contains the two target identifiers of the proxy (source ID and atlas coordinates ID). If the TileSet has no proxy for the given identifiers, returns an empty Array. 
int get_custom_data_layer_by_name ( String layer_name ) const
 Returns the index of the custom data layer identified by the given name. 
String get_custom_data_layer_name ( int layer_index ) const
 Returns the name of the custom data layer identified by the given index. 
Variant.Type get_custom_data_layer_type ( int layer_index ) const
 Returns the type of the custom data layer identified by the given index. 
int get_custom_data_layers_count ( ) const
 Returns the custom data layers count. 
bool get_navigation_layer_layer_value ( int layer_index, int layer_number ) const
 Returns whether or not the specified navigation layer of the TileSet navigation data layer identified by the given layer_index is enabled, given a navigation_layers layer_number between 1 and 32. 
int get_navigation_layer_layers ( int layer_index ) const
 Returns the navigation layers (as in the Navigation server) of the given TileSet navigation layer. 
int get_navigation_layers_count ( ) const
 Returns the navigation layers count. 
int get_next_source_id ( ) const
 Returns a new unused source ID. This generated ID is the same that a call to add_source would return. 
int get_occlusion_layer_light_mask ( int layer_index ) const
 Returns the light mask of the occlusion layer. 
bool get_occlusion_layer_sdf_collision ( int layer_index ) const
 Returns if the occluders from this layer use sdf_collision. 
int get_occlusion_layers_count ( ) const
 Returns the occlusion layers count. 
TileMapPattern get_pattern ( int index=-1 ) Returns the TileMapPattern at the given index. 
int get_patterns_count ( ) Returns the number of TileMapPattern this tile set handles. 
int get_physics_layer_collision_layer ( int layer_index ) const
 Returns the collision layer (as in the physics server) bodies on the given TileSet's physics layer are in. 
int get_physics_layer_collision_mask ( int layer_index ) const
 Returns the collision mask of bodies on the given TileSet's physics layer. 
PhysicsMaterial get_physics_layer_physics_material ( int layer_index ) const
 Returns the physics material of bodies on the given TileSet's physics layer. 
int get_physics_layers_count ( ) const
 Returns the physics layers count. 
TileSetSource get_source ( int source_id ) const
 Returns the TileSetSource with ID source_id. 
int get_source_count ( ) const
 Returns the number of TileSetSource in this TileSet. 
int get_source_id ( int index ) const
 Returns the source ID for source with index index. 
int get_source_level_tile_proxy ( int source_from ) Returns the source-level proxy for the given source identifier. If the TileSet has no proxy for the given identifier, returns -1. 
Color get_terrain_color ( int terrain_set, int terrain_index ) const
 Returns a terrain's color. 
String get_terrain_name ( int terrain_set, int terrain_index ) const
 Returns a terrain's name. 
TerrainMode get_terrain_set_mode ( int terrain_set ) const
 Returns a terrain set mode. 
int get_terrain_sets_count ( ) const
 Returns the terrain sets count. 
int get_terrains_count ( int terrain_set ) const
 Returns the number of terrains in the given terrain set. 
bool has_alternative_level_tile_proxy ( int source_from, Vector2i coords_from, int alternative_from ) Returns if there is an alternative-level proxy for the given identifiers. 
bool has_coords_level_tile_proxy ( int source_from, Vector2i coords_from ) Returns if there is a coodinates-level proxy for the given identifiers. 
bool has_source ( int source_id ) const
 Returns if this TileSet has a source for the given source ID. 
bool has_source_level_tile_proxy ( int source_from ) Returns if there is a source-level proxy for the given source ID. 
Array map_tile_proxy ( int source_from, Vector2i coords_from, int alternative_from ) const
 According to the configured proxies, maps the provided identifiers to a new set of identifiers. The source ID, atlas coordinates ID and alternative tile ID are returned as a 3 elements Array. This function first look for matching alternative-level proxies, then coordinates-level proxies, then source-level proxies. If no proxy corresponding to provided identifiers are found, returns the same values the ones used as arguments. void move_custom_data_layer ( int layer_index, int to_position ) Moves the custom data layer at index layer_index to the given position to_position in the array. Also updates the atlas tiles accordingly. void move_navigation_layer ( int layer_index, int to_position ) Moves the navigation layer at index layer_index to the given position to_position in the array. Also updates the atlas tiles accordingly. void move_occlusion_layer ( int layer_index, int to_position ) Moves the occlusion layer at index layer_index to the given position to_position in the array. Also updates the atlas tiles accordingly. void move_physics_layer ( int layer_index, int to_position ) Moves the physics layer at index layer_index to the given position to_position in the array. Also updates the atlas tiles accordingly. void move_terrain ( int terrain_set, int terrain_index, int to_position ) Moves the terrain at index terrain_index for terrain set terrain_set to the given position to_position in the array. Also updates the atlas tiles accordingly. void move_terrain_set ( int terrain_set, int to_position ) Moves the terrain set at index terrain_set to the given position to_position in the array. Also updates the atlas tiles accordingly. void remove_alternative_level_tile_proxy ( int source_from, Vector2i coords_from, int alternative_from ) Removes an alternative-level proxy for the given identifiers. void remove_coords_level_tile_proxy ( int source_from, Vector2i coords_from ) Removes a coordinates-level proxy for the given identifiers. void remove_custom_data_layer ( int layer_index ) Removes the custom data layer at index layer_index. Also updates the atlas tiles accordingly. void remove_navigation_layer ( int layer_index ) Removes the navigation layer at index layer_index. Also updates the atlas tiles accordingly. void remove_occlusion_layer ( int layer_index ) Removes the occlusion layer at index layer_index. Also updates the atlas tiles accordingly. void remove_pattern ( int index ) Remove the TileMapPattern at the given index. void remove_physics_layer ( int layer_index ) Removes the physics layer at index layer_index. Also updates the atlas tiles accordingly. void remove_source ( int source_id ) Removes the source with the given source ID. void remove_source_level_tile_proxy ( int source_from ) Removes a source-level tile proxy. void remove_terrain ( int terrain_set, int terrain_index ) Removes the terrain at index terrain_index in the given terrain set terrain_set. Also updates the atlas tiles accordingly. void remove_terrain_set ( int terrain_set ) Removes the terrain set at index terrain_set. Also updates the atlas tiles accordingly. void set_alternative_level_tile_proxy ( int source_from, Vector2i coords_from, int alternative_from, int source_to, Vector2i coords_to, int alternative_to ) Create an alternative-level proxy for the given identifiers. A proxy will map set of tile identifiers to another set of identifiers. This can be used to replace a tile in all TileMaps using this TileSet, as TileMap nodes will find and use the proxy's target tile when one is available. Proxied tiles can be automatically replaced in TileMap nodes using the editor. void set_coords_level_tile_proxy ( int p_source_from, Vector2i coords_from, int source_to, Vector2i coords_to ) Creates a coordinates-level proxy for the given identifiers. A proxy will map set of tile identifiers to another set of identifiers. The alternative tile ID is kept the same when using coordinates-level proxies. This can be used to replace a tile in all TileMaps using this TileSet, as TileMap nodes will find and use the proxy's target tile when one is available. Proxied tiles can be automatically replaced in TileMap nodes using the editor. void set_custom_data_layer_name ( int layer_index, String layer_name ) Sets the name of the custom data layer identified by the given index. Names are identifiers of the layer therefore if the name is already taken it will fail and raise an error. void set_custom_data_layer_type ( int layer_index, Variant.Type layer_type ) Sets the type of the custom data layer identified by the given index. void set_navigation_layer_layer_value ( int layer_index, int layer_number, bool value ) Based on value, enables or disables the specified navigation layer of the TileSet navigation data layer identified by the given layer_index, given a navigation_layers layer_number between 1 and 32. void set_navigation_layer_layers ( int layer_index, int layers ) Sets the navigation layers (as in the navigation server) for navigation regions in the given TileSet navigation layer. void set_occlusion_layer_light_mask ( int layer_index, int light_mask ) Sets the occlusion layer (as in the rendering server) for occluders in the given TileSet occlusion layer. void set_occlusion_layer_sdf_collision ( int layer_index, bool sdf_collision ) Enables or disables SDF collision for occluders in the given TileSet occlusion layer. void set_physics_layer_collision_layer ( int layer_index, int layer ) Sets the physics layer (as in the physics server) for bodies in the given TileSet physics layer. void set_physics_layer_collision_mask ( int layer_index, int mask ) Sets the physics layer (as in the physics server) for bodies in the given TileSet physics layer. void set_physics_layer_physics_material ( int layer_index, PhysicsMaterial physics_material ) Sets the physics material for bodies in the given TileSet physics layer. void set_source_id ( int source_id, int new_source_id ) Changes a source's ID. void set_source_level_tile_proxy ( int source_from, int source_to ) Creates a source-level proxy for the given source ID. A proxy will map set of tile identifiers to another set of identifiers. Both the atlas coordinates ID and the alternative tile ID are kept the same when using source-level proxies. This can be used to replace a source in all TileMaps using this TileSet, as TileMap nodes will find and use the proxy's target source when one is available. Proxied tiles can be automatically replaced in TileMap nodes using the editor. void set_terrain_color ( int terrain_set, int terrain_index, Color color ) Sets a terrain's color. This color is used for identifying the different terrains in the TileSet editor. void set_terrain_name ( int terrain_set, int terrain_index, String name ) Sets a terrain's name. void set_terrain_set_mode ( int terrain_set, TerrainMode mode ) Sets a terrain mode. Each mode determines which bits of a tile shape is used to match the neighboring tiles' terrains.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_tileset.html


classes/class_animationnodeblendspace2d
-----------------------------------------------------------
AnimationNodeBlendSpace2D Inherits: AnimationRootNode < AnimationNode < Resource < RefCounted < Object A set of AnimationRootNodes placed on 2D coordinates, crossfading between the three adjacent ones. Used by AnimationTree.  Description A resource used by AnimationNodeBlendTree. AnimationNodeBlendSpace1D represents a virtual 2D space on which AnimationRootNodes are placed. Outputs the linear blend of the three adjacent animations using a Vector2 weight. Adjacent in this context means the three AnimationRootNodes making up the triangle that contains the current value. You can add vertices to the blend space with add_blend_point and automatically triangulate it by setting auto_triangles to true. Otherwise, use add_triangle and remove_triangle to triangulate the blend space by hand.   Tutorials  Using AnimationTree Third Person Shooter Demo    Properties  
bool auto_triangles true  
BlendMode blend_mode 0  
Vector2 max_space Vector2(1, 1)  
Vector2 min_space Vector2(-1, -1)  
Vector2 snap Vector2(0.1, 0.1)  
bool sync false  
String x_label "x"  
String y_label "y"     Methods  
void add_blend_point ( AnimationRootNode node, Vector2 pos, int at_index=-1 )  
void add_triangle ( int x, int y, int z, int at_index=-1 )  
int get_blend_point_count ( ) const  
AnimationRootNode get_blend_point_node ( int point ) const  
Vector2 get_blend_point_position ( int point ) const  
int get_triangle_count ( ) const  
int get_triangle_point ( int triangle, int point )  
void remove_blend_point ( int point )  
void remove_triangle ( int triangle )  
void set_blend_point_node ( int point, AnimationRootNode node )  
void set_blend_point_position ( int point, Vector2 pos )     Signals triangles_updated ( ) Emitted every time the blend space's triangles are created, removed, or when one of their vertices changes position.   Enumerations enum BlendMode: 
BlendMode BLEND_MODE_INTERPOLATED = 0
 The interpolation between animations is linear. 
BlendMode BLEND_MODE_DISCRETE = 1
 The blend space plays the animation of the animation node which blending position is closest to. Useful for frame-by-frame 2D animations. 
BlendMode BLEND_MODE_DISCRETE_CARRY = 2
 Similar to BLEND_MODE_DISCRETE, but starts the new animation at the last animation's playback position.   Property Descriptions 
bool auto_triangles = true
  void set_auto_triangles ( bool value )
 
bool get_auto_triangles ( )
  If true, the blend space is triangulated automatically. The mesh updates every time you add or remove points with add_blend_point and remove_blend_point. 
BlendMode blend_mode = 0
  void set_blend_mode ( BlendMode value )
 
BlendMode get_blend_mode ( )
  Controls the interpolation between animations. See BlendMode constants. 
Vector2 max_space = Vector2(1, 1)
  void set_max_space ( Vector2 value )
 
Vector2 get_max_space ( )
  The blend space's X and Y axes' upper limit for the points' position. See add_blend_point. 
Vector2 min_space = Vector2(-1, -1)
  void set_min_space ( Vector2 value )
 
Vector2 get_min_space ( )
  The blend space's X and Y axes' lower limit for the points' position. See add_blend_point. 
Vector2 snap = Vector2(0.1, 0.1)
  void set_snap ( Vector2 value )
 
Vector2 get_snap ( )
  Position increment to snap to when moving a point. 
bool sync = false
  void set_use_sync ( bool value )
 
bool is_using_sync ( )
  If false, the blended animations' frame are stopped when the blend value is 0. If true, forcing the blended animations to advance frame. 
String x_label = "x"
  void set_x_label ( String value )
 
String get_x_label ( )
  Name of the blend space's X axis. 
String y_label = "y"
  void set_y_label ( String value )
 
String get_y_label ( )
  Name of the blend space's Y axis.   Method Descriptions void add_blend_point ( AnimationRootNode node, Vector2 pos, int at_index=-1 ) Adds a new point that represents a node at the position set by pos. You can insert it at a specific index using the at_index argument. If you use the default value for at_index, the point is inserted at the end of the blend points array. void add_triangle ( int x, int y, int z, int at_index=-1 ) Creates a new triangle using three points x, y, and z. Triangles can overlap. You can insert the triangle at a specific index using the at_index argument. If you use the default value for at_index, the point is inserted at the end of the blend points array. 
int get_blend_point_count ( ) const
 Returns the number of points in the blend space. 
AnimationRootNode get_blend_point_node ( int point ) const
 Returns the AnimationRootNode referenced by the point at index point. 
Vector2 get_blend_point_position ( int point ) const
 Returns the position of the point at index point. 
int get_triangle_count ( ) const
 Returns the number of triangles in the blend space. 
int get_triangle_point ( int triangle, int point ) Returns the position of the point at index point in the triangle of index triangle. void remove_blend_point ( int point ) Removes the point at index point from the blend space. void remove_triangle ( int triangle ) Removes the triangle at index triangle from the blend space. void set_blend_point_node ( int point, AnimationRootNode node ) Changes the AnimationNode referenced by the point at index point. void set_blend_point_position ( int point, Vector2 pos ) Updates the position of the point at index point on the blend axis.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodeblendspace2d.html


classes/class_popup
-----------------------------------------------------------
Popup Inherits: Window < Viewport < Node < Object Inherited By: PopupMenu, PopupPanel Base class for contextual windows and panels with fixed position.  Description Popup is a base class for contextual windows and panels with fixed position. It's a modal by default (see Window.popup_window) and provides methods for implementing custom popup behavior.   Properties  
bool borderless true (overrides Window)  
bool popup_window true (overrides Window)  
bool transient true (overrides Window)  
bool unresizable true (overrides Window)  
bool visible false (overrides Window)  
bool wrap_controls true (overrides Window)     Theme Properties  
StyleBox panel     Signals popup_hide ( ) Emitted when the popup is hidden.   Theme Property Descriptions 
StyleBox panel Default StyleBox for the Popup.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_popup.html


classes/class_cylindershape3d
-----------------------------------------------------------
CylinderShape3D Inherits: Shape3D < Resource < RefCounted < Object A 3D cylinder shape used for physics collision.  Description A 3D cylinder shape, intended for use in physics. Usually used to provide a shape for a CollisionShape3D. Note: There are several known bugs with cylinder collision shapes. Using CapsuleShape3D or BoxShape3D instead is recommended. Performance: CylinderShape3D is fast to check collisions against, but it is slower than CapsuleShape3D, BoxShape3D, and SphereShape3D.   Tutorials  Third Person Shooter Demo 3D Physics Tests Demo 3D Voxel Demo    Properties  
float height 2.0  
float radius 0.5     Property Descriptions 
float height = 2.0
  void set_height ( float value )
 
float get_height ( )
  The cylinder's height. 
float radius = 0.5
  void set_radius ( float value )
 
float get_radius ( )
  The cylinder's radius.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_cylindershape3d.html


classes/class_compressedtexture2darray
-----------------------------------------------------------
CompressedTexture2DArray Inherits: CompressedTextureLayered < TextureLayered < Texture < Resource < RefCounted < Object Array of 2-dimensional textures, optionally compressed.  Description A texture array that is loaded from a .ctexarray file. This file format is internal to Godot; it is created by importing other image formats with the import system. CompressedTexture2DArray can use one of 4 compression methods:  Lossless (WebP or PNG, uncompressed on the GPU) Lossy (WebP, uncompressed on the GPU) VRAM Compressed (compressed on the GPU) VRAM Uncompressed (uncompressed on the GPU) Basis Universal (compressed on the GPU. Lower file sizes than VRAM Compressed, but slower to compress and lower quality than VRAM Compressed)  Only VRAM Compressed actually reduces the memory usage on the GPU. The Lossless and Lossy compression methods will reduce the required storage on disk, but they will not reduce memory usage on the GPU as the texture is sent to the GPU uncompressed. Using VRAM Compressed also improves loading times, as VRAM-compressed textures are faster to load compared to textures using lossless or lossy compression. VRAM compression can exhibit noticeable artifacts and is intended to be used for 3D rendering, not 2D. See Texture2DArray for a general description of texture arrays.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_compressedtexture2darray.html


classes/class_csgprimitive3d
-----------------------------------------------------------
CSGPrimitive3D Inherits: CSGShape3D < GeometryInstance3D < VisualInstance3D < Node3D < Node < Object Inherited By: CSGBox3D, CSGCylinder3D, CSGMesh3D, CSGPolygon3D, CSGSphere3D, CSGTorus3D Base class for CSG primitives.  Description Parent class for various CSG primitives. It contains code and functionality that is common between them. It cannot be used directly. Instead use one of the various classes that inherit from it. Note: CSG nodes are intended to be used for level prototyping. Creating CSG nodes has a significant CPU cost compared to creating a MeshInstance3D with a PrimitiveMesh. Moving a CSG node within another CSG node also has a significant CPU cost, so it should be avoided during gameplay.   Tutorials  Prototyping levels with CSG    Properties  
bool flip_faces false     Property Descriptions 
bool flip_faces = false
  void set_flip_faces ( bool value )
 
bool get_flip_faces ( )
  If set, the order of the vertices in each triangle are reversed resulting in the backside of the mesh being drawn.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_csgprimitive3d.html


classes/class_gpuparticlescollisionbox3d
-----------------------------------------------------------
GPUParticlesCollisionBox3D Inherits: GPUParticlesCollision3D < VisualInstance3D < Node3D < Node < Object A box-shaped 3D particle collision shape affecting GPUParticles3D nodes.  Description A box-shaped 3D particle collision shape affecting GPUParticles3D nodes. Particle collision shapes work in real-time and can be moved, rotated and scaled during gameplay. Unlike attractors, non-uniform scaling of collision shapes is not supported. Note: ParticleProcessMaterial.collision_mode must be ParticleProcessMaterial.COLLISION_RIGID or ParticleProcessMaterial.COLLISION_HIDE_ON_CONTACT on the GPUParticles3D's process material for collision to work. Note: Particle collision only affects GPUParticles3D, not CPUParticles3D.   Properties  
Vector3 size Vector3(2, 2, 2)     Property Descriptions 
Vector3 size = Vector3(2, 2, 2)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The collision box's size in 3D units.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gpuparticlescollisionbox3d.html


classes/class_texturerect
-----------------------------------------------------------
TextureRect Inherits: Control < CanvasItem < Node < Object A control that displays a texture.  Description A control that displays a texture, for example an icon inside a GUI. The texture's placement can be controlled with the stretch_mode property. It can scale, tile, or stay centered inside its bounding rectangle.   Tutorials  3D Voxel Demo    Properties  
ExpandMode expand_mode 0  
bool flip_h false  
bool flip_v false  
MouseFilter mouse_filter 1 (overrides Control)  
StretchMode stretch_mode 0  
Texture2D texture      Enumerations enum ExpandMode: 
ExpandMode EXPAND_KEEP_SIZE = 0
 The minimum size will be equal to texture size, i.e. TextureRect can't be smaller than the texture. 
ExpandMode EXPAND_IGNORE_SIZE = 1
 The size of the texture won't be considered for minimum size calculation, so the TextureRect can be shrunk down past the texture size. 
ExpandMode EXPAND_FIT_WIDTH = 2
 The height of the texture will be ignored. Minimum width will be equal to the current height. Useful for horizontal layouts, e.g. inside HBoxContainer. 
ExpandMode EXPAND_FIT_WIDTH_PROPORTIONAL = 3
 Same as EXPAND_FIT_WIDTH, but keeps texture's aspect ratio. 
ExpandMode EXPAND_FIT_HEIGHT = 4
 The width of the texture will be ignored. Minimum height will be equal to the current width. Useful for vertical layouts, e.g. inside VBoxContainer. 
ExpandMode EXPAND_FIT_HEIGHT_PROPORTIONAL = 5
 Same as EXPAND_FIT_HEIGHT, but keeps texture's aspect ratio. enum StretchMode: 
StretchMode STRETCH_SCALE = 0
 Scale to fit the node's bounding rectangle. 
StretchMode STRETCH_TILE = 1
 Tile inside the node's bounding rectangle. 
StretchMode STRETCH_KEEP = 2
 The texture keeps its original size and stays in the bounding rectangle's top-left corner. 
StretchMode STRETCH_KEEP_CENTERED = 3
 The texture keeps its original size and stays centered in the node's bounding rectangle. 
StretchMode STRETCH_KEEP_ASPECT = 4
 Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio. 
StretchMode STRETCH_KEEP_ASPECT_CENTERED = 5
 Scale the texture to fit the node's bounding rectangle, center it and maintain its aspect ratio. 
StretchMode STRETCH_KEEP_ASPECT_COVERED = 6
 Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits.   Property Descriptions 
ExpandMode expand_mode = 0
  void set_expand_mode ( ExpandMode value )
 
ExpandMode get_expand_mode ( )
  Defines how minimum size is determined based on the texture's size. See ExpandMode for options. Note: Using EXPAND_FIT_WIDTH, EXPAND_FIT_WIDTH_PROPORTIONAL, EXPAND_FIT_HEIGHT or EXPAND_FIT_HEIGHT_PROPORTIONAL may result in unstable behavior in some containers. This functionality is being re-evaluated and will change in the future. 
bool flip_h = false
  void set_flip_h ( bool value )
 
bool is_flipped_h ( )
  If true, texture is flipped horizontally. 
bool flip_v = false
  void set_flip_v ( bool value )
 
bool is_flipped_v ( )
  If true, texture is flipped vertically. 
StretchMode stretch_mode = 0
  void set_stretch_mode ( StretchMode value )
 
StretchMode get_stretch_mode ( )
  Controls the texture's behavior when resizing the node's bounding rectangle. See StretchMode. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  The node's Texture2D resource.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texturerect.html


classes/class_multiplayersynchronizer
-----------------------------------------------------------
MultiplayerSynchronizer Inherits: Node < Object Synchronizes properties from the multiplayer authority to the remote peers.  Description By default, MultiplayerSynchronizer synchronizes configured properties to all peers. Visibility can be handled directly with set_visibility_for or as-needed with add_visibility_filter and update_visibility. MultiplayerSpawners will handle nodes according to visibility of synchronizers as long as the node at root_path was spawned by one. Internally, MultiplayerSynchronizer uses MultiplayerAPI.object_configuration_add to notify synchronization start passing the Node at root_path as the object and itself as the configuration, and uses MultiplayerAPI.object_configuration_remove to notify synchronization end in a similar way. Note: Synchronization is not supported for Object type properties, like Resource. Properties that are unique to each peer, like the instance IDs of Objects (see Object.get_instance_id) or RIDs, will also not work in synchronization.   Properties  
float delta_interval 0.0  
bool public_visibility true  
SceneReplicationConfig replication_config   
float replication_interval 0.0  
NodePath root_path NodePath("..")  
VisibilityUpdateMode visibility_update_mode 0     Methods  
void add_visibility_filter ( Callable filter )  
bool get_visibility_for ( int peer ) const  
void remove_visibility_filter ( Callable filter )  
void set_visibility_for ( int peer, bool visible )  
void update_visibility ( int for_peer=0 )     Signals delta_synchronized ( ) Emitted when a new delta synchronization state is received by this synchronizer after the properties have been updated. synchronized ( ) Emitted when a new synchronization state is received by this synchronizer after the properties have been updated. visibility_changed ( int for_peer ) Emitted when visibility of for_peer is updated. See update_visibility.   Enumerations enum VisibilityUpdateMode: 
VisibilityUpdateMode VISIBILITY_PROCESS_IDLE = 0
 Visibility filters are updated during process frames (see Node.NOTIFICATION_INTERNAL_PROCESS). 
VisibilityUpdateMode VISIBILITY_PROCESS_PHYSICS = 1
 Visibility filters are updated during physics frames (see Node.NOTIFICATION_INTERNAL_PHYSICS_PROCESS). 
VisibilityUpdateMode VISIBILITY_PROCESS_NONE = 2
 Visibility filters are not updated automatically, and must be updated manually by calling update_visibility.   Property Descriptions 
float delta_interval = 0.0
  void set_delta_interval ( float value )
 
float get_delta_interval ( )
  Time interval between delta synchronizations. When set to 0.0 (the default), delta synchronizations happen every network process frame. 
bool public_visibility = true
  void set_visibility_public ( bool value )
 
bool is_visibility_public ( )
  Whether synchronization should be visible to all peers by default. See set_visibility_for and add_visibility_filter for ways of configuring fine-grained visibility options. 
SceneReplicationConfig replication_config  void set_replication_config ( SceneReplicationConfig value )
 
SceneReplicationConfig get_replication_config ( )
  Resource containing which properties to synchronize. 
float replication_interval = 0.0
  void set_replication_interval ( float value )
 
float get_replication_interval ( )
  Time interval between synchronizations. When set to 0.0 (the default), synchronizations happen every network process frame. 
NodePath root_path = NodePath("..")
  void set_root_path ( NodePath value )
 
NodePath get_root_path ( )
  Node path that replicated properties are relative to. If root_path was spawned by a MultiplayerSpawner, the node will be also be spawned and despawned based on this synchronizer visibility options. 
VisibilityUpdateMode visibility_update_mode = 0
  void set_visibility_update_mode ( VisibilityUpdateMode value )
 
VisibilityUpdateMode get_visibility_update_mode ( )
  Specifies when visibility filters are updated (see VisibilityUpdateMode for options).   Method Descriptions void add_visibility_filter ( Callable filter ) Adds a peer visibility filter for this synchronizer. filter should take a peer ID int and return a bool. 
bool get_visibility_for ( int peer ) const
 Queries the current visibility for peer peer. void remove_visibility_filter ( Callable filter ) Removes a peer visibility filter from this synchronizer. void set_visibility_for ( int peer, bool visible ) Sets the visibility of peer to visible. If peer is 0, the value of public_visibility will be updated instead. void update_visibility ( int for_peer=0 ) Updates the visibility of for_peer according to visibility filters. If for_peer is 0 (the default), all peers' visibilties are updated.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_multiplayersynchronizer.html


classes/class_imagetexturelayered
-----------------------------------------------------------
ImageTextureLayered Inherits: TextureLayered < Texture < Resource < RefCounted < Object Inherited By: Cubemap, CubemapArray, Texture2DArray Base class for texture types which contain the data of multiple ImageTextures. Each image is of the same size and format.  Description Base class for Texture2DArray, Cubemap and CubemapArray. Cannot be used directly, but contains all the functions necessary for accessing the derived resource types. See also Texture3D.   Methods  
Error create_from_images ( Image[] images )  
void update_layer ( Image image, int layer )     Method Descriptions 
Error create_from_images ( Image[] images ) Creates an ImageTextureLayered from an array of Images. See Image.create for the expected data format. The first image decides the width, height, image format and mipmapping setting. The other images must have the same width, height, image format and mipmapping setting. Each Image represents one layer. void update_layer ( Image image, int layer ) Replaces the existing Image data at the given layer with this new image. The given Image must have the same width, height, image format, and mipmapping flag as the rest of the referenced images. If the image format is unsupported, it will be decompressed and converted to a similar and supported Format. The update is immediate: it's synchronized with drawing.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_imagetexturelayered.html


classes/class_placeholdertexture2d
-----------------------------------------------------------
PlaceholderTexture2D Inherits: Texture2D < Texture < Resource < RefCounted < Object Placeholder class for a 2-dimensional texture.  Description This class is used when loading a project that uses a Texture2D subclass in 2 conditions:  When running the project exported in dedicated server mode, only the texture's dimensions are kept (as they may be relied upon for gameplay purposes or positioning of other elements). This allows reducing the exported PCK's size significantly. When this subclass is missing due to using a different engine version or build (e.g. modules disabled).  Note: This is not intended to be used as an actual texture for rendering. It is not guaranteed to work like one in shaders or materials (for example when calculating UV).   Properties  
bool resource_local_to_scene false (overrides Resource)  
Vector2 size Vector2(1, 1)     Property Descriptions 
Vector2 size = Vector2(1, 1)
  void set_size ( Vector2 value )
 
Vector2 get_size ( )
  The texture's size (in pixels).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_placeholdertexture2d.html


classes/class_segmentshape2d
-----------------------------------------------------------
SegmentShape2D Inherits: Shape2D < Resource < RefCounted < Object A 2D line segment shape used for physics collision.  Description A 2D line segment shape, intended for use in physics. Usually used to provide a shape for a CollisionShape2D.   Properties  
Vector2 a Vector2(0, 0)  
Vector2 b Vector2(0, 10)     Property Descriptions 
Vector2 a = Vector2(0, 0)
  void set_a ( Vector2 value )
 
Vector2 get_a ( )
  The segment's first point position. 
Vector2 b = Vector2(0, 10)
  void set_b ( Vector2 value )
 
Vector2 get_b ( )
  The segment's second point position.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_segmentshape2d.html


classes/class_boxshape3d
-----------------------------------------------------------
BoxShape3D Inherits: Shape3D < Resource < RefCounted < Object A 3D box shape used for physics collision.  Description A 3D box shape, intended for use in physics. Usually used to provide a shape for a CollisionShape3D. Performance: BoxShape3D is fast to check collisions against. It is faster than CapsuleShape3D and CylinderShape3D, but slower than SphereShape3D.   Tutorials  3D Physics Tests Demo 3D Kinematic Character Demo 3D Platformer Demo    Properties  
Vector3 size Vector3(1, 1, 1)     Property Descriptions 
Vector3 size = Vector3(1, 1, 1)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The box's width, height and depth.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_boxshape3d.html


classes/class_skeletonmodification2djiggle
-----------------------------------------------------------
SkeletonModification2DJiggle Inherits: SkeletonModification2D < Resource < RefCounted < Object A modification that jiggles Bone2D nodes as they move towards a target.  Description This modification moves a series of bones, typically called a bone chain, towards a target. What makes this modification special is that it calculates the velocity and acceleration for each bone in the bone chain, and runs a very light physics-like calculation using the inputted values. This allows the bones to overshoot the target and "jiggle" around. It can be configured to act more like a spring, or sway around like cloth might. This modification is useful for adding additional motion to things like hair, the edges of clothing, and more. It has several settings to that allow control over how the joint moves when the target moves. Note: The Jiggle modifier has jiggle_joints, which are the data objects that hold the data for each joint in the Jiggle chain. This is different from than Bone2D nodes! Jiggle joints hold the data needed for each Bone2D in the bone chain used by the Jiggle modification.   Properties  
float damping 0.75  
Vector2 gravity Vector2(0, 6)  
int jiggle_data_chain_length 0  
float mass 0.75  
float stiffness 3.0  
NodePath target_nodepath NodePath("")  
bool use_gravity false     Methods  
int get_collision_mask ( ) const  
NodePath get_jiggle_joint_bone2d_node ( int joint_idx ) const  
int get_jiggle_joint_bone_index ( int joint_idx ) const  
float get_jiggle_joint_damping ( int joint_idx ) const  
Vector2 get_jiggle_joint_gravity ( int joint_idx ) const  
float get_jiggle_joint_mass ( int joint_idx ) const  
bool get_jiggle_joint_override ( int joint_idx ) const  
float get_jiggle_joint_stiffness ( int joint_idx ) const  
bool get_jiggle_joint_use_gravity ( int joint_idx ) const  
bool get_use_colliders ( ) const  
void set_collision_mask ( int collision_mask )  
void set_jiggle_joint_bone2d_node ( int joint_idx, NodePath bone2d_node )  
void set_jiggle_joint_bone_index ( int joint_idx, int bone_idx )  
void set_jiggle_joint_damping ( int joint_idx, float damping )  
void set_jiggle_joint_gravity ( int joint_idx, Vector2 gravity )  
void set_jiggle_joint_mass ( int joint_idx, float mass )  
void set_jiggle_joint_override ( int joint_idx, bool override )  
void set_jiggle_joint_stiffness ( int joint_idx, float stiffness )  
void set_jiggle_joint_use_gravity ( int joint_idx, bool use_gravity )  
void set_use_colliders ( bool use_colliders )     Property Descriptions 
float damping = 0.75
  void set_damping ( float value )
 
float get_damping ( )
  The default amount of damping applied to the Jiggle joints, if they are not overridden. Higher values lead to more of the calculated velocity being applied. 
Vector2 gravity = Vector2(0, 6)
  void set_gravity ( Vector2 value )
 
Vector2 get_gravity ( )
  The default amount of gravity applied to the Jiggle joints, if they are not overridden. 
int jiggle_data_chain_length = 0
  void set_jiggle_data_chain_length ( int value )
 
int get_jiggle_data_chain_length ( )
  The amount of Jiggle joints in the Jiggle modification. 
float mass = 0.75
  void set_mass ( float value )
 
float get_mass ( )
  The default amount of mass assigned to the Jiggle joints, if they are not overridden. Higher values lead to faster movements and more overshooting. 
float stiffness = 3.0
  void set_stiffness ( float value )
 
float get_stiffness ( )
  The default amount of stiffness assigned to the Jiggle joints, if they are not overridden. Higher values act more like springs, quickly moving into the correct position. 
NodePath target_nodepath = NodePath("")
  void set_target_node ( NodePath value )
 
NodePath get_target_node ( )
  The NodePath to the node that is the target for the Jiggle modification. This node is what the Jiggle chain will attempt to rotate the bone chain to. 
bool use_gravity = false
  void set_use_gravity ( bool value )
 
bool get_use_gravity ( )
  Whether the gravity vector, gravity, should be applied to the Jiggle joints, assuming they are not overriding the default settings.   Method Descriptions 
int get_collision_mask ( ) const
 Returns the collision mask used by the Jiggle modifier when collisions are enabled. 
NodePath get_jiggle_joint_bone2d_node ( int joint_idx ) const
 Returns the Bone2D node assigned to the Jiggle joint at joint_idx. 
int get_jiggle_joint_bone_index ( int joint_idx ) const
 Returns the index of the Bone2D node assigned to the Jiggle joint at joint_idx. 
float get_jiggle_joint_damping ( int joint_idx ) const
 Returns the amount of damping of the Jiggle joint at joint_idx. 
Vector2 get_jiggle_joint_gravity ( int joint_idx ) const
 Returns a Vector2 representing the amount of gravity the Jiggle joint at joint_idx is influenced by. 
float get_jiggle_joint_mass ( int joint_idx ) const
 Returns the amount of mass of the jiggle joint at joint_idx. 
bool get_jiggle_joint_override ( int joint_idx ) const
 Returns a boolean that indicates whether the joint at joint_idx is overriding the default Jiggle joint data defined in the modification. 
float get_jiggle_joint_stiffness ( int joint_idx ) const
 Returns the stiffness of the Jiggle joint at joint_idx. 
bool get_jiggle_joint_use_gravity ( int joint_idx ) const
 Returns a boolean that indicates whether the joint at joint_idx is using gravity or not. 
bool get_use_colliders ( ) const
 Returns whether the jiggle modifier is taking physics colliders into account when solving. void set_collision_mask ( int collision_mask ) Sets the collision mask that the Jiggle modifier will use when reacting to colliders, if the Jiggle modifier is set to take colliders into account. void set_jiggle_joint_bone2d_node ( int joint_idx, NodePath bone2d_node ) Sets the Bone2D node assigned to the Jiggle joint at joint_idx. void set_jiggle_joint_bone_index ( int joint_idx, int bone_idx ) Sets the bone index, bone_idx, of the Jiggle joint at joint_idx. When possible, this will also update the bone2d_node of the Jiggle joint based on data provided by the linked skeleton. void set_jiggle_joint_damping ( int joint_idx, float damping ) Sets the amount of damping of the Jiggle joint at joint_idx. void set_jiggle_joint_gravity ( int joint_idx, Vector2 gravity ) Sets the gravity vector of the Jiggle joint at joint_idx. void set_jiggle_joint_mass ( int joint_idx, float mass ) Sets the of mass of the Jiggle joint at joint_idx. void set_jiggle_joint_override ( int joint_idx, bool override ) Sets whether the Jiggle joint at joint_idx should override the default Jiggle joint settings. Setting this to true will make the joint use its own settings rather than the default ones attached to the modification. void set_jiggle_joint_stiffness ( int joint_idx, float stiffness ) Sets the of stiffness of the Jiggle joint at joint_idx. void set_jiggle_joint_use_gravity ( int joint_idx, bool use_gravity ) Sets whether the Jiggle joint at joint_idx should use gravity. void set_use_colliders ( bool use_colliders ) If true, the Jiggle modifier will take colliders into account, keeping them from entering into these collision objects.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeletonmodification2djiggle.html


classes/class_compressedtexture3d
-----------------------------------------------------------
CompressedTexture3D Inherits: Texture3D < Texture < Resource < RefCounted < Object Texture with 3 dimensions, optionally compressed.  Description CompressedTexture3D is the VRAM-compressed counterpart of ImageTexture3D. The file extension for CompressedTexture3D files is .ctex3d. This file format is internal to Godot; it is created by importing other image formats with the import system. CompressedTexture3D uses VRAM compression, which allows to reduce memory usage on the GPU when rendering the texture. This also improves loading times, as VRAM-compressed textures are faster to load compared to textures using lossless compression. VRAM compression can exhibit noticeable artifacts and is intended to be used for 3D rendering, not 2D. See Texture3D for a general description of 3D textures.   Properties  
String load_path ""     Methods  
Error load ( String path )     Property Descriptions 
String load_path = ""
  
Error load ( String path )
 
String get_load_path ( )
  The CompressedTexture3D's file path to a .ctex3d file.   Method Descriptions 
Error load ( String path ) Loads the texture from the specified path.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_compressedtexture3d.html


classes/class_bonemap
-----------------------------------------------------------
BoneMap Inherits: Resource < RefCounted < Object Describes a mapping of bone names for retargeting Skeleton3D into common names defined by a SkeletonProfile.  Description This class contains a dictionary that uses a list of bone names in SkeletonProfile as key names. By assigning the actual Skeleton3D bone name as the key value, it maps the Skeleton3D to the SkeletonProfile.   Tutorials  Retargeting 3D Skeletons    Properties  
SkeletonProfile profile     Methods  
StringName find_profile_bone_name ( StringName skeleton_bone_name ) const  
StringName get_skeleton_bone_name ( StringName profile_bone_name ) const  
void set_skeleton_bone_name ( StringName profile_bone_name, StringName skeleton_bone_name )     Signals bone_map_updated ( ) This signal is emitted when change the key value in the BoneMap. This is used to validate mapping and to update BoneMap editor. profile_updated ( ) This signal is emitted when change the value in profile or change the reference of profile. This is used to update key names in the BoneMap and to redraw the BoneMap editor.   Property Descriptions 
SkeletonProfile profile  void set_profile ( SkeletonProfile value )
 
SkeletonProfile get_profile ( )
  A SkeletonProfile of the mapping target. Key names in the BoneMap are synchronized with it.   Method Descriptions 
StringName find_profile_bone_name ( StringName skeleton_bone_name ) const
 Returns a profile bone name having skeleton_bone_name. If not found, an empty StringName will be returned. In the retargeting process, the returned bone name is the bone name of the target skeleton. 
StringName get_skeleton_bone_name ( StringName profile_bone_name ) const
 Returns a skeleton bone name is mapped to profile_bone_name. In the retargeting process, the returned bone name is the bone name of the source skeleton. void set_skeleton_bone_name ( StringName profile_bone_name, StringName skeleton_bone_name ) Maps a skeleton bone name to profile_bone_name. In the retargeting process, the setting bone name is the bone name of the source skeleton.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_bonemap.html


classes/class_shadermaterial
-----------------------------------------------------------
ShaderMaterial Inherits: Material < Resource < RefCounted < Object A material defined by a custom Shader program and the values of its shader parameters.  Description A material that uses a custom Shader program to render visual items (canvas items, meshes, skies, fog), or to process particles. Compared to other materials, ShaderMaterial gives deeper control over the generated shader code. For more information, see the shaders documentation index below. Multiple ShaderMaterials can use the same shader and configure different values for the shader uniforms. Note: For performance reasons, the Resource.changed signal is only emitted when the Resource.resource_name changes. Only in editor, it is also emitted for shader changes.   Tutorials  Shaders documentation index    Properties  
Shader shader     Methods  
Variant get_shader_parameter ( StringName param ) const  
void set_shader_parameter ( StringName param, Variant value )     Property Descriptions 
Shader shader  void set_shader ( Shader value )
 
Shader get_shader ( )
  The Shader program used to render this material.   Method Descriptions 
Variant get_shader_parameter ( StringName param ) const
 Returns the current value set for this material of a uniform in the shader. void set_shader_parameter ( StringName param, Variant value ) Changes the value set for this material of a uniform in the shader. Note: param is case-sensitive and must match the name of the uniform in the code exactly (not the capitalized name in the inspector). Note: Changes to the shader uniform will be effective on all instances using this ShaderMaterial. To prevent this, use per-instance uniforms with GeometryInstance3D.set_instance_shader_parameter or duplicate the ShaderMaterial resource using Resource.duplicate. Per-instance uniforms allow for better shader reuse and are therefore faster, so they should be preferred over duplicating the ShaderMaterial when possible.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_shadermaterial.html


classes/class_placeholdercubemap
-----------------------------------------------------------
PlaceholderCubemap Inherits: PlaceholderTextureLayered < TextureLayered < Texture < Resource < RefCounted < Object A Cubemap without image data.  Description This class replaces a Cubemap or a Cubemap-derived class in 2 conditions:  In dedicated server mode, where the image data shouldn't affect game logic. This allows reducing the exported PCK's size significantly. When the Cubemap-derived class is missing, for example when using a different engine version.  Note: This class is not intended for rendering or for use in shaders. Operations like calculating UV are not guaranteed to work.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_placeholdercubemap.html


classes/class_collisionpolygon2d
-----------------------------------------------------------
CollisionPolygon2D Inherits: Node2D < CanvasItem < Node < Object A node that provides a polygon shape to a CollisionObject2D parent.  Description A node that provides a thickened polygon shape (a prism) to a CollisionObject2D parent and allows to edit it. The polygon can be concave or convex. This can give a detection shape to an Area2D or turn PhysicsBody2D into a solid object. Warning: A non-uniformly scaled CollisionShape2D will likely not behave as expected. Make sure to keep its scale the same on all axes and adjust its shape resource instead.   Properties  
BuildMode build_mode 0  
bool disabled false  
bool one_way_collision false  
float one_way_collision_margin 1.0  
PackedVector2Array polygon PackedVector2Array()     Enumerations enum BuildMode: 
BuildMode BUILD_SOLIDS = 0
 Collisions will include the polygon and its contained area. In this mode the node has the same effect as several ConvexPolygonShape2D nodes, one for each convex shape in the convex decomposition of the polygon (but without the overhead of multiple nodes). 
BuildMode BUILD_SEGMENTS = 1
 Collisions will only include the polygon edges. In this mode the node has the same effect as a single ConcavePolygonShape2D made of segments, with the restriction that each segment (after the first one) starts where the previous one ends, and the last one ends where the first one starts (forming a closed but hollow polygon).   Property Descriptions 
BuildMode build_mode = 0
  void set_build_mode ( BuildMode value )
 
BuildMode get_build_mode ( )
  Collision build mode. Use one of the BuildMode constants. 
bool disabled = false
  void set_disabled ( bool value )
 
bool is_disabled ( )
  If true, no collisions will be detected. 
bool one_way_collision = false
  void set_one_way_collision ( bool value )
 
bool is_one_way_collision_enabled ( )
  If true, only edges that face up, relative to CollisionPolygon2D's rotation, will collide with other objects. Note: This property has no effect if this CollisionPolygon2D is a child of an Area2D node. 
float one_way_collision_margin = 1.0
  void set_one_way_collision_margin ( float value )
 
float get_one_way_collision_margin ( )
  The margin used for one-way collision (in pixels). Higher values will make the shape thicker, and work better for colliders that enter the polygon at a high velocity. 
PackedVector2Array polygon = PackedVector2Array()
  void set_polygon ( PackedVector2Array value )
 
PackedVector2Array get_polygon ( )
  The polygon's list of vertices. Each point will be connected to the next, and the final point will be connected to the first. Note: The returned vertices are in the local coordinate space of the given CollisionPolygon2D. Warning: The returned value is a clone of the PackedVector2Array, not a reference.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_collisionpolygon2d.html


classes/class_marker2d
-----------------------------------------------------------
Marker2D Inherits: Node2D < CanvasItem < Node < Object Generic 2D position hint for editing.  Description Generic 2D position hint for editing. It's just like a plain Node2D, but it displays as a cross in the 2D editor at all times. You can set the cross' visual size by using the gizmo in the 2D editor while the node is selected.   Properties  
float gizmo_extents 10.0     Property Descriptions 
float gizmo_extents = 10.0
  void set_gizmo_extents ( float value )
 
float get_gizmo_extents ( )
  Size of the gizmo cross that appears in the editor.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_marker2d.html


classes/class_csgtorus3d
-----------------------------------------------------------
CSGTorus3D Inherits: CSGPrimitive3D < CSGShape3D < GeometryInstance3D < VisualInstance3D < Node3D < Node < Object A CSG Torus shape.  Description This node allows you to create a torus for use with the CSG system. Note: CSG nodes are intended to be used for level prototyping. Creating CSG nodes has a significant CPU cost compared to creating a MeshInstance3D with a PrimitiveMesh. Moving a CSG node within another CSG node also has a significant CPU cost, so it should be avoided during gameplay.   Tutorials  Prototyping levels with CSG    Properties  
float inner_radius 0.5  
Material material   
float outer_radius 1.0  
int ring_sides 6  
int sides 8  
bool smooth_faces true     Property Descriptions 
float inner_radius = 0.5
  void set_inner_radius ( float value )
 
float get_inner_radius ( )
  The inner radius of the torus. 
Material material  void set_material ( Material value )
 
Material get_material ( )
  The material used to render the torus. 
float outer_radius = 1.0
  void set_outer_radius ( float value )
 
float get_outer_radius ( )
  The outer radius of the torus. 
int ring_sides = 6
  void set_ring_sides ( int value )
 
int get_ring_sides ( )
  The number of edges each ring of the torus is constructed of. 
int sides = 8
  void set_sides ( int value )
 
int get_sides ( )
  The number of slices the torus is constructed of. 
bool smooth_faces = true
  void set_smooth_faces ( bool value )
 
bool get_smooth_faces ( )
  If true the normals of the torus are set to give a smooth effect making the torus seem rounded. If false the torus will have a flat shaded look.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_csgtorus3d.html


classes/class_gltfnode
-----------------------------------------------------------
GLTFNode Inherits: Resource < RefCounted < Object GLTF node class.  Description Represents a GLTF node. GLTF nodes may have names, transforms, children (other GLTF nodes), and more specialized properties (represented by their own classes). GLTF nodes generally exist inside of GLTFState which represents all data of a GLTF file. Most of GLTFNode's properties are indices of other data in the GLTF file. You can extend a GLTF node with additional properties by using get_additional_data and set_additional_data.   Tutorials  Runtime file loading and saving GLTF scene and node spec    Properties  
int camera -1  
PackedInt32Array children PackedInt32Array()  
int height -1  
int light -1  
int mesh -1  
int parent -1  
Vector3 position Vector3(0, 0, 0)  
Quaternion rotation Quaternion(0, 0, 0, 1)  
Vector3 scale Vector3(1, 1, 1)  
int skeleton -1  
int skin -1  
Transform3D xform Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)     Methods  
Variant get_additional_data ( StringName extension_name )  
void set_additional_data ( StringName extension_name, Variant additional_data )     Property Descriptions 
int camera = -1
  void set_camera ( int value )
 
int get_camera ( )
  If this GLTF node is a camera, the index of the GLTFCamera in the GLTFState that describes the camera's properties. If -1, this node is not a camera. 
PackedInt32Array children = PackedInt32Array()
  void set_children ( PackedInt32Array value )
 
PackedInt32Array get_children ( )
  The indices of the child nodes in the GLTFState. If this GLTF node has no children, this will be an empty array. 
int height = -1
  void set_height ( int value )
 
int get_height ( )
  How deep into the node hierarchy this node is. A root node will have a height of 0, its children will have a height of 1, and so on. If -1, the height has not been calculated. 
int light = -1
  void set_light ( int value )
 
int get_light ( )
  If this GLTF node is a light, the index of the GLTFLight in the GLTFState that describes the light's properties. If -1, this node is not a light. 
int mesh = -1
  void set_mesh ( int value )
 
int get_mesh ( )
  If this GLTF node is a mesh, the index of the GLTFMesh in the GLTFState that describes the mesh's properties. If -1, this node is not a mesh. 
int parent = -1
  void set_parent ( int value )
 
int get_parent ( )
  The index of the parent node in the GLTFState. If -1, this node is a root node. 
Vector3 position = Vector3(0, 0, 0)
  void set_position ( Vector3 value )
 
Vector3 get_position ( )
  The position of the GLTF node relative to its parent. 
Quaternion rotation = Quaternion(0, 0, 0, 1)
  void set_rotation ( Quaternion value )
 
Quaternion get_rotation ( )
  The rotation of the GLTF node relative to its parent. 
Vector3 scale = Vector3(1, 1, 1)
  void set_scale ( Vector3 value )
 
Vector3 get_scale ( )
  The scale of the GLTF node relative to its parent. 
int skeleton = -1
  void set_skeleton ( int value )
 
int get_skeleton ( )
  If this GLTF node has a skeleton, the index of the GLTFSkeleton in the GLTFState that describes the skeleton's properties. If -1, this node does not have a skeleton. 
int skin = -1
  void set_skin ( int value )
 
int get_skin ( )
  If this GLTF node has a skin, the index of the GLTFSkin in the GLTFState that describes the skin's properties. If -1, this node does not have a skin. 
Transform3D xform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
  void set_xform ( Transform3D value )
 
Transform3D get_xform ( )
  The transform of the GLTF node relative to its parent. This property is usually unused since the position, rotation, and scale properties are preferred.   Method Descriptions 
Variant get_additional_data ( StringName extension_name ) Gets additional arbitrary data in this GLTFNode instance. This can be used to keep per-node state data in GLTFDocumentExtension classes, which is important because they are stateless. The argument should be the GLTFDocumentExtension name (does not have to match the extension name in the GLTF file), and the return value can be anything you set. If nothing was set, the return value is null. void set_additional_data ( StringName extension_name, Variant additional_data ) Sets additional arbitrary data in this GLTFNode instance. This can be used to keep per-node state data in GLTFDocumentExtension classes, which is important because they are stateless. The first argument should be the GLTFDocumentExtension name (does not have to match the extension name in the GLTF file), and the second argument can be anything you want.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfnode.html


classes/class_visibleonscreenenabler3d
-----------------------------------------------------------
VisibleOnScreenEnabler3D Inherits: VisibleOnScreenNotifier3D < VisualInstance3D < Node3D < Node < Object A box-shaped region of 3D space that, when visible on screen, enables a target node.  Description VisibleOnScreenEnabler3D contains a box-shaped region of 3D space and a target node. The target node will be automatically enabled (via its Node.process_mode property) when any part of this region becomes visible on the screen, and automatically disabled otherwise. This can for example be used to activate enemies only when the player approaches them. See VisibleOnScreenNotifier3D if you only want to be notified when the region is visible on screen. Note: VisibleOnScreenEnabler3D uses an approximate heuristic that doesn't take walls and other occlusion into account, unless occlusion culling is used. It also won't function unless Node3D.visible is set to true.   Properties  
EnableMode enable_mode 0  
NodePath enable_node_path NodePath("..")     Enumerations enum EnableMode: 
EnableMode ENABLE_MODE_INHERIT = 0
 Corresponds to Node.PROCESS_MODE_INHERIT. 
EnableMode ENABLE_MODE_ALWAYS = 1
 Corresponds to Node.PROCESS_MODE_ALWAYS. 
EnableMode ENABLE_MODE_WHEN_PAUSED = 2
 Corresponds to Node.PROCESS_MODE_WHEN_PAUSED.   Property Descriptions 
EnableMode enable_mode = 0
  void set_enable_mode ( EnableMode value )
 
EnableMode get_enable_mode ( )
  Determines how the target node is enabled. Corresponds to ProcessMode. When the node is disabled, it always uses Node.PROCESS_MODE_DISABLED. 
NodePath enable_node_path = NodePath("..")
  void set_enable_node_path ( NodePath value )
 
NodePath get_enable_node_path ( )
  The path to the target node, relative to the VisibleOnScreenEnabler3D. The target node is cached; it's only assigned when setting this property (if the VisibleOnScreenEnabler3D is inside the scene tree) and every time the VisibleOnScreenEnabler3D enters the scene tree. If the path is invalid, an error will be printed in the editor and no node will be affected.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visibleonscreenenabler3d.html


classes/class_gltflight
-----------------------------------------------------------
GLTFLight Inherits: Resource < RefCounted < Object Represents a GLTF light.  Description Represents a light as defined by the KHR_lights_punctual GLTF extension.   Tutorials  Runtime file loading and saving KHR_lights_punctual GLTF extension spec    Properties  
Color color Color(1, 1, 1, 1)  
float inner_cone_angle 0.0  
float intensity 1.0  
String light_type ""  
float outer_cone_angle 0.785398  
float range inf     Methods  
GLTFLight from_dictionary ( Dictionary dictionary ) static  
GLTFLight from_node ( Light3D light_node ) static  
Dictionary to_dictionary ( ) const  
Light3D to_node ( ) const     Property Descriptions 
Color color = Color(1, 1, 1, 1)
  void set_color ( Color value )
 
Color get_color ( )
  The Color of the light. Defaults to white. A black color causes the light to have no effect. 
float inner_cone_angle = 0.0
  void set_inner_cone_angle ( float value )
 
float get_inner_cone_angle ( )
  The inner angle of the cone in a spotlight. Must be less than or equal to the outer cone angle. Within this angle, the light is at full brightness. Between the inner and outer cone angles, there is a transition from full brightness to zero brightness. When creating a Godot SpotLight3D, the ratio between the inner and outer cone angles is used to calculate the attenuation of the light. 
float intensity = 1.0
  void set_intensity ( float value )
 
float get_intensity ( )
  The intensity of the light. This is expressed in candelas (lumens per steradian) for point and spot lights, and lux (lumens per mÂ²) for directional lights. When creating a Godot light, this value is converted to a unitless multiplier. 
String light_type = ""
  void set_light_type ( String value )
 
String get_light_type ( )
  The type of the light. The values accepted by Godot are "point", "spot", and "directional", which correspond to Godot's OmniLight3D, SpotLight3D, and DirectionalLight3D respectively. 
float outer_cone_angle = 0.785398
  void set_outer_cone_angle ( float value )
 
float get_outer_cone_angle ( )
  The outer angle of the cone in a spotlight. Must be greater than or equal to the inner angle. At this angle, the light drops off to zero brightness. Between the inner and outer cone angles, there is a transition from full brightness to zero brightness. If this angle is a half turn, then the spotlight emits in all directions. When creating a Godot SpotLight3D, the outer cone angle is used as the angle of the spotlight. 
float range = inf
  void set_range ( float value )
 
float get_range ( )
  The range of the light, beyond which the light has no effect. GLTF lights with no range defined behave like physical lights (which have infinite range). When creating a Godot light, the range is clamped to 4096.   Method Descriptions 
GLTFLight from_dictionary ( Dictionary dictionary ) static
 Creates a new GLTFLight instance by parsing the given Dictionary. 
GLTFLight from_node ( Light3D light_node ) static
 Create a new GLTFLight instance from the given Godot Light3D node. 
Dictionary to_dictionary ( ) const
 Serializes this GLTFLight instance into a Dictionary. 
Light3D to_node ( ) const
 Converts this GLTFLight instance into a Godot Light3D node.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltflight.html


classes/class_quadoccluder3d
-----------------------------------------------------------
QuadOccluder3D Inherits: Occluder3D < Resource < RefCounted < Object Flat plane shape for use with occlusion culling in OccluderInstance3D.  Description QuadOccluder3D stores a flat plane shape that can be used by the engine's occlusion culling system. See also PolygonOccluder3D if you need to customize the quad's shape. See OccluderInstance3D's documentation for instructions on setting up occlusion culling.   Tutorials  Occlusion culling    Properties  
Vector2 size Vector2(1, 1)     Property Descriptions 
Vector2 size = Vector2(1, 1)
  void set_size ( Vector2 value )
 
Vector2 get_size ( )
  The quad's size in 3D units.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_quadoccluder3d.html


classes/class_audiostreamrandomizer
-----------------------------------------------------------
AudioStreamRandomizer Inherits: AudioStream < Resource < RefCounted < Object Wraps a pool of audio streams with pitch and volume shifting.  Description Picks a random AudioStream from the pool, depending on the playback mode, and applies random pitch shifting and volume shifting during playback.   Properties  
PlaybackMode playback_mode 0  
float random_pitch 1.0  
float random_volume_offset_db 0.0  
int streams_count 0     Methods  
void add_stream ( int index, AudioStream stream, float weight=1.0 )  
AudioStream get_stream ( int index ) const  
float get_stream_probability_weight ( int index ) const  
void move_stream ( int index_from, int index_to )  
void remove_stream ( int index )  
void set_stream ( int index, AudioStream stream )  
void set_stream_probability_weight ( int index, float weight )     Enumerations enum PlaybackMode: 
PlaybackMode PLAYBACK_RANDOM_NO_REPEATS = 0
 Pick a stream at random according to the probability weights chosen for each stream, but avoid playing the same stream twice in a row whenever possible. If only 1 sound is present in the pool, the same sound will always play, effectively allowing repeats to occur. 
PlaybackMode PLAYBACK_RANDOM = 1
 Pick a stream at random according to the probability weights chosen for each stream. If only 1 sound is present in the pool, the same sound will always play. 
PlaybackMode PLAYBACK_SEQUENTIAL = 2
 Play streams in the order they appear in the stream pool. If only 1 sound is present in the pool, the same sound will always play.   Property Descriptions 
PlaybackMode playback_mode = 0
  void set_playback_mode ( PlaybackMode value )
 
PlaybackMode get_playback_mode ( )
  Controls how this AudioStreamRandomizer picks which AudioStream to play next. 
float random_pitch = 1.0
  void set_random_pitch ( float value )
 
float get_random_pitch ( )
  The intensity of random pitch variation. A value of 1 means no variation. 
float random_volume_offset_db = 0.0
  void set_random_volume_offset_db ( float value )
 
float get_random_volume_offset_db ( )
  The intensity of random volume variation. A value of 0 means no variation. 
int streams_count = 0
  void set_streams_count ( int value )
 
int get_streams_count ( )
  The number of streams in the stream pool.   Method Descriptions void add_stream ( int index, AudioStream stream, float weight=1.0 ) Insert a stream at the specified index. If the index is less than zero, the insertion occurs at the end of the underlying pool. 
AudioStream get_stream ( int index ) const
 Returns the stream at the specified index. 
float get_stream_probability_weight ( int index ) const
 Returns the probability weight associated with the stream at the given index. void move_stream ( int index_from, int index_to ) Move a stream from one index to another. void remove_stream ( int index ) Remove the stream at the specified index. void set_stream ( int index, AudioStream stream ) Set the AudioStream at the specified index. void set_stream_probability_weight ( int index, float weight ) Set the probability weight of the stream at the specified index. The higher this value, the more likely that the randomizer will choose this stream during random playback modes.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiostreamrandomizer.html


classes/class_meshlibrary
-----------------------------------------------------------
MeshLibrary Inherits: Resource < RefCounted < Object Library of meshes.  Description A library of meshes. Contains a list of Mesh resources, each with a name and ID. Each item can also include collision and navigation shapes. This resource is used in GridMap.   Tutorials  3D Kinematic Character Demo 3D Platformer Demo    Methods  
void clear ( )  
void create_item ( int id )  
int find_item_by_name ( String name ) const  
PackedInt32Array get_item_list ( ) const  
Mesh get_item_mesh ( int id ) const  
Transform3D get_item_mesh_transform ( int id ) const  
String get_item_name ( int id ) const  
int get_item_navigation_layers ( int id ) const  
NavigationMesh get_item_navigation_mesh ( int id ) const  
Transform3D get_item_navigation_mesh_transform ( int id ) const  
Texture2D get_item_preview ( int id ) const  
Array get_item_shapes ( int id ) const  
int get_last_unused_item_id ( ) const  
void remove_item ( int id )  
void set_item_mesh ( int id, Mesh mesh )  
void set_item_mesh_transform ( int id, Transform3D mesh_transform )  
void set_item_name ( int id, String name )  
void set_item_navigation_layers ( int id, int navigation_layers )  
void set_item_navigation_mesh ( int id, NavigationMesh navigation_mesh )  
void set_item_navigation_mesh_transform ( int id, Transform3D navigation_mesh )  
void set_item_preview ( int id, Texture2D texture )  
void set_item_shapes ( int id, Array shapes )     Method Descriptions void clear ( ) Clears the library. void create_item ( int id ) Creates a new item in the library with the given ID. You can get an unused ID from get_last_unused_item_id. 
int find_item_by_name ( String name ) const
 Returns the first item with the given name. 
PackedInt32Array get_item_list ( ) const
 Returns the list of item IDs in use. 
Mesh get_item_mesh ( int id ) const
 Returns the item's mesh. 
Transform3D get_item_mesh_transform ( int id ) const
 Returns the transform applied to the item's mesh. 
String get_item_name ( int id ) const
 Returns the item's name. 
int get_item_navigation_layers ( int id ) const
 Returns the item's navigation layers bitmask. 
NavigationMesh get_item_navigation_mesh ( int id ) const
 Returns the item's navigation mesh. 
Transform3D get_item_navigation_mesh_transform ( int id ) const
 Returns the transform applied to the item's navigation mesh. 
Texture2D get_item_preview ( int id ) const
 When running in the editor, returns a generated item preview (a 3D rendering in isometric perspective). When used in a running project, returns the manually-defined item preview which can be set using set_item_preview. Returns an empty Texture2D if no preview was manually set in a running project. 
Array get_item_shapes ( int id ) const
 Returns an item's collision shapes. The array consists of each Shape3D followed by its Transform3D. 
int get_last_unused_item_id ( ) const
 Gets an unused ID for a new item. void remove_item ( int id ) Removes the item. void set_item_mesh ( int id, Mesh mesh ) Sets the item's mesh. void set_item_mesh_transform ( int id, Transform3D mesh_transform ) Sets the transform to apply to the item's mesh. void set_item_name ( int id, String name ) Sets the item's name. This name is shown in the editor. It can also be used to look up the item later using find_item_by_name. void set_item_navigation_layers ( int id, int navigation_layers ) Sets the item's navigation layers bitmask. void set_item_navigation_mesh ( int id, NavigationMesh navigation_mesh ) Sets the item's navigation mesh. void set_item_navigation_mesh_transform ( int id, Transform3D navigation_mesh ) Sets the transform to apply to the item's navigation mesh. void set_item_preview ( int id, Texture2D texture ) Sets a texture to use as the item's preview icon in the editor. void set_item_shapes ( int id, Array shapes ) Sets an item's collision shapes. The array should consist of Shape3D objects, each followed by a Transform3D that will be applied to it. For shapes that should not have a transform, use Transform3D.IDENTITY.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_meshlibrary.html


classes/class_audiobuslayout
-----------------------------------------------------------
AudioBusLayout Inherits: Resource < RefCounted < Object Stores information about the audio buses.  Description Stores position, muting, solo, bypass, effects, effect position, volume, and the connections between buses. See AudioServer for usage.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiobuslayout.html


classes/class_polygonoccluder3d
-----------------------------------------------------------
PolygonOccluder3D Inherits: Occluder3D < Resource < RefCounted < Object Flat 2D polygon shape for use with occlusion culling in OccluderInstance3D.  Description PolygonOccluder3D stores a polygon shape that can be used by the engine's occlusion culling system. When an OccluderInstance3D with a PolygonOccluder3D is selected in the editor, an editor will appear at the top of the 3D viewport so you can add/remove points. All points must be placed on the same 2D plane, which means it is not possible to create arbitrary 3D shapes with a single PolygonOccluder3D. To use arbitrary 3D shapes as occluders, use ArrayOccluder3D or OccluderInstance3D's baking feature instead. See OccluderInstance3D's documentation for instructions on setting up occlusion culling.   Tutorials  Occlusion culling    Properties  
PackedVector2Array polygon PackedVector2Array()     Property Descriptions 
PackedVector2Array polygon = PackedVector2Array()
  void set_polygon ( PackedVector2Array value )
 
PackedVector2Array get_polygon ( )
  The polygon to use for occlusion culling. The polygon can be convex or concave, but it should have as few points as possible to maximize performance. The polygon must not have intersecting lines. Otherwise, triangulation will fail (with an error message printed).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_polygonoccluder3d.html


classes/class_audioeffectstereoenhance
-----------------------------------------------------------
AudioEffectStereoEnhance Inherits: AudioEffect < Resource < RefCounted < Object An audio effect that can be used to adjust the intensity of stereo panning.  Description An audio effect that can be used to adjust the intensity of stereo panning.   Tutorials  Audio buses    Properties  
float pan_pullout 1.0  
float surround 0.0  
float time_pullout_ms 0.0     Property Descriptions 
float pan_pullout = 1.0
  void set_pan_pullout ( float value )
 
float get_pan_pullout ( )
  Values greater than 1.0 increase intensity of any panning on audio passing through this effect, whereas values less than 1.0 will decrease the panning intensity. A value of 0.0 will downmix audio to mono. 
float surround = 0.0
  void set_surround ( float value )
 
float get_surround ( )
   There is currently no description for this property. Please help us by contributing one!  
float time_pullout_ms = 0.0
  void set_time_pullout ( float value )
 
float get_time_pullout ( )
   There is currently no description for this property. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectstereoenhance.html


classes/class_csharpscript
-----------------------------------------------------------
CSharpScript Inherits: Script < Resource < RefCounted < Object A script implemented in the C# programming language, saved with the .cs extension (Mono-enabled builds only).  Description This class represents a C# script. It is the C# equivalent of the GDScript class and is only available in Mono-enabled Godot builds. See also GodotSharp.   Tutorials  C# documentation index    Methods  
Variant new ( ... ) vararg     Method Descriptions 
Variant new ( ... ) vararg
 Returns a new instance of the script.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_csharpscript.html


classes/class_rootmotionview
-----------------------------------------------------------
RootMotionView Inherits: VisualInstance3D < Node3D < Node < Object Editor-only helper for setting up root motion in AnimationMixer.  Description Root motion refers to an animation technique where a mesh's skeleton is used to give impulse to a character. When working with 3D animations, a popular technique is for animators to use the root skeleton bone to give motion to the rest of the skeleton. This allows animating characters in a way where steps actually match the floor below. It also allows precise interaction with objects during cinematics. See also AnimationMixer. Note: RootMotionView is only visible in the editor. It will be hidden automatically in the running project.   Tutorials  Using AnimationTree - Root motion    Properties  
NodePath animation_path NodePath("")  
float cell_size 1.0  
Color color Color(0.5, 0.5, 1, 1)  
float radius 10.0  
bool zero_y true     Property Descriptions 
NodePath animation_path = NodePath("")
  void set_animation_path ( NodePath value )
 
NodePath get_animation_path ( )
  Path to an AnimationMixer node to use as a basis for root motion. 
float cell_size = 1.0
  void set_cell_size ( float value )
 
float get_cell_size ( )
  The grid's cell size in 3D units. 
Color color = Color(0.5, 0.5, 1, 1)
  void set_color ( Color value )
 
Color get_color ( )
  The grid's color. 
float radius = 10.0
  void set_radius ( float value )
 
float get_radius ( )
  The grid's radius in 3D units. The grid's opacity will fade gradually as the distance from the origin increases until this radius is reached. 
bool zero_y = true
  void set_zero_y ( bool value )
 
bool get_zero_y ( )
  If true, the grid's points will all be on the same Y coordinate (local Y = 0). If false, the points' original Y coordinate is preserved.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_rootmotionview.html


classes/class_audioeffectphaser
-----------------------------------------------------------
AudioEffectPhaser Inherits: AudioEffect < Resource < RefCounted < Object Adds a phaser audio effect to an audio bus. Combines the original signal with a copy that is slightly out of phase with the original.  Description Combines phase-shifted signals with the original signal. The movement of the phase-shifted signals is controlled using a low-frequency oscillator.   Tutorials  Audio buses    Properties  
float depth 1.0  
float feedback 0.7  
float range_max_hz 1600.0  
float range_min_hz 440.0  
float rate_hz 0.5     Property Descriptions 
float depth = 1.0
  void set_depth ( float value )
 
float get_depth ( )
  Governs how high the filter frequencies sweep. Low value will primarily affect bass frequencies. High value can sweep high into the treble. Value can range from 0.1 to 4. 
float feedback = 0.7
  void set_feedback ( float value )
 
float get_feedback ( )
  Output percent of modified sound. Value can range from 0.1 to 0.9. 
float range_max_hz = 1600.0
  void set_range_max_hz ( float value )
 
float get_range_max_hz ( )
  Determines the maximum frequency affected by the LFO modulations, in Hz. Value can range from 10 to 10000. 
float range_min_hz = 440.0
  void set_range_min_hz ( float value )
 
float get_range_min_hz ( )
  Determines the minimum frequency affected by the LFO modulations, in Hz. Value can range from 10 to 10000. 
float rate_hz = 0.5
  void set_rate_hz ( float value )
 
float get_rate_hz ( )
  Adjusts the rate in Hz at which the effect sweeps up and down across the frequency range.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectphaser.html


classes/class_centercontainer
-----------------------------------------------------------
CenterContainer Inherits: Container < Control < CanvasItem < Node < Object A container that keeps child controls in its center.  Description CenterContainer is a container that keeps all of its child controls in its center at their minimum size.   Tutorials  Using Containers    Properties  
bool use_top_left false     Property Descriptions 
bool use_top_left = false
  void set_use_top_left ( bool value )
 
bool is_using_top_left ( )
  If true, centers children relative to the CenterContainer's top left corner.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_centercontainer.html


classes/class_boxmesh
-----------------------------------------------------------
BoxMesh Inherits: PrimitiveMesh < Mesh < Resource < RefCounted < Object Generate an axis-aligned box PrimitiveMesh.  Description Generate an axis-aligned box PrimitiveMesh. The box's UV layout is arranged in a 3Ã—2 layout that allows texturing each face individually. To apply the same texture on all faces, change the material's UV property to Vector3(3, 2, 1). This is equivalent to adding UV *= vec2(3.0, 2.0) in a vertex shader. Note: When using a large textured BoxMesh (e.g. as a floor), you may stumble upon UV jittering issues depending on the camera angle. To solve this, increase subdivide_depth, subdivide_height and subdivide_width until you no longer notice UV jittering.   Properties  
Vector3 size Vector3(1, 1, 1)  
int subdivide_depth 0  
int subdivide_height 0  
int subdivide_width 0     Property Descriptions 
Vector3 size = Vector3(1, 1, 1)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The box's width, height and depth. 
int subdivide_depth = 0
  void set_subdivide_depth ( int value )
 
int get_subdivide_depth ( )
  Number of extra edge loops inserted along the Z axis. 
int subdivide_height = 0
  void set_subdivide_height ( int value )
 
int get_subdivide_height ( )
  Number of extra edge loops inserted along the Y axis. 
int subdivide_width = 0
  void set_subdivide_width ( int value )
 
int get_subdivide_width ( )
  Number of extra edge loops inserted along the X axis.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_boxmesh.html


classes/class_spriteframes
-----------------------------------------------------------
SpriteFrames Inherits: Resource < RefCounted < Object Sprite frame library for AnimatedSprite2D and AnimatedSprite3D.  Description Sprite frame library for an AnimatedSprite2D or AnimatedSprite3D node. Contains frames and animation data for playback.   Methods  
void add_animation ( StringName anim )  
void add_frame ( StringName anim, Texture2D texture, float duration=1.0, int at_position=-1 )  
void clear ( StringName anim )  
void clear_all ( )  
bool get_animation_loop ( StringName anim ) const  
PackedStringArray get_animation_names ( ) const  
float get_animation_speed ( StringName anim ) const  
int get_frame_count ( StringName anim ) const  
float get_frame_duration ( StringName anim, int idx ) const  
Texture2D get_frame_texture ( StringName anim, int idx ) const  
bool has_animation ( StringName anim ) const  
void remove_animation ( StringName anim )  
void remove_frame ( StringName anim, int idx )  
void rename_animation ( StringName anim, StringName newname )  
void set_animation_loop ( StringName anim, bool loop )  
void set_animation_speed ( StringName anim, float fps )  
void set_frame ( StringName anim, int idx, Texture2D texture, float duration=1.0 )     Method Descriptions void add_animation ( StringName anim ) Adds a new anim animation to the library. void add_frame ( StringName anim, Texture2D texture, float duration=1.0, int at_position=-1 ) Adds a frame to the anim animation. If at_position is -1, the frame will be added to the end of the animation. void clear ( StringName anim ) Removes all frames from the anim animation. void clear_all ( ) Removes all animations. An empty default animation will be created. 
bool get_animation_loop ( StringName anim ) const
 Returns true if the given animation is configured to loop when it finishes playing. Otherwise, returns false. 
PackedStringArray get_animation_names ( ) const
 Returns an array containing the names associated to each animation. Values are placed in alphabetical order. 
float get_animation_speed ( StringName anim ) const
 Returns the speed in frames per second for the anim animation. 
int get_frame_count ( StringName anim ) const
 Returns the number of frames for the anim animation. 
float get_frame_duration ( StringName anim, int idx ) const
 Returns a relative duration of the frame idx in the anim animation (defaults to 1.0). For example, a frame with a duration of 2.0 is displayed twice as long as a frame with a duration of 1.0. You can calculate the absolute duration (in seconds) of a frame using the following formula: absolute_duration = relative_duration / (animation_fps * abs(playing_speed))
 In this example, playing_speed refers to either AnimatedSprite2D.get_playing_speed or AnimatedSprite3D.get_playing_speed. 
Texture2D get_frame_texture ( StringName anim, int idx ) const
 Returns the texture of the frame idx in the anim animation. 
bool has_animation ( StringName anim ) const
 Returns true if the anim animation exists. void remove_animation ( StringName anim ) Removes the anim animation. void remove_frame ( StringName anim, int idx ) Removes the anim animation's frame idx. void rename_animation ( StringName anim, StringName newname ) Changes the anim animation's name to newname. void set_animation_loop ( StringName anim, bool loop ) If loop is true, the anim animation will loop when it reaches the end, or the start if it is played in reverse. void set_animation_speed ( StringName anim, float fps ) Sets the speed for the anim animation in frames per second. void set_frame ( StringName anim, int idx, Texture2D texture, float duration=1.0 ) Sets the texture and the duration of the frame idx in the anim animation.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_spriteframes.html


classes/class_separationrayshape2d
-----------------------------------------------------------
SeparationRayShape2D Inherits: Shape2D < Resource < RefCounted < Object A 2D ray shape used for physics collision that tries to separate itself from any collider.  Description A 2D ray shape, intended for use in physics. Usually used to provide a shape for a CollisionShape2D. When a SeparationRayShape2D collides with an object, it tries to separate itself from it by moving its endpoint to the collision point. For example, a SeparationRayShape2D next to a character can allow it to instantly move up when touching stairs.   Properties  
float length 20.0  
bool slide_on_slope false     Property Descriptions 
float length = 20.0
  void set_length ( float value )
 
float get_length ( )
  The ray's length. 
bool slide_on_slope = false
  void set_slide_on_slope ( bool value )
 
bool get_slide_on_slope ( )
  If false (default), the shape always separates and returns a normal along its own direction. If true, the shape can return the correct normal and separate in any direction, allowing sliding motion on slopes.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_separationrayshape2d.html


classes/class_audioeffectlowshelffilter
-----------------------------------------------------------
AudioEffectLowShelfFilter Inherits: AudioEffectFilter < AudioEffect < Resource < RefCounted < Object Adds a low-shelf filter to the audio bus.  Description Reduces all frequencies below the AudioEffectFilter.cutoff_hz.   Tutorials  Audio buses   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectlowshelffilter.html


classes/class_styleboxline
-----------------------------------------------------------
StyleBoxLine Inherits: StyleBox < Resource < RefCounted < Object A StyleBox that displays a single line of a given color and thickness.  Description A StyleBox that displays a single line of a given color and thickness. The line can be either horizontal or vertical. Useful for separators.   Properties  
Color color Color(0, 0, 0, 1)  
float grow_begin 1.0  
float grow_end 1.0  
int thickness 1  
bool vertical false     Property Descriptions 
Color color = Color(0, 0, 0, 1)
  void set_color ( Color value )
 
Color get_color ( )
  The line's color. 
float grow_begin = 1.0
  void set_grow_begin ( float value )
 
float get_grow_begin ( )
  The number of pixels the line will extend before the StyleBoxLine's bounds. If set to a negative value, the line will begin inside the StyleBoxLine's bounds. 
float grow_end = 1.0
  void set_grow_end ( float value )
 
float get_grow_end ( )
  The number of pixels the line will extend past the StyleBoxLine's bounds. If set to a negative value, the line will end inside the StyleBoxLine's bounds. 
int thickness = 1
  void set_thickness ( int value )
 
int get_thickness ( )
  The line's thickness in pixels. 
bool vertical = false
  void set_vertical ( bool value )
 
bool is_vertical ( )
  If true, the line will be vertical. If false, the line will be horizontal.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_styleboxline.html


classes/class_inputeventfromwindow
-----------------------------------------------------------
InputEventFromWindow Inherits: InputEvent < Resource < RefCounted < Object Inherited By: InputEventScreenDrag, InputEventScreenTouch, InputEventWithModifiers Abstract base class for Viewport-based input events.  Description InputEventFromWindow represents events specifically received by windows. This includes mouse events, keyboard events in focused windows or touch screen actions.   Properties  
int window_id 0     Property Descriptions 
int window_id = 0
  void set_window_id ( int value )
 
int get_window_id ( )
  The ID of a Window that received this event.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventfromwindow.html


classes/class_boxoccluder3d
-----------------------------------------------------------
BoxOccluder3D Inherits: Occluder3D < Resource < RefCounted < Object Cuboid shape for use with occlusion culling in OccluderInstance3D.  Description BoxOccluder3D stores a cuboid shape that can be used by the engine's occlusion culling system. See OccluderInstance3D's documentation for instructions on setting up occlusion culling.   Tutorials  Occlusion culling    Properties  
Vector3 size Vector3(1, 1, 1)     Property Descriptions 
Vector3 size = Vector3(1, 1, 1)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The box's size in 3D units.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_boxoccluder3d.html


classes/class_audiostreammicrophone
-----------------------------------------------------------
AudioStreamMicrophone Inherits: AudioStream < Resource < RefCounted < Object Plays real-time audio input data.  Description When used directly in an AudioStreamPlayer node, AudioStreamMicrophone plays back microphone input in real-time. This can be used in conjunction with AudioEffectCapture to process the data or save it. Note: ProjectSettings.audio/driver/enable_input must be true for audio input to work. See also that setting's description for caveats related to permissions and operating system privacy settings.   Tutorials  Recording with microphone Audio Mic Record Demo   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiostreammicrophone.html


classes/class_scenereplicationconfig
-----------------------------------------------------------
SceneReplicationConfig Inherits: Resource < RefCounted < Object Configuration for properties to synchronize with a MultiplayerSynchronizer.  Methods  
void add_property ( NodePath path, int index=-1 )  
NodePath[] get_properties ( ) const  
bool has_property ( NodePath path ) const  
int property_get_index ( NodePath path ) const  
ReplicationMode property_get_replication_mode ( NodePath path )  
bool property_get_spawn ( NodePath path )  
bool property_get_sync ( NodePath path )  
bool property_get_watch ( NodePath path )  
void property_set_replication_mode ( NodePath path, ReplicationMode mode )  
void property_set_spawn ( NodePath path, bool enabled )  
void property_set_sync ( NodePath path, bool enabled )  
void property_set_watch ( NodePath path, bool enabled )  
void remove_property ( NodePath path )     Enumerations enum ReplicationMode: 
ReplicationMode REPLICATION_MODE_NEVER = 0
 Do not keep the given property synchronized. 
ReplicationMode REPLICATION_MODE_ALWAYS = 1
 Replicate the given property on process by constantly sending updates using unreliable transfer mode. 
ReplicationMode REPLICATION_MODE_ON_CHANGE = 2
 Replicate the given property on process by sending updates using reliable transfer mode when its value changes.   Method Descriptions void add_property ( NodePath path, int index=-1 ) Adds the property identified by the given path to the list of the properties being synchronized, optionally passing an index. Note: For details on restrictions and limitations on property synchronization, see MultiplayerSynchronizer. 
NodePath[] get_properties ( ) const
 Returns a list of synchronized property NodePaths. 
bool has_property ( NodePath path ) const
 Returns whether the given path is configured for synchronization. 
int property_get_index ( NodePath path ) const
 Finds the index of the given path. 
ReplicationMode property_get_replication_mode ( NodePath path ) Returns the replication mode for the property identified by the given path. See ReplicationMode. 
bool property_get_spawn ( NodePath path ) Returns whether the property identified by the given path is configured to be synchronized on spawn. 
bool property_get_sync ( NodePath path ) Returns whether the property identified by the given path is configured to be synchronized on process. Deprecated. Use property_get_replication_mode instead. 
bool property_get_watch ( NodePath path ) Returns whether the property identified by the given path is configured to be reliably synchronized when changes are detected on process. Deprecated. Use property_get_replication_mode instead. void property_set_replication_mode ( NodePath path, ReplicationMode mode ) Sets the synchronization mode for the property identified by the given path. See ReplicationMode. void property_set_spawn ( NodePath path, bool enabled ) Sets whether the property identified by the given path is configured to be synchronized on spawn. void property_set_sync ( NodePath path, bool enabled ) Sets whether the property identified by the given path is configured to be synchronized on process. Deprecated. Use property_set_replication_mode with REPLICATION_MODE_ALWAYS instead. void property_set_watch ( NodePath path, bool enabled ) Sets whether the property identified by the given path is configured to be reliably synchronized when changes are detected on process. Deprecated. Use property_set_replication_mode with REPLICATION_MODE_ON_CHANGE instead. void remove_property ( NodePath path ) Removes the property identified by the given path from the configuration.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_scenereplicationconfig.html


classes/class_xranchor3d
-----------------------------------------------------------
XRAnchor3D Inherits: XRNode3D < Node3D < Node < Object An anchor point in AR space.  Description The XRAnchor3D point is a spatial node that maps a real world location identified by the AR platform to a position within the game world. For example, as long as plane detection in ARKit is on, ARKit will identify and update the position of planes (tables, floors, etc) and create anchors for them. This node is mapped to one of the anchors through its unique ID. When you receive a signal that a new anchor is available, you should add this node to your scene for that anchor. You can predefine nodes and set the ID; the nodes will simply remain on 0,0,0 until a plane is recognized. Keep in mind that, as long as plane detection is enabled, the size, placing and orientation of an anchor will be updated as the detection logic learns more about the real world out there especially if only part of the surface is in view.   Tutorials  XR documentation index    Methods  
Plane get_plane ( ) const  
Vector3 get_size ( ) const     Method Descriptions 
Plane get_plane ( ) const
 Returns a plane aligned with our anchor; handy for intersection testing. 
Vector3 get_size ( ) const
 Returns the estimated size of the plane that was detected. Say when the anchor relates to a table in the real world, this is the estimated size of the surface of that table.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_xranchor3d.html


classes/class_physicsbody3d
-----------------------------------------------------------
PhysicsBody3D Inherits: CollisionObject3D < Node3D < Node < Object Inherited By: CharacterBody3D, PhysicalBone3D, RigidBody3D, StaticBody3D Abstract base class for 3D game objects affected by physics.  Description PhysicsBody3D is an abstract base class for 3D game objects affected by physics. All 3D physics bodies inherit from it. Warning: With a non-uniform scale, this node will likely not behave as expected. It is advised to keep its scale the same on all axes and adjust its collision shape(s) instead.   Tutorials  Physics introduction    Properties  
bool axis_lock_angular_x false  
bool axis_lock_angular_y false  
bool axis_lock_angular_z false  
bool axis_lock_linear_x false  
bool axis_lock_linear_y false  
bool axis_lock_linear_z false     Methods  
void add_collision_exception_with ( Node body )  
bool get_axis_lock ( BodyAxis axis ) const  
PhysicsBody3D[] get_collision_exceptions ( )  
KinematicCollision3D move_and_collide ( Vector3 motion, bool test_only=false, float safe_margin=0.001, bool recovery_as_collision=false, int max_collisions=1 )  
void remove_collision_exception_with ( Node body )  
void set_axis_lock ( BodyAxis axis, bool lock )  
bool test_move ( Transform3D from, Vector3 motion, KinematicCollision3D collision=null, float safe_margin=0.001, bool recovery_as_collision=false, int max_collisions=1 )     Property Descriptions 
bool axis_lock_angular_x = false
  void set_axis_lock ( BodyAxis axis, bool lock )
 
bool get_axis_lock ( BodyAxis axis ) const
  Lock the body's rotation in the X axis. 
bool axis_lock_angular_y = false
  void set_axis_lock ( BodyAxis axis, bool lock )
 
bool get_axis_lock ( BodyAxis axis ) const
  Lock the body's rotation in the Y axis. 
bool axis_lock_angular_z = false
  void set_axis_lock ( BodyAxis axis, bool lock )
 
bool get_axis_lock ( BodyAxis axis ) const
  Lock the body's rotation in the Z axis. 
bool axis_lock_linear_x = false
  void set_axis_lock ( BodyAxis axis, bool lock )
 
bool get_axis_lock ( BodyAxis axis ) const
  Lock the body's linear movement in the X axis. 
bool axis_lock_linear_y = false
  void set_axis_lock ( BodyAxis axis, bool lock )
 
bool get_axis_lock ( BodyAxis axis ) const
  Lock the body's linear movement in the Y axis. 
bool axis_lock_linear_z = false
  void set_axis_lock ( BodyAxis axis, bool lock )
 
bool get_axis_lock ( BodyAxis axis ) const
  Lock the body's linear movement in the Z axis.   Method Descriptions void add_collision_exception_with ( Node body ) Adds a body to the list of bodies that this body can't collide with. 
bool get_axis_lock ( BodyAxis axis ) const
 Returns true if the specified linear or rotational axis is locked. 
PhysicsBody3D[] get_collision_exceptions ( ) Returns an array of nodes that were added as collision exceptions for this body. 
KinematicCollision3D move_and_collide ( Vector3 motion, bool test_only=false, float safe_margin=0.001, bool recovery_as_collision=false, int max_collisions=1 ) Moves the body along the vector motion. In order to be frame rate independent in Node._physics_process or Node._process, motion should be computed using delta. The body will stop if it collides. Returns a KinematicCollision3D, which contains information about the collision when stopped, or when touching another body along the motion. If test_only is true, the body does not move but the would-be collision information is given. safe_margin is the extra margin used for collision recovery (see CharacterBody3D.safe_margin for more details). If recovery_as_collision is true, any depenetration from the recovery phase is also reported as a collision; this is used e.g. by CharacterBody3D for improving floor detection during floor snapping. max_collisions allows to retrieve more than one collision result. void remove_collision_exception_with ( Node body ) Removes a body from the list of bodies that this body can't collide with. void set_axis_lock ( BodyAxis axis, bool lock ) Locks or unlocks the specified linear or rotational axis depending on the value of lock. 
bool test_move ( Transform3D from, Vector3 motion, KinematicCollision3D collision=null, float safe_margin=0.001, bool recovery_as_collision=false, int max_collisions=1 ) Checks for collisions without moving the body. In order to be frame rate independent in Node._physics_process or Node._process, motion should be computed using delta. Virtually sets the node's position, scale and rotation to that of the given Transform3D, then tries to move the body along the vector motion. Returns true if a collision would stop the body from moving along the whole path. collision is an optional object of type KinematicCollision3D, which contains additional information about the collision when stopped, or when touching another body along the motion. safe_margin is the extra margin used for collision recovery (see CharacterBody3D.safe_margin for more details). If recovery_as_collision is true, any depenetration from the recovery phase is also reported as a collision; this is useful for checking whether the body would touch any other bodies. max_collisions allows to retrieve more than one collision result.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_physicsbody3d.html


classes/class_shortcut
-----------------------------------------------------------
Shortcut Inherits: Resource < RefCounted < Object A shortcut for binding input.  Description Shortcuts are commonly used for interacting with a Control element from an InputEvent (also known as hotkeys). One shortcut can contain multiple InputEvent's, allowing the possibility of triggering one action with multiple different inputs.   Properties  
Array events []     Methods  
String get_as_text ( ) const  
bool has_valid_event ( ) const  
bool matches_event ( InputEvent event ) const     Property Descriptions 
Array events = []
  void set_events ( Array value )
 
Array get_events ( )
  The shortcut's InputEvent array. Generally the InputEvent used is an InputEventKey, though it can be any InputEvent, including an InputEventAction.   Method Descriptions 
String get_as_text ( ) const
 Returns the shortcut's first valid InputEvent as a String. 
bool has_valid_event ( ) const
 Returns whether events contains an InputEvent which is valid. 
bool matches_event ( InputEvent event ) const
 Returns whether any InputEvent in events equals event.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_shortcut.html


classes/class_audioeffecteq10
-----------------------------------------------------------
AudioEffectEQ10 Inherits: AudioEffectEQ < AudioEffect < Resource < RefCounted < Object Adds a 10-band equalizer audio effect to an Audio bus. Gives you control over frequencies from 31 Hz to 16000 Hz. Each frequency can be modulated between -60/+24 dB.  Description Frequency bands: Band 1: 31 Hz Band 2: 62 Hz Band 3: 125 Hz Band 4: 250 Hz Band 5: 500 Hz Band 6: 1000 Hz Band 7: 2000 Hz Band 8: 4000 Hz Band 9: 8000 Hz Band 10: 16000 Hz See also AudioEffectEQ, AudioEffectEQ6, AudioEffectEQ21.   Tutorials  Audio buses   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffecteq10.html


classes/class_gpuparticlescollisionsphere3d
-----------------------------------------------------------
GPUParticlesCollisionSphere3D Inherits: GPUParticlesCollision3D < VisualInstance3D < Node3D < Node < Object A sphere-shaped 3D particle collision shape affecting GPUParticles3D nodes.  Description A sphere-shaped 3D particle collision shape affecting GPUParticles3D nodes. Particle collision shapes work in real-time and can be moved, rotated and scaled during gameplay. Unlike attractors, non-uniform scaling of collision shapes is not supported. Note: ParticleProcessMaterial.collision_mode must be ParticleProcessMaterial.COLLISION_RIGID or ParticleProcessMaterial.COLLISION_HIDE_ON_CONTACT on the GPUParticles3D's process material for collision to work. Note: Particle collision only affects GPUParticles3D, not CPUParticles3D.   Properties  
float radius 1.0     Property Descriptions 
float radius = 1.0
  void set_radius ( float value )
 
float get_radius ( )
  The collision sphere's radius in 3D units.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gpuparticlescollisionsphere3d.html


classes/class_visualshadernodebooleanconstant
-----------------------------------------------------------
VisualShaderNodeBooleanConstant Inherits: VisualShaderNodeConstant < VisualShaderNode < Resource < RefCounted < Object A boolean constant to be used within the visual shader graph.  Description Has only one output port and no inputs. Translated to bool in the shader language.   Properties  
bool constant false     Property Descriptions 
bool constant = false
  void set_constant ( bool value )
 
bool get_constant ( )
  A boolean constant which represents a state of this node.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualshadernodebooleanconstant.html


classes/class_editorfiledialog
-----------------------------------------------------------
EditorFileDialog Inherits: ConfirmationDialog < AcceptDialog < Window < Viewport < Node < Object A modified version of FileDialog used by the editor.  Description EditorFileDialog is an enhanced version of FileDialog available only to editor plugins. Additional features include list of favorited/recent files and the ability to see files as thumbnails grid instead of list.   Properties  
Access access 0  
String current_dir   
String current_file   
String current_path   
bool dialog_hide_on_ok false (overrides AcceptDialog)  
bool disable_overwrite_warning false  
DisplayMode display_mode 0  
FileMode file_mode 4  
PackedStringArray filters PackedStringArray()  
bool show_hidden_files false  
String title "Save a File" (overrides Window)     Methods  
void add_filter ( String filter, String description="" )  
void add_side_menu ( Control menu, String title="" )  
void clear_filters ( )  
LineEdit get_line_edit ( )  
VBoxContainer get_vbox ( )  
void invalidate ( )     Signals dir_selected ( String dir ) Emitted when a directory is selected. file_selected ( String path ) Emitted when a file is selected. files_selected ( PackedStringArray paths ) Emitted when multiple files are selected.   Enumerations enum FileMode: 
FileMode FILE_MODE_OPEN_FILE = 0
 The EditorFileDialog can select only one file. Accepting the window will open the file. 
FileMode FILE_MODE_OPEN_FILES = 1
 The EditorFileDialog can select multiple files. Accepting the window will open all files. 
FileMode FILE_MODE_OPEN_DIR = 2
 The EditorFileDialog can select only one directory. Accepting the window will open the directory. 
FileMode FILE_MODE_OPEN_ANY = 3
 The EditorFileDialog can select a file or directory. Accepting the window will open it. 
FileMode FILE_MODE_SAVE_FILE = 4
 The EditorFileDialog can select only one file. Accepting the window will save the file. enum Access: 
Access ACCESS_RESOURCES = 0
 The EditorFileDialog can only view res:// directory contents. 
Access ACCESS_USERDATA = 1
 The EditorFileDialog can only view user:// directory contents. 
Access ACCESS_FILESYSTEM = 2
 The EditorFileDialog can view the entire local file system. enum DisplayMode: 
DisplayMode DISPLAY_THUMBNAILS = 0
 The EditorFileDialog displays resources as thumbnails. 
DisplayMode DISPLAY_LIST = 1
 The EditorFileDialog displays resources as a list of filenames.   Property Descriptions 
Access access = 0
  void set_access ( Access value )
 
Access get_access ( )
  The location from which the user may select a file, including res://, user://, and the local file system. 
String current_dir  void set_current_dir ( String value )
 
String get_current_dir ( )
  The currently occupied directory. 
String current_file  void set_current_file ( String value )
 
String get_current_file ( )
  The currently selected file. 
String current_path  void set_current_path ( String value )
 
String get_current_path ( )
  The file system path in the address bar. 
bool disable_overwrite_warning = false
  void set_disable_overwrite_warning ( bool value )
 
bool is_overwrite_warning_disabled ( )
  If true, the EditorFileDialog will not warn the user before overwriting files. 
DisplayMode display_mode = 0
  void set_display_mode ( DisplayMode value )
 
DisplayMode get_display_mode ( )
  The view format in which the EditorFileDialog displays resources to the user. 
FileMode file_mode = 4
  void set_file_mode ( FileMode value )
 
FileMode get_file_mode ( )
  The dialog's open or save mode, which affects the selection behavior. See FileMode. 
PackedStringArray filters = PackedStringArray()
  void set_filters ( PackedStringArray value )
 
PackedStringArray get_filters ( )
  The available file type filters. For example, this shows only .png and .gd files: set_filters(PackedStringArray(["*.png ; PNG Images","*.gd ; GDScript Files"])). Multiple file types can also be specified in a single filter. "*.png, *.jpg, *.jpeg ; Supported Images" will show both PNG and JPEG files when selected. 
bool show_hidden_files = false
  void set_show_hidden_files ( bool value )
 
bool is_showing_hidden_files ( )
  If true, hidden files and directories will be visible in the EditorFileDialog. This property is synchronized with EditorSettings.filesystem/file_dialog/show_hidden_files.   Method Descriptions void add_filter ( String filter, String description="" ) Adds a comma-delimited file name filter option to the EditorFileDialog with an optional description, which restricts what files can be picked. A filter should be of the form "filename.extension", where filename and extension can be * to match any string. Filters starting with . (i.e. empty filenames) are not allowed. For example, a filter of "*.tscn, *.scn" and a description of "Scenes" results in filter text "Scenes (*.tscn, *.scn)". void add_side_menu ( Control menu, String title="" ) Adds the given menu to the side of the file dialog with the given title text on top. Only one side menu is allowed. void clear_filters ( ) Removes all filters except for "All Files (*)". 
LineEdit get_line_edit ( ) Returns the LineEdit for the selected file. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their CanvasItem.visible property. 
VBoxContainer get_vbox ( ) Returns the VBoxContainer used to display the file system. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their CanvasItem.visible property. void invalidate ( ) Notify the EditorFileDialog that its view of the data is no longer accurate. Updates the view contents on next view update.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editorfiledialog.html


classes/class_gradienttexture2d
-----------------------------------------------------------
GradientTexture2D Inherits: Texture2D < Texture < Resource < RefCounted < Object A 2D texture that creates a pattern with colors obtained from a Gradient.  Description A 2D texture that obtains colors from a Gradient to fill the texture data. This texture is able to transform a color transition into different patterns such as a linear or a radial gradient. The gradient is sampled individually for each pixel so it does not necessarily represent an exact copy of the gradient(see width and height). See also GradientTexture1D, CurveTexture and CurveXYZTexture.   Properties  
Fill fill 0  
Vector2 fill_from Vector2(0, 0)  
Vector2 fill_to Vector2(1, 0)  
Gradient gradient   
int height 64  
Repeat repeat 0  
bool resource_local_to_scene false (overrides Resource)  
bool use_hdr false  
int width 64     Enumerations enum Fill: 
Fill FILL_LINEAR = 0
 The colors are linearly interpolated in a straight line. 
Fill FILL_RADIAL = 1
 The colors are linearly interpolated in a circular pattern. 
Fill FILL_SQUARE = 2
 The colors are linearly interpolated in a square pattern. enum Repeat: 
Repeat REPEAT_NONE = 0
 The gradient fill is restricted to the range defined by fill_from to fill_to offsets. 
Repeat REPEAT = 1
 The texture is filled starting from fill_from to fill_to offsets, repeating the same pattern in both directions. 
Repeat REPEAT_MIRROR = 2
 The texture is filled starting from fill_from to fill_to offsets, mirroring the pattern in both directions.   Property Descriptions 
Fill fill = 0
  void set_fill ( Fill value )
 
Fill get_fill ( )
  The gradient fill type, one of the Fill values. The texture is filled by interpolating colors starting from fill_from to fill_to offsets. 
Vector2 fill_from = Vector2(0, 0)
  void set_fill_from ( Vector2 value )
 
Vector2 get_fill_from ( )
  The initial offset used to fill the texture specified in UV coordinates. 
Vector2 fill_to = Vector2(1, 0)
  void set_fill_to ( Vector2 value )
 
Vector2 get_fill_to ( )
  The final offset used to fill the texture specified in UV coordinates. 
Gradient gradient  void set_gradient ( Gradient value )
 
Gradient get_gradient ( )
  The Gradient used to fill the texture. 
int height = 64
  void set_height ( int value )
 
int get_height ( )
  The number of vertical color samples that will be obtained from the Gradient, which also represents the texture's height. 
Repeat repeat = 0
  void set_repeat ( Repeat value )
 
Repeat get_repeat ( )
  The gradient repeat type, one of the Repeat values. The texture is filled starting from fill_from to fill_to offsets by default, but the gradient fill can be repeated to cover the entire texture. 
bool use_hdr = false
  void set_use_hdr ( bool value )
 
bool is_using_hdr ( )
  If true, the generated texture will support high dynamic range (Image.FORMAT_RGBAF format). This allows for glow effects to work if Environment.glow_enabled is true. If false, the generated texture will use low dynamic range; overbright colors will be clamped (Image.FORMAT_RGBA8 format). 
int width = 64
  void set_width ( int value )
 
int get_width ( )
  The number of horizontal color samples that will be obtained from the Gradient, which also represents the texture's width.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gradienttexture2d.html


classes/class_audiolistener2d
-----------------------------------------------------------
AudioListener2D Inherits: Node2D < CanvasItem < Node < Object Overrides the location sounds are heard from.  Description Once added to the scene tree and enabled using make_current, this node will override the location sounds are heard from. Only one AudioListener2D can be current. Using make_current will disable the previous AudioListener2D. If there is no active AudioListener2D in the current Viewport, center of the screen will be used as a hearing point for the audio. AudioListener2D needs to be inside SceneTree to function.   Methods  
void clear_current ( )  
bool is_current ( ) const  
void make_current ( )     Method Descriptions void clear_current ( ) Disables the AudioListener2D. If it's not set as current, this method will have no effect. 
bool is_current ( ) const
 Returns true if this AudioListener2D is currently active. void make_current ( ) Makes the AudioListener2D active, setting it as the hearing point for the sounds. If there is already another active AudioListener2D, it will be disabled. This method will have no effect if the AudioListener2D is not added to SceneTree.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiolistener2d.html


classes/class_openxractionset
-----------------------------------------------------------
OpenXRActionSet Inherits: Resource < RefCounted < Object Collection of OpenXRAction resources that make up an action set.  Description Action sets in OpenXR define a collection of actions that can be activated in unison. This allows games to easily change between different states that require different inputs or need to reinterpret inputs. For instance we could have an action set that is active when a menu is open, an action set that is active when the player is freely walking around and an action set that is active when the player is controlling a vehicle. Action sets can contain the same action with the same name, if such action sets are active at the same time the action set with the highest priority defines which binding is active.   Properties  
Array actions []  
String localized_name ""  
int priority 0     Methods  
void add_action ( OpenXRAction action )  
int get_action_count ( ) const  
void remove_action ( OpenXRAction action )     Property Descriptions 
Array actions = []
  void set_actions ( Array value )
 
Array get_actions ( )
  Collection of actions for this action set. 
String localized_name = ""
  void set_localized_name ( String value )
 
String get_localized_name ( )
  The localized name of this action set. 
int priority = 0
  void set_priority ( int value )
 
int get_priority ( )
  The priority for this action set.   Method Descriptions void add_action ( OpenXRAction action ) Add an action to this action set. 
int get_action_count ( ) const
 Retrieve the number of actions in our action set. void remove_action ( OpenXRAction action ) Remove an action from this action set.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_openxractionset.html


classes/class_capsuleshape2d
-----------------------------------------------------------
CapsuleShape2D Inherits: Shape2D < Resource < RefCounted < Object A 2D capsule shape used for physics collision.  Description A 2D capsule shape, intended for use in physics. Usually used to provide a shape for a CollisionShape2D. Performance: CapsuleShape2D is fast to check collisions against, but it is slower than RectangleShape2D and CircleShape2D.   Properties  
float height 30.0  
float radius 10.0     Property Descriptions 
float height = 30.0
  void set_height ( float value )
 
float get_height ( )
  The capsule's height. 
float radius = 10.0
  void set_radius ( float value )
 
float get_radius ( )
  The capsule's radius.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_capsuleshape2d.html


classes/class_csgcylinder3d
-----------------------------------------------------------
CSGCylinder3D Inherits: CSGPrimitive3D < CSGShape3D < GeometryInstance3D < VisualInstance3D < Node3D < Node < Object A CSG Cylinder shape.  Description This node allows you to create a cylinder (or cone) for use with the CSG system. Note: CSG nodes are intended to be used for level prototyping. Creating CSG nodes has a significant CPU cost compared to creating a MeshInstance3D with a PrimitiveMesh. Moving a CSG node within another CSG node also has a significant CPU cost, so it should be avoided during gameplay.   Tutorials  Prototyping levels with CSG    Properties  
bool cone false  
float height 2.0  
Material material   
float radius 0.5  
int sides 8  
bool smooth_faces true     Property Descriptions 
bool cone = false
  void set_cone ( bool value )
 
bool is_cone ( )
  If true a cone is created, the radius will only apply to one side. 
float height = 2.0
  void set_height ( float value )
 
float get_height ( )
  The height of the cylinder. 
Material material  void set_material ( Material value )
 
Material get_material ( )
  The material used to render the cylinder. 
float radius = 0.5
  void set_radius ( float value )
 
float get_radius ( )
  The radius of the cylinder. 
int sides = 8
  void set_sides ( int value )
 
int get_sides ( )
  The number of sides of the cylinder, the higher this number the more detail there will be in the cylinder. 
bool smooth_faces = true
  void set_smooth_faces ( bool value )
 
bool get_smooth_faces ( )
  If true the normals of the cylinder are set to give a smooth effect making the cylinder seem rounded. If false the cylinder will have a flat shaded look.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_csgcylinder3d.html


classes/class_springarm3d
-----------------------------------------------------------
SpringArm3D Inherits: Node3D < Node < Object A 3D raycast that dynamically moves its children near the collision point.  Description SpringArm3D casts a ray or a shape along its Z axis and moves all its direct children to the collision point, with an optional margin. This is useful for 3rd person cameras that move closer to the player when inside a tight space (you may need to exclude the player's collider from the SpringArm3D's collision check).   Properties  
int collision_mask 1  
float margin 0.01  
Shape3D shape   
float spring_length 1.0     Methods  
void add_excluded_object ( RID RID )  
void clear_excluded_objects ( )  
float get_hit_length ( )  
bool remove_excluded_object ( RID RID )     Property Descriptions 
int collision_mask = 1
  void set_collision_mask ( int value )
 
int get_collision_mask ( )
  The layers against which the collision check shall be done. See Collision layers and masks in the documentation for more information. 
float margin = 0.01
  void set_margin ( float value )
 
float get_margin ( )
  When the collision check is made, a candidate length for the SpringArm3D is given. The margin is then subtracted to this length and the translation is applied to the child objects of the SpringArm3D. This margin is useful for when the SpringArm3D has a Camera3D as a child node: without the margin, the Camera3D would be placed on the exact point of collision, while with the margin the Camera3D would be placed close to the point of collision. 
Shape3D shape  void set_shape ( Shape3D value )
 
Shape3D get_shape ( )
  The Shape3D to use for the SpringArm3D. When the shape is set, the SpringArm3D will cast the Shape3D on its z axis instead of performing a ray cast. 
float spring_length = 1.0
  void set_length ( float value )
 
float get_length ( )
  The maximum extent of the SpringArm3D. This is used as a length for both the ray and the shape cast used internally to calculate the desired position of the SpringArm3D's child nodes. To know more about how to perform a shape cast or a ray cast, please consult the PhysicsDirectSpaceState3D documentation.   Method Descriptions void add_excluded_object ( RID RID ) Adds the PhysicsBody3D object with the given RID to the list of PhysicsBody3D objects excluded from the collision check. void clear_excluded_objects ( ) Clears the list of PhysicsBody3D objects excluded from the collision check. 
float get_hit_length ( ) Returns the spring arm's current length. 
bool remove_excluded_object ( RID RID ) Removes the given RID from the list of PhysicsBody3D objects excluded from the collision check.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_springarm3d.html


classes/class_inputeventkey
-----------------------------------------------------------
InputEventKey Inherits: InputEventWithModifiers < InputEventFromWindow < InputEvent < Resource < RefCounted < Object Represents a key on a keyboard being pressed or released.  Description An input event for keys on a keyboard. Supports key presses, key releases and echo events. It can also be received in Node._unhandled_key_input. Note: Events received from the keyboard usually have all properties set. Event mappings should have only one of the keycode, physical_keycode or unicode set. When events are compared, properties are checked in the following priority - keycode, physical_keycode and unicode. Events with the first matching value will be considered equal.   Tutorials  Using InputEvent    Properties  
bool echo false  
Key key_label 0  
Key keycode 0  
Key physical_keycode 0  
bool pressed false  
int unicode 0     Methods  
String as_text_key_label ( ) const  
String as_text_keycode ( ) const  
String as_text_physical_keycode ( ) const  
Key get_key_label_with_modifiers ( ) const  
Key get_keycode_with_modifiers ( ) const  
Key get_physical_keycode_with_modifiers ( ) const     Property Descriptions 
bool echo = false
  void set_echo ( bool value )
 
bool is_echo ( )
  If true, the key was already pressed before this event. It means the user is holding the key down. 
Key key_label = 0
  void set_key_label ( Key value )
 
Key get_key_label ( )
  Represents the localized label printed on the key in the current keyboard layout, which corresponds to one of the Key constants or any valid Unicode character. For keyboard layouts with a single label on the key, it is equivalent to keycode. To get a human-readable representation of the InputEventKey, use OS.get_keycode_string(event.key_label) where event is the InputEventKey. +-----+ +-----+
| Q   | | Q   | - "Q" - keycode
|   Ð™ | |  Ø¶ | - "Ð™" and "Ø¶" - key_label
+-----+ +-----+
 
Key keycode = 0
  void set_keycode ( Key value )
 
Key get_keycode ( )
  Latin label printed on the key in the current keyboard layout, which corresponds to one of the Key constants. To get a human-readable representation of the InputEventKey, use OS.get_keycode_string(event.keycode) where event is the InputEventKey. +-----+ +-----+
| Q   | | Q   | - "Q" - keycode
|   Ð™ | |  Ø¶ | - "Ð™" and "Ø¶" - key_label
+-----+ +-----+
 
Key physical_keycode = 0
  void set_physical_keycode ( Key value )
 
Key get_physical_keycode ( )
  Represents the physical location of a key on the 101/102-key US QWERTY keyboard, which corresponds to one of the Key constants. To get a human-readable representation of the InputEventKey, use OS.get_keycode_string in combination with DisplayServer.keyboard_get_keycode_from_physical:  GDScriptfunc _input(event):
    if event is InputEventKey:
        var keycode = DisplayServer.keyboard_get_keycode_from_physical(event.physical_keycode)
        print(OS.get_keycode_string(keycode))
 C#public override void _Input(InputEvent @event)
{
    if (@event is InputEventKey inputEventKey)
    {
        var keycode = DisplayServer.KeyboardGetKeycodeFromPhysical(inputEventKey.PhysicalKeycode);
        GD.Print(OS.GetKeycodeString(keycode));
    }
}
  
bool pressed = false
  void set_pressed ( bool value )
 
bool is_pressed ( )
  If true, the key's state is pressed. If false, the key's state is released. 
int unicode = 0
  void set_unicode ( int value )
 
int get_unicode ( )
  The key Unicode character code (when relevant), shifted by modifier keys. Unicode character codes for composite characters and complex scripts may not be available unless IME input mode is active. See Window.set_ime_active for more information.   Method Descriptions 
String as_text_key_label ( ) const
 Returns a String representation of the event's key_label and modifiers. 
String as_text_keycode ( ) const
 Returns a String representation of the event's keycode and modifiers. 
String as_text_physical_keycode ( ) const
 Returns a String representation of the event's physical_keycode and modifiers. 
Key get_key_label_with_modifiers ( ) const
 Returns the localized key label combined with modifier keys such as Shift or Alt. See also InputEventWithModifiers. To get a human-readable representation of the InputEventKey with modifiers, use OS.get_keycode_string(event.get_key_label_with_modifiers()) where event is the InputEventKey. 
Key get_keycode_with_modifiers ( ) const
 Returns the Latin keycode combined with modifier keys such as Shift or Alt. See also InputEventWithModifiers. To get a human-readable representation of the InputEventKey with modifiers, use OS.get_keycode_string(event.get_keycode_with_modifiers()) where event is the InputEventKey. 
Key get_physical_keycode_with_modifiers ( ) const
 Returns the physical keycode combined with modifier keys such as Shift or Alt. See also InputEventWithModifiers. To get a human-readable representation of the InputEventKey with modifiers, use OS.get_keycode_string(event.get_physical_keycode_with_modifiers()) where event is the InputEventKey.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventkey.html


classes/class_capsulemesh
-----------------------------------------------------------
CapsuleMesh Inherits: PrimitiveMesh < Mesh < Resource < RefCounted < Object Class representing a capsule-shaped PrimitiveMesh.  Description Class representing a capsule-shaped PrimitiveMesh.   Properties  
float height 2.0  
int radial_segments 64  
float radius 0.5  
int rings 8     Property Descriptions 
float height = 2.0
  void set_height ( float value )
 
float get_height ( )
  Total height of the capsule mesh (including the hemispherical ends). 
int radial_segments = 64
  void set_radial_segments ( int value )
 
int get_radial_segments ( )
  Number of radial segments on the capsule mesh. 
float radius = 0.5
  void set_radius ( float value )
 
float get_radius ( )
  Radius of the capsule mesh. 
int rings = 8
  void set_rings ( int value )
 
int get_rings ( )
  Number of rings along the height of the capsule.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_capsulemesh.html


classes/class_conetwistjoint3d
-----------------------------------------------------------
ConeTwistJoint3D Inherits: Joint3D < Node3D < Node < Object A physics joint that connects two 3D physics bodies in a way that simulates a ball-and-socket joint.  Description A physics joint that connects two 3D physics bodies in a way that simulates a ball-and-socket joint. The twist axis is initiated as the X axis of the ConeTwistJoint3D. Once the physics bodies swing, the twist axis is calculated as the middle of the X axes of the joint in the local space of the two physics bodies. Useful for limbs like shoulders and hips, lamps hanging off a ceiling, etc.   Properties  
float bias 0.3  
float relaxation 1.0  
float softness 0.8  
float swing_span 0.785398  
float twist_span 3.14159     Methods  
float get_param ( Param param ) const  
void set_param ( Param param, float value )     Enumerations enum Param: 
Param PARAM_SWING_SPAN = 0
 Swing is rotation from side to side, around the axis perpendicular to the twist axis. The swing span defines, how much rotation will not get corrected along the swing axis. Could be defined as looseness in the ConeTwistJoint3D. If below 0.05, this behavior is locked. 
Param PARAM_TWIST_SPAN = 1
 Twist is the rotation around the twist axis, this value defined how far the joint can twist. Twist is locked if below 0.05. 
Param PARAM_BIAS = 2
 The speed with which the swing or twist will take place. The higher, the faster. 
Param PARAM_SOFTNESS = 3
 The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint. 
Param PARAM_RELAXATION = 4
 Defines, how fast the swing- and twist-speed-difference on both sides gets synced. 
Param PARAM_MAX = 5
 Represents the size of the Param enum.   Property Descriptions 
float bias = 0.3
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The speed with which the swing or twist will take place. The higher, the faster. 
float relaxation = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  Defines, how fast the swing- and twist-speed-difference on both sides gets synced. 
float softness = 0.8
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The ease with which the joint starts to twist. If it's too low, it takes more force to start twisting the joint. 
float swing_span = 0.785398
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  Swing is rotation from side to side, around the axis perpendicular to the twist axis. The swing span defines, how much rotation will not get corrected along the swing axis. Could be defined as looseness in the ConeTwistJoint3D. If below 0.05, this behavior is locked. 
float twist_span = 3.14159
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  Twist is the rotation around the twist axis, this value defined how far the joint can twist. Twist is locked if below 0.05.   Method Descriptions 
float get_param ( Param param ) const
 Returns the value of the specified parameter. void set_param ( Param param, float value ) Sets the value of the specified parameter.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_conetwistjoint3d.html


classes/class_inputevent
-----------------------------------------------------------
InputEvent Inherits: Resource < RefCounted < Object Inherited By: InputEventAction, InputEventFromWindow, InputEventJoypadButton, InputEventJoypadMotion, InputEventMIDI, InputEventShortcut Abstract base class for input events.  Description Abstract base class of all types of input events. See Node._input.   Tutorials  Using InputEvent Viewport and canvas transforms 2D Dodge The Creeps Demo 3D Voxel Demo    Properties  
int device 0     Methods  
bool accumulate ( InputEvent with_event )  
String as_text ( ) const  
float get_action_strength ( StringName action, bool exact_match=false ) const  
bool is_action ( StringName action, bool exact_match=false ) const  
bool is_action_pressed ( StringName action, bool allow_echo=false, bool exact_match=false ) const  
bool is_action_released ( StringName action, bool exact_match=false ) const  
bool is_action_type ( ) const  
bool is_canceled ( ) const  
bool is_echo ( ) const  
bool is_match ( InputEvent event, bool exact_match=true ) const  
bool is_pressed ( ) const  
bool is_released ( ) const  
InputEvent xformed_by ( Transform2D xform, Vector2 local_ofs=Vector2(0, 0) ) const     Property Descriptions 
int device = 0
  void set_device ( int value )
 
int get_device ( )
  The event's device ID. Note: This device ID will always be -1 for emulated mouse input from a touchscreen. This can be used to distinguish emulated mouse input from physical mouse input.   Method Descriptions 
bool accumulate ( InputEvent with_event ) Returns true if the given input event and this input event can be added together (only for events of type InputEventMouseMotion). The given input event's position, global position and speed will be copied. The resulting relative is a sum of both events. Both events' modifiers have to be identical. 
String as_text ( ) const
 Returns a String representation of the event. 
float get_action_strength ( StringName action, bool exact_match=false ) const
 Returns a value between 0.0 and 1.0 depending on the given actions' state. Useful for getting the value of events of type InputEventJoypadMotion. If exact_match is false, it ignores additional input modifiers for InputEventKey and InputEventMouseButton events, and the direction for InputEventJoypadMotion events. 
bool is_action ( StringName action, bool exact_match=false ) const
 Returns true if this input event matches a pre-defined action of any type. If exact_match is false, it ignores additional input modifiers for InputEventKey and InputEventMouseButton events, and the direction for InputEventJoypadMotion events. 
bool is_action_pressed ( StringName action, bool allow_echo=false, bool exact_match=false ) const
 Returns true if the given action is being pressed (and is not an echo event for InputEventKey events, unless allow_echo is true). Not relevant for events of type InputEventMouseMotion or InputEventScreenDrag. If exact_match is false, it ignores additional input modifiers for InputEventKey and InputEventMouseButton events, and the direction for InputEventJoypadMotion events. Note: Due to keyboard ghosting, is_action_pressed may return false even if one of the action's keys is pressed. See Input examples in the documentation for more information. 
bool is_action_released ( StringName action, bool exact_match=false ) const
 Returns true if the given action is released (i.e. not pressed). Not relevant for events of type InputEventMouseMotion or InputEventScreenDrag. If exact_match is false, it ignores additional input modifiers for InputEventKey and InputEventMouseButton events, and the direction for InputEventJoypadMotion events. 
bool is_action_type ( ) const
 Returns true if this input event's type is one that can be assigned to an input action. 
bool is_canceled ( ) const
 Returns true if this input event has been canceled. 
bool is_echo ( ) const
 Returns true if this input event is an echo event (only for events of type InputEventKey). Any other event type returns false. 
bool is_match ( InputEvent event, bool exact_match=true ) const
 Returns true if the specified event matches this event. Only valid for action events i.e key (InputEventKey), button (InputEventMouseButton or InputEventJoypadButton), axis InputEventJoypadMotion or action (InputEventAction) events. If exact_match is false, it ignores additional input modifiers for InputEventKey and InputEventMouseButton events, and the direction for InputEventJoypadMotion events. 
bool is_pressed ( ) const
 Returns true if this input event is pressed. Not relevant for events of type InputEventMouseMotion or InputEventScreenDrag. Note: Due to keyboard ghosting, is_pressed may return false even if one of the action's keys is pressed. See Input examples in the documentation for more information. 
bool is_released ( ) const
 Returns true if this input event is released. Not relevant for events of type InputEventMouseMotion or InputEventScreenDrag. 
InputEvent xformed_by ( Transform2D xform, Vector2 local_ofs=Vector2(0, 0) ) const
 Returns a copy of the given input event which has been offset by local_ofs and transformed by xform. Relevant for events of type InputEventMouseButton, InputEventMouseMotion, InputEventScreenTouch, InputEventScreenDrag, InputEventMagnifyGesture and InputEventPanGesture.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputevent.html


classes/class_audioeffectpanner
-----------------------------------------------------------
AudioEffectPanner Inherits: AudioEffect < Resource < RefCounted < Object Adds a panner audio effect to an audio bus. Pans sound left or right.  Description Determines how much of an audio signal is sent to the left and right buses.   Tutorials  Audio buses    Properties  
float pan 0.0     Property Descriptions 
float pan = 0.0
  void set_pan ( float value )
 
float get_pan ( )
  Pan position. Value can range from -1 (fully left) to 1 (fully right).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectpanner.html


classes/class_ormmaterial3d
-----------------------------------------------------------
ORMMaterial3D Inherits: BaseMaterial3D < Material < Resource < RefCounted < Object A PBR (Physically Based Rendering) material to be used on 3D objects. Uses an ORM texture.  Description ORMMaterial3D's properties are inherited from BaseMaterial3D. Unlike StandardMaterial3D, ORMMaterial3D uses a single texture for ambient occlusion, roughness and metallic maps, known as an ORM texture.   Tutorials  Standard Material 3D and ORM Material 3D   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_ormmaterial3d.html


classes/class_hslider
-----------------------------------------------------------
HSlider Inherits: Slider < Range < Control < CanvasItem < Node < Object A horizontal slider that goes from left (min) to right (max).  Description A horizontal slider, used to adjust a value by moving a grabber along a horizontal axis. It is a Range-based control and goes from left (min) to right (max).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_hslider.html


classes/class_quadmesh
-----------------------------------------------------------
QuadMesh Inherits: PlaneMesh < PrimitiveMesh < Mesh < Resource < RefCounted < Object Class representing a square mesh facing the camera.  Description Class representing a square PrimitiveMesh. This flat mesh does not have a thickness. By default, this mesh is aligned on the X and Y axes; this rotation is more suited for use with billboarded materials. A QuadMesh is equivalent to a PlaneMesh except its default PlaneMesh.orientation is PlaneMesh.FACE_Z.   Tutorials  GUI in 3D Demo 2D in 3D Demo    Properties  
Orientation orientation 2 (overrides PlaneMesh)  
Vector2 size Vector2(1, 1) (overrides PlaneMesh)    
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_quadmesh.html


classes/class_tree
-----------------------------------------------------------
Tree Inherits: Control < CanvasItem < Node < Object A control used to show a set of internal TreeItems in a hierarchical structure.  Description A control used to show a set of internal TreeItems in a hierarchical structure. The tree items can be selected, expanded and collapsed. The tree can have multiple columns with custom controls like LineEdits, buttons and popups. It can be useful for structured displays and interactions. Trees are built via code, using TreeItem objects to create the structure. They have a single root, but multiple roots can be simulated with hide_root:  GDScriptfunc _ready():
    var tree = Tree.new()
    var root = tree.create_item()
    tree.hide_root = true
    var child1 = tree.create_item(root)
    var child2 = tree.create_item(root)
    var subchild1 = tree.create_item(child1)
    subchild1.set_text(0, "Subchild1")
 C#public override void _Ready()
{
    var tree = new Tree();
    TreeItem root = tree.CreateItem();
    tree.HideRoot = true;
    TreeItem child1 = tree.CreateItem(root);
    TreeItem child2 = tree.CreateItem(root);
    TreeItem subchild1 = tree.CreateItem(child1);
    subchild1.SetText(0, "Subchild1");
}
  To iterate over all the TreeItem objects in a Tree object, use TreeItem.get_next and TreeItem.get_first_child after getting the root through get_root. You can use Object.free on a TreeItem to remove it from the Tree. Incremental search: Like ItemList and PopupMenu, Tree supports searching within the list while the control is focused. Press a key that matches the first letter of an item's name to select the first item starting with the given letter. After that point, there are two ways to perform incremental search: 1) Press the same key again before the timeout duration to select the next item starting with the same letter. 2) Press letter keys that match the rest of the word before the timeout duration to match to select the item in question directly. Both of these actions will be reset to the beginning of the list if the timeout duration has passed since the last keystroke was registered. You can adjust the timeout duration by changing ProjectSettings.gui/timers/incremental_search_max_interval_msec.   Properties  
bool allow_reselect false  
bool allow_rmb_select false  
bool allow_search true  
bool clip_contents true (overrides Control)  
bool column_titles_visible false  
int columns 1  
int drop_mode_flags 0  
bool enable_recursive_folding true  
FocusMode focus_mode 2 (overrides Control)  
bool hide_folding false  
bool hide_root false  
bool scroll_horizontal_enabled true  
bool scroll_vertical_enabled true  
SelectMode select_mode 0     Methods  
void clear ( )  
TreeItem create_item ( TreeItem parent=null, int index=-1 )  
void deselect_all ( )  
bool edit_selected ( bool force_edit=false )  
void ensure_cursor_is_visible ( )  
int get_button_id_at_position ( Vector2 position ) const  
int get_column_at_position ( Vector2 position ) const  
int get_column_expand_ratio ( int column ) const  
String get_column_title ( int column ) const  
HorizontalAlignment get_column_title_alignment ( int column ) const  
TextDirection get_column_title_direction ( int column ) const  
String get_column_title_language ( int column ) const  
int get_column_width ( int column ) const  
Rect2 get_custom_popup_rect ( ) const  
int get_drop_section_at_position ( Vector2 position ) const  
TreeItem get_edited ( ) const  
int get_edited_column ( ) const  
Rect2 get_item_area_rect ( TreeItem item, int column=-1, int button_index=-1 ) const  
TreeItem get_item_at_position ( Vector2 position ) const  
TreeItem get_next_selected ( TreeItem from )  
int get_pressed_button ( ) const  
TreeItem get_root ( ) const  
Vector2 get_scroll ( ) const  
TreeItem get_selected ( ) const  
int get_selected_column ( ) const  
bool is_column_clipping_content ( int column ) const  
bool is_column_expanding ( int column ) const  
void scroll_to_item ( TreeItem item, bool center_on_item=false )  
void set_column_clip_content ( int column, bool enable )  
void set_column_custom_minimum_width ( int column, int min_width )  
void set_column_expand ( int column, bool expand )  
void set_column_expand_ratio ( int column, int ratio )  
void set_column_title ( int column, String title )  
void set_column_title_alignment ( int column, HorizontalAlignment title_alignment )  
void set_column_title_direction ( int column, TextDirection direction )  
void set_column_title_language ( int column, String language )  
void set_selected ( TreeItem item, int column )     Theme Properties  
Color children_hl_line_color Color(0.27, 0.27, 0.27, 1)  
Color custom_button_font_highlight Color(0.95, 0.95, 0.95, 1)  
Color drop_position_color Color(1, 1, 1, 1)  
Color font_color Color(0.7, 0.7, 0.7, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
Color font_selected_color Color(1, 1, 1, 1)  
Color guide_color Color(0.7, 0.7, 0.7, 0.25)  
Color parent_hl_line_color Color(0.27, 0.27, 0.27, 1)  
Color relationship_line_color Color(0.27, 0.27, 0.27, 1)  
Color title_button_color Color(0.875, 0.875, 0.875, 1)  
int button_margin 4  
int children_hl_line_width 1  
int draw_guides 1  
int draw_relationship_lines 0  
int h_separation 4  
int icon_max_width 0  
int inner_item_margin_bottom 0  
int inner_item_margin_left 0  
int inner_item_margin_right 0  
int inner_item_margin_top 0  
int item_margin 16  
int outline_size 0  
int parent_hl_line_margin 0  
int parent_hl_line_width 1  
int relationship_line_width 1  
int scroll_border 4  
int scroll_speed 12  
int scrollbar_h_separation 4  
int scrollbar_margin_bottom -1  
int scrollbar_margin_left -1  
int scrollbar_margin_right -1  
int scrollbar_margin_top -1  
int scrollbar_v_separation 4  
int v_separation 4  
Font font   
Font title_button_font   
int font_size   
int title_button_font_size   
Texture2D arrow   
Texture2D arrow_collapsed   
Texture2D arrow_collapsed_mirrored   
Texture2D checked   
Texture2D indeterminate   
Texture2D select_arrow   
Texture2D unchecked   
Texture2D updown   
StyleBox button_pressed   
StyleBox cursor   
StyleBox cursor_unfocused   
StyleBox custom_button   
StyleBox custom_button_hover   
StyleBox custom_button_pressed   
StyleBox focus   
StyleBox panel   
StyleBox selected   
StyleBox selected_focus   
StyleBox title_button_hover   
StyleBox title_button_normal   
StyleBox title_button_pressed      Signals button_clicked ( TreeItem item, int column, int id, int mouse_button_index ) Emitted when a button on the tree was pressed (see TreeItem.add_button). cell_selected ( ) Emitted when a cell is selected. check_propagated_to_item ( TreeItem item, int column ) Emitted when TreeItem.propagate_check is called. Connect to this signal to process the items that are affected when TreeItem.propagate_check is invoked. The order that the items affected will be processed is as follows: the item that invoked the method, children of that item, and finally parents of that item. column_title_clicked ( int column, int mouse_button_index ) Emitted when a column's title is clicked with either @GlobalScope.MOUSE_BUTTON_LEFT or @GlobalScope.MOUSE_BUTTON_RIGHT. custom_item_clicked ( int mouse_button_index ) Emitted when an item with TreeItem.CELL_MODE_CUSTOM is clicked with a mouse button. custom_popup_edited ( bool arrow_clicked ) Emitted when a cell with the TreeItem.CELL_MODE_CUSTOM is clicked to be edited. empty_clicked ( Vector2 position, int mouse_button_index ) Emitted when a mouse button is clicked in the empty space of the tree. item_activated ( ) Emitted when an item is double-clicked, or selected with a ui_accept input event (e.g. using Enter or Space on the keyboard). item_collapsed ( TreeItem item ) Emitted when an item is collapsed by a click on the folding arrow. item_edited ( ) Emitted when an item is edited. item_icon_double_clicked ( ) Emitted when an item's icon is double-clicked. For a signal that emits when any part of the item is double-clicked, see item_activated. item_mouse_selected ( Vector2 position, int mouse_button_index ) Emitted when an item is selected with a mouse button. item_selected ( ) Emitted when an item is selected. multi_selected ( TreeItem item, int column, bool selected ) Emitted instead of item_selected if select_mode is set to SELECT_MULTI. nothing_selected ( ) Emitted when a left mouse button click does not select any item.   Enumerations enum SelectMode: 
SelectMode SELECT_SINGLE = 0
 Allows selection of a single cell at a time. From the perspective of items, only a single item is allowed to be selected. And there is only one column selected in the selected item. The focus cursor is always hidden in this mode, but it is positioned at the current selection, making the currently selected item the currently focused item. 
SelectMode SELECT_ROW = 1
 Allows selection of a single row at a time. From the perspective of items, only a single items is allowed to be selected. And all the columns are selected in the selected item. The focus cursor is always hidden in this mode, but it is positioned at the first column of the current selection, making the currently selected item the currently focused item. 
SelectMode SELECT_MULTI = 2
 Allows selection of multiple cells at the same time. From the perspective of items, multiple items are allowed to be selected. And there can be multiple columns selected in each selected item. The focus cursor is visible in this mode, the item or column under the cursor is not necessarily selected. enum DropModeFlags: 
DropModeFlags DROP_MODE_DISABLED = 0
 Disables all drop sections, but still allows to detect the "on item" drop section by get_drop_section_at_position. Note: This is the default flag, it has no effect when combined with other flags. 
DropModeFlags DROP_MODE_ON_ITEM = 1
 Enables the "on item" drop section. This drop section covers the entire item. When combined with DROP_MODE_INBETWEEN, this drop section halves the height and stays centered vertically. 
DropModeFlags DROP_MODE_INBETWEEN = 2
 Enables "above item" and "below item" drop sections. The "above item" drop section covers the top half of the item, and the "below item" drop section covers the bottom half. When combined with DROP_MODE_ON_ITEM, these drop sections halves the height and stays on top / bottom accordingly.   Property Descriptions 
bool allow_reselect = false
  void set_allow_reselect ( bool value )
 
bool get_allow_reselect ( )
  If true, the currently selected cell may be selected again. 
bool allow_rmb_select = false
  void set_allow_rmb_select ( bool value )
 
bool get_allow_rmb_select ( )
  If true, a right mouse button click can select items. 
bool allow_search = true
  void set_allow_search ( bool value )
 
bool get_allow_search ( )
  If true, allows navigating the Tree with letter keys through incremental search. 
bool column_titles_visible = false
  void set_column_titles_visible ( bool value )
 
bool are_column_titles_visible ( )
  If true, column titles are visible. 
int columns = 1
  void set_columns ( int value )
 
int get_columns ( )
  The number of columns. 
int drop_mode_flags = 0
  void set_drop_mode_flags ( int value )
 
int get_drop_mode_flags ( )
  The drop mode as an OR combination of flags. See DropModeFlags constants. Once dropping is done, reverts to DROP_MODE_DISABLED. Setting this during Control._can_drop_data is recommended. This controls the drop sections, i.e. the decision and drawing of possible drop locations based on the mouse position. 
bool enable_recursive_folding = true
  void set_enable_recursive_folding ( bool value )
 
bool is_recursive_folding_enabled ( )
  If true, recursive folding is enabled for this Tree. Holding down Shift while clicking the fold arrow collapses or uncollapses the TreeItem and all its descendants. 
bool hide_folding = false
  void set_hide_folding ( bool value )
 
bool is_folding_hidden ( )
  If true, the folding arrow is hidden. 
bool hide_root = false
  void set_hide_root ( bool value )
 
bool is_root_hidden ( )
  If true, the tree's root is hidden. 
bool scroll_horizontal_enabled = true
  void set_h_scroll_enabled ( bool value )
 
bool is_h_scroll_enabled ( )
  If true, enables horizontal scrolling. 
bool scroll_vertical_enabled = true
  void set_v_scroll_enabled ( bool value )
 
bool is_v_scroll_enabled ( )
  If true, enables vertical scrolling. 
SelectMode select_mode = 0
  void set_select_mode ( SelectMode value )
 
SelectMode get_select_mode ( )
  Allows single or multiple selection. See the SelectMode constants.   Method Descriptions void clear ( ) Clears the tree. This removes all items. 
TreeItem create_item ( TreeItem parent=null, int index=-1 ) Creates an item in the tree and adds it as a child of parent, which can be either a valid TreeItem or null. If parent is null, the root item will be the parent, or the new item will be the root itself if the tree is empty. The new item will be the index-th child of parent, or it will be the last child if there are not enough siblings. void deselect_all ( ) Deselects all tree items (rows and columns). In SELECT_MULTI mode also removes selection cursor. 
bool edit_selected ( bool force_edit=false ) Edits the selected tree item as if it was clicked. Either the item must be set editable with TreeItem.set_editable or force_edit must be true. Returns true if the item could be edited. Fails if no item is selected. void ensure_cursor_is_visible ( ) Makes the currently focused cell visible. This will scroll the tree if necessary. In SELECT_ROW mode, this will not do horizontal scrolling, as all the cells in the selected row is focused logically. Note: Despite the name of this method, the focus cursor itself is only visible in SELECT_MULTI mode. 
int get_button_id_at_position ( Vector2 position ) const
 Returns the button ID at position, or -1 if no button is there. 
int get_column_at_position ( Vector2 position ) const
 Returns the column index at position, or -1 if no item is there. 
int get_column_expand_ratio ( int column ) const
 Returns the expand ratio assigned to the column. 
String get_column_title ( int column ) const
 Returns the column's title. 
HorizontalAlignment get_column_title_alignment ( int column ) const
 Returns the column title alignment. 
TextDirection get_column_title_direction ( int column ) const
 Returns column title base writing direction. 
String get_column_title_language ( int column ) const
 Returns column title language code. 
int get_column_width ( int column ) const
 Returns the column's width in pixels. 
Rect2 get_custom_popup_rect ( ) const
 Returns the rectangle for custom popups. Helper to create custom cell controls that display a popup. See TreeItem.set_cell_mode. 
int get_drop_section_at_position ( Vector2 position ) const
 Returns the drop section at position, or -100 if no item is there. Values -1, 0, or 1 will be returned for the "above item", "on item", and "below item" drop sections, respectively. See DropModeFlags for a description of each drop section. To get the item which the returned drop section is relative to, use get_item_at_position. 
TreeItem get_edited ( ) const
 Returns the currently edited item. Can be used with item_edited to get the item that was modified.  GDScriptfunc _ready():
    $Tree.item_edited.connect(on_Tree_item_edited)
func on_Tree_item_edited():
    print($Tree.get_edited()) # This item just got edited (e.g. checked).
 C#public override void _Ready()
{
    GetNode<Tree>("Tree").ItemEdited += OnTreeItemEdited;
}
public void OnTreeItemEdited()
{
    GD.Print(GetNode<Tree>("Tree").GetEdited()); // This item just got edited (e.g. checked).
}
  
int get_edited_column ( ) const
 Returns the column for the currently edited item. 
Rect2 get_item_area_rect ( TreeItem item, int column=-1, int button_index=-1 ) const
 Returns the rectangle area for the specified TreeItem. If column is specified, only get the position and size of that column, otherwise get the rectangle containing all columns. If a button index is specified, the rectangle of that button will be returned. 
TreeItem get_item_at_position ( Vector2 position ) const
 Returns the tree item at the specified position (relative to the tree origin position). 
TreeItem get_next_selected ( TreeItem from ) Returns the next selected TreeItem after the given one, or null if the end is reached. If from is null, this returns the first selected item. 
int get_pressed_button ( ) const
 Returns the last pressed button's index. 
TreeItem get_root ( ) const
 Returns the tree's root item, or null if the tree is empty. 
Vector2 get_scroll ( ) const
 Returns the current scrolling position. 
TreeItem get_selected ( ) const
 Returns the currently focused item, or null if no item is focused. In SELECT_ROW and SELECT_SINGLE modes, the focused item is same as the selected item. In SELECT_MULTI mode, the focused item is the item under the focus cursor, not necessarily selected. To get the currently selected item(s), use get_next_selected. 
int get_selected_column ( ) const
 Returns the currently focused column, or -1 if no column is focused. In SELECT_SINGLE mode, the focused column is the selected column. In SELECT_ROW mode, the focused column is always 0 if any item is selected. In SELECT_MULTI mode, the focused column is the column under the focus cursor, and there are not necessarily any column selected. To tell whether a column of an item is selected, use TreeItem.is_selected. 
bool is_column_clipping_content ( int column ) const
 Returns true if the column has enabled clipping (see set_column_clip_content). 
bool is_column_expanding ( int column ) const
 Returns true if the column has enabled expanding (see set_column_expand). void scroll_to_item ( TreeItem item, bool center_on_item=false ) Causes the Tree to jump to the specified TreeItem. void set_column_clip_content ( int column, bool enable ) Allows to enable clipping for column's content, making the content size ignored. void set_column_custom_minimum_width ( int column, int min_width ) Overrides the calculated minimum width of a column. It can be set to 0 to restore the default behavior. Columns that have the "Expand" flag will use their "min_width" in a similar fashion to Control.size_flags_stretch_ratio. void set_column_expand ( int column, bool expand ) If true, the column will have the "Expand" flag of Control. Columns that have the "Expand" flag will use their expand ratio in a similar fashion to Control.size_flags_stretch_ratio (see set_column_expand_ratio). void set_column_expand_ratio ( int column, int ratio ) Sets the relative expand ratio for a column. See set_column_expand. void set_column_title ( int column, String title ) Sets the title of a column. void set_column_title_alignment ( int column, HorizontalAlignment title_alignment ) Sets the column title alignment. Note that @GlobalScope.HORIZONTAL_ALIGNMENT_FILL is not supported for column titles. void set_column_title_direction ( int column, TextDirection direction ) Sets column title base writing direction. void set_column_title_language ( int column, String language ) Sets language code of column title used for line-breaking and text shaping algorithms, if left empty current locale is used instead. void set_selected ( TreeItem item, int column ) Selects the specified TreeItem and column.   Theme Property Descriptions 
Color children_hl_line_color = Color(0.27, 0.27, 0.27, 1)
 The Color of the relationship lines between the selected TreeItem and its children. 
Color custom_button_font_highlight = Color(0.95, 0.95, 0.95, 1)
 Text Color for a TreeItem.CELL_MODE_CUSTOM mode cell when it's hovered. 
Color drop_position_color = Color(1, 1, 1, 1)
 Color used to draw possible drop locations. See DropModeFlags constants for further description of drop locations. 
Color font_color = Color(0.7, 0.7, 0.7, 1)
 Default text Color of the item. 
Color font_outline_color = Color(1, 1, 1, 1)
 The tint of text outline of the item. 
Color font_selected_color = Color(1, 1, 1, 1)
 Text Color used when the item is selected. 
Color guide_color = Color(0.7, 0.7, 0.7, 0.25)
 Color of the guideline. 
Color parent_hl_line_color = Color(0.27, 0.27, 0.27, 1)
 The Color of the relationship lines between the selected TreeItem and its parents. 
Color relationship_line_color = Color(0.27, 0.27, 0.27, 1)
 The default Color of the relationship lines. 
Color title_button_color = Color(0.875, 0.875, 0.875, 1)
 Default text Color of the title button. 
int button_margin = 4
 The horizontal space between each button in a cell. 
int children_hl_line_width = 1
 The width of the relationship lines between the selected TreeItem and its children. 
int draw_guides = 1
 Draws the guidelines if not zero, this acts as a boolean. The guideline is a horizontal line drawn at the bottom of each item. 
int draw_relationship_lines = 0
 Draws the relationship lines if not zero, this acts as a boolean. Relationship lines are drawn at the start of child items to show hierarchy. 
int h_separation = 4
 The horizontal space between item cells. This is also used as the margin at the start of an item when folding is disabled. 
int icon_max_width = 0
 The maximum allowed width of the icon in item's cells. This limit is applied on top of the default size of the icon, but before the value set with TreeItem.set_icon_max_width. The height is adjusted according to the icon's ratio. 
int inner_item_margin_bottom = 0
 The inner bottom margin of an item. 
int inner_item_margin_left = 0
 The inner left margin of an item. 
int inner_item_margin_right = 0
 The inner right margin of an item. 
int inner_item_margin_top = 0
 The inner top margin of an item. 
int item_margin = 16
 The horizontal margin at the start of an item. This is used when folding is enabled for the item. 
int outline_size = 0
 The size of the text outline. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. 
int parent_hl_line_margin = 0
 The space between the parent relationship lines for the selected TreeItem and the relationship lines to its siblings that are not selected. 
int parent_hl_line_width = 1
 The width of the relationship lines between the selected TreeItem and its parents. 
int relationship_line_width = 1
 The default width of the relationship lines. 
int scroll_border = 4
 The maximum distance between the mouse cursor and the control's border to trigger border scrolling when dragging. 
int scroll_speed = 12
 The speed of border scrolling. 
int scrollbar_h_separation = 4
 The horizontal separation of tree content and scrollbar. 
int scrollbar_margin_bottom = -1
 The bottom margin of the scrollbars. When negative, uses panel bottom margin. 
int scrollbar_margin_left = -1
 The left margin of the horizontal scrollbar. When negative, uses panel left margin. 
int scrollbar_margin_right = -1
 The right margin of the scrollbars. When negative, uses panel right margin. 
int scrollbar_margin_top = -1
 The top margin of the vertical scrollbar. When negative, uses panel top margin. 
int scrollbar_v_separation = 4
 The vertical separation of tree content and scrollbar. 
int v_separation = 4
 The vertical padding inside each item, i.e. the distance between the item's content and top/bottom border. 
Font font Font of the item's text. 
Font title_button_font Font of the title button's text. 
int font_size Font size of the item's text. 
int title_button_font_size Font size of the title button's text. 
Texture2D arrow The arrow icon used when a foldable item is not collapsed. 
Texture2D arrow_collapsed The arrow icon used when a foldable item is collapsed (for left-to-right layouts). 
Texture2D arrow_collapsed_mirrored The arrow icon used when a foldable item is collapsed (for right-to-left layouts). 
Texture2D checked The check icon to display when the TreeItem.CELL_MODE_CHECK mode cell is checked. 
Texture2D indeterminate The check icon to display when the TreeItem.CELL_MODE_CHECK mode cell is indeterminate. 
Texture2D select_arrow The arrow icon to display for the TreeItem.CELL_MODE_RANGE mode cell. 
Texture2D unchecked The check icon to display when the TreeItem.CELL_MODE_CHECK mode cell is unchecked. 
Texture2D updown The updown arrow icon to display for the TreeItem.CELL_MODE_RANGE mode cell. 
StyleBox button_pressed StyleBox used when a button in the tree is pressed. 
StyleBox cursor StyleBox used for the cursor, when the Tree is being focused. 
StyleBox cursor_unfocused StyleBox used for the cursor, when the Tree is not being focused. 
StyleBox custom_button Default StyleBox for a TreeItem.CELL_MODE_CUSTOM mode cell. 
StyleBox custom_button_hover StyleBox for a TreeItem.CELL_MODE_CUSTOM mode cell when it's hovered. 
StyleBox custom_button_pressed StyleBox for a TreeItem.CELL_MODE_CUSTOM mode cell when it's pressed. 
StyleBox focus The focused style for the Tree, drawn on top of everything. 
StyleBox panel The background style for the Tree. 
StyleBox selected StyleBox for the selected items, used when the Tree is not being focused. 
StyleBox selected_focus StyleBox for the selected items, used when the Tree is being focused. 
StyleBox title_button_hover StyleBox used when the title button is being hovered. 
StyleBox title_button_normal Default StyleBox for the title button. 
StyleBox title_button_pressed StyleBox used when the title button is being pressed.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_tree.html


classes/class_navigationmeshsourcegeometrydata3d
-----------------------------------------------------------
NavigationMeshSourceGeometryData3D Inherits: Resource < RefCounted < Object Container for parsed source geometry data used in navigation mesh baking.  Description Container for parsed source geometry data used in navigation mesh baking.   Methods  
void add_faces ( PackedVector3Array faces, Transform3D xform )  
void add_mesh ( Mesh mesh, Transform3D xform )  
void add_mesh_array ( Array mesh_array, Transform3D xform )  
void clear ( )  
PackedInt32Array get_indices ( ) const  
PackedFloat32Array get_vertices ( ) const  
bool has_data ( )  
void set_indices ( PackedInt32Array indices )  
void set_vertices ( PackedFloat32Array vertices )     Method Descriptions void add_faces ( PackedVector3Array faces, Transform3D xform ) Adds an array of vertex positions to the geometry data for navigation mesh baking to form triangulated faces. For each face the array must have three vertex positions in clockwise winding order. Since NavigationMesh resources have no transform, all vertex positions need to be offset by the node's transform using xform. void add_mesh ( Mesh mesh, Transform3D xform ) Adds the geometry data of a Mesh resource to the navigation mesh baking data. The mesh must have valid triangulated mesh data to be considered. Since NavigationMesh resources have no transform, all vertex positions need to be offset by the node's transform using xform. void add_mesh_array ( Array mesh_array, Transform3D xform ) Adds an Array the size of Mesh.ARRAY_MAX and with vertices at index Mesh.ARRAY_VERTEX and indices at index Mesh.ARRAY_INDEX to the navigation mesh baking data. The array must have valid triangulated mesh data to be considered. Since NavigationMesh resources have no transform, all vertex positions need to be offset by the node's transform using xform. void clear ( ) Clears the internal data. 
PackedInt32Array get_indices ( ) const
 Returns the parsed source geometry data indices array. 
PackedFloat32Array get_vertices ( ) const
 Returns the parsed source geometry data vertices array. 
bool has_data ( ) Returns true when parsed source geometry data exists. void set_indices ( PackedInt32Array indices ) Sets the parsed source geometry data indices. The indices need to be matched with appropriated vertices. Warning: Inappropriate data can crash the baking process of the involved third-party libraries. void set_vertices ( PackedFloat32Array vertices ) Sets the parsed source geometry data vertices. The vertices need to be matched with appropriated indices. Warning: Inappropriate data can crash the baking process of the involved third-party libraries.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_navigationmeshsourcegeometrydata3d.html


classes/class_skeleton2d
-----------------------------------------------------------
Skeleton2D Inherits: Node2D < CanvasItem < Node < Object The parent of a hierarchy of Bone2Ds, used to create a 2D skeletal animation.  Description Skeleton2D parents a hierarchy of Bone2D nodes. It holds a reference to each Bone2D's rest pose and acts as a single point of access to its bones. To set up different types of inverse kinematics for the given Skeleton2D, a SkeletonModificationStack2D should be created. The inverse kinematics be applied by increasing SkeletonModificationStack2D.modification_count and creating the desired number of modifications.   Tutorials  2D skeletons    Methods  
void execute_modifications ( float delta, int execution_mode )  
Bone2D get_bone ( int idx )  
int get_bone_count ( ) const  
Transform2D get_bone_local_pose_override ( int bone_idx )  
SkeletonModificationStack2D get_modification_stack ( ) const  
RID get_skeleton ( ) const  
void set_bone_local_pose_override ( int bone_idx, Transform2D override_pose, float strength, bool persistent )  
void set_modification_stack ( SkeletonModificationStack2D modification_stack )     Signals bone_setup_changed ( ) Emitted when the Bone2D setup attached to this skeletons changes. This is primarily used internally within the skeleton.   Method Descriptions void execute_modifications ( float delta, int execution_mode ) Executes all the modifications on the SkeletonModificationStack2D, if the Skeleton2D has one assigned. 
Bone2D get_bone ( int idx ) Returns a Bone2D from the node hierarchy parented by Skeleton2D. The object to return is identified by the parameter idx. Bones are indexed by descending the node hierarchy from top to bottom, adding the children of each branch before moving to the next sibling. 
int get_bone_count ( ) const
 Returns the number of Bone2D nodes in the node hierarchy parented by Skeleton2D. 
Transform2D get_bone_local_pose_override ( int bone_idx ) Returns the local pose override transform for bone_idx. 
SkeletonModificationStack2D get_modification_stack ( ) const
 Returns the SkeletonModificationStack2D attached to this skeleton, if one exists. 
RID get_skeleton ( ) const
 Returns the RID of a Skeleton2D instance. void set_bone_local_pose_override ( int bone_idx, Transform2D override_pose, float strength, bool persistent ) Sets the local pose transform, override_pose, for the bone at bone_idx. strength is the interpolation strength that will be used when applying the pose, and persistent determines if the applied pose will remain. Note: The pose transform needs to be a local transform relative to the Bone2D node at bone_idx! void set_modification_stack ( SkeletonModificationStack2D modification_stack ) Sets the SkeletonModificationStack2D attached to this skeleton.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeleton2d.html


classes/class_styleboxflat
-----------------------------------------------------------
StyleBoxFlat Inherits: StyleBox < Resource < RefCounted < Object A customizable StyleBox that doesn't use a texture.  Description By configuring various properties of this style box, you can achieve many common looks without the need of a texture. This includes optionally rounded borders, antialiasing, shadows, and skew. Setting corner radius to high values is allowed. As soon as corners overlap, the stylebox will switch to a relative system. Example: height = 30
corner_radius_top_left = 50
corner_radius_bottom_left = 100
 The relative system now would take the 1:2 ratio of the two left corners to calculate the actual corner width. Both corners added will never be more than the height. Result: corner_radius_top_left: 10
corner_radius_bottom_left: 20
   Properties  
bool anti_aliasing true  
float anti_aliasing_size 1.0  
Color bg_color Color(0.6, 0.6, 0.6, 1)  
bool border_blend false  
Color border_color Color(0.8, 0.8, 0.8, 1)  
int border_width_bottom 0  
int border_width_left 0  
int border_width_right 0  
int border_width_top 0  
int corner_detail 8  
int corner_radius_bottom_left 0  
int corner_radius_bottom_right 0  
int corner_radius_top_left 0  
int corner_radius_top_right 0  
bool draw_center true  
float expand_margin_bottom 0.0  
float expand_margin_left 0.0  
float expand_margin_right 0.0  
float expand_margin_top 0.0  
Color shadow_color Color(0, 0, 0, 0.6)  
Vector2 shadow_offset Vector2(0, 0)  
int shadow_size 0  
Vector2 skew Vector2(0, 0)     Methods  
int get_border_width ( Side margin ) const  
int get_border_width_min ( ) const  
int get_corner_radius ( Corner corner ) const  
float get_expand_margin ( Side margin ) const  
void set_border_width ( Side margin, int width )  
void set_border_width_all ( int width )  
void set_corner_radius ( Corner corner, int radius )  
void set_corner_radius_all ( int radius )  
void set_expand_margin ( Side margin, float size )  
void set_expand_margin_all ( float size )     Property Descriptions 
bool anti_aliasing = true
  void set_anti_aliased ( bool value )
 
bool is_anti_aliased ( )
  Antialiasing draws a small ring around the edges, which fades to transparency. As a result, edges look much smoother. This is only noticeable when using rounded corners or skew. Note: When using beveled corners with 45-degree angles (corner_detail = 1), it is recommended to set anti_aliasing to false to ensure crisp visuals and avoid possible visual glitches. 
float anti_aliasing_size = 1.0
  void set_aa_size ( float value )
 
float get_aa_size ( )
  This changes the size of the antialiasing effect. 1.0 is recommended for an optimal result at 100% scale, identical to how rounded rectangles are rendered in web browsers and most vector drawing software. Note: Higher values may produce a blur effect but can also create undesired artifacts on small boxes with large-radius corners. 
Color bg_color = Color(0.6, 0.6, 0.6, 1)
  void set_bg_color ( Color value )
 
Color get_bg_color ( )
  The background color of the stylebox. 
bool border_blend = false
  void set_border_blend ( bool value )
 
bool get_border_blend ( )
  If true, the border will fade into the background color. 
Color border_color = Color(0.8, 0.8, 0.8, 1)
  void set_border_color ( Color value )
 
Color get_border_color ( )
  Sets the color of the border. 
int border_width_bottom = 0
  void set_border_width ( Side margin, int width )
 
int get_border_width ( Side margin ) const
  Border width for the bottom border. 
int border_width_left = 0
  void set_border_width ( Side margin, int width )
 
int get_border_width ( Side margin ) const
  Border width for the left border. 
int border_width_right = 0
  void set_border_width ( Side margin, int width )
 
int get_border_width ( Side margin ) const
  Border width for the right border. 
int border_width_top = 0
  void set_border_width ( Side margin, int width )
 
int get_border_width ( Side margin ) const
  Border width for the top border. 
int corner_detail = 8
  void set_corner_detail ( int value )
 
int get_corner_detail ( )
  This sets the number of vertices used for each corner. Higher values result in rounder corners but take more processing power to compute. When choosing a value, you should take the corner radius (set_corner_radius_all) into account. For corner radii less than 10, 4 or 5 should be enough. For corner radii less than 30, values between 8 and 12 should be enough. A corner detail of 1 will result in chamfered corners instead of rounded corners, which is useful for some artistic effects. 
int corner_radius_bottom_left = 0
  void set_corner_radius ( Corner corner, int radius )
 
int get_corner_radius ( Corner corner ) const
  The bottom-left corner's radius. If 0, the corner is not rounded. 
int corner_radius_bottom_right = 0
  void set_corner_radius ( Corner corner, int radius )
 
int get_corner_radius ( Corner corner ) const
  The bottom-right corner's radius. If 0, the corner is not rounded. 
int corner_radius_top_left = 0
  void set_corner_radius ( Corner corner, int radius )
 
int get_corner_radius ( Corner corner ) const
  The top-left corner's radius. If 0, the corner is not rounded. 
int corner_radius_top_right = 0
  void set_corner_radius ( Corner corner, int radius )
 
int get_corner_radius ( Corner corner ) const
  The top-right corner's radius. If 0, the corner is not rounded. 
bool draw_center = true
  void set_draw_center ( bool value )
 
bool is_draw_center_enabled ( )
  Toggles drawing of the inner part of the stylebox. 
float expand_margin_bottom = 0.0
  void set_expand_margin ( Side margin, float size )
 
float get_expand_margin ( Side margin ) const
  Expands the stylebox outside of the control rect on the bottom edge. Useful in combination with border_width_bottom to draw a border outside the control rect. Note: Unlike StyleBox.content_margin_bottom, expand_margin_bottom does not affect the size of the clickable area for Controls. This can negatively impact usability if used wrong, as the user may try to click an area of the StyleBox that cannot actually receive clicks. 
float expand_margin_left = 0.0
  void set_expand_margin ( Side margin, float size )
 
float get_expand_margin ( Side margin ) const
  Expands the stylebox outside of the control rect on the left edge. Useful in combination with border_width_left to draw a border outside the control rect. Note: Unlike StyleBox.content_margin_left, expand_margin_left does not affect the size of the clickable area for Controls. This can negatively impact usability if used wrong, as the user may try to click an area of the StyleBox that cannot actually receive clicks. 
float expand_margin_right = 0.0
  void set_expand_margin ( Side margin, float size )
 
float get_expand_margin ( Side margin ) const
  Expands the stylebox outside of the control rect on the right edge. Useful in combination with border_width_right to draw a border outside the control rect. Note: Unlike StyleBox.content_margin_right, expand_margin_right does not affect the size of the clickable area for Controls. This can negatively impact usability if used wrong, as the user may try to click an area of the StyleBox that cannot actually receive clicks. 
float expand_margin_top = 0.0
  void set_expand_margin ( Side margin, float size )
 
float get_expand_margin ( Side margin ) const
  Expands the stylebox outside of the control rect on the top edge. Useful in combination with border_width_top to draw a border outside the control rect. Note: Unlike StyleBox.content_margin_top, expand_margin_top does not affect the size of the clickable area for Controls. This can negatively impact usability if used wrong, as the user may try to click an area of the StyleBox that cannot actually receive clicks. 
Color shadow_color = Color(0, 0, 0, 0.6)
  void set_shadow_color ( Color value )
 
Color get_shadow_color ( )
  The color of the shadow. This has no effect if shadow_size is lower than 1. 
Vector2 shadow_offset = Vector2(0, 0)
  void set_shadow_offset ( Vector2 value )
 
Vector2 get_shadow_offset ( )
  The shadow offset in pixels. Adjusts the position of the shadow relatively to the stylebox. 
int shadow_size = 0
  void set_shadow_size ( int value )
 
int get_shadow_size ( )
  The shadow size in pixels. 
Vector2 skew = Vector2(0, 0)
  void set_skew ( Vector2 value )
 
Vector2 get_skew ( )
  If set to a non-zero value on either axis, skew distorts the StyleBox horizontally and/or vertically. This can be used for "futuristic"-style UIs. Positive values skew the StyleBox towards the right (X axis) and upwards (Y axis), while negative values skew the StyleBox towards the left (X axis) and downwards (Y axis). Note: To ensure text does not touch the StyleBox's edges, consider increasing the StyleBox's content margin (see StyleBox.content_margin_bottom). It is preferable to increase the content margin instead of the expand margin (see expand_margin_bottom), as increasing the expand margin does not increase the size of the clickable area for Controls.   Method Descriptions 
int get_border_width ( Side margin ) const
 Returns the specified Side's border width. 
int get_border_width_min ( ) const
 Returns the smallest border width out of all four borders. 
int get_corner_radius ( Corner corner ) const
 Returns the given corner's radius. See Corner for possible values. 
float get_expand_margin ( Side margin ) const
 Returns the size of the specified Side's expand margin. void set_border_width ( Side margin, int width ) Sets the specified Side's border width to width pixels. void set_border_width_all ( int width ) Sets the border width to width pixels for all sides. void set_corner_radius ( Corner corner, int radius ) Sets the corner radius to radius pixels for the given corner. See Corner for possible values. void set_corner_radius_all ( int radius ) Sets the corner radius to radius pixels for all corners. void set_expand_margin ( Side margin, float size ) Sets the expand margin to size pixels for the specified Side. void set_expand_margin_all ( float size ) Sets the expand margin to size pixels for all sides.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_styleboxflat.html


classes/class_graphelement
-----------------------------------------------------------
GraphElement Inherits: Container < Control < CanvasItem < Node < Object Inherited By: GraphNode A container that represents a basic element that can be placed inside a GraphEdit control.  Description GraphElement allows to create custom elements for a GraphEdit graph. By default such elements can be selected, resized, and repositioned, but they cannot be connected. For a graph element that allows for connections see GraphNode.   Properties  
bool draggable true  
Vector2 position_offset Vector2(0, 0)  
bool resizable false  
bool selectable true  
bool selected false     Theme Properties  
Texture2D resizer     Signals delete_request ( ) Emitted when removing the GraphElement is requested. dragged ( Vector2 from, Vector2 to ) Emitted when the GraphElement is dragged. node_deselected ( ) Emitted when the GraphElement is deselected. node_selected ( ) Emitted when the GraphElement is selected. position_offset_changed ( ) Emitted when the GraphElement is moved. raise_request ( ) Emitted when displaying the GraphElement over other ones is requested. Happens on focusing (clicking into) the GraphElement. resize_request ( Vector2 new_minsize ) Emitted when resizing the GraphElement is requested. Happens on dragging the resizer handle (see resizable).   Property Descriptions 
bool draggable = true
  void set_draggable ( bool value )
 
bool is_draggable ( )
  If true, the user can drag the GraphElement. 
Vector2 position_offset = Vector2(0, 0)
  void set_position_offset ( Vector2 value )
 
Vector2 get_position_offset ( )
  The offset of the GraphElement, relative to the scroll offset of the GraphEdit. 
bool resizable = false
  void set_resizable ( bool value )
 
bool is_resizable ( )
  If true, the user can resize the GraphElement. Note: Dragging the handle will only emit the resize_request signal, the GraphElement needs to be resized manually. 
bool selectable = true
  void set_selectable ( bool value )
 
bool is_selectable ( )
  If true, the user can select the GraphElement. 
bool selected = false
  void set_selected ( bool value )
 
bool is_selected ( )
  If true, the GraphElement is selected.   Theme Property Descriptions 
Texture2D resizer The icon used for the resizer, visible when resizable is enabled.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_graphelement.html


classes/class_compressedcubemaparray
-----------------------------------------------------------
CompressedCubemapArray Inherits: CompressedTextureLayered < TextureLayered < Texture < Resource < RefCounted < Object An optionally compressed CubemapArray.  Description A cubemap array that is loaded from a .ccubearray file. This file format is internal to Godot; it is created by importing other image formats with the import system. CompressedCubemapArray can use one of 4 compression methods:  Lossless (WebP or PNG, uncompressed on the GPU) Lossy (WebP, uncompressed on the GPU) VRAM Compressed (compressed on the GPU) VRAM Uncompressed (uncompressed on the GPU) Basis Universal (compressed on the GPU. Lower file sizes than VRAM Compressed, but slower to compress and lower quality than VRAM Compressed)  Only VRAM Compressed actually reduces the memory usage on the GPU. The Lossless and Lossy compression methods will reduce the required storage on disk, but they will not reduce memory usage on the GPU as the texture is sent to the GPU uncompressed. Using VRAM Compressed also improves loading times, as VRAM-compressed textures are faster to load compared to textures using lossless or lossy compression. VRAM compression can exhibit noticeable artifacts and is intended to be used for 3D rendering, not 2D. See CubemapArray for a general description of cubemap arrays.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_compressedcubemaparray.html


classes/class_spotlight3d
-----------------------------------------------------------
SpotLight3D Inherits: Light3D < VisualInstance3D < Node3D < Node < Object A spotlight, such as a reflector spotlight or a lantern.  Description A Spotlight is a type of Light3D node that emits lights in a specific direction, in the shape of a cone. The light is attenuated through the distance. This attenuation can be configured by changing the energy, radius and attenuation parameters of Light3D. Note: When using the Mobile rendering method, only 8 spot lights can be displayed on each mesh resource. Attempting to display more than 8 spot lights on a single mesh resource will result in spot lights flickering in and out as the camera moves. When using the Compatibility rendering method, only 8 spot lights can be displayed on each mesh resource by default, but this can be increased by adjusting ProjectSettings.rendering/limits/opengl/max_lights_per_object. Note: When using the Mobile or Compatibility rendering methods, spot lights will only correctly affect meshes whose visibility AABB intersects with the light's AABB. If using a shader to deform the mesh in a way that makes it go outside its AABB, GeometryInstance3D.extra_cull_margin must be increased on the mesh. Otherwise, the light may not be visible on the mesh.   Tutorials  3D lights and shadows Faking global illumination Third Person Shooter Demo    Properties  
float shadow_bias 0.03 (overrides Light3D)  
float shadow_normal_bias 1.0 (overrides Light3D)  
float spot_angle 45.0  
float spot_angle_attenuation 1.0  
float spot_attenuation 1.0  
float spot_range 5.0     Property Descriptions 
float spot_angle = 45.0
  void set_param ( float value )
 
float get_param ( )
  The spotlight's angle in degrees. Note: spot_angle is not affected by Node3D.scale (the light's scale or its parent's scale). 
float spot_angle_attenuation = 1.0
  void set_param ( float value )
 
float get_param ( )
  The spotlight's angular attenuation curve. See also spot_attenuation. 
float spot_attenuation = 1.0
  void set_param ( float value )
 
float get_param ( )
  The spotlight's light energy (drop-off) attenuation curve. A number of presets are available in the Inspector by right-clicking the curve. Zero and negative values are allowed but can produce unusual effects. See also spot_angle_attenuation. Note: Very high spot_attenuation values (typically above 10) can impact performance negatively if the light is made to use a larger spot_range to compensate. This is because culling opportunities will become less common and shading costs will be increased (as the light will cover more pixels on screen while resulting in the same amount of brightness). To improve performance, use the lowest spot_attenuation value possible for the visuals you're trying to achieve. 
float spot_range = 5.0
  void set_param ( float value )
 
float get_param ( )
  The maximal range that can be reached by the spotlight. Note that the effectively lit area may appear to be smaller depending on the spot_attenuation in use. No matter the spot_attenuation in use, the light will never reach anything outside this range. Note: spot_range is not affected by Node3D.scale (the light's scale or its parent's scale).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_spotlight3d.html


classes/class_texture3drd
-----------------------------------------------------------
Texture3DRD Inherits: Texture3D < Texture < Resource < RefCounted < Object Texture for 3D that is bound to a texture created on the RenderingDevice.  Description This texture class allows you to use a 3D texture created directly on the RenderingDevice as a texture for materials, meshes, etc.   Properties  
RID texture_rd_rid RID()     Property Descriptions 
RID texture_rd_rid = RID()
  void set_texture_rd_rid ( RID value )
 
RID get_texture_rd_rid ( )
  The RID of the texture object created on the RenderingDevice.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texture3drd.html


classes/class_audiostream
-----------------------------------------------------------
AudioStream Inherits: Resource < RefCounted < Object Inherited By: AudioStreamGenerator, AudioStreamMicrophone, AudioStreamMP3, AudioStreamOggVorbis, AudioStreamPolyphonic, AudioStreamRandomizer, AudioStreamWAV Base class for audio streams.  Description Base class for audio streams. Audio streams are used for sound effects and music playback, and support WAV (via AudioStreamWAV) and Ogg (via AudioStreamOggVorbis) file formats.   Tutorials  Audio streams Audio Generator Demo Audio Mic Record Demo Audio Spectrum Demo    Methods  
int _get_beat_count ( ) virtual const  
float _get_bpm ( ) virtual const  
float _get_length ( ) virtual const  
String _get_stream_name ( ) virtual const  
AudioStreamPlayback _instantiate_playback ( ) virtual const  
bool _is_monophonic ( ) virtual const  
float get_length ( ) const  
AudioStreamPlayback instantiate_playback ( )  
bool is_monophonic ( ) const     Method Descriptions 
int _get_beat_count ( ) virtual const
 Overridable method. Should return the total number of beats of this audio stream. Used by the engine to determine the position of every beat. Ideally, the returned value should be based off the stream's sample rate (AudioStreamWAV.mix_rate, for example). 
float _get_bpm ( ) virtual const
 Overridable method. Should return the tempo of this audio stream, in beats per minute (BPM). Used by the engine to determine the position of every beat. Ideally, the returned value should be based off the stream's sample rate (AudioStreamWAV.mix_rate, for example). 
float _get_length ( ) virtual const
 Override this method to customize the returned value of get_length. Should return the length of this audio stream, in seconds. 
String _get_stream_name ( ) virtual const
 Override this method to customize the name assigned to this audio stream. Unused by the engine. 
AudioStreamPlayback _instantiate_playback ( ) virtual const
 Override this method to customize the returned value of instantiate_playback. Should returned a new AudioStreamPlayback created when the stream is played (such as by an AudioStreamPlayer).. 
bool _is_monophonic ( ) virtual const
 Override this method to customize the returned value of is_monophonic. Should return true if this audio stream only supports one channel. 
float get_length ( ) const
 Returns the length of the audio stream in seconds. 
AudioStreamPlayback instantiate_playback ( ) Returns a newly created AudioStreamPlayback intended to play this audio stream. Useful for when you want to extend _instantiate_playback but call instantiate_playback from an internally held AudioStream subresource. An example of this can be found in the source code for AudioStreamRandomPitch::instantiate_playback. 
bool is_monophonic ( ) const
 Returns true if this audio stream only supports one channel (monophony), or false if the audio stream supports two or more channels (polyphony).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiostream.html


classes/class_audioeffecthighshelffilter
-----------------------------------------------------------
AudioEffectHighShelfFilter Inherits: AudioEffectFilter < AudioEffect < Resource < RefCounted < Object Adds a high-shelf filter to the audio bus.  Description Reduces all frequencies above the AudioEffectFilter.cutoff_hz.   Tutorials  Audio buses   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffecthighshelffilter.html


classes/class_referencerect
-----------------------------------------------------------
ReferenceRect Inherits: Control < CanvasItem < Node < Object A rectangle hint for designing UIs.  Description A rectangle box that displays only a colored border around its rectangle. It is used to visualize the extents of a Control.   Properties  
Color border_color Color(1, 0, 0, 1)  
float border_width 1.0  
bool editor_only true     Property Descriptions 
Color border_color = Color(1, 0, 0, 1)
  void set_border_color ( Color value )
 
Color get_border_color ( )
  Sets the border color of the ReferenceRect. 
float border_width = 1.0
  void set_border_width ( float value )
 
float get_border_width ( )
  Sets the border width of the ReferenceRect. The border grows both inwards and outwards with respect to the rectangle box. 
bool editor_only = true
  void set_editor_only ( bool value )
 
bool get_editor_only ( )
  If true, the ReferenceRect will only be visible while in editor. Otherwise, ReferenceRect will be visible in the running project.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_referencerect.html


classes/class_openxraction
-----------------------------------------------------------
OpenXRAction Inherits: Resource < RefCounted < Object An OpenXR action.  Description This resource defines an OpenXR action. Actions can be used both for inputs (buttons/joystick/trigger/etc) and outputs (haptics). OpenXR performs automatic conversion between action type and input type whenever possible. An analog trigger bound to a boolean action will thus return false if the trigger is depressed and true if pressed fully. Actions are not directly bound to specific devices, instead OpenXR recognizes a limited number of top level paths that identify devices by usage. We can restrict which devices an action can be bound to by these top level paths. For instance an action that should only be used for hand held controllers can have the top level paths "/user/hand/left" and "/user/hand/right" associated with them. See the reserved path section in the OpenXR specification for more info on the top level paths. Note that the name of the resource is used to register the action with.   Properties  
ActionType action_type 1  
String localized_name ""  
PackedStringArray toplevel_paths PackedStringArray()     Enumerations enum ActionType: 
ActionType OPENXR_ACTION_BOOL = 0
 This action provides a boolean value. 
ActionType OPENXR_ACTION_FLOAT = 1
 This action provides a float value between 0.0 and 1.0 for any analog input such as triggers. 
ActionType OPENXR_ACTION_VECTOR2 = 2
 This action provides a Vector2 value and can be bound to embedded trackpads and joysticks. 
ActionType OPENXR_ACTION_POSE = 3
   Property Descriptions 
ActionType action_type = 1
  void set_action_type ( ActionType value )
 
ActionType get_action_type ( )
  The type of action. 
String localized_name = ""
  void set_localized_name ( String value )
 
String get_localized_name ( )
  The localized description of this action. 
PackedStringArray toplevel_paths = PackedStringArray()
  void set_toplevel_paths ( PackedStringArray value )
 
PackedStringArray get_toplevel_paths ( )
  A collections of toplevel paths to which this action can be bound.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_openxraction.html


classes/class_audioeffectdistortion
-----------------------------------------------------------
AudioEffectDistortion Inherits: AudioEffect < Resource < RefCounted < Object Adds a distortion audio effect to an Audio bus. Modifies the sound to make it distorted.  Description Different types are available: clip, tan, lo-fi (bit crushing), overdrive, or waveshape. By distorting the waveform the frequency content changes, which will often make the sound "crunchy" or "abrasive". For games, it can simulate sound coming from some saturated device or speaker very efficiently.   Tutorials  Audio buses    Properties  
float drive 0.0  
float keep_hf_hz 16000.0  
Mode mode 0  
float post_gain 0.0  
float pre_gain 0.0     Enumerations enum Mode: 
Mode MODE_CLIP = 0
 Digital distortion effect which cuts off peaks at the top and bottom of the waveform. 
Mode MODE_ATAN = 1
 
Mode MODE_LOFI = 2
 Low-resolution digital distortion effect (bit depth reduction). You can use it to emulate the sound of early digital audio devices. 
Mode MODE_OVERDRIVE = 3
 Emulates the warm distortion produced by a field effect transistor, which is commonly used in solid-state musical instrument amplifiers. The drive property has no effect in this mode. 
Mode MODE_WAVESHAPE = 4
 Waveshaper distortions are used mainly by electronic musicians to achieve an extra-abrasive sound.   Property Descriptions 
float drive = 0.0
  void set_drive ( float value )
 
float get_drive ( )
  Distortion power. Value can range from 0 to 1. 
float keep_hf_hz = 16000.0
  void set_keep_hf_hz ( float value )
 
float get_keep_hf_hz ( )
  High-pass filter, in Hz. Frequencies higher than this value will not be affected by the distortion. Value can range from 1 to 20000. 
Mode mode = 0
  void set_mode ( Mode value )
 
Mode get_mode ( )
  Distortion type. 
float post_gain = 0.0
  void set_post_gain ( float value )
 
float get_post_gain ( )
  Increases or decreases the volume after the effect, in decibels. Value can range from -80 to 24. 
float pre_gain = 0.0
  void set_pre_gain ( float value )
 
float get_pre_gain ( )
  Increases or decreases the volume before the effect, in decibels. Value can range from -60 to 60.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectdistortion.html


classes/class_gltfmesh
-----------------------------------------------------------
GLTFMesh Inherits: Resource < RefCounted < Object  There is currently no description for this class. Please help us by contributing one!   Tutorials  Runtime file loading and saving    Properties  
PackedFloat32Array blend_weights PackedFloat32Array()  
Material[] instance_materials []  
ImporterMesh mesh      Property Descriptions 
PackedFloat32Array blend_weights = PackedFloat32Array()
  void set_blend_weights ( PackedFloat32Array value )
 
PackedFloat32Array get_blend_weights ( )
   There is currently no description for this property. Please help us by contributing one!  
Material[] instance_materials = []
  void set_instance_materials ( Material[] value )
 
Material[] get_instance_materials ( )
   There is currently no description for this property. Please help us by contributing one!  
ImporterMesh mesh  void set_mesh ( ImporterMesh value )
 
ImporterMesh get_mesh ( )
   There is currently no description for this property. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfmesh.html


classes/class_line2d
-----------------------------------------------------------
Line2D Inherits: Node2D < CanvasItem < Node < Object A 2D polyline that can optionally be textured.  Description This node draws a 2D polyline, i.e. a shape consisting of several points connected by segments. Line2D is not a mathematical polyline, i.e. the segments are not infinitely thin. It is intended for rendering and it can be colored and optionally textured. Warning: Certain configurations may be impossible to draw nicely, such as very sharp angles. In these situations, the node uses fallback drawing logic to look decent. Note: Line2D is drawn using a 2D mesh.   Tutorials  Matrix Transform Demo 2.5D Demo    Properties  
bool antialiased false  
LineCapMode begin_cap_mode 0  
bool closed false  
Color default_color Color(1, 1, 1, 1)  
LineCapMode end_cap_mode 0  
Gradient gradient   
LineJointMode joint_mode 0  
PackedVector2Array points PackedVector2Array()  
int round_precision 8  
float sharp_limit 2.0  
Texture2D texture   
LineTextureMode texture_mode 0  
float width 10.0  
Curve width_curve      Methods  
void add_point ( Vector2 position, int index=-1 )  
void clear_points ( )  
int get_point_count ( ) const  
Vector2 get_point_position ( int index ) const  
void remove_point ( int index )  
void set_point_position ( int index, Vector2 position )     Enumerations enum LineJointMode: 
LineJointMode LINE_JOINT_SHARP = 0
 Makes the polyline's joints pointy, connecting the sides of the two segments by extending them until they intersect. If the rotation of a joint is too big (based on sharp_limit), the joint falls back to LINE_JOINT_BEVEL to prevent very long miters. 
LineJointMode LINE_JOINT_BEVEL = 1
 Makes the polyline's joints bevelled/chamfered, connecting the sides of the two segments with a simple line. 
LineJointMode LINE_JOINT_ROUND = 2
 Makes the polyline's joints rounded, connecting the sides of the two segments with an arc. The detail of this arc depends on round_precision. enum LineCapMode: 
LineCapMode LINE_CAP_NONE = 0
 Draws no line cap. 
LineCapMode LINE_CAP_BOX = 1
 Draws the line cap as a box, slightly extending the first/last segment. 
LineCapMode LINE_CAP_ROUND = 2
 Draws the line cap as a semicircle attached to the first/last segment. enum LineTextureMode: 
LineTextureMode LINE_TEXTURE_NONE = 0
 Takes the left pixels of the texture and renders them over the whole polyline. 
LineTextureMode LINE_TEXTURE_TILE = 1
 Tiles the texture over the polyline. CanvasItem.texture_repeat of the Line2D node must be CanvasItem.TEXTURE_REPEAT_ENABLED or CanvasItem.TEXTURE_REPEAT_MIRROR for it to work properly. 
LineTextureMode LINE_TEXTURE_STRETCH = 2
 Stretches the texture across the polyline. CanvasItem.texture_repeat of the Line2D node must be CanvasItem.TEXTURE_REPEAT_DISABLED for best results.   Property Descriptions 
bool antialiased = false
  void set_antialiased ( bool value )
 
bool get_antialiased ( )
  If true, the polyline's border will be anti-aliased. Note: Line2D is not accelerated by batching when being anti-aliased. 
LineCapMode begin_cap_mode = 0
  void set_begin_cap_mode ( LineCapMode value )
 
LineCapMode get_begin_cap_mode ( )
  The style of the beginning of the polyline, if closed is false. Use LineCapMode constants. 
bool closed = false
  void set_closed ( bool value )
 
bool is_closed ( )
  If true and the polyline has more than 2 points, the last point and the first one will be connected by a segment. Note: The shape of the closing segment is not guaranteed to be seamless if a width_curve is provided. Note: The joint between the closing segment and the first segment is drawn first and it samples the gradient and the width_curve at the beginning. This is an implementation detail that might change in a future version. 
Color default_color = Color(1, 1, 1, 1)
  void set_default_color ( Color value )
 
Color get_default_color ( )
  The color of the polyline. Will not be used if a gradient is set. 
LineCapMode end_cap_mode = 0
  void set_end_cap_mode ( LineCapMode value )
 
LineCapMode get_end_cap_mode ( )
  The style of the end of the polyline, if closed is false. Use LineCapMode constants. 
Gradient gradient  void set_gradient ( Gradient value )
 
Gradient get_gradient ( )
  The gradient is drawn through the whole line from start to finish. The default_color will not be used if this property is set. 
LineJointMode joint_mode = 0
  void set_joint_mode ( LineJointMode value )
 
LineJointMode get_joint_mode ( )
  The style of the connections between segments of the polyline. Use LineJointMode constants. 
PackedVector2Array points = PackedVector2Array()
  void set_points ( PackedVector2Array value )
 
PackedVector2Array get_points ( )
  The points of the polyline, interpreted in local 2D coordinates. Segments are drawn between the adjacent points in this array. 
int round_precision = 8
  void set_round_precision ( int value )
 
int get_round_precision ( )
  The smoothness used for rounded joints and caps. Higher values result in smoother corners, but are more demanding to render and update. 
float sharp_limit = 2.0
  void set_sharp_limit ( float value )
 
float get_sharp_limit ( )
  Determines the miter limit of the polyline. Normally, when joint_mode is set to LINE_JOINT_SHARP, sharp angles fall back to using the logic of LINE_JOINT_BEVEL joints to prevent very long miters. Higher values of this property mean that the fallback to a bevel joint will happen at sharper angles. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  The texture used for the polyline. Uses texture_mode for drawing style. 
LineTextureMode texture_mode = 0
  void set_texture_mode ( LineTextureMode value )
 
LineTextureMode get_texture_mode ( )
  The style to render the texture of the polyline. Use LineTextureMode constants. 
float width = 10.0
  void set_width ( float value )
 
float get_width ( )
  The polyline's width. 
Curve width_curve  void set_curve ( Curve value )
 
Curve get_curve ( )
  The polyline's width curve. The width of the polyline over its length will be equivalent to the value of the width curve over its domain.   Method Descriptions void add_point ( Vector2 position, int index=-1 ) Adds a point with the specified position relative to the polyline's own position. If no index is provided, the new point will be added to the end of the points array. If index is given, the new point is inserted before the existing point identified by index index. The indices of the points after the new point get increased by 1. The provided index must not exceed the number of existing points in the polyline. See get_point_count. void clear_points ( ) Removes all points from the polyline, making it empty. 
int get_point_count ( ) const
 Returns the number of points in the polyline. 
Vector2 get_point_position ( int index ) const
 Returns the position of the point at index index. void remove_point ( int index ) Removes the point at index index from the polyline. void set_point_position ( int index, Vector2 position ) Overwrites the position of the point at the given index with the supplied position.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_line2d.html


classes/class_separator
-----------------------------------------------------------
Separator Inherits: Control < CanvasItem < Node < Object Inherited By: HSeparator, VSeparator Abstract base class for separators.  Description Abstract base class for separators, used for separating other controls. Separators are purely visual and normally drawn as a StyleBoxLine.   Theme Properties  
int separation 0  
StyleBox separator      Theme Property Descriptions 
int separation = 0
 The size of the area covered by the separator. Effectively works like a minimum width/height. 
StyleBox separator The style for the separator line. Works best with StyleBoxLine (remember to enable StyleBoxLine.vertical for VSeparator).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_separator.html


classes/class_pinjoint2d
-----------------------------------------------------------
PinJoint2D Inherits: Joint2D < Node2D < CanvasItem < Node < Object A physics joint that attaches two 2D physics bodies at a single point, allowing them to freely rotate.  Description A physics joint that attaches two 2D physics bodies at a single point, allowing them to freely rotate. For example, a RigidBody2D can be attached to a StaticBody2D to create a pendulum or a seesaw.   Properties  
bool angular_limit_enabled false  
float angular_limit_lower 0.0  
float angular_limit_upper 0.0  
bool motor_enabled false  
float motor_target_velocity 0.0  
float softness 0.0     Property Descriptions 
bool angular_limit_enabled = false
  void set_angular_limit_enabled ( bool value )
 
bool is_angular_limit_enabled ( )
  If true, the pin maximum and minimum rotation, defined by angular_limit_lower and angular_limit_upper are applied. 
float angular_limit_lower = 0.0
  void set_angular_limit_lower ( float value )
 
float get_angular_limit_lower ( )
  The minimum rotation. Only active if angular_limit_enabled is true. 
float angular_limit_upper = 0.0
  void set_angular_limit_upper ( float value )
 
float get_angular_limit_upper ( )
  The maximum rotation. Only active if angular_limit_enabled is true. 
bool motor_enabled = false
  void set_motor_enabled ( bool value )
 
bool is_motor_enabled ( )
  When activated, a motor turns the pin. 
float motor_target_velocity = 0.0
  void set_motor_target_velocity ( float value )
 
float get_motor_target_velocity ( )
  Target speed for the motor. In radians per second. 
float softness = 0.0
  void set_softness ( float value )
 
float get_softness ( )
  The higher this value, the more the bond to the pinned partner can flex.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_pinjoint2d.html


classes/class_rdshaderfile
-----------------------------------------------------------
RDShaderFile Inherits: Resource < RefCounted < Object Compiled shader file in SPIR-V form (used by RenderingDevice). Not to be confused with Godot's own Shader.  Description Compiled shader file in SPIR-V form. See also RDShaderSource. RDShaderFile is only meant to be used with the RenderingDevice API. It should not be confused with Godot's own Shader resource, which is what Godot's various nodes use for high-level shader programming.   Properties  
String base_error ""     Methods  
RDShaderSPIRV get_spirv ( StringName version=&"" ) const  
StringName[] get_version_list ( ) const  
void set_bytecode ( RDShaderSPIRV bytecode, StringName version=&"" )     Property Descriptions 
String base_error = ""
  void set_base_error ( String value )
 
String get_base_error ( )
  The base compilation error message, which indicates errors not related to a specific shader stage if non-empty. If empty, shader compilation is not necessarily successful (check RDShaderSPIRV's error message members).   Method Descriptions 
RDShaderSPIRV get_spirv ( StringName version=&"" ) const
 Returns the SPIR-V intermediate representation for the specified shader version. 
StringName[] get_version_list ( ) const
 Returns the list of compiled versions for this shader. void set_bytecode ( RDShaderSPIRV bytecode, StringName version=&"" ) Sets the SPIR-V bytecode that will be compiled for the specified version.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_rdshaderfile.html


classes/class_editorscriptpicker
-----------------------------------------------------------
EditorScriptPicker Inherits: EditorResourcePicker < HBoxContainer < BoxContainer < Container < Control < CanvasItem < Node < Object Godot editor's control for selecting the script property of a Node.  Description Similar to EditorResourcePicker this Control node is used in the editor's Inspector dock, but only to edit the script property of a Node. Default options for creating new resources of all possible subtypes are replaced with dedicated buttons that open the "Attach Node Script" dialog. Can be used with EditorInspectorPlugin to recreate the same behavior. Note: You must set the script_owner for the custom context menu items to work.   Properties  
Node script_owner     Property Descriptions 
Node script_owner  void set_script_owner ( Node value )
 
Node get_script_owner ( )
  The owner Node of the script property that holds the edited resource.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editorscriptpicker.html


classes/class_meshinstance3d
-----------------------------------------------------------
MeshInstance3D Inherits: GeometryInstance3D < VisualInstance3D < Node3D < Node < Object Inherited By: SoftBody3D Node that instances meshes into a scenario.  Description MeshInstance3D is a node that takes a Mesh resource and adds it to the current scenario by creating an instance of it. This is the class most often used render 3D geometry and can be used to instance a single Mesh in many places. This allows reusing geometry, which can save on resources. When a Mesh has to be instantiated more than thousands of times at close proximity, consider using a MultiMesh in a MultiMeshInstance3D instead.   Tutorials  3D Material Testers Demo 3D Kinematic Character Demo 3D Platformer Demo Third Person Shooter Demo    Properties  
Mesh mesh   
NodePath skeleton NodePath("..")  
Skin skin      Methods  
void create_convex_collision ( bool clean=true, bool simplify=false )  
void create_debug_tangents ( )  
void create_multiple_convex_collisions ( MeshConvexDecompositionSettings settings=null )  
void create_trimesh_collision ( )  
int find_blend_shape_by_name ( StringName name )  
Material get_active_material ( int surface ) const  
int get_blend_shape_count ( ) const  
float get_blend_shape_value ( int blend_shape_idx ) const  
Material get_surface_override_material ( int surface ) const  
int get_surface_override_material_count ( ) const  
void set_blend_shape_value ( int blend_shape_idx, float value )  
void set_surface_override_material ( int surface, Material material )     Property Descriptions 
Mesh mesh  void set_mesh ( Mesh value )
 
Mesh get_mesh ( )
  The Mesh resource for the instance. 
NodePath skeleton = NodePath("..")
  void set_skeleton_path ( NodePath value )
 
NodePath get_skeleton_path ( )
  NodePath to the Skeleton3D associated with the instance. 
Skin skin  void set_skin ( Skin value )
 
Skin get_skin ( )
  The Skin to be used by this instance.   Method Descriptions void create_convex_collision ( bool clean=true, bool simplify=false ) This helper creates a StaticBody3D child node with a ConvexPolygonShape3D collision shape calculated from the mesh geometry. It's mainly used for testing. If clean is true (default), duplicate and interior vertices are removed automatically. You can set it to false to make the process faster if not needed. If simplify is true, the geometry can be further simplified to reduce the number of vertices. Disabled by default. void create_debug_tangents ( ) This helper creates a MeshInstance3D child node with gizmos at every vertex calculated from the mesh geometry. It's mainly used for testing. void create_multiple_convex_collisions ( MeshConvexDecompositionSettings settings=null ) This helper creates a StaticBody3D child node with multiple ConvexPolygonShape3D collision shapes calculated from the mesh geometry via convex decomposition. The convex decomposition operation can be controlled with parameters from the optional settings. void create_trimesh_collision ( ) This helper creates a StaticBody3D child node with a ConcavePolygonShape3D collision shape calculated from the mesh geometry. It's mainly used for testing. 
int find_blend_shape_by_name ( StringName name ) Returns the index of the blend shape with the given name. Returns -1 if no blend shape with this name exists, including when mesh is null. 
Material get_active_material ( int surface ) const
 Returns the Material that will be used by the Mesh when drawing. This can return the GeometryInstance3D.material_override, the surface override Material defined in this MeshInstance3D, or the surface Material defined in the mesh. For example, if GeometryInstance3D.material_override is used, all surfaces will return the override material. Returns null if no material is active, including when mesh is null. 
int get_blend_shape_count ( ) const
 Returns the number of blend shapes available. Produces an error if mesh is null. 
float get_blend_shape_value ( int blend_shape_idx ) const
 Returns the value of the blend shape at the given blend_shape_idx. Returns 0.0 and produces an error if mesh is null or doesn't have a blend shape at that index. 
Material get_surface_override_material ( int surface ) const
 Returns the override Material for the specified surface of the Mesh resource. See also get_surface_override_material_count. Note: This returns the Material associated to the MeshInstance3D's Surface Material Override properties, not the material within the Mesh resource. To get the material within the Mesh resource, use Mesh.surface_get_material instead. 
int get_surface_override_material_count ( ) const
 Returns the number of surface override materials. This is equivalent to Mesh.get_surface_count. See also get_surface_override_material. void set_blend_shape_value ( int blend_shape_idx, float value ) Sets the value of the blend shape at blend_shape_idx to value. Produces an error if mesh is null or doesn't have a blend shape at that index. void set_surface_override_material ( int surface, Material material ) Sets the override material for the specified surface of the Mesh resource. This material is associated with this MeshInstance3D rather than with mesh. Note: This assigns the Material associated to the MeshInstance3D's Surface Material Override properties, not the material within the Mesh resource. To set the material within the Mesh resource, use Mesh.surface_get_material instead.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_meshinstance3d.html


classes/class_vboxcontainer
-----------------------------------------------------------
VBoxContainer Inherits: BoxContainer < Container < Control < CanvasItem < Node < Object Inherited By: ColorPicker, FileSystemDock, ScriptEditorBase A container that arranges its child controls vertically.  Description A variant of BoxContainer that can only arrange its child controls vertically. Child controls are rearranged automatically when their minimum size changes.   Tutorials  Using Containers 3D Voxel Demo   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_vboxcontainer.html


classes/class_boxcontainer
-----------------------------------------------------------
BoxContainer Inherits: Container < Control < CanvasItem < Node < Object Inherited By: HBoxContainer, VBoxContainer A container that arranges its child controls horizontally or vertically.  Description A container that arranges its child controls horizontally or vertically, rearranging them automatically when their minimum size changes.   Tutorials  Using Containers    Properties  
AlignmentMode alignment 0  
bool vertical false     Methods  
Control add_spacer ( bool begin )     Theme Properties  
int separation 4     Enumerations enum AlignmentMode: 
AlignmentMode ALIGNMENT_BEGIN = 0
 The child controls will be arranged at the beginning of the container, i.e. top if orientation is vertical, left if orientation is horizontal (right for RTL layout). 
AlignmentMode ALIGNMENT_CENTER = 1
 The child controls will be centered in the container. 
AlignmentMode ALIGNMENT_END = 2
 The child controls will be arranged at the end of the container, i.e. bottom if orientation is vertical, right if orientation is horizontal (left for RTL layout).   Property Descriptions 
AlignmentMode alignment = 0
  void set_alignment ( AlignmentMode value )
 
AlignmentMode get_alignment ( )
  The alignment of the container's children (must be one of ALIGNMENT_BEGIN, ALIGNMENT_CENTER, or ALIGNMENT_END). 
bool vertical = false
  void set_vertical ( bool value )
 
bool is_vertical ( )
  If true, the BoxContainer will arrange its children vertically, rather than horizontally. Can't be changed when using HBoxContainer and VBoxContainer.   Method Descriptions 
Control add_spacer ( bool begin ) Adds a Control node to the box as a spacer. If begin is true, it will insert the Control node in front of all other children.   Theme Property Descriptions 
int separation = 4
 The space between the BoxContainer's elements, in pixels.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_boxcontainer.html


classes/class_curvexyztexture
-----------------------------------------------------------
CurveXYZTexture Inherits: Texture2D < Texture < Resource < RefCounted < Object A 1D texture where the red, green, and blue color channels correspond to points on 3 curves.  Description A 1D texture where the red, green, and blue color channels correspond to points on 3 Curve resources. Compared to using separate CurveTextures, this further simplifies the task of saving curves as image files. If you only need to store one curve within a single texture, use CurveTexture instead. See also GradientTexture1D and GradientTexture2D.   Properties  
Curve curve_x   
Curve curve_y   
Curve curve_z   
bool resource_local_to_scene false (overrides Resource)  
int width 256     Property Descriptions 
Curve curve_x  void set_curve_x ( Curve value )
 
Curve get_curve_x ( )
  The Curve that is rendered onto the texture's red channel. 
Curve curve_y  void set_curve_y ( Curve value )
 
Curve get_curve_y ( )
  The Curve that is rendered onto the texture's green channel. 
Curve curve_z  void set_curve_z ( Curve value )
 
Curve get_curve_z ( )
  The Curve that is rendered onto the texture's blue channel. 
int width = 256
  void set_width ( int value )
 
int get_width ( )
  The width of the texture (in pixels). Higher values make it possible to represent high-frequency data better (such as sudden direction changes), at the cost of increased generation time and memory usage.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_curvexyztexture.html


classes/class_inputeventmouse
-----------------------------------------------------------
InputEventMouse Inherits: InputEventWithModifiers < InputEventFromWindow < InputEvent < Resource < RefCounted < Object Inherited By: InputEventMouseButton, InputEventMouseMotion Base input event type for mouse events.  Description Stores general information about mouse events.   Tutorials  Using InputEvent    Properties  
BitField<MouseButtonMask> button_mask 0  
Vector2 global_position Vector2(0, 0)  
Vector2 position Vector2(0, 0)     Property Descriptions 
BitField<MouseButtonMask> button_mask = 0
  void set_button_mask ( BitField<MouseButtonMask> value )
 
BitField<MouseButtonMask> get_button_mask ( )
  The mouse button mask identifier, one of or a bitwise combination of the MouseButton button masks. 
Vector2 global_position = Vector2(0, 0)
  void set_global_position ( Vector2 value )
 
Vector2 get_global_position ( )
  When received in Node._input or Node._unhandled_input, returns the mouse's position in the root Viewport using the coordinate system of the root Viewport. When received in Control._gui_input, returns the mouse's position in the CanvasLayer that the Control is in using the coordinate system of the CanvasLayer. 
Vector2 position = Vector2(0, 0)
  void set_position ( Vector2 value )
 
Vector2 get_position ( )
  When received in Node._input or Node._unhandled_input, returns the mouse's position in the Viewport this Node is in using the coordinate system of this Viewport. When received in Control._gui_input, returns the mouse's position in the Control using the local coordinate system of the Control.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventmouse.html


classes/class_lightmapgidata
-----------------------------------------------------------
LightmapGIData Inherits: Resource < RefCounted < Object Contains baked lightmap and dynamic object probe data for LightmapGI.  Description LightmapGIData contains baked lightmap and dynamic object probe data for LightmapGI. It is replaced every time lightmaps are baked in LightmapGI.   Properties  
TextureLayered light_texture   
TextureLayered[] lightmap_textures []     Methods  
void add_user ( NodePath path, Rect2 uv_scale, int slice_index, int sub_instance )  
void clear_users ( )  
int get_user_count ( ) const  
NodePath get_user_path ( int user_idx ) const  
bool is_using_spherical_harmonics ( ) const  
void set_uses_spherical_harmonics ( bool uses_spherical_harmonics )     Property Descriptions 
TextureLayered light_texture  void set_light_texture ( TextureLayered value )
 
TextureLayered get_light_texture ( )
  The lightmap atlas texture generated by the lightmapper. Deprecated. The lightmap atlas can now have multiple textures. See lightmap_textures. 
TextureLayered[] lightmap_textures = []
  void set_lightmap_textures ( TextureLayered[] value )
 
TextureLayered[] get_lightmap_textures ( )
  The lightmap atlas textures generated by the lightmapper.   Method Descriptions void add_user ( NodePath path, Rect2 uv_scale, int slice_index, int sub_instance ) Adds an object that is considered baked within this LightmapGIData. void clear_users ( ) Clear all objects that are considered baked within this LightmapGIData. 
int get_user_count ( ) const
 Returns the number of objects that are considered baked within this LightmapGIData. 
NodePath get_user_path ( int user_idx ) const
 Returns the NodePath of the baked object at index user_idx. 
bool is_using_spherical_harmonics ( ) const
 If true, lightmaps were baked with directional information. See also LightmapGI.directional. void set_uses_spherical_harmonics ( bool uses_spherical_harmonics ) If uses_spherical_harmonics is true, tells the engine to treat the lightmap data as if it was baked with directional information. Note: Changing this value on already baked lightmaps will not cause them to be baked again. This means the material appearance will look incorrect until lightmaps are baked again, in which case the value set here is discarded as the entire LightmapGIData resource is replaced by the lightmapper.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_lightmapgidata.html


classes/class_editorsettings
-----------------------------------------------------------
EditorSettings Inherits: Resource < RefCounted < Object Object that holds the project-independent editor settings.  Description Object that holds the project-independent editor settings. These settings are generally visible in the Editor > Editor Settings menu. Property names use slash delimiters to distinguish sections. Setting values can be of any Variant type. It's recommended to use snake_case for editor settings to be consistent with the Godot editor itself. Accessing the settings can be done using the following methods, such as:  GDScriptvar settings = EditorInterface.get_editor_settings()
# `settings.set("some/property", 10)` also works as this class overrides `_set()` internally.
settings.set_setting("some/property", 10)
# `settings.get("some/property")` also works as this class overrides `_get()` internally.
settings.get_setting("some/property")
var list_of_settings = settings.get_property_list()
 C#EditorSettings settings = EditorInterface.Singleton.GetEditorSettings();
// `settings.set("some/property", value)` also works as this class overrides `_set()` internally.
settings.SetSetting("some/property", Value);
// `settings.get("some/property", value)` also works as this class overrides `_get()` internally.
settings.GetSetting("some/property");
Godot.Collections.Array<Godot.Collections.Dictionary> listOfSettings = settings.GetPropertyList();
  Note: This class shouldn't be instantiated directly. Instead, access the singleton using EditorInterface.get_editor_settings.   Properties  
bool debugger/auto_switch_to_remote_scene_tree  
int debugger/profiler_frame_history_size  
int debugger/profiler_frame_max_functions  
float debugger/remote_inspect_refresh_interval  
float debugger/remote_scene_tree_refresh_interval  
bool docks/filesystem/always_show_folders  
String docks/filesystem/textfile_extensions  
int docks/filesystem/thumbnail_size  
float docks/property_editor/auto_refresh_interval  
float docks/property_editor/subresource_hue_tint  
bool docks/scene_tree/auto_expand_to_selected  
bool docks/scene_tree/start_create_dialog_fully_expanded  
Color editors/2d/bone_color1  
Color editors/2d/bone_color2  
Color editors/2d/bone_ik_color  
Color editors/2d/bone_outline_color  
float editors/2d/bone_outline_size  
Color editors/2d/bone_selected_color  
float editors/2d/bone_width  
Color editors/2d/grid_color  
Color editors/2d/guides_color  
Color editors/2d/smart_snapping_line_color  
bool editors/2d/use_integer_zoom_by_default  
Color editors/2d/viewport_border_color  
float editors/3d/default_fov  
float editors/3d/default_z_far  
float editors/3d/default_z_near  
int editors/3d/freelook/freelook_activation_modifier  
float editors/3d/freelook/freelook_base_speed  
float editors/3d/freelook/freelook_inertia  
int editors/3d/freelook/freelook_navigation_scheme  
float editors/3d/freelook/freelook_sensitivity  
bool editors/3d/freelook/freelook_speed_zoom_link  
float editors/3d/grid_division_level_bias  
int editors/3d/grid_division_level_max  
int editors/3d/grid_division_level_min  
int editors/3d/grid_size  
bool editors/3d/grid_xy_plane  
bool editors/3d/grid_xz_plane  
bool editors/3d/grid_yz_plane  
bool editors/3d/navigation/emulate_3_button_mouse  
bool editors/3d/navigation/emulate_numpad  
bool editors/3d/navigation/invert_x_axis  
bool editors/3d/navigation/invert_y_axis  
int editors/3d/navigation/navigation_scheme  
int editors/3d/navigation/orbit_modifier  
int editors/3d/navigation/pan_modifier  
bool editors/3d/navigation/warped_mouse_panning  
int editors/3d/navigation/zoom_modifier  
int editors/3d/navigation/zoom_style  
float editors/3d/navigation_feel/orbit_inertia  
float editors/3d/navigation_feel/orbit_sensitivity  
float editors/3d/navigation_feel/translation_inertia  
float editors/3d/navigation_feel/zoom_inertia  
Color editors/3d/primary_grid_color  
int editors/3d/primary_grid_steps  
Color editors/3d/secondary_grid_color  
Color editors/3d/selection_box_color  
Color editors/3d_gizmos/gizmo_colors/instantiated  
Color editors/3d_gizmos/gizmo_colors/joint  
Color editors/3d_gizmos/gizmo_colors/shape  
bool editors/animation/autorename_animation_tracks  
bool editors/animation/default_create_bezier_tracks  
bool editors/animation/default_create_reset_tracks  
Color editors/animation/onion_layers_future_color  
Color editors/animation/onion_layers_past_color  
float editors/grid_map/pick_distance  
int editors/panning/2d_editor_pan_speed  
int editors/panning/2d_editor_panning_scheme  
int editors/panning/animation_editors_panning_scheme  
bool editors/panning/simple_panning  
int editors/panning/sub_editors_panning_scheme  
bool editors/panning/warped_mouse_panning  
int editors/polygon_editor/point_grab_radius  
bool editors/polygon_editor/show_previous_outline  
bool editors/shader_editor/behavior/files/restore_shaders_on_load  
bool editors/tiles_editor/display_grid  
Color editors/tiles_editor/grid_color  
float editors/visual_editors/lines_curvature  
float editors/visual_editors/minimap_opacity  
int editors/visual_editors/visual_shader/port_preview_size  
String filesystem/directories/autoscan_project_path  
String filesystem/directories/default_project_path  
String filesystem/external_programs/3d_model_editor  
String filesystem/external_programs/audio_editor  
String filesystem/external_programs/raster_image_editor  
String filesystem/external_programs/vector_image_editor  
int filesystem/file_dialog/display_mode  
bool filesystem/file_dialog/show_hidden_files  
int filesystem/file_dialog/thumbnail_size  
String filesystem/import/blender/blender3_path  
int filesystem/import/blender/rpc_port  
float filesystem/import/blender/rpc_server_uptime  
String filesystem/import/fbx/fbx2gltf_path  
bool filesystem/on_save/compress_binary_resources  
bool filesystem/on_save/safe_save_on_backup_then_rename  
String filesystem/tools/oidn/oidn_denoise_path  
int interface/editor/accept_dialog_cancel_ok_buttons  
bool interface/editor/automatically_open_screenshots  
String interface/editor/code_font  
int interface/editor/code_font_contextual_ligatures  
String interface/editor/code_font_custom_opentype_features  
String interface/editor/code_font_custom_variations  
int interface/editor/code_font_size  
float interface/editor/custom_display_scale  
bool interface/editor/debug/enable_pseudolocalization  
int interface/editor/display_scale  
String interface/editor/editor_language  
int interface/editor/editor_screen  
bool interface/editor/expand_to_title  
int interface/editor/font_antialiasing  
int interface/editor/font_hinting  
int interface/editor/font_subpixel_positioning  
float interface/editor/low_processor_mode_sleep_usec  
String interface/editor/main_font  
String interface/editor/main_font_bold  
int interface/editor/main_font_size  
bool interface/editor/mouse_extra_buttons_navigate_history  
int interface/editor/project_manager_screen  
bool interface/editor/save_each_scene_on_quit  
bool interface/editor/separate_distraction_mode  
int interface/editor/show_internal_errors_in_toast_notifications  
bool interface/editor/single_window_mode  
float interface/editor/unfocused_low_processor_mode_sleep_usec  
bool interface/editor/use_embedded_menu  
float interface/inspector/float_drag_speed  
int interface/inspector/max_array_dictionary_items_per_page  
bool interface/inspector/show_low_level_opentype_features  
bool interface/multi_window/enable  
bool interface/multi_window/maximize_window  
bool interface/multi_window/restore_windows_on_load  
int interface/scene_tabs/display_close_button  
int interface/scene_tabs/maximum_width  
bool interface/scene_tabs/show_script_button  
bool interface/scene_tabs/show_thumbnail_on_hover  
Color interface/theme/accent_color  
float interface/theme/additional_spacing  
Color interface/theme/base_color  
int interface/theme/border_size  
float interface/theme/contrast  
int interface/theme/corner_radius  
String interface/theme/custom_theme  
bool interface/theme/draw_extra_borders  
int interface/theme/icon_and_font_color  
float interface/theme/icon_saturation  
String interface/theme/preset  
float interface/theme/relationship_line_opacity  
bool interface/touchscreen/enable_long_press_as_right_click  
bool interface/touchscreen/enable_pan_and_scale_gestures  
bool interface/touchscreen/increase_scrollbar_touch_area  
float interface/touchscreen/scale_gizmo_handles  
String network/debug/remote_host  
int network/debug/remote_port  
String network/http_proxy/host  
int network/http_proxy/port  
String network/tls/editor_tls_certificates  
String project_manager/default_renderer  
int project_manager/sorting_order  
bool run/auto_save/save_before_running  
bool run/output/always_clear_output_on_play  
bool run/output/always_close_output_on_stop  
bool run/output/always_open_output_on_play  
int run/output/font_size  
int run/window_placement/android_window  
int run/window_placement/rect  
Vector2 run/window_placement/rect_custom_position  
int run/window_placement/screen  
bool text_editor/appearance/caret/caret_blink  
float text_editor/appearance/caret/caret_blink_interval  
bool text_editor/appearance/caret/highlight_all_occurrences  
bool text_editor/appearance/caret/highlight_current_line  
int text_editor/appearance/caret/type  
int text_editor/appearance/guidelines/line_length_guideline_hard_column  
int text_editor/appearance/guidelines/line_length_guideline_soft_column  
bool text_editor/appearance/guidelines/show_line_length_guidelines  
bool text_editor/appearance/gutters/highlight_type_safe_lines  
bool text_editor/appearance/gutters/line_numbers_zero_padded  
bool text_editor/appearance/gutters/show_info_gutter  
bool text_editor/appearance/gutters/show_line_numbers  
int text_editor/appearance/lines/autowrap_mode  
bool text_editor/appearance/lines/code_folding  
int text_editor/appearance/lines/word_wrap  
int text_editor/appearance/minimap/minimap_width  
bool text_editor/appearance/minimap/show_minimap  
bool text_editor/appearance/whitespace/draw_spaces  
bool text_editor/appearance/whitespace/draw_tabs  
int text_editor/appearance/whitespace/line_spacing  
bool text_editor/behavior/files/auto_reload_scripts_on_external_change  
int text_editor/behavior/files/autosave_interval_secs  
bool text_editor/behavior/files/convert_indent_on_save  
bool text_editor/behavior/files/restore_scripts_on_load  
bool text_editor/behavior/files/trim_trailing_whitespace_on_save  
bool text_editor/behavior/indent/auto_indent  
int text_editor/behavior/indent/size  
int text_editor/behavior/indent/type  
bool text_editor/behavior/navigation/drag_and_drop_selection  
bool text_editor/behavior/navigation/move_caret_on_right_click  
bool text_editor/behavior/navigation/scroll_past_end_of_file  
bool text_editor/behavior/navigation/smooth_scrolling  
bool text_editor/behavior/navigation/stay_in_script_editor_on_node_selected  
int text_editor/behavior/navigation/v_scroll_speed  
bool text_editor/completion/add_type_hints  
bool text_editor/completion/auto_brace_complete  
float text_editor/completion/code_complete_delay  
bool text_editor/completion/code_complete_enabled  
bool text_editor/completion/colorize_suggestions  
bool text_editor/completion/complete_file_paths  
float text_editor/completion/idle_parse_delay  
bool text_editor/completion/put_callhint_tooltip_below_current_line  
bool text_editor/completion/use_single_quotes  
int text_editor/help/class_reference_examples  
int text_editor/help/help_font_size  
int text_editor/help/help_source_font_size  
int text_editor/help/help_title_font_size  
bool text_editor/help/show_help_index  
bool text_editor/script_list/show_members_overview  
bool text_editor/script_list/sort_members_outline_alphabetically  
String text_editor/theme/color_theme  
Color text_editor/theme/highlighting/background_color  
Color text_editor/theme/highlighting/base_type_color  
Color text_editor/theme/highlighting/bookmark_color  
Color text_editor/theme/highlighting/brace_mismatch_color  
Color text_editor/theme/highlighting/breakpoint_color  
Color text_editor/theme/highlighting/caret_background_color  
Color text_editor/theme/highlighting/caret_color  
Color text_editor/theme/highlighting/code_folding_color  
Color text_editor/theme/highlighting/comment_color  
Color text_editor/theme/highlighting/completion_background_color  
Color text_editor/theme/highlighting/completion_existing_color  
Color text_editor/theme/highlighting/completion_font_color  
Color text_editor/theme/highlighting/completion_scroll_color  
Color text_editor/theme/highlighting/completion_scroll_hovered_color  
Color text_editor/theme/highlighting/completion_selected_color  
Color text_editor/theme/highlighting/control_flow_keyword_color  
Color text_editor/theme/highlighting/current_line_color  
Color text_editor/theme/highlighting/doc_comment_color  
Color text_editor/theme/highlighting/engine_type_color  
Color text_editor/theme/highlighting/executing_line_color  
Color text_editor/theme/highlighting/folded_code_region_color  
Color text_editor/theme/highlighting/function_color  
Color text_editor/theme/highlighting/keyword_color  
Color text_editor/theme/highlighting/line_length_guideline_color  
Color text_editor/theme/highlighting/line_number_color  
Color text_editor/theme/highlighting/mark_color  
Color text_editor/theme/highlighting/member_variable_color  
Color text_editor/theme/highlighting/number_color  
Color text_editor/theme/highlighting/safe_line_number_color  
Color text_editor/theme/highlighting/search_result_border_color  
Color text_editor/theme/highlighting/search_result_color  
Color text_editor/theme/highlighting/selection_color  
Color text_editor/theme/highlighting/string_color  
Color text_editor/theme/highlighting/symbol_color  
Color text_editor/theme/highlighting/text_color  
Color text_editor/theme/highlighting/text_selected_color  
Color text_editor/theme/highlighting/user_type_color  
Color text_editor/theme/highlighting/word_highlighted_color     Methods  
void add_property_info ( Dictionary info )  
bool check_changed_settings_in_group ( String setting_prefix ) const  
void erase ( String property )  
PackedStringArray get_changed_settings ( ) const  
PackedStringArray get_favorites ( ) const  
Variant get_project_metadata ( String section, String key, Variant default=null ) const  
PackedStringArray get_recent_dirs ( ) const  
Variant get_setting ( String name ) const  
bool has_setting ( String name ) const  
void mark_setting_changed ( String setting )  
void set_builtin_action_override ( String name, InputEvent[] actions_list )  
void set_favorites ( PackedStringArray dirs )  
void set_initial_value ( StringName name, Variant value, bool update_current )  
void set_project_metadata ( String section, String key, Variant data )  
void set_recent_dirs ( PackedStringArray dirs )  
void set_setting ( String name, Variant value )     Signals settings_changed ( ) Emitted after any editor setting has changed.   Constants NOTIFICATION_EDITOR_SETTINGS_CHANGED = 10000
 Emitted after any editor setting has changed. It's used by various editor plugins to update their visuals on theme changes or logic on configuration changes.   Property Descriptions 
bool debugger/auto_switch_to_remote_scene_tree If true, automatically switches to the Remote scene tree when running the project from the editor. If false, stays on the Local scene tree when running the project from the editor. 
int debugger/profiler_frame_history_size The size of the profiler's frame history. The default value (3600) allows seeing up to 60 seconds of profiling if the project renders at a constant 60 FPS. Higher values allow viewing longer periods of profiling in the graphs, especially when the project is running at high framerates. 
int debugger/profiler_frame_max_functions The maximum number of script functions that can be displayed per frame in the profiler. If there are more script functions called in a given profiler frame, these functions will be discarded from the profiling results entirely. Note: This setting is only read when the profiler is first started, so changing it during profiling will have no effect. 
float debugger/remote_inspect_refresh_interval The refresh interval for the remote inspector's properties (in seconds). Lower values are more reactive, but may cause stuttering while the project is running from the editor and the Remote scene tree is selected in the Scene tree dock. 
float debugger/remote_scene_tree_refresh_interval The refresh interval for the remote scene tree (in seconds). Lower values are more reactive, but may cause stuttering while the project is running from the editor and the Remote scene tree is selected in the Scene tree dock. 
bool docks/filesystem/always_show_folders If true, displays folders in the FileSystem dock's bottom pane when split mode is enabled. If false, only files will be displayed in the bottom pane. Split mode can be toggled by pressing the icon next to the res:// folder path. Note: This setting has no effect when split mode is disabled (which is the default). 
String docks/filesystem/textfile_extensions List of file extensions to consider as editable text files in the FileSystem dock (by double-clicking on the files). 
int docks/filesystem/thumbnail_size The thumbnail size to use in the FileSystem dock (in pixels). See also filesystem/file_dialog/thumbnail_size. 
float docks/property_editor/auto_refresh_interval The refresh interval to use for the Inspector dock's properties. The effect of this setting is mainly noticeable when adjusting gizmos in the 2D/3D editor and looking at the inspector at the same time. Lower values make the inspector refresh more often, but take up more CPU time. 
float docks/property_editor/subresource_hue_tint The tint intensity to use for the subresources background in the Inspector dock. The tint is used to distinguish between different subresources in the inspector. Higher values result in a more noticeable background color difference. 
bool docks/scene_tree/auto_expand_to_selected If true, the scene tree dock will automatically unfold nodes when a node that has folded parents is selected. 
bool docks/scene_tree/start_create_dialog_fully_expanded If true, the Create dialog (Create New Node/Create New Resource) will start with all its sections expanded. Otherwise, sections will be collapsed until the user starts searching (which will automatically expand sections as needed). 
Color editors/2d/bone_color1 The "start" stop of the color gradient to use for bones in the 2D skeleton editor. 
Color editors/2d/bone_color2 The "end" stop of the color gradient to use for bones in the 2D skeleton editor. 
Color editors/2d/bone_ik_color The color to use for inverse kinematics-enabled bones in the 2D skeleton editor. 
Color editors/2d/bone_outline_color The outline color to use for non-selected bones in the 2D skeleton editor. See also editors/2d/bone_selected_color. 
float editors/2d/bone_outline_size The outline size in the 2D skeleton editor (in pixels). See also editors/2d/bone_width. Note: Changes to this value only apply after modifying a Bone2D node in any way, or closing and reopening the scene. 
Color editors/2d/bone_selected_color The color to use for selected bones in the 2D skeleton editor. See also editors/2d/bone_outline_color. 
float editors/2d/bone_width The bone width in the 2D skeleton editor (in pixels). See also editors/2d/bone_outline_size. Note: Changes to this value only apply after modifying a Bone2D node in any way, or closing and reopening the scene. 
Color editors/2d/grid_color The grid color to use in the 2D editor. 
Color editors/2d/guides_color The guides color to use in the 2D editor. Guides can be created by dragging the mouse cursor from the rulers. 
Color editors/2d/smart_snapping_line_color The color to use when drawing smart snapping lines in the 2D editor. The smart snapping lines will automatically display when moving 2D nodes if smart snapping is enabled in the Snapping Options menu at the top of the 2D editor viewport. 
bool editors/2d/use_integer_zoom_by_default If true, the 2D editor will snap to integer zoom values while not holding the Alt key and powers of two while holding it. If false, this behavior is swapped. 
Color editors/2d/viewport_border_color The color of the viewport border in the 2D editor. This border represents the viewport's size at the base resolution defined in the Project Settings. Objects placed outside this border will not be visible unless a Camera2D node is used, or unless the window is resized and the stretch mode is set to disabled. 
float editors/3d/default_fov The default camera field of view to use in the 3D editor (in degrees). The camera field of view can be adjusted on a per-scene basis using the View menu at the top of the 3D editor. If a scene had its camera field of view adjusted using the View menu, this setting is ignored in the scene in question. This setting is also ignored while a Camera3D node is being previewed in the editor. 
float editors/3d/default_z_far The default camera far clip distance to use in the 3D editor (in degrees). Higher values make it possible to view objects placed further away from the camera, at the cost of lower precision in the depth buffer (which can result in visible Z-fighting in the distance). The camera far clip distance can be adjusted on a per-scene basis using the View menu at the top of the 3D editor. If a scene had its camera far clip distance adjusted using the View menu, this setting is ignored in the scene in question. This setting is also ignored while a Camera3D node is being previewed in the editor. 
float editors/3d/default_z_near The default camera near clip distance to use in the 3D editor (in degrees). Lower values make it possible to view objects placed closer to the camera, at the cost of lower precision in the depth buffer (which can result in visible Z-fighting in the distance). The camera near clip distance can be adjusted on a per-scene basis using the View menu at the top of the 3D editor. If a scene had its camera near clip distance adjusted using the View menu, this setting is ignored in the scene in question. This setting is also ignored while a Camera3D node is being previewed in the editor. 
int editors/3d/freelook/freelook_activation_modifier The modifier key to use to enable freelook in the 3D editor (on top of pressing the right mouse button). Note: Regardless of this setting, the freelook toggle keyboard shortcut (Shift + F by default) is always available. Note: On certain window managers on Linux, the Alt key will be intercepted by the window manager when clicking a mouse button at the same time. This means Godot will not see the modifier key as being pressed. 
float editors/3d/freelook/freelook_base_speed The base 3D freelook speed in units per second. This can be adjusted by using the mouse wheel while in freelook mode, or by holding down the "fast" or "slow" modifier keys (Shift and Alt by default, respectively). 
float editors/3d/freelook/freelook_inertia The inertia of the 3D freelook camera. Higher values make the camera start and stop slower, which looks smoother but adds latency. 
int editors/3d/freelook/freelook_navigation_scheme The navigation scheme to use when freelook is enabled in the 3D editor. Some of the navigation schemes below may be more convenient when designing specific levels in the 3D editor.  
Default: The "Freelook Forward", "Freelook Backward", "Freelook Up" and "Freelook Down" keys will move relative to the camera, taking its pitch angle into account for the movement. 
Partially Axis-Locked: The "Freelook Forward" and "Freelook Backward" keys will move relative to the camera, taking its pitch angle into account for the movement. The "Freelook Up" and "Freelook Down" keys will move in an "absolute" manner, not taking the camera's pitch angle into account for the movement. 
Fully Axis-Locked: The "Freelook Forward", "Freelook Backward", "Freelook Up" and "Freelook Down" keys will move in an "absolute" manner, not taking the camera's pitch angle into account for the movement.  See also editors/3d/navigation/navigation_scheme. 
float editors/3d/freelook/freelook_sensitivity The mouse sensitivity to use while freelook mode is active in the 3D editor. See also editors/3d/navigation_feel/orbit_sensitivity. 
bool editors/3d/freelook/freelook_speed_zoom_link If true, freelook speed is linked to the zoom value used in the camera orbit mode in the 3D editor. 
float editors/3d/grid_division_level_bias The grid division bias to use in the 3D editor. Negative values will cause small grid divisions to appear earlier, whereas positive values will cause small grid divisions to appear later. 
int editors/3d/grid_division_level_max The largest grid division to use in the 3D editor. Together with editors/3d/primary_grid_steps, this determines how large the grid divisions can be. The grid divisions will not be able to get larger than primary_grid_steps ^ grid_division_level_max units. By default, when editors/3d/primary_grid_steps is 8, this means grid divisions cannot get larger than 64 units each (so primary grid lines are 512 units apart), no matter how far away the camera is from the grid. 
int editors/3d/grid_division_level_min The smallest grid division to use in the 3D editor. Together with editors/3d/primary_grid_steps, this determines how small the grid divisions can be. The grid divisions will not be able to get smaller than primary_grid_steps ^ grid_division_level_min units. By default, this means grid divisions cannot get smaller than 1 unit each, no matter how close the camera is from the grid. 
int editors/3d/grid_size The grid size in units. Higher values prevent the grid from appearing "cut off" at certain angles, but make the grid more demanding to render. Depending on the camera's position, the grid may not be fully visible since a shader is used to fade it progressively. 
bool editors/3d/grid_xy_plane If true, render the grid on an XY plane. This can be useful for 3D side-scrolling games. 
bool editors/3d/grid_xz_plane If true, render the grid on an XZ plane. 
bool editors/3d/grid_yz_plane If true, render the grid on a YZ plane. This can be useful for 3D side-scrolling games. 
bool editors/3d/navigation/emulate_3_button_mouse If true, enables 3-button mouse emulation mode. This is useful on laptops when using a trackpad. When 3-button mouse emulation mode is enabled, the pan, zoom and orbit modifiers can always be used in the 3D editor viewport, even when not holding down any mouse button. Note: No matter the orbit modifier configured in editors/3d/navigation/orbit_modifier, Alt will always remain usable for orbiting in this mode to improve usability with graphics tablets. 
bool editors/3d/navigation/emulate_numpad If true, allows using the top row 0-9 keys to function as their equivalent numpad keys for 3D editor navigation. This should be enabled on keyboards that have no numeric keypad available. 
bool editors/3d/navigation/invert_x_axis If true, invert the horizontal mouse axis when panning or orbiting in the 3D editor. This setting does not apply to freelook mode. 
bool editors/3d/navigation/invert_y_axis If true, invert the vertical mouse axis when panning, orbiting, or using freelook mode in the 3D editor. 
int editors/3d/navigation/navigation_scheme The navigation scheme to use in the 3D editor. Changing this setting will affect the mouse buttons that must be held down to perform certain operations in the 3D editor viewport.  
Godot Middle mouse button to orbit, Shift + Middle mouse button to pan. Mouse wheel to zoom. 
Maya: Alt + Left mouse button to orbit. Middle mouse button to pan, Shift + Middle mouse button to pan 10 times faster. Mouse wheel to zoom. 
Modo: Alt + Left mouse button to orbit. Alt + Shift + Left mouse button to pan. Ctrl + Alt + Left mouse button to zoom.  See also editors/3d/freelook/freelook_navigation_scheme. Note: On certain window managers on Linux, the Alt key will be intercepted by the window manager when clicking a mouse button at the same time. This means Godot will not see the modifier key as being pressed. 
int editors/3d/navigation/orbit_modifier The modifier key that must be held to orbit in the 3D editor. Note: If editors/3d/navigation/emulate_3_button_mouse is true, Alt will always remain usable for orbiting to improve usability with graphics tablets. Note: On certain window managers on Linux, the Alt key will be intercepted by the window manager when clicking a mouse button at the same time. This means Godot will not see the modifier key as being pressed. 
int editors/3d/navigation/pan_modifier The modifier key that must be held to pan in the 3D editor. Note: On certain window managers on Linux, the Alt key will be intercepted by the window manager when clicking a mouse button at the same time. This means Godot will not see the modifier key as being pressed. 
bool editors/3d/navigation/warped_mouse_panning If true, warps the mouse around the 3D viewport while panning in the 3D editor. This makes it possible to pan over a large area without having to exit panning and adjust the mouse cursor. 
int editors/3d/navigation/zoom_modifier The modifier key that must be held to zoom in the 3D editor. Note: On certain window managers on Linux, the Alt key will be intercepted by the window manager when clicking a mouse button at the same time. This means Godot will not see the modifier key as being pressed. 
int editors/3d/navigation/zoom_style The mouse cursor movement direction to use when zooming by moving the mouse. This does not affect zooming with the mouse wheel. 
float editors/3d/navigation_feel/orbit_inertia The inertia to use when orbiting in the 3D editor. Higher values make the camera start and stop slower, which looks smoother but adds latency. 
float editors/3d/navigation_feel/orbit_sensitivity The mouse sensitivity to use when orbiting in the 3D editor. See also editors/3d/freelook/freelook_sensitivity. 
float editors/3d/navigation_feel/translation_inertia The inertia to use when panning in the 3D editor. Higher values make the camera start and stop slower, which looks smoother but adds latency. 
float editors/3d/navigation_feel/zoom_inertia The inertia to use when zooming in the 3D editor. Higher values make the camera start and stop slower, which looks smoother but adds latency. 
Color editors/3d/primary_grid_color The color to use for the primary 3D grid. The color's alpha channel affects the grid's opacity. 
int editors/3d/primary_grid_steps If set above 0, where a primary grid line should be drawn. By default, primary lines are configured to be more visible than secondary lines. This helps with measurements in the 3D editor. See also editors/3d/primary_grid_color and editors/3d/secondary_grid_color. 
Color editors/3d/secondary_grid_color The color to use for the secondary 3D grid. This is generally a less visible color than editors/3d/primary_grid_color. The color's alpha channel affects the grid's opacity. 
Color editors/3d/selection_box_color The color to use for the selection box that surrounds selected nodes in the 3D editor viewport. The color's alpha channel influences the selection box's opacity. 
Color editors/3d_gizmos/gizmo_colors/instantiated The color override to use for 3D editor gizmos if the Node3D in question is part of an instantiated scene file (from the perspective of the current scene). 
Color editors/3d_gizmos/gizmo_colors/joint The 3D editor gizmo color for Joint3Ds and PhysicalBone3Ds. 
Color editors/3d_gizmos/gizmo_colors/shape The 3D editor gizmo color for CollisionShape3Ds, VehicleWheel3Ds, RayCast3Ds and SpringArm3Ds. 
bool editors/animation/autorename_animation_tracks If true, automatically updates animation tracks' target paths when renaming or reparenting nodes in the Scene tree dock. 
bool editors/animation/default_create_bezier_tracks If true, create a Bezier track instead of a standard track when pressing the "key" icon next to a property. Bezier tracks provide more control over animation curves, but are more difficult to adjust quickly. 
bool editors/animation/default_create_reset_tracks If true, create a RESET track when creating a new animation track. This track can be used to restore the animation to a "default" state. 
Color editors/animation/onion_layers_future_color The modulate color to use for "future" frames displayed in the animation editor's onion skinning feature. 
Color editors/animation/onion_layers_past_color The modulate color to use for "past" frames displayed in the animation editor's onion skinning feature. 
float editors/grid_map/pick_distance The maximum distance at which tiles can be placed on a GridMap, relative to the camera position (in 3D units). 
int editors/panning/2d_editor_pan_speed The panning speed when using the mouse wheel or touchscreen events in the 2D editor. This setting does not apply to panning by holding down the middle or right mouse buttons. 
int editors/panning/2d_editor_panning_scheme Controls whether the mouse wheel scroll zooms or pans in the 2D editor. See also editors/panning/sub_editors_panning_scheme and editors/panning/animation_editors_panning_scheme. 
int editors/panning/animation_editors_panning_scheme Controls whether the mouse wheel scroll zooms or pans in the animation track and Bezier editors. See also editors/panning/2d_editor_panning_scheme and editors/panning/sub_editors_panning_scheme (which controls the animation blend tree editor's pan behavior). 
bool editors/panning/simple_panning If true, allows panning by holding down Space in the 2D editor viewport (in addition to panning with the middle or right mouse buttons). If false, the left mouse button must be held down while holding down Space to pan in the 2D editor viewport. 
int editors/panning/sub_editors_panning_scheme Controls whether the mouse wheel scroll zooms or pans in subeditors. The list of affected subeditors is: animation blend tree editor, Polygon2D editor, tileset editor, texture region editor and visual shader editor. See also editors/panning/2d_editor_panning_scheme and editors/panning/animation_editors_panning_scheme. 
bool editors/panning/warped_mouse_panning If true, warps the mouse around the 2D viewport while panning in the 2D editor. This makes it possible to pan over a large area without having to exit panning and adjust the mouse cursor. 
int editors/polygon_editor/point_grab_radius The radius in which points can be selected in the Polygon2D and CollisionPolygon2D editors (in pixels). Higher values make it easier to select points quickly, but can make it more difficult to select the expected point when several points are located close to each other. 
bool editors/polygon_editor/show_previous_outline If true, displays the polygon's previous shape in the 2D polygon editors with an opaque gray outline. This outline is displayed while dragging a point until the left mouse button is released. 
bool editors/shader_editor/behavior/files/restore_shaders_on_load If true, reopens shader files that were open in the shader editor when the project was last closed. 
bool editors/tiles_editor/display_grid If true, displays a grid while the TileMap editor is active. See also editors/tiles_editor/grid_color. 
Color editors/tiles_editor/grid_color The color to use for the TileMap editor's grid. Note: Only effective if editors/tiles_editor/display_grid is true. 
float editors/visual_editors/lines_curvature The curvature to use for connection lines in the visual shader editor. Higher values will make connection lines appear more curved, with values above 0.5 resulting in more "angular" turns in the middle of connection lines. 
float editors/visual_editors/minimap_opacity The opacity of the minimap displayed in the bottom-right corner of the visual shader editor. 
int editors/visual_editors/visual_shader/port_preview_size The size to use for port previews in the visual shader uniforms (toggled by clicking the "eye" icon next to an output). The value is defined in pixels at 100% zoom, and will scale with zoom automatically. 
String filesystem/directories/autoscan_project_path The folder where projects should be scanned for (recursively), in a way similar to the project manager's Scan button. This can be set to the same value as filesystem/directories/default_project_path for convenience. Note: Setting this path to a folder with very large amounts of files/folders can slow down the project manager startup significantly. To keep the project manager quick to start up, it is recommended to set this value to a folder as "specific" as possible. 
String filesystem/directories/default_project_path The folder where new projects should be created by default when clicking the project manager's New Project button. This can be set to the same value as filesystem/directories/autoscan_project_path for convenience. 
String filesystem/external_programs/3d_model_editor The program that opens 3D model scene files when clicking "Open in External Program" option in Filesystem Dock. If not specified, the file will be opened in the system's default program. 
String filesystem/external_programs/audio_editor The program that opens audio files when clicking "Open in External Program" option in Filesystem Dock. If not specified, the file will be opened in the system's default program. 
String filesystem/external_programs/raster_image_editor The program that opens raster image files when clicking "Open in External Program" option in Filesystem Dock. If not specified, the file will be opened in the system's default program. 
String filesystem/external_programs/vector_image_editor The program that opens vector image files when clicking "Open in External Program" option in Filesystem Dock. If not specified, the file will be opened in the system's default program. 
int filesystem/file_dialog/display_mode The display mode to use in the editor's file dialogs.  
Thumbnails takes more space, but displays dynamic resource thumbnails, making resources easier to preview without having to open them. 
List is more compact but doesn't display dynamic resource thumbnails. Instead, it displays static icons based on the file extension.  
bool filesystem/file_dialog/show_hidden_files If true, display hidden files in the editor's file dialogs. Files that have names starting with . are considered hidden (e.g. .hidden_file). 
int filesystem/file_dialog/thumbnail_size The thumbnail size to use in the editor's file dialogs (in pixels). See also docks/filesystem/thumbnail_size. 
String filesystem/import/blender/blender3_path The path to the directory containing the Blender executable used for converting the Blender 3D scene files .blend to glTF 2.0 format during import. Blender 3.0 or later is required. To enable this feature for your specific project, use ProjectSettings.filesystem/import/blender/enabled. 
int filesystem/import/blender/rpc_port The port number used for Remote Procedure Call (RPC) communication with Godot's created process of the blender executable. Setting this to 0 effectively disables communication with Godot and the blender process, making performance slower. 
float filesystem/import/blender/rpc_server_uptime The maximum idle uptime (in seconds) of the Blender process. This prevents Godot from having to create a new process for each import within the given seconds. 
String filesystem/import/fbx/fbx2gltf_path The path to the FBX2glTF executable used for converting Autodesk FBX 3D scene files .fbx to glTF 2.0 format during import. To enable this feature for your specific project, use ProjectSettings.filesystem/import/fbx/enabled. 
bool filesystem/on_save/compress_binary_resources If true, uses lossless compression for binary resources. 
bool filesystem/on_save/safe_save_on_backup_then_rename If true, when saving a file, the editor will rename the old file to a different name, save a new file, then only remove the old file once the new file has been saved. This makes loss of data less likely to happen if the editor or operating system exits unexpectedly while saving (e.g. due to a crash or power outage). Note: On Windows, this feature can interact negatively with certain antivirus programs. In this case, you may have to set this to false to prevent file locking issues. 
String filesystem/tools/oidn/oidn_denoise_path The path to the directory containing the Open Image Denoise (OIDN) executable, used optionally for denoising lightmaps. It can be downloaded from openimagedenoise.org. To enable this feature for your specific project, use ProjectSettings.rendering/lightmapping/denoising/denoiser. 
int interface/editor/accept_dialog_cancel_ok_buttons How to position the Cancel and OK buttons in the editor's AcceptDialogs. Different platforms have different standard behaviors for this, which can be overridden using this setting. This is useful if you use Godot both on Windows and macOS/Linux and your Godot muscle memory is stronger than your OS specific one.  
Auto follows the platform convention: Cancel first on macOS and Linux, OK first on Windows. 
Cancel First forces the ordering Cancel/OK. 
OK First forces the ordering OK/Cancel.  
bool interface/editor/automatically_open_screenshots If true, automatically opens screenshots with the default program associated to .png files after a screenshot is taken using the Editor > Take Screenshot action. 
String interface/editor/code_font The font to use for the script editor. Must be a resource of a Font type such as a .ttf or .otf font file. 
int interface/editor/code_font_contextual_ligatures The font ligatures to enable for the currently configured code font. Not all fonts include support for ligatures. Note: The default editor code font (JetBrains Mono) has contextual ligatures in its font file. 
String interface/editor/code_font_custom_opentype_features List of custom OpenType features to use, if supported by the currently configured code font. Not all fonts include support for custom OpenType features. The string should follow the OpenType specification. Note: The default editor code font (JetBrains Mono) has custom OpenType features in its font file, but there is no documented list yet. 
String interface/editor/code_font_custom_variations List of alternative characters to use, if supported by the currently configured code font. Not all fonts include support for custom variations. The string should follow the OpenType specification. Note: The default editor code font (JetBrains Mono) has alternate characters in its font file, but there is no documented list yet. 
int interface/editor/code_font_size The size of the font in the script editor. This setting does not impact the font size of the Output panel (see run/output/font_size). 
float interface/editor/custom_display_scale The custom editor scale factor to use. This can be used for displays with very high DPI where a scale factor of 200% is not sufficient. Note: Only effective if interface/editor/display_scale is set to Custom. 
bool interface/editor/debug/enable_pseudolocalization If true, lengthens the editor's localizable strings and replaces their characters with accented variants. This allows spotting non-localizable strings easily, while also ensuring the UI layout doesn't break when strings are made longer (as many languages require strings to be longer). This is a debugging feature and should only be enabled when working on the editor itself. 
int interface/editor/display_scale The display scale factor to use for the editor interface. Higher values are more suited to hiDPI/Retina displays. If set to Auto, the editor scale is automatically determined based on the screen resolution and reported display DPI. This heuristic is not always ideal, which means you can get better results by setting the editor scale manually. If set to Custom, the scaling value in interface/editor/custom_display_scale will be used. 
String interface/editor/editor_language The language to use for the editor interface. Translations are provided by the community. If you spot a mistake, contribute to editor translations on Weblate! 
int interface/editor/editor_screen The preferred monitor to display the editor. 
bool interface/editor/expand_to_title Expanding main editor window content to the title, if supported by DisplayServer. See DisplayServer.WINDOW_FLAG_EXTEND_TO_TITLE. Specific to the macOS platform. 
int interface/editor/font_antialiasing FreeType's font anti-aliasing mode used to render the editor fonts. Most fonts are not designed to look good with anti-aliasing disabled, so it's recommended to leave this enabled unless you're using a pixel art font. 
int interface/editor/font_hinting The font hinting mode to use for the editor fonts. FreeType supports the following font hinting modes:  
None: Don't use font hinting when rasterizing the font. This results in a smooth font, but it can look blurry. 
Light: Use hinting on the X axis only. This is a compromise between font sharpness and smoothness. 
Normal: Use hinting on both X and Y axes. This results in a sharp font, but it doesn't look very smooth.  If set to Auto, the font hinting mode will be set to match the current operating system in use. This means the Light hinting mode will be used on Windows and Linux, and the None hinting mode will be used on macOS. 
int interface/editor/font_subpixel_positioning The subpixel positioning mode to use when rendering editor font glyphs. This affects both the main and code fonts. Disabled is the fastest to render and uses the least memory. Auto only uses subpixel positioning for small font sizes (where the benefit is the most noticeable). One Half of a Pixel and One Quarter of a Pixel force the same subpixel positioning mode for all editor fonts, regardless of their size (with One Quarter of a Pixel being the highest-quality option). 
float interface/editor/low_processor_mode_sleep_usec The amount of sleeping between frames when the low-processor usage mode is enabled (in microseconds). Higher values will result in lower CPU/GPU usage, which can improve battery life on laptops. However, higher values will result in a less responsive editor. The default value is set to allow for maximum smoothness on monitors up to 144 Hz. See also interface/editor/unfocused_low_processor_mode_sleep_usec. 
String interface/editor/main_font The font to use for the editor interface. Must be a resource of a Font type such as a .ttf or .otf font file. 
String interface/editor/main_font_bold The font to use for bold text in the editor interface. Must be a resource of a Font type such as a .ttf or .otf font file. 
int interface/editor/main_font_size The size of the font in the editor interface. 
bool interface/editor/mouse_extra_buttons_navigate_history If true, the mouse's additional side buttons will be usable to navigate in the script editor's file history. Set this to false if you're using the side buttons for other purposes (such as a push-to-talk button in a VoIP program). 
int interface/editor/project_manager_screen The preferred monitor to display the project manager. 
bool interface/editor/save_each_scene_on_quit If false, the editor will save all scenes when confirming the Save action when quitting the editor or quitting to the project list. If true, the editor will ask to save each scene individually. 
bool interface/editor/separate_distraction_mode If true, the editor's Script tab will have a separate distraction mode setting from the 2D/3D/AssetLib tabs. If false, the distraction-free mode toggle is shared between all tabs. 
int interface/editor/show_internal_errors_in_toast_notifications If enabled, displays internal engine errors in toast notifications (toggleable by clicking the "bell" icon at the bottom of the editor). No matter the value of this setting, non-internal engine errors will always be visible in toast notifications. The default Auto value will only enable this if the editor was compiled with the dev=yes option (the default is dev=no). 
bool interface/editor/single_window_mode If true, embed modal windows such as docks inside the main editor window. When single-window mode is enabled, tooltips will also be embedded inside the main editor window, which means they can't be displayed outside of the editor window. 
float interface/editor/unfocused_low_processor_mode_sleep_usec When the editor window is unfocused, the amount of sleeping between frames when the low-processor usage mode is enabled (in microseconds). Higher values will result in lower CPU/GPU usage, which can improve battery life on laptops (in addition to improving the running project's performance if the editor has to redraw continuously). However, higher values will result in a less responsive editor. The default value is set to limit the editor to 20 FPS when the editor window is unfocused. See also interface/editor/low_processor_mode_sleep_usec. 
bool interface/editor/use_embedded_menu If true, editor main menu is using embedded MenuBar instead of system global menu. Specific to the macOS platform. 
float interface/inspector/float_drag_speed Base speed for increasing/decreasing float values by dragging them in the inspector. 
int interface/inspector/max_array_dictionary_items_per_page The number of Array or Dictionary items to display on each "page" in the inspector. Higher values allow viewing more values per page, but take more time to load. This increased load time is noticeable when selecting nodes that have array or dictionary properties in the editor. 
bool interface/inspector/show_low_level_opentype_features If true, display OpenType features marked as hidden by the font file in the Font editor. 
bool interface/multi_window/enable If true, the multi window support in editor is enabled. The following panels can become dedicated windows (made floating): Docks, Script editor, and Shader editor. Note: When interface/editor/single_window_mode is true, the multi window support is always disabled. 
bool interface/multi_window/maximize_window If true, when panels are made floating they will be maximized. If false, when panels are made floating their position and size will match the ones when they are attached (excluding window border) to the editor window. 
bool interface/multi_window/restore_windows_on_load If true, the floating panel position, size, and screen will be saved on editor exit. On next launch the panels that were floating will be made floating in the saved positions, sizes and screens, if possible. 
int interface/scene_tabs/display_close_button Controls when the Close (X) button is displayed on scene tabs at the top of the editor. 
int interface/scene_tabs/maximum_width The maximum width of each scene tab at the top editor (in pixels). 
bool interface/scene_tabs/show_script_button If true, show a button next to each scene tab that opens the scene's "dominant" script when clicked. The "dominant" script is the one that is at the highest level in the scene's hierarchy. 
bool interface/scene_tabs/show_thumbnail_on_hover If true, display an automatically-generated thumbnail when hovering scene tabs with the mouse. Scene thumbnails are generated when saving the scene. 
Color interface/theme/accent_color The color to use for "highlighted" user interface elements in the editor (pressed and hovered items). 
float interface/theme/additional_spacing The spacing to add for buttons and list items in the editor (in pixels). Increasing this value is useful to improve usability on touch screens, at the cost of reducing the amount of usable screen real estate. 
Color interface/theme/base_color The base color to use for user interface elements in the editor. Secondary colors (such as darker/lighter variants) are derived from this color. 
int interface/theme/border_size The border size to use for interface elements (in pixels). 
float interface/theme/contrast The contrast factor to use when deriving the editor theme's base color (see interface/theme/base_color). When using a positive values, the derived colors will be darker than the base color. This contrast factor can be set to a negative value, which will make the derived colors brighter than the base color. Negative contrast rates often look better for light themes. 
int interface/theme/corner_radius The corner radius to use for interface elements (in pixels). 0 is square. 
String interface/theme/custom_theme The custom theme resource to use for the editor. Must be a Godot theme resource in .tres or .res format. 
bool interface/theme/draw_extra_borders If true, draws additional borders around interactive UI elements in the editor. This is automatically enabled when using the Black (OLED) theme preset, as this theme preset uses a fully black background. 
int interface/theme/icon_and_font_color The icon and font color scheme to use in the editor.  
Auto determines the color scheme to use automatically based on interface/theme/base_color. 
Dark makes fonts and icons dark (suitable for light themes). Icon colors are automatically converted by the editor following the set of rules defined in this file. 
Light makes fonts and icons light (suitable for dark themes).  
float interface/theme/icon_saturation The saturation to use for editor icons. Higher values result in more vibrant colors. Note: The default editor icon saturation was increased by 30% in Godot 4.0 and later. To get Godot 3.x's icon saturation back, set interface/theme/icon_saturation to 0.77. 
String interface/theme/preset The editor theme preset to use. 
float interface/theme/relationship_line_opacity The opacity to use when drawing relationship lines in the editor's Tree-based GUIs (such as the Scene tree dock). 
bool interface/touchscreen/enable_long_press_as_right_click If true, long press on touchscreen is treated as right click. Note: Defaults to true on touchscreen devices. 
bool interface/touchscreen/enable_pan_and_scale_gestures If true, enable two finger pan and scale gestures on touchscreen devices. Note: Defaults to true on touchscreen devices. 
bool interface/touchscreen/increase_scrollbar_touch_area If true, increases the scrollbar touch area to improve usability on touchscreen devices. Note: Defaults to true on touchscreen devices. 
float interface/touchscreen/scale_gizmo_handles Specify the multiplier to apply to the scale for the editor gizmo handles to improve usability on touchscreen devices. Note: Defaults to 1 on non-touchscreen devices. 
String network/debug/remote_host The address to listen to when starting the remote debugger. This can be set to 0.0.0.0 to allow external clients to connect to the remote debugger (instead of restricting the remote debugger to connections from localhost). 
int network/debug/remote_port The port to listen to when starting the remote debugger. Godot will try to use port numbers above the configured number if the configured number is already taken by another application. 
String network/http_proxy/host The host to use to contact the HTTP and HTTPS proxy in the editor (for the asset library and export template downloads). See also network/http_proxy/port. Note: Godot currently doesn't automatically use system proxy settings, so you have to enter them manually here if needed. 
int network/http_proxy/port The port number to use to contact the HTTP and HTTPS proxy in the editor (for the asset library and export template downloads). See also network/http_proxy/host. Note: Godot currently doesn't automatically use system proxy settings, so you have to enter them manually here if needed. 
String network/tls/editor_tls_certificates The TLS certificate bundle to use for HTTP requests made within the editor (e.g. from the AssetLib tab). If left empty, the included Mozilla certificate bundle will be used. 
String project_manager/default_renderer The renderer type that will be checked off by default when creating a new project. Accepted strings are "forward_plus", "mobile" or "gl_compatibility". 
int project_manager/sorting_order The sorting order to use in the project manager. When changing the sorting order in the project manager, this setting is set permanently in the editor settings. 
bool run/auto_save/save_before_running If true, saves all scenes and scripts automatically before running the project. Setting this to false prevents the editor from saving if there are no changes which can speed up the project startup slightly, but it makes it possible to run a project that has unsaved changes. (Unsaved changes will not be visible in the running project.) 
bool run/output/always_clear_output_on_play If true, the editor will clear the Output panel when running the project. 
bool run/output/always_close_output_on_stop If true, the editor will collapse the Output panel when stopping the project. 
bool run/output/always_open_output_on_play If true, the editor will expand the Output panel when running the project. 
int run/output/font_size The size of the font in the Output panel at the bottom of the editor. This setting does not impact the font size of the script editor (see interface/editor/code_font_size). 
int run/window_placement/android_window The Android window to display the project on when starting the project from the editor. Note: Only available in the Android editor. 
int run/window_placement/rect The window mode to use to display the project when starting the project from the editor. 
Vector2 run/window_placement/rect_custom_position The custom position to use when starting the project from the editor (in pixels from the top-left corner). Only effective if run/window_placement/rect is set to Custom Position. 
int run/window_placement/screen The monitor to display the project on when starting the project from the editor. 
bool text_editor/appearance/caret/caret_blink If true, makes the caret blink according to text_editor/appearance/caret/caret_blink_interval. Disabling this setting can improve battery life on laptops if you spend long amounts of time in the script editor, since it will reduce the frequency at which the editor needs to be redrawn. 
float text_editor/appearance/caret/caret_blink_interval The interval at which the caret will blink (in seconds). See also text_editor/appearance/caret/caret_blink. 
bool text_editor/appearance/caret/highlight_all_occurrences If true, highlights all occurrences of the currently selected text in the script editor. See also text_editor/theme/highlighting/word_highlighted_color. 
bool text_editor/appearance/caret/highlight_current_line If true, colors the background of the line the caret is currently on with text_editor/theme/highlighting/current_line_color. 
int text_editor/appearance/caret/type The shape of the caret to use in the script editor. Line displays a vertical line to the left of the current character, whereas Block displays an outline over the current character. 
int text_editor/appearance/guidelines/line_length_guideline_hard_column The column at which to display a subtle line as a line length guideline for scripts. This should generally be greater than text_editor/appearance/guidelines/line_length_guideline_soft_column. 
int text_editor/appearance/guidelines/line_length_guideline_soft_column The column at which to display a very subtle line as a line length guideline for scripts. This should generally be lower than text_editor/appearance/guidelines/line_length_guideline_hard_column. 
bool text_editor/appearance/guidelines/show_line_length_guidelines If true, displays line length guidelines to help you keep line lengths in check. See also text_editor/appearance/guidelines/line_length_guideline_soft_column and text_editor/appearance/guidelines/line_length_guideline_hard_column. 
bool text_editor/appearance/gutters/highlight_type_safe_lines If true, highlights type-safe lines by displaying their line number color with text_editor/theme/highlighting/safe_line_number_color instead of text_editor/theme/highlighting/line_number_color. Type-safe lines are lines of code where the type of all variables is known at compile-time. These type-safe lines may run faster thanks to typed instructions. 
bool text_editor/appearance/gutters/line_numbers_zero_padded If true, displays line numbers with zero padding (e.g. 007 instead of 7). 
bool text_editor/appearance/gutters/show_info_gutter If true, displays a gutter at the left containing icons for methods with signal connections and for overridden methods. 
bool text_editor/appearance/gutters/show_line_numbers If true, displays line numbers in a gutter at the left. 
int text_editor/appearance/lines/autowrap_mode If text_editor/appearance/lines/word_wrap is set to 1, sets text wrapping mode. To see how each mode behaves, see AutowrapMode. 
bool text_editor/appearance/lines/code_folding If true, displays the folding arrows next to indented code sections and allows code folding. If false, hides the folding arrows next to indented code sections and disallows code folding. 
int text_editor/appearance/lines/word_wrap If true, wraps long lines over multiple lines to avoid horizontal scrolling. This is a display-only feature; it does not actually insert line breaks in your scripts. 
int text_editor/appearance/minimap/minimap_width The width of the minimap in the script editor (in pixels). 
bool text_editor/appearance/minimap/show_minimap If true, draws an overview of the script near the scroll bar. The minimap can be left-clicked to scroll directly to a location in an "absolute" manner. 
bool text_editor/appearance/whitespace/draw_spaces If true, draws space characters as centered points. 
bool text_editor/appearance/whitespace/draw_tabs If true, draws tab characters as chevrons. 
int text_editor/appearance/whitespace/line_spacing The space to add between lines (in pixels). Greater line spacing can help improve readability at the cost of displaying fewer lines on screen. 
bool text_editor/behavior/files/auto_reload_scripts_on_external_change If true, automatically reloads scripts in the editor when they have been modified and saved by external editors. 
int text_editor/behavior/files/autosave_interval_secs If set to a value greater than 0, automatically saves the current script following the specified interval (in seconds). This can be used to prevent data loss if the editor crashes. 
bool text_editor/behavior/files/convert_indent_on_save If true, converts indentation to match the script editor's indentation settings when saving a script. See also text_editor/behavior/indent/type. 
bool text_editor/behavior/files/restore_scripts_on_load If true, reopens scripts that were opened in the last session when the editor is reopened on a given project. 
bool text_editor/behavior/files/trim_trailing_whitespace_on_save If true, trims trailing whitespace when saving a script. Trailing whitespace refers to tab and space characters placed at the end of lines. Since these serve no practical purpose, they can and should be removed to make version control diffs less noisy. 
bool text_editor/behavior/indent/auto_indent If true, automatically indents code when pressing the Enter key based on blocks above the new line. 
int text_editor/behavior/indent/size When using tab indentation, determines the length of each tab. When using space indentation, determines how many spaces are inserted when pressing Tab and when automatic indentation is performed. 
int text_editor/behavior/indent/type The indentation style to use (tabs or spaces). Note: The GDScript style guide recommends using tabs for indentation. It is advised to change this setting only if you need to work on a project that currently uses spaces for indentation. 
bool text_editor/behavior/navigation/drag_and_drop_selection If true, allows drag-and-dropping text in the script editor to move text. Disable this if you find yourself accidentally drag-and-dropping text in the script editor. 
bool text_editor/behavior/navigation/move_caret_on_right_click If true, the caret will be moved when right-clicking somewhere in the script editor (like when left-clicking or middle-clicking). If false, the caret will only be moved when left-clicking or middle-clicking somewhere. 
bool text_editor/behavior/navigation/scroll_past_end_of_file If true, allows scrolling past the end of the file. 
bool text_editor/behavior/navigation/smooth_scrolling If true, allows scrolling in sub-line intervals and enables a smooth scrolling animation when using the mouse wheel to scroll. Note: text_editor/behavior/navigation/smooth_scrolling currently behaves poorly in projects where ProjectSettings.physics/common/physics_ticks_per_second has been increased significantly from its default value (60). In this case, it is recommended to disable this setting. 
bool text_editor/behavior/navigation/stay_in_script_editor_on_node_selected If true, prevents automatically switching between the Script and 2D/3D screens when selecting a node in the Scene tree dock. 
int text_editor/behavior/navigation/v_scroll_speed The number of pixels to scroll with every mouse wheel increment. Higher values make the script scroll by faster when using the mouse wheel. Note: You can hold down Alt while using the mouse wheel to temporarily scroll 5 times faster. 
bool text_editor/completion/add_type_hints If true, adds static typing hints such as -> void and : int when using code autocompletion or when creating onready variables by drag and dropping nodes into the script editor while pressing the Ctrl key. 
bool text_editor/completion/auto_brace_complete If true, automatically completes braces when making use of code completion. 
float text_editor/completion/code_complete_delay The delay in seconds after which autocompletion suggestions should be displayed when the user stops typing. 
bool text_editor/completion/code_complete_enabled If true, code completion will be triggered automatically after text_editor/completion/code_complete_delay. If false, you can still trigger completion manually by pressing Ctrl + Space (Cmd + Space on macOS). 
bool text_editor/completion/colorize_suggestions If true enables the coloring for some items in the autocompletion suggestions, like vector components. 
bool text_editor/completion/complete_file_paths If true, provides autocompletion suggestions for file paths in methods such as load() and preload(). 
float text_editor/completion/idle_parse_delay The delay in seconds after which the script editor should check for errors when the user stops typing. 
bool text_editor/completion/put_callhint_tooltip_below_current_line If true, the code completion tooltip will appear below the current line unless there is no space on screen below the current line. If false, the code completion tooltip will appear above the current line. 
bool text_editor/completion/use_single_quotes If true, performs string autocompletion with single quotes. If false, performs string autocompletion with double quotes (which matches the GDScript style guide). 
int text_editor/help/class_reference_examples Controls which multi-line code blocks should be displayed in the editor help. This setting does not affect single-line code literals in the editor help. 
int text_editor/help/help_font_size The font size to use for the editor help (built-in class reference). 
int text_editor/help/help_source_font_size The font size to use for code samples in the editor help (built-in class reference). 
int text_editor/help/help_title_font_size The font size to use for headings in the editor help (built-in class reference). 
bool text_editor/help/show_help_index If true, displays a table of contents at the left of the editor help (at the location where the members overview would appear when editing a script). 
bool text_editor/script_list/show_members_overview If true, displays an overview of the current script's member variables and functions at the left of the script editor. See also text_editor/script_list/sort_members_outline_alphabetically. 
bool text_editor/script_list/sort_members_outline_alphabetically If true, sorts the members outline (located at the left of the script editor) using alphabetical order. If false, sorts the members outline depending on the order in which members are found in the script. Note: Only effective if text_editor/script_list/show_members_overview is true. 
String text_editor/theme/color_theme The syntax theme to use in the script editor. You can save your own syntax theme from your current settings by using File > Theme > Save As... at the top of the script editor. The syntax theme will then be available locally in the list of color themes. You can find additional syntax themes to install in the godot-syntax-themes repository. 
Color text_editor/theme/highlighting/background_color The script editor's background color. If set to a translucent color, the editor theme's base color will be visible behind. 
Color text_editor/theme/highlighting/base_type_color The script editor's base type color (used for types like Vector2, Vector3, Color, ...). 
Color text_editor/theme/highlighting/bookmark_color The script editor's bookmark icon color (displayed in the gutter). 
Color text_editor/theme/highlighting/brace_mismatch_color The script editor's brace mismatch color. Used when the caret is currently on a mismatched brace, parenthesis or bracket character. 
Color text_editor/theme/highlighting/breakpoint_color The script editor's breakpoint icon color (displayed in the gutter). 
Color text_editor/theme/highlighting/caret_background_color The script editor's caret background color. Note: This setting has no effect as it's currently unused. 
Color text_editor/theme/highlighting/caret_color The script editor's caret color. 
Color text_editor/theme/highlighting/code_folding_color The script editor's color for the code folding icon (displayed in the gutter). 
Color text_editor/theme/highlighting/comment_color The script editor's comment color. Note: In GDScript, unlike Python, multiline strings are not considered to be comments, and will use the string highlighting color instead. 
Color text_editor/theme/highlighting/completion_background_color The script editor's autocompletion box background color. 
Color text_editor/theme/highlighting/completion_existing_color The script editor's autocompletion box background color to highlight existing characters in the completion results. This should be a translucent color so that text_editor/theme/highlighting/completion_selected_color can be seen behind. 
Color text_editor/theme/highlighting/completion_font_color The script editor's autocompletion box text color. 
Color text_editor/theme/highlighting/completion_scroll_color The script editor's autocompletion box scroll bar color. 
Color text_editor/theme/highlighting/completion_scroll_hovered_color The script editor's autocompletion box scroll bar color when hovered or pressed with the mouse. 
Color text_editor/theme/highlighting/completion_selected_color The script editor's autocompletion box background color for the currently selected line. 
Color text_editor/theme/highlighting/control_flow_keyword_color The script editor's control flow keyword color (used for keywords like if, for, return, ...). 
Color text_editor/theme/highlighting/current_line_color The script editor's background color for the line the caret is currently on. This should be set to a translucent color so that it can display on top of other line color modifiers such as text_editor/theme/highlighting/mark_color. 
Color text_editor/theme/highlighting/doc_comment_color The script editor's documentation comment color. In GDScript, this is used for comments starting with ##. In C#, this is used for comments starting with /// or /**. 
Color text_editor/theme/highlighting/engine_type_color The script editor's engine type color (Vector2, Vector3, Color, ...). 
Color text_editor/theme/highlighting/executing_line_color The script editor's color for the debugger's executing line icon (displayed in the gutter). 
Color text_editor/theme/highlighting/folded_code_region_color The script editor's background line highlighting color for folded code region. 
Color text_editor/theme/highlighting/function_color The script editor's function call color. Note: When using the GDScript syntax highlighter, this is replaced by the function definition color configured in the syntax theme for function definitions (e.g. func _ready():). 
Color text_editor/theme/highlighting/keyword_color The script editor's non-control flow keyword color (used for keywords like var, func, extends, ...). 
Color text_editor/theme/highlighting/line_length_guideline_color The script editor's color for the line length guideline. The "hard" line length guideline will be drawn with this color, whereas the "soft" line length guideline will be drawn with half of its opacity. 
Color text_editor/theme/highlighting/line_number_color The script editor's color for line numbers. See also text_editor/theme/highlighting/safe_line_number_color. 
Color text_editor/theme/highlighting/mark_color The script editor's background color for lines with errors. This should be set to a translucent color so that it can display on top of other line color modifiers such as text_editor/theme/highlighting/current_line_color. 
Color text_editor/theme/highlighting/member_variable_color The script editor's color for member variables on objects (e.g. self.some_property). Note: This color is not used for local variable declaration and access. 
Color text_editor/theme/highlighting/number_color The script editor's color for numbers (integer and floating-point). 
Color text_editor/theme/highlighting/safe_line_number_color The script editor's color for type-safe line numbers. See also text_editor/theme/highlighting/line_number_color. Note: Only displayed if text_editor/appearance/gutters/highlight_type_safe_lines is true. 
Color text_editor/theme/highlighting/search_result_border_color The script editor's color for the border of search results. This border helps bring further attention to the search result. Set this color's opacity to 0 to disable the border. 
Color text_editor/theme/highlighting/search_result_color The script editor's background color for search results. 
Color text_editor/theme/highlighting/selection_color The script editor's background color for the currently selected text. 
Color text_editor/theme/highlighting/string_color The script editor's color for strings (single-line and multi-line). 
Color text_editor/theme/highlighting/symbol_color The script editor's color for operators (( ) [ ] { } + - * /, ...). 
Color text_editor/theme/highlighting/text_color The script editor's color for text not highlighted by any syntax highlighting rule. 
Color text_editor/theme/highlighting/text_selected_color The script editor's background color for text. This should be set to a translucent color so that it can display on top of other line color modifiers such as text_editor/theme/highlighting/current_line_color. 
Color text_editor/theme/highlighting/user_type_color The script editor's color for user-defined types (using class_name). 
Color text_editor/theme/highlighting/word_highlighted_color The script editor's color for words highlighted by selecting them. Only visible if text_editor/appearance/caret/highlight_all_occurrences is true.   Method Descriptions void add_property_info ( Dictionary info ) Adds a custom property info to a property. The dictionary must contain:  
name: String (the name of the property) 
type: int (see Variant.Type) optionally hint: int (see PropertyHint) and hint_string: String
  Example:  GDScriptvar settings = EditorInterface.get_editor_settings()
settings.set("category/property_name", 0)
var property_info = {
    "name": "category/property_name",
    "type": TYPE_INT,
    "hint": PROPERTY_HINT_ENUM,
    "hint_string": "one,two,three"
}
settings.add_property_info(property_info)
 C#var settings = GetEditorInterface().GetEditorSettings();
settings.Set("category/property_name", 0);
var propertyInfo = new Godot.Collections.Dictionary
{
    {"name", "category/propertyName"},
    {"type", Variant.Type.Int},
    {"hint", PropertyHint.Enum},
    {"hint_string", "one,two,three"}
};
settings.AddPropertyInfo(propertyInfo);
  
bool check_changed_settings_in_group ( String setting_prefix ) const
 Checks if any settings with the prefix setting_prefix exist in the set of changed settings. See also get_changed_settings. void erase ( String property ) Erases the setting whose name is specified by property. 
PackedStringArray get_changed_settings ( ) const
 Gets an array of the settings which have been changed since the last save. Note that internally changed_settings is cleared after a successful save, so generally the most appropriate place to use this method is when processing NOTIFICATION_EDITOR_SETTINGS_CHANGED. 
PackedStringArray get_favorites ( ) const
 Returns the list of favorite files and directories for this project. 
Variant get_project_metadata ( String section, String key, Variant default=null ) const
 Returns project-specific metadata for the section and key specified. If the metadata doesn't exist, default will be returned instead. See also set_project_metadata. 
PackedStringArray get_recent_dirs ( ) const
 Returns the list of recently visited folders in the file dialog for this project. 
Variant get_setting ( String name ) const
 Returns the value of the setting specified by name. This is equivalent to using Object.get on the EditorSettings instance. 
bool has_setting ( String name ) const
 Returns true if the setting specified by name exists, false otherwise. void mark_setting_changed ( String setting ) Marks the passed editor setting as being changed, see get_changed_settings. Only settings which exist (see has_setting) will be accepted. void set_builtin_action_override ( String name, InputEvent[] actions_list ) Overrides the built-in editor action name with the input actions defined in actions_list. void set_favorites ( PackedStringArray dirs ) Sets the list of favorite files and directories for this project. void set_initial_value ( StringName name, Variant value, bool update_current ) Sets the initial value of the setting specified by name to value. This is used to provide a value for the Revert button in the Editor Settings. If update_current is true, the current value of the setting will be set to value as well. void set_project_metadata ( String section, String key, Variant data ) Sets project-specific metadata with the section, key and data specified. This metadata is stored outside the project folder and therefore won't be checked into version control. See also get_project_metadata. void set_recent_dirs ( PackedStringArray dirs ) Sets the list of recently visited folders in the file dialog for this project. void set_setting ( String name, Variant value ) Sets the value of the setting specified by name. This is equivalent to using Object.set on the EditorSettings instance.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editorsettings.html


classes/class_environment
-----------------------------------------------------------
Environment Inherits: Resource < RefCounted < Object Resource for environment nodes (like WorldEnvironment) that define multiple rendering options.  Description Resource for environment nodes (like WorldEnvironment) that define multiple environment operations (such as background Sky or Color, ambient light, fog, depth-of-field...). These parameters affect the final render of the scene. The order of these operations is:  Depth of Field Blur Glow Tonemap (Auto Exposure) Adjustments    Tutorials  Environment and post-processing High dynamic range lighting 3D Material Testers Demo 2D HDR Demo Third Person Shooter Demo    Properties  
float adjustment_brightness 1.0  
Texture adjustment_color_correction   
float adjustment_contrast 1.0  
bool adjustment_enabled false  
float adjustment_saturation 1.0  
Color ambient_light_color Color(0, 0, 0, 1)  
float ambient_light_energy 1.0  
float ambient_light_sky_contribution 1.0  
AmbientSource ambient_light_source 0  
int background_camera_feed_id 1  
int background_canvas_max_layer 0  
Color background_color Color(0, 0, 0, 1)  
float background_energy_multiplier 1.0  
float background_intensity 30000.0  
BGMode background_mode 0  
float fog_aerial_perspective 0.0  
float fog_density 0.01  
bool fog_enabled false  
float fog_height 0.0  
float fog_height_density 0.0  
Color fog_light_color Color(0.518, 0.553, 0.608, 1)  
float fog_light_energy 1.0  
float fog_sky_affect 1.0  
float fog_sun_scatter 0.0  
GlowBlendMode glow_blend_mode 2  
float glow_bloom 0.0  
bool glow_enabled false  
float glow_hdr_luminance_cap 12.0  
float glow_hdr_scale 2.0  
float glow_hdr_threshold 1.0  
float glow_intensity 0.8  
float glow_levels/1 0.0  
float glow_levels/2 0.0  
float glow_levels/3 1.0  
float glow_levels/4 0.0  
float glow_levels/5 1.0  
float glow_levels/6 0.0  
float glow_levels/7 0.0  
Texture glow_map   
float glow_map_strength 0.8  
float glow_mix 0.05  
bool glow_normalized false  
float glow_strength 1.0  
ReflectionSource reflected_light_source 0  
float sdfgi_bounce_feedback 0.5  
float sdfgi_cascade0_distance 12.8  
int sdfgi_cascades 4  
bool sdfgi_enabled false  
float sdfgi_energy 1.0  
float sdfgi_max_distance 204.8  
float sdfgi_min_cell_size 0.2  
float sdfgi_normal_bias 1.1  
float sdfgi_probe_bias 1.1  
bool sdfgi_read_sky_light true  
bool sdfgi_use_occlusion false  
SDFGIYScale sdfgi_y_scale 1  
Sky sky   
float sky_custom_fov 0.0  
Vector3 sky_rotation Vector3(0, 0, 0)  
float ssao_ao_channel_affect 0.0  
float ssao_detail 0.5  
bool ssao_enabled false  
float ssao_horizon 0.06  
float ssao_intensity 2.0  
float ssao_light_affect 0.0  
float ssao_power 1.5  
float ssao_radius 1.0  
float ssao_sharpness 0.98  
bool ssil_enabled false  
float ssil_intensity 1.0  
float ssil_normal_rejection 1.0  
float ssil_radius 5.0  
float ssil_sharpness 0.98  
float ssr_depth_tolerance 0.2  
bool ssr_enabled false  
float ssr_fade_in 0.15  
float ssr_fade_out 2.0  
int ssr_max_steps 64  
float tonemap_exposure 1.0  
ToneMapper tonemap_mode 0  
float tonemap_white 1.0  
Color volumetric_fog_albedo Color(1, 1, 1, 1)  
float volumetric_fog_ambient_inject 0.0  
float volumetric_fog_anisotropy 0.2  
float volumetric_fog_density 0.05  
float volumetric_fog_detail_spread 2.0  
Color volumetric_fog_emission Color(0, 0, 0, 1)  
float volumetric_fog_emission_energy 1.0  
bool volumetric_fog_enabled false  
float volumetric_fog_gi_inject 1.0  
float volumetric_fog_length 64.0  
float volumetric_fog_sky_affect 1.0  
float volumetric_fog_temporal_reprojection_amount 0.9  
bool volumetric_fog_temporal_reprojection_enabled true     Methods  
float get_glow_level ( int idx ) const  
void set_glow_level ( int idx, float intensity )     Enumerations enum BGMode: 
BGMode BG_CLEAR_COLOR = 0
 Clears the background using the clear color defined in ProjectSettings.rendering/environment/defaults/default_clear_color. 
BGMode BG_COLOR = 1
 Clears the background using a custom clear color. 
BGMode BG_SKY = 2
 Displays a user-defined sky in the background. 
BGMode BG_CANVAS = 3
 Displays a CanvasLayer in the background. 
BGMode BG_KEEP = 4
 Keeps on screen every pixel drawn in the background. This is the fastest background mode, but it can only be safely used in fully-interior scenes (no visible sky or sky reflections). If enabled in a scene where the background is visible, "ghost trail" artifacts will be visible when moving the camera. 
BGMode BG_CAMERA_FEED = 5
 Displays a camera feed in the background. 
BGMode BG_MAX = 6
 Represents the size of the BGMode enum. enum AmbientSource: 
AmbientSource AMBIENT_SOURCE_BG = 0
 Gather ambient light from whichever source is specified as the background. 
AmbientSource AMBIENT_SOURCE_DISABLED = 1
 Disable ambient light. This provides a slight performance boost over AMBIENT_SOURCE_SKY. 
AmbientSource AMBIENT_SOURCE_COLOR = 2
 Specify a specific Color for ambient light. This provides a slight performance boost over AMBIENT_SOURCE_SKY. 
AmbientSource AMBIENT_SOURCE_SKY = 3
 Gather ambient light from the Sky regardless of what the background is. enum ReflectionSource: 
ReflectionSource REFLECTION_SOURCE_BG = 0
 Use the background for reflections. 
ReflectionSource REFLECTION_SOURCE_DISABLED = 1
 Disable reflections. This provides a slight performance boost over other options. 
ReflectionSource REFLECTION_SOURCE_SKY = 2
 Use the Sky for reflections regardless of what the background is. enum ToneMapper: 
ToneMapper TONE_MAPPER_LINEAR = 0
 Linear tonemapper operator. Reads the linear data and passes it on unmodified. This can cause bright lighting to look blown out, with noticeable clipping in the output colors. 
ToneMapper TONE_MAPPER_REINHARDT = 1
 Reinhardt tonemapper operator. Performs a variation on rendered pixels' colors by this formula: color = color / (1 + color). This avoids clipping bright highlights, but the resulting image can look a bit dull. 
ToneMapper TONE_MAPPER_FILMIC = 2
 Filmic tonemapper operator. This avoids clipping bright highlights, with a resulting image that usually looks more vivid than TONE_MAPPER_REINHARDT. 
ToneMapper TONE_MAPPER_ACES = 3
 Use the Academy Color Encoding System tonemapper. ACES is slightly more expensive than other options, but it handles bright lighting in a more realistic fashion by desaturating it as it becomes brighter. ACES typically has a more contrasted output compared to TONE_MAPPER_REINHARDT and TONE_MAPPER_FILMIC. Note: This tonemapping operator is called "ACES Fitted" in Godot 3.x. enum GlowBlendMode: 
GlowBlendMode GLOW_BLEND_MODE_ADDITIVE = 0
 Additive glow blending mode. Mostly used for particles, glows (bloom), lens flare, bright sources. 
GlowBlendMode GLOW_BLEND_MODE_SCREEN = 1
 Screen glow blending mode. Increases brightness, used frequently with bloom. 
GlowBlendMode GLOW_BLEND_MODE_SOFTLIGHT = 2
 Soft light glow blending mode. Modifies contrast, exposes shadows and highlights (vivid bloom). 
GlowBlendMode GLOW_BLEND_MODE_REPLACE = 3
 Replace glow blending mode. Replaces all pixels' color by the glow value. This can be used to simulate a full-screen blur effect by tweaking the glow parameters to match the original image's brightness. 
GlowBlendMode GLOW_BLEND_MODE_MIX = 4
 Mixes the glow with the underlying color to avoid increasing brightness as much while still maintaining a glow effect. enum SDFGIYScale: 
SDFGIYScale SDFGI_Y_SCALE_50_PERCENT = 0
 Use 50% scale for SDFGI on the Y (vertical) axis. SDFGI cells will be twice as short as they are wide. This allows providing increased GI detail and reduced light leaking with thin floors and ceilings. This is usually the best choice for scenes that don't feature much verticality. 
SDFGIYScale SDFGI_Y_SCALE_75_PERCENT = 1
 Use 75% scale for SDFGI on the Y (vertical) axis. This is a balance between the 50% and 100% SDFGI Y scales. 
SDFGIYScale SDFGI_Y_SCALE_100_PERCENT = 2
 Use 100% scale for SDFGI on the Y (vertical) axis. SDFGI cells will be as tall as they are wide. This is usually the best choice for highly vertical scenes. The downside is that light leaking may become more noticeable with thin floors and ceilings.   Property Descriptions 
float adjustment_brightness = 1.0
  void set_adjustment_brightness ( float value )
 
float get_adjustment_brightness ( )
  The global brightness value of the rendered scene. Effective only if adjustment_enabled is true. 
Texture adjustment_color_correction  void set_adjustment_color_correction ( Texture value )
 
Texture get_adjustment_color_correction ( )
  The Texture2D or Texture3D lookup table (LUT) to use for the built-in post-process color grading. Can use a GradientTexture1D for a 1-dimensional LUT, or a Texture3D for a more complex LUT. Effective only if adjustment_enabled is true. 
float adjustment_contrast = 1.0
  void set_adjustment_contrast ( float value )
 
float get_adjustment_contrast ( )
  The global contrast value of the rendered scene (default value is 1). Effective only if adjustment_enabled is true. 
bool adjustment_enabled = false
  void set_adjustment_enabled ( bool value )
 
bool is_adjustment_enabled ( )
  If true, enables the adjustment_* properties provided by this resource. If false, modifications to the adjustment_* properties will have no effect on the rendered scene. Note: Adjustments are only supported in the Forward+ and Mobile rendering methods, not Compatibility. 
float adjustment_saturation = 1.0
  void set_adjustment_saturation ( float value )
 
float get_adjustment_saturation ( )
  The global color saturation value of the rendered scene (default value is 1). Effective only if adjustment_enabled is true. 
Color ambient_light_color = Color(0, 0, 0, 1)
  void set_ambient_light_color ( Color value )
 
Color get_ambient_light_color ( )
  The ambient light's Color. Only effective if ambient_light_sky_contribution is lower than 1.0 (exclusive). 
float ambient_light_energy = 1.0
  void set_ambient_light_energy ( float value )
 
float get_ambient_light_energy ( )
  The ambient light's energy. The higher the value, the stronger the light. Only effective if ambient_light_sky_contribution is lower than 1.0 (exclusive). 
float ambient_light_sky_contribution = 1.0
  void set_ambient_light_sky_contribution ( float value )
 
float get_ambient_light_sky_contribution ( )
  Defines the amount of light that the sky brings on the scene. A value of 0.0 means that the sky's light emission has no effect on the scene illumination, thus all ambient illumination is provided by the ambient light. On the contrary, a value of 1.0 means that all the light that affects the scene is provided by the sky, thus the ambient light parameter has no effect on the scene. Note: ambient_light_sky_contribution is internally clamped between 0.0 and 1.0 (inclusive). 
AmbientSource ambient_light_source = 0
  void set_ambient_source ( AmbientSource value )
 
AmbientSource get_ambient_source ( )
  The ambient light source to use for rendering materials and global illumination. 
int background_camera_feed_id = 1
  void set_camera_feed_id ( int value )
 
int get_camera_feed_id ( )
  The ID of the camera feed to show in the background. 
int background_canvas_max_layer = 0
  void set_canvas_max_layer ( int value )
 
int get_canvas_max_layer ( )
  The maximum layer ID to display. Only effective when using the BG_CANVAS background mode. 
Color background_color = Color(0, 0, 0, 1)
  void set_bg_color ( Color value )
 
Color get_bg_color ( )
  The Color displayed for clear areas of the scene. Only effective when using the BG_COLOR background mode. 
float background_energy_multiplier = 1.0
  void set_bg_energy_multiplier ( float value )
 
float get_bg_energy_multiplier ( )
  Multiplier for background energy. Increase to make background brighter, decrease to make background dimmer. 
float background_intensity = 30000.0
  void set_bg_intensity ( float value )
 
float get_bg_intensity ( )
  Luminance of background measured in nits (candela per square meter). Only used when ProjectSettings.rendering/lights_and_shadows/use_physical_light_units is enabled. The default value is roughly equivalent to the sky at midday. 
BGMode background_mode = 0
  void set_background ( BGMode value )
 
BGMode get_background ( )
  The background mode. See BGMode for possible values. 
float fog_aerial_perspective = 0.0
  void set_fog_aerial_perspective ( float value )
 
float get_fog_aerial_perspective ( )
  If set above 0.0 (exclusive), blends between the fog's color and the color of the background Sky. This has a small performance cost when set above 0.0. Must have background_mode set to BG_SKY. This is useful to simulate aerial perspective in large scenes with low density fog. However, it is not very useful for high-density fog, as the sky will shine through. When set to 1.0, the fog color comes completely from the Sky. If set to 0.0, aerial perspective is disabled. 
float fog_density = 0.01
  void set_fog_density ( float value )
 
float get_fog_density ( )
  The exponential fog density to use. Higher values result in a more dense fog. Fog rendering is exponential as in real life. 
bool fog_enabled = false
  void set_fog_enabled ( bool value )
 
bool is_fog_enabled ( )
  If true, fog effects are enabled. 
float fog_height = 0.0
  void set_fog_height ( float value )
 
float get_fog_height ( )
  The height at which the height fog effect begins. 
float fog_height_density = 0.0
  void set_fog_height_density ( float value )
 
float get_fog_height_density ( )
  The density used to increase fog as height decreases. To make fog increase as height increases, use a negative value. 
Color fog_light_color = Color(0.518, 0.553, 0.608, 1)
  void set_fog_light_color ( Color value )
 
Color get_fog_light_color ( )
  The fog's color. 
float fog_light_energy = 1.0
  void set_fog_light_energy ( float value )
 
float get_fog_light_energy ( )
  The fog's brightness. Higher values result in brighter fog. 
float fog_sky_affect = 1.0
  void set_fog_sky_affect ( float value )
 
float get_fog_sky_affect ( )
  The factor to use when affecting the sky with non-volumetric fog. 1.0 means that fog can fully obscure the sky. Lower values reduce the impact of fog on sky rendering, with 0.0 not affecting sky rendering at all. Note: fog_sky_affect has no visual effect if fog_aerial_perspective is 1.0. 
float fog_sun_scatter = 0.0
  void set_fog_sun_scatter ( float value )
 
float get_fog_sun_scatter ( )
  If set above 0.0, renders the scene's directional light(s) in the fog color depending on the view angle. This can be used to give the impression that the sun is "piercing" through the fog. 
GlowBlendMode glow_blend_mode = 2
  void set_glow_blend_mode ( GlowBlendMode value )
 
GlowBlendMode get_glow_blend_mode ( )
  The glow blending mode. 
float glow_bloom = 0.0
  void set_glow_bloom ( float value )
 
float get_glow_bloom ( )
  The bloom's intensity. If set to a value higher than 0, this will make glow visible in areas darker than the glow_hdr_threshold. 
bool glow_enabled = false
  void set_glow_enabled ( bool value )
 
bool is_glow_enabled ( )
  If true, the glow effect is enabled. Note: Glow is only supported in the Forward+ and Mobile rendering methods, not Compatibility. When using the Mobile rendering method, glow will look different due to the lower dynamic range available in the Mobile rendering method. 
float glow_hdr_luminance_cap = 12.0
  void set_glow_hdr_luminance_cap ( float value )
 
float get_glow_hdr_luminance_cap ( )
  The higher threshold of the HDR glow. Areas brighter than this threshold will be clamped for the purposes of the glow effect. 
float glow_hdr_scale = 2.0
  void set_glow_hdr_bleed_scale ( float value )
 
float get_glow_hdr_bleed_scale ( )
  The bleed scale of the HDR glow. 
float glow_hdr_threshold = 1.0
  void set_glow_hdr_bleed_threshold ( float value )
 
float get_glow_hdr_bleed_threshold ( )
  The lower threshold of the HDR glow. When using the Mobile rendering method (which only supports a lower dynamic range up to 2.0), this may need to be below 1.0 for glow to be visible. A value of 0.9 works well in this case. This value also needs to be decreased below 1.0 when using glow in 2D, as 2D rendering is performed in SDR. 
float glow_intensity = 0.8
  void set_glow_intensity ( float value )
 
float get_glow_intensity ( )
  The overall brightness multiplier of the glow effect. When using the Mobile rendering method (which only supports a lower dynamic range up to 2.0), this should be increased to 1.5 to compensate. 
float glow_levels/1 = 0.0
  void set_glow_level ( int idx, float intensity )
 
float get_glow_level ( int idx ) const
  The intensity of the 1st level of glow. This is the most "local" level (least blurry). 
float glow_levels/2 = 0.0
  void set_glow_level ( int idx, float intensity )
 
float get_glow_level ( int idx ) const
  The intensity of the 2nd level of glow. 
float glow_levels/3 = 1.0
  void set_glow_level ( int idx, float intensity )
 
float get_glow_level ( int idx ) const
  The intensity of the 3rd level of glow. 
float glow_levels/4 = 0.0
  void set_glow_level ( int idx, float intensity )
 
float get_glow_level ( int idx ) const
  The intensity of the 4th level of glow. 
float glow_levels/5 = 1.0
  void set_glow_level ( int idx, float intensity )
 
float get_glow_level ( int idx ) const
  The intensity of the 5th level of glow. 
float glow_levels/6 = 0.0
  void set_glow_level ( int idx, float intensity )
 
float get_glow_level ( int idx ) const
  The intensity of the 6th level of glow. 
float glow_levels/7 = 0.0
  void set_glow_level ( int idx, float intensity )
 
float get_glow_level ( int idx ) const
  The intensity of the 7th level of glow. This is the most "global" level (blurriest). 
Texture glow_map  void set_glow_map ( Texture value )
 
Texture get_glow_map ( )
  The texture that should be used as a glow map to multiply the resulting glow color according to glow_map_strength. This can be used to create a "lens dirt" effect. The texture's RGB color channels are used for modulation, but the alpha channel is ignored. Note: The texture will be stretched to fit the screen. Therefore, it's recommended to use a texture with an aspect ratio that matches your project's base aspect ratio (typically 16:9). 
float glow_map_strength = 0.8
  void set_glow_map_strength ( float value )
 
float get_glow_map_strength ( )
  How strong of an impact the glow_map should have on the overall glow effect. A strength of 0.0 means the glow map has no effect on the overall glow effect. A strength of 1.0 means the glow has a full effect on the overall glow effect (and can turn off glow entirely in specific areas of the screen if the glow map has black areas). 
float glow_mix = 0.05
  void set_glow_mix ( float value )
 
float get_glow_mix ( )
  When using the GLOW_BLEND_MODE_MIX glow_blend_mode, this controls how much the source image is blended with the glow layer. A value of 0.0 makes the glow rendering invisible, while a value of 1.0 is equivalent to GLOW_BLEND_MODE_REPLACE. 
bool glow_normalized = false
  void set_glow_normalized ( bool value )
 
bool is_glow_normalized ( )
  If true, glow levels will be normalized so that summed together their intensities equal 1.0. 
float glow_strength = 1.0
  void set_glow_strength ( float value )
 
float get_glow_strength ( )
  The strength of the glow effect. This applies as the glow is blurred across the screen and increases the distance and intensity of the blur. When using the Mobile rendering method, this should be increased to compensate for the lower dynamic range. 
ReflectionSource reflected_light_source = 0
  void set_reflection_source ( ReflectionSource value )
 
ReflectionSource get_reflection_source ( )
  The reflected (specular) light source. 
float sdfgi_bounce_feedback = 0.5
  void set_sdfgi_bounce_feedback ( float value )
 
float get_sdfgi_bounce_feedback ( )
  The energy multiplier applied to light every time it bounces from a surface when using SDFGI. Values greater than 0.0 will simulate multiple bounces, resulting in a more realistic appearance. Increasing sdfgi_bounce_feedback generally has no performance impact. See also sdfgi_energy. Note: Values greater than 0.5 can cause infinite feedback loops and should be avoided in scenes with bright materials. Note: If sdfgi_bounce_feedback is 0.0, indirect lighting will not be represented in reflections as light will only bounce one time. 
float sdfgi_cascade0_distance = 12.8
  void set_sdfgi_cascade0_distance ( float value )
 
float get_sdfgi_cascade0_distance ( )
  Note: This property is linked to sdfgi_min_cell_size and sdfgi_max_distance. Changing its value will automatically change those properties as well. 
int sdfgi_cascades = 4
  void set_sdfgi_cascades ( int value )
 
int get_sdfgi_cascades ( )
  The number of cascades to use for SDFGI (between 1 and 8). A higher number of cascades allows displaying SDFGI further away while preserving detail up close, at the cost of performance. When using SDFGI on small-scale levels, sdfgi_cascades can often be decreased between 1 and 4 to improve performance. 
bool sdfgi_enabled = false
  void set_sdfgi_enabled ( bool value )
 
bool is_sdfgi_enabled ( )
  If true, enables signed distance field global illumination for meshes that have their GeometryInstance3D.gi_mode set to GeometryInstance3D.GI_MODE_STATIC. SDFGI is a real-time global illumination technique that works well with procedurally generated and user-built levels, including in situations where geometry is created during gameplay. The signed distance field is automatically generated around the camera as it moves. Dynamic lights are supported, but dynamic occluders and emissive surfaces are not. Note: SDFGI is only supported in the Forward+ rendering method, not Mobile or Compatibility. Performance: SDFGI is relatively demanding on the GPU and is not suited to low-end hardware such as integrated graphics (consider LightmapGI instead). To improve SDFGI performance, enable ProjectSettings.rendering/global_illumination/gi/use_half_resolution in the Project Settings. Note: Meshes should have sufficiently thick walls to avoid light leaks (avoid one-sided walls). For interior levels, enclose your level geometry in a sufficiently large box and bridge the loops to close the mesh. 
float sdfgi_energy = 1.0
  void set_sdfgi_energy ( float value )
 
float get_sdfgi_energy ( )
  The energy multiplier to use for SDFGI. Higher values will result in brighter indirect lighting and reflections. See also sdfgi_bounce_feedback. 
float sdfgi_max_distance = 204.8
  void set_sdfgi_max_distance ( float value )
 
float get_sdfgi_max_distance ( )
  The maximum distance at which SDFGI is visible. Beyond this distance, environment lighting or other sources of GI such as ReflectionProbe will be used as a fallback. Note: This property is linked to sdfgi_min_cell_size and sdfgi_cascade0_distance. Changing its value will automatically change those properties as well. 
float sdfgi_min_cell_size = 0.2
  void set_sdfgi_min_cell_size ( float value )
 
float get_sdfgi_min_cell_size ( )
  The cell size to use for the closest SDFGI cascade (in 3D units). Lower values allow SDFGI to be more precise up close, at the cost of making SDFGI updates more demanding. This can cause stuttering when the camera moves fast. Higher values allow SDFGI to cover more ground, while also reducing the performance impact of SDFGI updates. Note: This property is linked to sdfgi_max_distance and sdfgi_cascade0_distance. Changing its value will automatically change those properties as well. 
float sdfgi_normal_bias = 1.1
  void set_sdfgi_normal_bias ( float value )
 
float get_sdfgi_normal_bias ( )
  The normal bias to use for SDFGI probes. Increasing this value can reduce visible streaking artifacts on sloped surfaces, at the cost of increased light leaking. 
float sdfgi_probe_bias = 1.1
  void set_sdfgi_probe_bias ( float value )
 
float get_sdfgi_probe_bias ( )
  The constant bias to use for SDFGI probes. Increasing this value can reduce visible streaking artifacts on sloped surfaces, at the cost of increased light leaking. 
bool sdfgi_read_sky_light = true
  void set_sdfgi_read_sky_light ( bool value )
 
bool is_sdfgi_reading_sky_light ( )
  If true, SDFGI takes the environment lighting into account. This should be set to false for interior scenes. 
bool sdfgi_use_occlusion = false
  void set_sdfgi_use_occlusion ( bool value )
 
bool is_sdfgi_using_occlusion ( )
  If true, SDFGI uses an occlusion detection approach to reduce light leaking. Occlusion may however introduce dark blotches in certain spots, which may be undesired in mostly outdoor scenes. sdfgi_use_occlusion has a performance impact and should only be enabled when needed. 
SDFGIYScale sdfgi_y_scale = 1
  void set_sdfgi_y_scale ( SDFGIYScale value )
 
SDFGIYScale get_sdfgi_y_scale ( )
  The Y scale to use for SDFGI cells. Lower values will result in SDFGI cells being packed together more closely on the Y axis. This is used to balance between quality and covering a lot of vertical ground. sdfgi_y_scale should be set depending on how vertical your scene is (and how fast your camera may move on the Y axis). 
Sky sky  void set_sky ( Sky value )
 
Sky get_sky ( )
  The Sky resource used for this Environment. 
float sky_custom_fov = 0.0
  void set_sky_custom_fov ( float value )
 
float get_sky_custom_fov ( )
  If set to a value greater than 0.0, overrides the field of view to use for sky rendering. If set to 0.0, the same FOV as the current Camera3D is used for sky rendering. 
Vector3 sky_rotation = Vector3(0, 0, 0)
  void set_sky_rotation ( Vector3 value )
 
Vector3 get_sky_rotation ( )
  The rotation to use for sky rendering. 
float ssao_ao_channel_affect = 0.0
  void set_ssao_ao_channel_affect ( float value )
 
float get_ssao_ao_channel_affect ( )
  The screen-space ambient occlusion intensity on materials that have an AO texture defined. Values higher than 0 will make the SSAO effect visible in areas darkened by AO textures. 
float ssao_detail = 0.5
  void set_ssao_detail ( float value )
 
float get_ssao_detail ( )
  Sets the strength of the additional level of detail for the screen-space ambient occlusion effect. A high value makes the detail pass more prominent, but it may contribute to aliasing in your final image. 
bool ssao_enabled = false
  void set_ssao_enabled ( bool value )
 
bool is_ssao_enabled ( )
  If true, the screen-space ambient occlusion effect is enabled. This darkens objects' corners and cavities to simulate ambient light not reaching the entire object as in real life. This works well for small, dynamic objects, but baked lighting or ambient occlusion textures will do a better job at displaying ambient occlusion on large static objects. Godot uses a form of SSAO called Adaptive Screen Space Ambient Occlusion which is itself a form of Horizon Based Ambient Occlusion. Note: SSAO is only supported in the Forward+ rendering method, not Mobile or Compatibility. 
float ssao_horizon = 0.06
  void set_ssao_horizon ( float value )
 
float get_ssao_horizon ( )
  The threshold for considering whether a given point on a surface is occluded or not represented as an angle from the horizon mapped into the 0.0-1.0 range. A value of 1.0 results in no occlusion. 
float ssao_intensity = 2.0
  void set_ssao_intensity ( float value )
 
float get_ssao_intensity ( )
  The primary screen-space ambient occlusion intensity. Acts as a multiplier for the screen-space ambient occlusion effect. A higher value results in darker occlusion. 
float ssao_light_affect = 0.0
  void set_ssao_direct_light_affect ( float value )
 
float get_ssao_direct_light_affect ( )
  The screen-space ambient occlusion intensity in direct light. In real life, ambient occlusion only applies to indirect light, which means its effects can't be seen in direct light. Values higher than 0 will make the SSAO effect visible in direct light. 
float ssao_power = 1.5
  void set_ssao_power ( float value )
 
float get_ssao_power ( )
  The distribution of occlusion. A higher value results in darker occlusion, similar to ssao_intensity, but with a sharper falloff. 
float ssao_radius = 1.0
  void set_ssao_radius ( float value )
 
float get_ssao_radius ( )
  The distance at which objects can occlude each other when calculating screen-space ambient occlusion. Higher values will result in occlusion over a greater distance at the cost of performance and quality. 
float ssao_sharpness = 0.98
  void set_ssao_sharpness ( float value )
 
float get_ssao_sharpness ( )
  The amount that the screen-space ambient occlusion effect is allowed to blur over the edges of objects. Setting too high will result in aliasing around the edges of objects. Setting too low will make object edges appear blurry. 
bool ssil_enabled = false
  void set_ssil_enabled ( bool value )
 
bool is_ssil_enabled ( )
  If true, the screen-space indirect lighting effect is enabled. Screen space indirect lighting is a form of indirect lighting that allows diffuse light to bounce between nearby objects. Screen-space indirect lighting works very similarly to screen-space ambient occlusion, in that it only affects a limited range. It is intended to be used along with a form of proper global illumination like SDFGI or VoxelGI. Screen-space indirect lighting is not affected by individual light's Light3D.light_indirect_energy. Note: SSIL is only supported in the Forward+ rendering method, not Mobile or Compatibility. 
float ssil_intensity = 1.0
  void set_ssil_intensity ( float value )
 
float get_ssil_intensity ( )
  The brightness multiplier for the screen-space indirect lighting effect. A higher value will result in brighter light. 
float ssil_normal_rejection = 1.0
  void set_ssil_normal_rejection ( float value )
 
float get_ssil_normal_rejection ( )
  Amount of normal rejection used when calculating screen-space indirect lighting. Normal rejection uses the normal of a given sample point to reject samples that are facing away from the current pixel. Normal rejection is necessary to avoid light leaking when only one side of an object is illuminated. However, normal rejection can be disabled if light leaking is desirable, such as when the scene mostly contains emissive objects that emit light from faces that cannot be seen from the camera. 
float ssil_radius = 5.0
  void set_ssil_radius ( float value )
 
float get_ssil_radius ( )
  The distance that bounced lighting can travel when using the screen space indirect lighting effect. A larger value will result in light bouncing further in a scene, but may result in under-sampling artifacts which look like long spikes surrounding light sources. 
float ssil_sharpness = 0.98
  void set_ssil_sharpness ( float value )
 
float get_ssil_sharpness ( )
  The amount that the screen-space indirect lighting effect is allowed to blur over the edges of objects. Setting too high will result in aliasing around the edges of objects. Setting too low will make object edges appear blurry. 
float ssr_depth_tolerance = 0.2
  void set_ssr_depth_tolerance ( float value )
 
float get_ssr_depth_tolerance ( )
  The depth tolerance for screen-space reflections. 
bool ssr_enabled = false
  void set_ssr_enabled ( bool value )
 
bool is_ssr_enabled ( )
  If true, screen-space reflections are enabled. Screen-space reflections are more accurate than reflections from VoxelGIs or ReflectionProbes, but are slower and can't reflect surfaces occluded by others. Note: SSR is only supported in the Forward+ rendering method, not Mobile or Compatibility. 
float ssr_fade_in = 0.15
  void set_ssr_fade_in ( float value )
 
float get_ssr_fade_in ( )
  The fade-in distance for screen-space reflections. Affects the area from the reflected material to the screen-space reflection. Only positive values are valid (negative values will be clamped to 0.0). 
float ssr_fade_out = 2.0
  void set_ssr_fade_out ( float value )
 
float get_ssr_fade_out ( )
  The fade-out distance for screen-space reflections. Affects the area from the screen-space reflection to the "global" reflection. Only positive values are valid (negative values will be clamped to 0.0). 
int ssr_max_steps = 64
  void set_ssr_max_steps ( int value )
 
int get_ssr_max_steps ( )
  The maximum number of steps for screen-space reflections. Higher values are slower. 
float tonemap_exposure = 1.0
  void set_tonemap_exposure ( float value )
 
float get_tonemap_exposure ( )
  The default exposure used for tonemapping. Higher values result in a brighter image. See also tonemap_white. 
ToneMapper tonemap_mode = 0
  void set_tonemapper ( ToneMapper value )
 
ToneMapper get_tonemapper ( )
  The tonemapping mode to use. Tonemapping is the process that "converts" HDR values to be suitable for rendering on a LDR display. (Godot doesn't support rendering on HDR displays yet.) 
float tonemap_white = 1.0
  void set_tonemap_white ( float value )
 
float get_tonemap_white ( )
  The white reference value for tonemapping (also called "whitepoint"). Higher values can make highlights look less blown out, and will also slightly darken the whole scene as a result. Only effective if the tonemap_mode isn't set to TONE_MAPPER_LINEAR. See also tonemap_exposure. 
Color volumetric_fog_albedo = Color(1, 1, 1, 1)
  void set_volumetric_fog_albedo ( Color value )
 
Color get_volumetric_fog_albedo ( )
  The Color of the volumetric fog when interacting with lights. Mist and fog have an albedo close to Color(1, 1, 1, 1) while smoke has a darker albedo. 
float volumetric_fog_ambient_inject = 0.0
  void set_volumetric_fog_ambient_inject ( float value )
 
float get_volumetric_fog_ambient_inject ( )
  Scales the strength of ambient light used in the volumetric fog. A value of 0.0 means that ambient light will not impact the volumetric fog. volumetric_fog_ambient_inject has a small performance cost when set above 0.0. Note: This has no visible effect if volumetric_fog_density is 0.0 or if volumetric_fog_albedo is a fully black color. 
float volumetric_fog_anisotropy = 0.2
  void set_volumetric_fog_anisotropy ( float value )
 
float get_volumetric_fog_anisotropy ( )
  The direction of scattered light as it goes through the volumetric fog. A value close to 1.0 means almost all light is scattered forward. A value close to 0.0 means light is scattered equally in all directions. A value close to -1.0 means light is scattered mostly backward. Fog and mist scatter light slightly forward, while smoke scatters light equally in all directions. 
float volumetric_fog_density = 0.05
  void set_volumetric_fog_density ( float value )
 
float get_volumetric_fog_density ( )
  The base exponential density of the volumetric fog. Set this to the lowest density you want to have globally. FogVolumes can be used to add to or subtract from this density in specific areas. Fog rendering is exponential as in real life. A value of 0.0 disables global volumetric fog while allowing FogVolumes to display volumetric fog in specific areas. To make volumetric fog work as a volumetric lighting solution, set volumetric_fog_density to the lowest non-zero value (0.0001) then increase lights' Light3D.light_volumetric_fog_energy to values between 10000 and 100000 to compensate for the very low density. 
float volumetric_fog_detail_spread = 2.0
  void set_volumetric_fog_detail_spread ( float value )
 
float get_volumetric_fog_detail_spread ( )
  The distribution of size down the length of the froxel buffer. A higher value compresses the froxels closer to the camera and places more detail closer to the camera. 
Color volumetric_fog_emission = Color(0, 0, 0, 1)
  void set_volumetric_fog_emission ( Color value )
 
Color get_volumetric_fog_emission ( )
  The emitted light from the volumetric fog. Even with emission, volumetric fog will not cast light onto other surfaces. Emission is useful to establish an ambient color. As the volumetric fog effect uses single-scattering only, fog tends to need a little bit of emission to soften the harsh shadows. 
float volumetric_fog_emission_energy = 1.0
  void set_volumetric_fog_emission_energy ( float value )
 
float get_volumetric_fog_emission_energy ( )
  The brightness of the emitted light from the volumetric fog. 
bool volumetric_fog_enabled = false
  void set_volumetric_fog_enabled ( bool value )
 
bool is_volumetric_fog_enabled ( )
  Enables the volumetric fog effect. Volumetric fog uses a screen-aligned froxel buffer to calculate accurate volumetric scattering in the short to medium range. Volumetric fog interacts with FogVolumes and lights to calculate localized and global fog. Volumetric fog uses a PBR single-scattering model based on extinction, scattering, and emission which it exposes to users as density, albedo, and emission. Note: Volumetric fog is only supported in the Forward+ rendering method, not Mobile or Compatibility. 
float volumetric_fog_gi_inject = 1.0
  void set_volumetric_fog_gi_inject ( float value )
 
float get_volumetric_fog_gi_inject ( )
  Scales the strength of Global Illumination used in the volumetric fog's albedo color. A value of 0.0 means that Global Illumination will not impact the volumetric fog. volumetric_fog_gi_inject has a small performance cost when set above 0.0. Note: This has no visible effect if volumetric_fog_density is 0.0 or if volumetric_fog_albedo is a fully black color. Note: Only VoxelGI and SDFGI (sdfgi_enabled) are taken into account when using volumetric_fog_gi_inject. Global illumination from LightmapGI, ReflectionProbe and SSIL (see ssil_enabled) will be ignored by volumetric fog. 
float volumetric_fog_length = 64.0
  void set_volumetric_fog_length ( float value )
 
float get_volumetric_fog_length ( )
  The distance over which the volumetric fog is computed. Increase to compute fog over a greater range, decrease to add more detail when a long range is not needed. For best quality fog, keep this as low as possible. See also ProjectSettings.rendering/environment/volumetric_fog/volume_depth. 
float volumetric_fog_sky_affect = 1.0
  void set_volumetric_fog_sky_affect ( float value )
 
float get_volumetric_fog_sky_affect ( )
  The factor to use when affecting the sky with volumetric fog. 1.0 means that volumetric fog can fully obscure the sky. Lower values reduce the impact of volumetric fog on sky rendering, with 0.0 not affecting sky rendering at all. Note: volumetric_fog_sky_affect also affects FogVolumes, even if volumetric_fog_density is 0.0. If you notice FogVolumes are disappearing when looking towards the sky, set volumetric_fog_sky_affect to 1.0. 
float volumetric_fog_temporal_reprojection_amount = 0.9
  void set_volumetric_fog_temporal_reprojection_amount ( float value )
 
float get_volumetric_fog_temporal_reprojection_amount ( )
  The amount by which to blend the last frame with the current frame. A higher number results in smoother volumetric fog, but makes "ghosting" much worse. A lower value reduces ghosting but can result in the per-frame temporal jitter becoming visible. 
bool volumetric_fog_temporal_reprojection_enabled = true
  void set_volumetric_fog_temporal_reprojection_enabled ( bool value )
 
bool is_volumetric_fog_temporal_reprojection_enabled ( )
  Enables temporal reprojection in the volumetric fog. Temporal reprojection blends the current frame's volumetric fog with the last frame's volumetric fog to smooth out jagged edges. The performance cost is minimal; however, it leads to moving FogVolumes and Light3Ds "ghosting" and leaving a trail behind them. When temporal reprojection is enabled, try to avoid moving FogVolumes or Light3Ds too fast. Short-lived dynamic lighting effects should have Light3D.light_volumetric_fog_energy set to 0.0 to avoid ghosting.   Method Descriptions 
float get_glow_level ( int idx ) const
 Returns the intensity of the glow level idx. void set_glow_level ( int idx, float intensity ) Sets the intensity of the glow level idx. A value above 0.0 enables the level. Each level relies on the previous level. This means that enabling higher glow levels will slow down the glow effect rendering, even if previous levels aren't enabled.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_environment.html


classes/class_navigationlink2d
-----------------------------------------------------------
NavigationLink2D Inherits: Node2D < CanvasItem < Node < Object A link between two positions on NavigationRegion2Ds that agents can be routed through.  Description A link between two positions on NavigationRegion2Ds that agents can be routed through. These positions can be on the same NavigationRegion2D or on two different ones. Links are useful to express navigation methods other than traveling along the surface of the navigation polygon, such as ziplines, teleporters, or gaps that can be jumped across.   Tutorials  Using NavigationLinks    Properties  
bool bidirectional true  
bool enabled true  
Vector2 end_position Vector2(0, 0)  
float enter_cost 0.0  
int navigation_layers 1  
Vector2 start_position Vector2(0, 0)  
float travel_cost 1.0     Methods  
Vector2 get_global_end_position ( ) const  
Vector2 get_global_start_position ( ) const  
bool get_navigation_layer_value ( int layer_number ) const  
RID get_rid ( ) const  
void set_global_end_position ( Vector2 position )  
void set_global_start_position ( Vector2 position )  
void set_navigation_layer_value ( int layer_number, bool value )     Property Descriptions 
bool bidirectional = true
  void set_bidirectional ( bool value )
 
bool is_bidirectional ( )
  Whether this link can be traveled in both directions or only from start_position to end_position. 
bool enabled = true
  void set_enabled ( bool value )
 
bool is_enabled ( )
  Whether this link is currently active. If false, NavigationServer2D.map_get_path will ignore this link. 
Vector2 end_position = Vector2(0, 0)
  void set_end_position ( Vector2 value )
 
Vector2 get_end_position ( )
  Ending position of the link. This position will search out the nearest polygon in the navigation mesh to attach to. The distance the link will search is controlled by NavigationServer2D.map_set_link_connection_radius. 
float enter_cost = 0.0
  void set_enter_cost ( float value )
 
float get_enter_cost ( )
  When pathfinding enters this link from another regions navigation mesh the enter_cost value is added to the path distance for determining the shortest path. 
int navigation_layers = 1
  void set_navigation_layers ( int value )
 
int get_navigation_layers ( )
  A bitfield determining all navigation layers the link belongs to. These navigation layers will be checked when requesting a path with NavigationServer2D.map_get_path. 
Vector2 start_position = Vector2(0, 0)
  void set_start_position ( Vector2 value )
 
Vector2 get_start_position ( )
  Starting position of the link. This position will search out the nearest polygon in the navigation mesh to attach to. The distance the link will search is controlled by NavigationServer2D.map_set_link_connection_radius. 
float travel_cost = 1.0
  void set_travel_cost ( float value )
 
float get_travel_cost ( )
  When pathfinding moves along the link the traveled distance is multiplied with travel_cost for determining the shortest path.   Method Descriptions 
Vector2 get_global_end_position ( ) const
 Returns the end_position that is relative to the link as a global position. 
Vector2 get_global_start_position ( ) const
 Returns the start_position that is relative to the link as a global position. 
bool get_navigation_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the navigation_layers bitmask is enabled, given a layer_number between 1 and 32. 
RID get_rid ( ) const
 Returns the RID of this link on the NavigationServer2D. void set_global_end_position ( Vector2 position ) Sets the end_position that is relative to the link from a global position. void set_global_start_position ( Vector2 position ) Sets the start_position that is relative to the link from a global position. void set_navigation_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the navigation_layers bitmask, given a layer_number between 1 and 32.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_navigationlink2d.html


classes/class_navigationlink3d
-----------------------------------------------------------
NavigationLink3D Inherits: Node3D < Node < Object A link between two positions on NavigationRegion3Ds that agents can be routed through.  Description A link between two positions on NavigationRegion3Ds that agents can be routed through. These positions can be on the same NavigationRegion3D or on two different ones. Links are useful to express navigation methods other than traveling along the surface of the navigation mesh, such as ziplines, teleporters, or gaps that can be jumped across.   Tutorials  Using NavigationLinks    Properties  
bool bidirectional true  
bool enabled true  
Vector3 end_position Vector3(0, 0, 0)  
float enter_cost 0.0  
int navigation_layers 1  
Vector3 start_position Vector3(0, 0, 0)  
float travel_cost 1.0     Methods  
Vector3 get_global_end_position ( ) const  
Vector3 get_global_start_position ( ) const  
bool get_navigation_layer_value ( int layer_number ) const  
RID get_rid ( ) const  
void set_global_end_position ( Vector3 position )  
void set_global_start_position ( Vector3 position )  
void set_navigation_layer_value ( int layer_number, bool value )     Property Descriptions 
bool bidirectional = true
  void set_bidirectional ( bool value )
 
bool is_bidirectional ( )
  Whether this link can be traveled in both directions or only from start_position to end_position. 
bool enabled = true
  void set_enabled ( bool value )
 
bool is_enabled ( )
  Whether this link is currently active. If false, NavigationServer3D.map_get_path will ignore this link. 
Vector3 end_position = Vector3(0, 0, 0)
  void set_end_position ( Vector3 value )
 
Vector3 get_end_position ( )
  Ending position of the link. This position will search out the nearest polygon in the navigation mesh to attach to. The distance the link will search is controlled by NavigationServer3D.map_set_link_connection_radius. 
float enter_cost = 0.0
  void set_enter_cost ( float value )
 
float get_enter_cost ( )
  When pathfinding enters this link from another regions navigation mesh the enter_cost value is added to the path distance for determining the shortest path. 
int navigation_layers = 1
  void set_navigation_layers ( int value )
 
int get_navigation_layers ( )
  A bitfield determining all navigation layers the link belongs to. These navigation layers will be checked when requesting a path with NavigationServer3D.map_get_path. 
Vector3 start_position = Vector3(0, 0, 0)
  void set_start_position ( Vector3 value )
 
Vector3 get_start_position ( )
  Starting position of the link. This position will search out the nearest polygon in the navigation mesh to attach to. The distance the link will search is controlled by NavigationServer3D.map_set_link_connection_radius. 
float travel_cost = 1.0
  void set_travel_cost ( float value )
 
float get_travel_cost ( )
  When pathfinding moves along the link the traveled distance is multiplied with travel_cost for determining the shortest path.   Method Descriptions 
Vector3 get_global_end_position ( ) const
 Returns the end_position that is relative to the link as a global position. 
Vector3 get_global_start_position ( ) const
 Returns the start_position that is relative to the link as a global position. 
bool get_navigation_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the navigation_layers bitmask is enabled, given a layer_number between 1 and 32. 
RID get_rid ( ) const
 Returns the RID of this link on the NavigationServer3D. void set_global_end_position ( Vector3 position ) Sets the end_position that is relative to the link from a global position. void set_global_start_position ( Vector3 position ) Sets the start_position that is relative to the link from a global position. void set_navigation_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the navigation_layers bitmask, given a layer_number between 1 and 32.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_navigationlink3d.html


classes/class_gltfspecgloss
-----------------------------------------------------------
GLTFSpecGloss Inherits: Resource < RefCounted < Object Archived GLTF extension for specular/glossy materials.  Description KHR_materials_pbrSpecularGlossiness is an archived GLTF extension. This means that it is deprecated and not recommended for new files. However, it is still supported for loading old files.   Tutorials  Runtime file loading and saving KHR_materials_pbrSpecularGlossiness GLTF extension spec    Properties  
Color diffuse_factor Color(1, 1, 1, 1)  
Image diffuse_img   
float gloss_factor 1.0  
Image spec_gloss_img   
Color specular_factor Color(1, 1, 1, 1)     Property Descriptions 
Color diffuse_factor = Color(1, 1, 1, 1)
  void set_diffuse_factor ( Color value )
 
Color get_diffuse_factor ( )
  The reflected diffuse factor of the material. 
Image diffuse_img  void set_diffuse_img ( Image value )
 
Image get_diffuse_img ( )
  The diffuse texture. 
float gloss_factor = 1.0
  void set_gloss_factor ( float value )
 
float get_gloss_factor ( )
  The glossiness or smoothness of the material. 
Image spec_gloss_img  void set_spec_gloss_img ( Image value )
 
Image get_spec_gloss_img ( )
  The specular-glossiness texture. 
Color specular_factor = Color(1, 1, 1, 1)
  void set_specular_factor ( Color value )
 
Color get_specular_factor ( )
  The specular RGB color of the material. The alpha channel is unused.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfspecgloss.html


classes/class_linkbutton
-----------------------------------------------------------
LinkButton Inherits: BaseButton < Control < CanvasItem < Node < Object A button that represents a link.  Description A button that represents a link. This type of button is primarily used for interactions that cause a context change (like linking to a web page). See also BaseButton which contains common properties and methods associated with this node.   Properties  
FocusMode focus_mode 0 (overrides Control)  
String language ""  
CursorShape mouse_default_cursor_shape 2 (overrides Control)  
StructuredTextParser structured_text_bidi_override 0  
Array structured_text_bidi_override_options []  
String text ""  
TextDirection text_direction 0  
UnderlineMode underline 0  
String uri ""     Theme Properties  
Color font_color Color(0.875, 0.875, 0.875, 1)  
Color font_disabled_color Color(0, 0, 0, 1)  
Color font_focus_color Color(0.95, 0.95, 0.95, 1)  
Color font_hover_color Color(0.95, 0.95, 0.95, 1)  
Color font_hover_pressed_color Color(0, 0, 0, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
Color font_pressed_color Color(1, 1, 1, 1)  
int outline_size 0  
int underline_spacing 2  
Font font   
int font_size   
StyleBox focus      Enumerations enum UnderlineMode: 
UnderlineMode UNDERLINE_MODE_ALWAYS = 0
 The LinkButton will always show an underline at the bottom of its text. 
UnderlineMode UNDERLINE_MODE_ON_HOVER = 1
 The LinkButton will show an underline at the bottom of its text when the mouse cursor is over it. 
UnderlineMode UNDERLINE_MODE_NEVER = 2
 The LinkButton will never show an underline at the bottom of its text.   Property Descriptions 
String language = ""
  void set_language ( String value )
 
String get_language ( )
  Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead. 
StructuredTextParser structured_text_bidi_override = 0
  void set_structured_text_bidi_override ( StructuredTextParser value )
 
StructuredTextParser get_structured_text_bidi_override ( )
  Set BiDi algorithm override for the structured text. 
Array structured_text_bidi_override_options = []
  void set_structured_text_bidi_override_options ( Array value )
 
Array get_structured_text_bidi_override_options ( )
  Set additional options for BiDi override. 
String text = ""
  void set_text ( String value )
 
String get_text ( )
  The button's text that will be displayed inside the button's area. 
TextDirection text_direction = 0
  void set_text_direction ( TextDirection value )
 
TextDirection get_text_direction ( )
  Base text writing direction. 
UnderlineMode underline = 0
  void set_underline_mode ( UnderlineMode value )
 
UnderlineMode get_underline_mode ( )
  The underline mode to use for the text. See UnderlineMode for the available modes. 
String uri = ""
  void set_uri ( String value )
 
String get_uri ( )
  The URI for this LinkButton. If set to a valid URI, pressing the button opens the URI using the operating system's default program for the protocol (via OS.shell_open). HTTP and HTTPS URLs open the default web browser. Examples:  GDScripturi = "https://godotengine.org"  # Opens the URL in the default web browser.
uri = "C:\SomeFolder"  # Opens the file explorer at the given path.
uri = "C:\SomeImage.png"  # Opens the given image in the default viewing app.
 C#Uri = "https://godotengine.org"; // Opens the URL in the default web browser.
Uri = "C:\SomeFolder"; // Opens the file explorer at the given path.
Uri = "C:\SomeImage.png"; // Opens the given image in the default viewing app.
    Theme Property Descriptions 
Color font_color = Color(0.875, 0.875, 0.875, 1)
 Default text Color of the LinkButton. 
Color font_disabled_color = Color(0, 0, 0, 1)
 Text Color used when the LinkButton is disabled. 
Color font_focus_color = Color(0.95, 0.95, 0.95, 1)
 Text Color used when the LinkButton is focused. Only replaces the normal text color of the button. Disabled, hovered, and pressed states take precedence over this color. 
Color font_hover_color = Color(0.95, 0.95, 0.95, 1)
 Text Color used when the LinkButton is being hovered. 
Color font_hover_pressed_color = Color(0, 0, 0, 1)
 Text Color used when the LinkButton is being hovered and pressed. 
Color font_outline_color = Color(1, 1, 1, 1)
 The tint of text outline of the LinkButton. 
Color font_pressed_color = Color(1, 1, 1, 1)
 Text Color used when the LinkButton is being pressed. 
int outline_size = 0
 The size of the text outline. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. 
int underline_spacing = 2
 The vertical space between the baseline of text and the underline. 
Font font Font of the LinkButton's text. 
int font_size Font size of the LinkButton's text. 
StyleBox focus StyleBox used when the LinkButton is focused. The focus StyleBox is displayed over the base StyleBox, so a partially transparent StyleBox should be used to ensure the base StyleBox remains visible. A StyleBox that represents an outline or an underline works well for this purpose. To disable the focus visual effect, assign a StyleBoxEmpty resource. Note that disabling the focus visual effect will harm keyboard/controller navigation usability, so this is not recommended for accessibility reasons.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_linkbutton.html


classes/class_sphereshape3d
-----------------------------------------------------------
SphereShape3D Inherits: Shape3D < Resource < RefCounted < Object A 3D sphere shape used for physics collision.  Description A 3D sphere shape, intended for use in physics. Usually used to provide a shape for a CollisionShape3D. Performance: SphereShape3D is fast to check collisions against. It is faster than BoxShape3D, CapsuleShape3D, and CylinderShape3D.   Tutorials  3D Physics Tests Demo    Properties  
float radius 0.5     Property Descriptions 
float radius = 0.5
  void set_radius ( float value )
 
float get_radius ( )
  The sphere's radius. The shape's diameter is double the radius.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_sphereshape3d.html


classes/class_path2d
-----------------------------------------------------------
Path2D Inherits: Node2D < CanvasItem < Node < Object Contains a Curve2D path for PathFollow2D nodes to follow.  Description Can have PathFollow2D child nodes moving along the Curve2D. See PathFollow2D for more information on usage. Note: The path is considered as relative to the moved nodes (children of PathFollow2D). As such, the curve should usually start with a zero vector ((0, 0)).   Properties  
Curve2D curve     Property Descriptions 
Curve2D curve  void set_curve ( Curve2D value )
 
Curve2D get_curve ( )
  A Curve2D describing the path.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_path2d.html


classes/class_translation
-----------------------------------------------------------
Translation Inherits: Resource < RefCounted < Object Inherited By: OptimizedTranslation A language translation that maps a collection of strings to their individual translations.  Description Translations are resources that can be loaded and unloaded on demand. They map a collection of strings to their individual translations, and they also provide convenience methods for pluralization.   Tutorials  Internationalizing games Locales    Properties  
String locale "en"     Methods  
StringName _get_message ( StringName src_message, StringName context ) virtual const  
StringName _get_plural_message ( StringName src_message, StringName src_plural_message, int n, StringName context ) virtual const  
void add_message ( StringName src_message, StringName xlated_message, StringName context="" )  
void add_plural_message ( StringName src_message, PackedStringArray xlated_messages, StringName context="" )  
void erase_message ( StringName src_message, StringName context="" )  
StringName get_message ( StringName src_message, StringName context="" ) const  
int get_message_count ( ) const  
PackedStringArray get_message_list ( ) const  
StringName get_plural_message ( StringName src_message, StringName src_plural_message, int n, StringName context="" ) const  
PackedStringArray get_translated_message_list ( ) const     Property Descriptions 
String locale = "en"
  void set_locale ( String value )
 
String get_locale ( )
  The locale of the translation.   Method Descriptions 
StringName _get_message ( StringName src_message, StringName context ) virtual const
 Virtual method to override get_message. 
StringName _get_plural_message ( StringName src_message, StringName src_plural_message, int n, StringName context ) virtual const
 Virtual method to override get_plural_message. void add_message ( StringName src_message, StringName xlated_message, StringName context="" ) Adds a message if nonexistent, followed by its translation. An additional context could be used to specify the translation context or differentiate polysemic words. void add_plural_message ( StringName src_message, PackedStringArray xlated_messages, StringName context="" ) Adds a message involving plural translation if nonexistent, followed by its translation. An additional context could be used to specify the translation context or differentiate polysemic words. void erase_message ( StringName src_message, StringName context="" ) Erases a message. 
StringName get_message ( StringName src_message, StringName context="" ) const
 Returns a message's translation. 
int get_message_count ( ) const
 Returns the number of existing messages. 
PackedStringArray get_message_list ( ) const
 Returns all the messages (keys). 
StringName get_plural_message ( StringName src_message, StringName src_plural_message, int n, StringName context="" ) const
 Returns a message's translation involving plurals. The number n is the number or quantity of the plural object. It will be used to guide the translation system to fetch the correct plural form for the selected language. 
PackedStringArray get_translated_message_list ( ) const
 Returns all the messages (translated text).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_translation.html


classes/class_collisionshape2d
-----------------------------------------------------------
CollisionShape2D Inherits: Node2D < CanvasItem < Node < Object A node that provides a Shape2D to a CollisionObject2D parent.  Description A node that provides a Shape2D to a CollisionObject2D parent and allows to edit it. This can give a detection shape to an Area2D or turn a PhysicsBody2D into a solid object.   Tutorials  Physics introduction 2D Dodge The Creeps Demo 2D Pong Demo 2D Kinematic Character Demo    Properties  
Color debug_color Color(0, 0, 0, 1)  
bool disabled false  
bool one_way_collision false  
float one_way_collision_margin 1.0  
Shape2D shape      Property Descriptions 
Color debug_color = Color(0, 0, 0, 1)
  void set_debug_color ( Color value )
 
Color get_debug_color ( )
  The collision shape debug color. Note: The default value is ProjectSettings.debug/shapes/collision/shape_color. The Color(0, 0, 0, 1) value documented here is a placeholder, and not the actual default debug color. 
bool disabled = false
  void set_disabled ( bool value )
 
bool is_disabled ( )
  A disabled collision shape has no effect in the world. This property should be changed with Object.set_deferred. 
bool one_way_collision = false
  void set_one_way_collision ( bool value )
 
bool is_one_way_collision_enabled ( )
  Sets whether this collision shape should only detect collision on one side (top or bottom). Note: This property has no effect if this CollisionShape2D is a child of an Area2D node. 
float one_way_collision_margin = 1.0
  void set_one_way_collision_margin ( float value )
 
float get_one_way_collision_margin ( )
  The margin used for one-way collision (in pixels). Higher values will make the shape thicker, and work better for colliders that enter the shape at a high velocity. 
Shape2D shape  void set_shape ( Shape2D value )
 
Shape2D get_shape ( )
  The actual shape owned by this collision shape.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_collisionshape2d.html


classes/class_skeletonmodification2dlookat
-----------------------------------------------------------
SkeletonModification2DLookAt Inherits: SkeletonModification2D < Resource < RefCounted < Object A modification that rotates a Bone2D node to look at a target.  Description This SkeletonModification2D rotates a bone to look a target. This is extremely helpful for moving character's head to look at the player, rotating a turret to look at a target, or any other case where you want to make a bone rotate towards something quickly and easily.   Properties  
NodePath bone2d_node NodePath("")  
int bone_index -1  
NodePath target_nodepath NodePath("")     Methods  
float get_additional_rotation ( ) const  
bool get_constraint_angle_invert ( ) const  
float get_constraint_angle_max ( ) const  
float get_constraint_angle_min ( ) const  
bool get_enable_constraint ( ) const  
void set_additional_rotation ( float rotation )  
void set_constraint_angle_invert ( bool invert )  
void set_constraint_angle_max ( float angle_max )  
void set_constraint_angle_min ( float angle_min )  
void set_enable_constraint ( bool enable_constraint )     Property Descriptions 
NodePath bone2d_node = NodePath("")
  void set_bone2d_node ( NodePath value )
 
NodePath get_bone2d_node ( )
  The Bone2D node that the modification will operate on. 
int bone_index = -1
  void set_bone_index ( int value )
 
int get_bone_index ( )
  The index of the Bone2D node that the modification will operate on. 
NodePath target_nodepath = NodePath("")
  void set_target_node ( NodePath value )
 
NodePath get_target_node ( )
  The NodePath to the node that is the target for the LookAt modification. This node is what the modification will rotate the Bone2D to.   Method Descriptions 
float get_additional_rotation ( ) const
 Returns the amount of additional rotation that is applied after the LookAt modification executes. 
bool get_constraint_angle_invert ( ) const
 Returns whether the constraints to this modification are inverted or not. 
float get_constraint_angle_max ( ) const
 Returns the constraint's maximum allowed angle. 
float get_constraint_angle_min ( ) const
 Returns the constraint's minimum allowed angle. 
bool get_enable_constraint ( ) const
 Returns true if the LookAt modification is using constraints. void set_additional_rotation ( float rotation ) Sets the amount of additional rotation that is to be applied after executing the modification. This allows for offsetting the results by the inputted rotation amount. void set_constraint_angle_invert ( bool invert ) When true, the modification will use an inverted joint constraint. An inverted joint constraint only constraints the Bone2D to the angles outside of the inputted minimum and maximum angles. For this reason, it is referred to as an inverted joint constraint, as it constraints the joint to the outside of the inputted values. void set_constraint_angle_max ( float angle_max ) Sets the constraint's maximum allowed angle. void set_constraint_angle_min ( float angle_min ) Sets the constraint's minimum allowed angle. void set_enable_constraint ( bool enable_constraint ) Sets whether this modification will use constraints or not. When true, constraints will be applied when solving the LookAt modification.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeletonmodification2dlookat.html


classes/class_texture3d
-----------------------------------------------------------
Texture3D Inherits: Texture < Resource < RefCounted < Object Inherited By: CompressedTexture3D, ImageTexture3D, NoiseTexture3D, PlaceholderTexture3D, Texture3DRD Base class for 3-dimensional textures.  Description Base class for ImageTexture3D and CompressedTexture3D. Cannot be used directly, but contains all the functions necessary for accessing the derived resource types. Texture3D is the base class for all 3-dimensional texture types. See also TextureLayered. All images need to have the same width, height and number of mipmap levels. To create such a texture file yourself, reimport your image files using the Godot Editor import presets.   Methods  
Image[] _get_data ( ) virtual const  
int _get_depth ( ) virtual const  
Format _get_format ( ) virtual const  
int _get_height ( ) virtual const  
int _get_width ( ) virtual const  
bool _has_mipmaps ( ) virtual const  
Resource create_placeholder ( ) const  
Image[] get_data ( ) const  
int get_depth ( ) const  
Format get_format ( ) const  
int get_height ( ) const  
int get_width ( ) const  
bool has_mipmaps ( ) const     Method Descriptions 
Image[] _get_data ( ) virtual const
 Called when the Texture3D's data is queried. 
int _get_depth ( ) virtual const
 Called when the Texture3D's depth is queried. 
Format _get_format ( ) virtual const
 Called when the Texture3D's format is queried. 
int _get_height ( ) virtual const
 Called when the Texture3D's height is queried. 
int _get_width ( ) virtual const
 Called when the Texture3D's width is queried. 
bool _has_mipmaps ( ) virtual const
 Called when the presence of mipmaps in the Texture3D is queried. 
Resource create_placeholder ( ) const
 Creates a placeholder version of this resource (PlaceholderTexture3D). 
Image[] get_data ( ) const
 Returns the Texture3D's data as an array of Images. Each Image represents a slice of the Texture3D, with different slices mapping to different depth (Z axis) levels. 
int get_depth ( ) const
 Returns the Texture3D's depth in pixels. Depth is typically represented by the Z axis (a dimension not present in Texture2D). 
Format get_format ( ) const
 Returns the current format being used by this texture. See Format for details. 
int get_height ( ) const
 Returns the Texture3D's height in pixels. Width is typically represented by the Y axis. 
int get_width ( ) const
 Returns the Texture3D's width in pixels. Width is typically represented by the X axis. 
bool has_mipmaps ( ) const
 Returns true if the Texture3D has generated mipmaps.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texture3d.html


classes/class_staticbody2d
-----------------------------------------------------------
StaticBody2D Inherits: PhysicsBody2D < CollisionObject2D < Node2D < CanvasItem < Node < Object Inherited By: AnimatableBody2D A 2D physics body that can't be moved by external forces. When moved manually, it doesn't affect other bodies in its path.  Description A static 2D physics body. It can't be moved by external forces or contacts, but can be moved manually by other means such as code, AnimationMixers (with AnimationMixer.callback_mode_process set to AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS), and RemoteTransform2D. When StaticBody2D is moved, it is teleported to its new position without affecting other physics bodies in its path. If this is not desired, use AnimatableBody2D instead. StaticBody2D is useful for completely static objects like floors and walls, as well as moving surfaces like conveyor belts and circular revolving platforms (by using constant_linear_velocity and constant_angular_velocity).   Properties  
float constant_angular_velocity 0.0  
Vector2 constant_linear_velocity Vector2(0, 0)  
PhysicsMaterial physics_material_override      Property Descriptions 
float constant_angular_velocity = 0.0
  void set_constant_angular_velocity ( float value )
 
float get_constant_angular_velocity ( )
  The body's constant angular velocity. This does not rotate the body, but affects touching bodies, as if it were rotating. 
Vector2 constant_linear_velocity = Vector2(0, 0)
  void set_constant_linear_velocity ( Vector2 value )
 
Vector2 get_constant_linear_velocity ( )
  The body's constant linear velocity. This does not move the body, but affects touching bodies, as if it were moving. 
PhysicsMaterial physics_material_override  void set_physics_material_override ( PhysicsMaterial value )
 
PhysicsMaterial get_physics_material_override ( )
  The physics material override for the body. If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_staticbody2d.html


classes/class_curve
-----------------------------------------------------------
Curve Inherits: Resource < RefCounted < Object A mathematical curve.  Description This resource describes a mathematical curve by defining a set of points and tangents at each point. By default, it ranges between 0 and 1 on the Y axis and positions points relative to the 0.5 Y position. See also Gradient which is designed for color interpolation. See also Curve2D and Curve3D.   Properties  
int bake_resolution 100  
float max_value 1.0  
float min_value 0.0  
int point_count 0     Methods  
int add_point ( Vector2 position, float left_tangent=0, float right_tangent=0, TangentMode left_mode=0, TangentMode right_mode=0 )  
void bake ( )  
void clean_dupes ( )  
void clear_points ( )  
TangentMode get_point_left_mode ( int index ) const  
float get_point_left_tangent ( int index ) const  
Vector2 get_point_position ( int index ) const  
TangentMode get_point_right_mode ( int index ) const  
float get_point_right_tangent ( int index ) const  
void remove_point ( int index )  
float sample ( float offset ) const  
float sample_baked ( float offset ) const  
void set_point_left_mode ( int index, TangentMode mode )  
void set_point_left_tangent ( int index, float tangent )  
int set_point_offset ( int index, float offset )  
void set_point_right_mode ( int index, TangentMode mode )  
void set_point_right_tangent ( int index, float tangent )  
void set_point_value ( int index, float y )     Signals range_changed ( ) Emitted when max_value or min_value is changed.   Enumerations enum TangentMode: 
TangentMode TANGENT_FREE = 0
 The tangent on this side of the point is user-defined. 
TangentMode TANGENT_LINEAR = 1
 The curve calculates the tangent on this side of the point as the slope halfway towards the adjacent point. 
TangentMode TANGENT_MODE_COUNT = 2
 The total number of available tangent modes.   Property Descriptions 
int bake_resolution = 100
  void set_bake_resolution ( int value )
 
int get_bake_resolution ( )
  The number of points to include in the baked (i.e. cached) curve data. 
float max_value = 1.0
  void set_max_value ( float value )
 
float get_max_value ( )
  The maximum value the curve can reach. 
float min_value = 0.0
  void set_min_value ( float value )
 
float get_min_value ( )
  The minimum value the curve can reach. 
int point_count = 0
  void set_point_count ( int value )
 
int get_point_count ( )
  The number of points describing the curve.   Method Descriptions 
int add_point ( Vector2 position, float left_tangent=0, float right_tangent=0, TangentMode left_mode=0, TangentMode right_mode=0 ) Adds a point to the curve. For each side, if the *_mode is TANGENT_LINEAR, the *_tangent angle (in degrees) uses the slope of the curve halfway to the adjacent point. Allows custom assignments to the *_tangent angle if *_mode is set to TANGENT_FREE. void bake ( ) Recomputes the baked cache of points for the curve. void clean_dupes ( ) Removes duplicate points, i.e. points that are less than 0.00001 units (engine epsilon value) away from their neighbor on the curve. void clear_points ( ) Removes all points from the curve. 
TangentMode get_point_left_mode ( int index ) const
 Returns the left TangentMode for the point at index. 
float get_point_left_tangent ( int index ) const
 Returns the left tangent angle (in degrees) for the point at index. 
Vector2 get_point_position ( int index ) const
 Returns the curve coordinates for the point at index. 
TangentMode get_point_right_mode ( int index ) const
 Returns the right TangentMode for the point at index. 
float get_point_right_tangent ( int index ) const
 Returns the right tangent angle (in degrees) for the point at index. void remove_point ( int index ) Removes the point at index from the curve. 
float sample ( float offset ) const
 Returns the Y value for the point that would exist at the X position offset along the curve. 
float sample_baked ( float offset ) const
 Returns the Y value for the point that would exist at the X position offset along the curve using the baked cache. Bakes the curve's points if not already baked. void set_point_left_mode ( int index, TangentMode mode ) Sets the left TangentMode for the point at index to mode. void set_point_left_tangent ( int index, float tangent ) Sets the left tangent angle for the point at index to tangent. 
int set_point_offset ( int index, float offset ) Sets the offset from 0.5. void set_point_right_mode ( int index, TangentMode mode ) Sets the right TangentMode for the point at index to mode. void set_point_right_tangent ( int index, float tangent ) Sets the right tangent angle for the point at index to tangent. void set_point_value ( int index, float y ) Assigns the vertical position y to the point at index.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_curve.html


classes/class_editorplugin
-----------------------------------------------------------
EditorPlugin Inherits: Node < Object Used by the editor to extend its functionality.  Description Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins. See also EditorScript to add functions to the editor. Note: Some names in this class contain "left" or "right" (e.g. DOCK_SLOT_LEFT_UL). These APIs assume left-to-right layout, and would be backwards when using right-to-left layout. These names are kept for compatibility reasons.   Tutorials  Editor plugins documentation index    Methods  
void _apply_changes ( ) virtual  
bool _build ( ) virtual  
void _clear ( ) virtual  
void _disable_plugin ( ) virtual  
void _edit ( Object object ) virtual  
void _enable_plugin ( ) virtual  
void _forward_3d_draw_over_viewport ( Control viewport_control ) virtual  
void _forward_3d_force_draw_over_viewport ( Control viewport_control ) virtual  
int _forward_3d_gui_input ( Camera3D viewport_camera, InputEvent event ) virtual  
void _forward_canvas_draw_over_viewport ( Control viewport_control ) virtual  
void _forward_canvas_force_draw_over_viewport ( Control viewport_control ) virtual  
bool _forward_canvas_gui_input ( InputEvent event ) virtual  
PackedStringArray _get_breakpoints ( ) virtual const  
Texture2D _get_plugin_icon ( ) virtual const  
String _get_plugin_name ( ) virtual const  
Dictionary _get_state ( ) virtual const  
String _get_unsaved_status ( String for_scene ) virtual const  
void _get_window_layout ( ConfigFile configuration ) virtual  
bool _handles ( Object object ) virtual const  
bool _has_main_screen ( ) virtual const  
void _make_visible ( bool visible ) virtual  
void _save_external_data ( ) virtual  
void _set_state ( Dictionary state ) virtual  
void _set_window_layout ( ConfigFile configuration ) virtual  
void add_autoload_singleton ( String name, String path )  
Button add_control_to_bottom_panel ( Control control, String title )  
void add_control_to_container ( CustomControlContainer container, Control control )  
void add_control_to_dock ( DockSlot slot, Control control )  
void add_custom_type ( String type, String base, Script script, Texture2D icon )  
void add_debugger_plugin ( EditorDebuggerPlugin script )  
void add_export_plugin ( EditorExportPlugin plugin )  
void add_import_plugin ( EditorImportPlugin importer, bool first_priority=false )  
void add_inspector_plugin ( EditorInspectorPlugin plugin )  
void add_node_3d_gizmo_plugin ( EditorNode3DGizmoPlugin plugin )  
void add_resource_conversion_plugin ( EditorResourceConversionPlugin plugin )  
void add_scene_format_importer_plugin ( EditorSceneFormatImporter scene_format_importer, bool first_priority=false )  
void add_scene_post_import_plugin ( EditorScenePostImportPlugin scene_import_plugin, bool first_priority=false )  
void add_tool_menu_item ( String name, Callable callable )  
void add_tool_submenu_item ( String name, PopupMenu submenu )  
void add_translation_parser_plugin ( EditorTranslationParserPlugin parser )  
void add_undo_redo_inspector_hook_callback ( Callable callable )  
EditorInterface get_editor_interface ( )  
PopupMenu get_export_as_menu ( )  
String get_plugin_version ( ) const  
ScriptCreateDialog get_script_create_dialog ( )  
EditorUndoRedoManager get_undo_redo ( )  
void hide_bottom_panel ( )  
void make_bottom_panel_item_visible ( Control item )  
void queue_save_layout ( )  
void remove_autoload_singleton ( String name )  
void remove_control_from_bottom_panel ( Control control )  
void remove_control_from_container ( CustomControlContainer container, Control control )  
void remove_control_from_docks ( Control control )  
void remove_custom_type ( String type )  
void remove_debugger_plugin ( EditorDebuggerPlugin script )  
void remove_export_plugin ( EditorExportPlugin plugin )  
void remove_import_plugin ( EditorImportPlugin importer )  
void remove_inspector_plugin ( EditorInspectorPlugin plugin )  
void remove_node_3d_gizmo_plugin ( EditorNode3DGizmoPlugin plugin )  
void remove_resource_conversion_plugin ( EditorResourceConversionPlugin plugin )  
void remove_scene_format_importer_plugin ( EditorSceneFormatImporter scene_format_importer )  
void remove_scene_post_import_plugin ( EditorScenePostImportPlugin scene_import_plugin )  
void remove_tool_menu_item ( String name )  
void remove_translation_parser_plugin ( EditorTranslationParserPlugin parser )  
void remove_undo_redo_inspector_hook_callback ( Callable callable )  
void set_force_draw_over_forwarding_enabled ( )  
void set_input_event_forwarding_always_enabled ( )  
int update_overlays ( ) const     Signals main_screen_changed ( String screen_name ) Emitted when user changes the workspace (2D, 3D, Script, AssetLib). Also works with custom screens defined by plugins. project_settings_changed ( ) Emitted when any project setting has changed. Deprecated. Use ProjectSettings.settings_changed instead. resource_saved ( Resource resource ) Emitted when the given resource was saved on disc. scene_changed ( Node scene_root ) Emitted when the scene is changed in the editor. The argument will return the root node of the scene that has just become active. If this scene is new and empty, the argument will be null. scene_closed ( String filepath ) Emitted when user closes a scene. The argument is file path to a closed scene.   Enumerations enum CustomControlContainer: 
CustomControlContainer CONTAINER_TOOLBAR = 0
 Main editor toolbar, next to play buttons. 
CustomControlContainer CONTAINER_SPATIAL_EDITOR_MENU = 1
 The toolbar that appears when 3D editor is active. 
CustomControlContainer CONTAINER_SPATIAL_EDITOR_SIDE_LEFT = 2
 Left sidebar of the 3D editor. 
CustomControlContainer CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT = 3
 Right sidebar of the 3D editor. 
CustomControlContainer CONTAINER_SPATIAL_EDITOR_BOTTOM = 4
 Bottom panel of the 3D editor. 
CustomControlContainer CONTAINER_CANVAS_EDITOR_MENU = 5
 The toolbar that appears when 2D editor is active. 
CustomControlContainer CONTAINER_CANVAS_EDITOR_SIDE_LEFT = 6
 Left sidebar of the 2D editor. 
CustomControlContainer CONTAINER_CANVAS_EDITOR_SIDE_RIGHT = 7
 Right sidebar of the 2D editor. 
CustomControlContainer CONTAINER_CANVAS_EDITOR_BOTTOM = 8
 Bottom panel of the 2D editor. 
CustomControlContainer CONTAINER_INSPECTOR_BOTTOM = 9
 Bottom section of the inspector. 
CustomControlContainer CONTAINER_PROJECT_SETTING_TAB_LEFT = 10
 Tab of Project Settings dialog, to the left of other tabs. 
CustomControlContainer CONTAINER_PROJECT_SETTING_TAB_RIGHT = 11
 Tab of Project Settings dialog, to the right of other tabs. enum DockSlot: 
DockSlot DOCK_SLOT_LEFT_UL = 0
 Dock slot, left side, upper-left (empty in default layout). 
DockSlot DOCK_SLOT_LEFT_BL = 1
 Dock slot, left side, bottom-left (empty in default layout). 
DockSlot DOCK_SLOT_LEFT_UR = 2
 Dock slot, left side, upper-right (in default layout includes Scene and Import docks). 
DockSlot DOCK_SLOT_LEFT_BR = 3
 Dock slot, left side, bottom-right (in default layout includes FileSystem dock). 
DockSlot DOCK_SLOT_RIGHT_UL = 4
 Dock slot, right side, upper-left (in default layout includes Inspector, Node, and History docks). 
DockSlot DOCK_SLOT_RIGHT_BL = 5
 Dock slot, right side, bottom-left (empty in default layout). 
DockSlot DOCK_SLOT_RIGHT_UR = 6
 Dock slot, right side, upper-right (empty in default layout). 
DockSlot DOCK_SLOT_RIGHT_BR = 7
 Dock slot, right side, bottom-right (empty in default layout). 
DockSlot DOCK_SLOT_MAX = 8
 Represents the size of the DockSlot enum. enum AfterGUIInput: 
AfterGUIInput AFTER_GUI_INPUT_PASS = 0
 Forwards the InputEvent to other EditorPlugins. 
AfterGUIInput AFTER_GUI_INPUT_STOP = 1
 Prevents the InputEvent from reaching other Editor classes. 
AfterGUIInput AFTER_GUI_INPUT_CUSTOM = 2
 Pass the InputEvent to other editor plugins except the main Node3D one. This can be used to prevent node selection changes and work with sub-gizmos instead.   Method Descriptions void _apply_changes ( ) virtual
 This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency. This is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object. 
bool _build ( ) virtual
 This method is called when the editor is about to run the project. The plugin can then perform required operations before the project runs. This method must return a boolean. If this method returns false, the project will not run. The run is aborted immediately, so this also prevents all other plugins' _build methods from running. void _clear ( ) virtual
 Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene. void _disable_plugin ( ) virtual
 Called by the engine when the user disables the EditorPlugin in the Plugin tab of the project settings window. void _edit ( Object object ) virtual
 This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object. object can be null if the plugin was editing an object, but there is no longer any selected object handled by this plugin. It can be used to cleanup editing state. void _enable_plugin ( ) virtual
 Called by the engine when the user enables the EditorPlugin in the Plugin tab of the project settings window. void _forward_3d_draw_over_viewport ( Control viewport_control ) virtual
 Called by the engine when the 3D editor's viewport is updated. Use the overlay Control for drawing. You can update the viewport manually by calling update_overlays.  GDScriptfunc _forward_3d_draw_over_viewport(overlay):
    # Draw a circle at cursor position.
    overlay.draw_circle(overlay.get_local_mouse_position(), 64)
func _forward_3d_gui_input(camera, event):
    if event is InputEventMouseMotion:
        # Redraw viewport when cursor is moved.
        update_overlays()
        return EditorPlugin.AFTER_GUI_INPUT_STOP
    return EditorPlugin.AFTER_GUI_INPUT_PASS
 C#public override void _Forward3DDrawOverViewport(Control viewportControl)
{
    // Draw a circle at cursor position.
    viewportControl.DrawCircle(viewportControl.GetLocalMousePosition(), 64, Colors.White);
}
public override EditorPlugin.AfterGuiInput _Forward3DGuiInput(Camera3D viewportCamera, InputEvent @event)
{
    if (@event is InputEventMouseMotion)
    {
        // Redraw viewport when cursor is moved.
        UpdateOverlays();
        return EditorPlugin.AfterGuiInput.Stop;
    }
    return EditorPlugin.AfterGuiInput.Pass;
}
  void _forward_3d_force_draw_over_viewport ( Control viewport_control ) virtual
 This method is the same as _forward_3d_draw_over_viewport, except it draws on top of everything. Useful when you need an extra layer that shows over anything else. You need to enable calling of this method by using set_force_draw_over_forwarding_enabled. 
int _forward_3d_gui_input ( Camera3D viewport_camera, InputEvent event ) virtual
 Called when there is a root node in the current edited scene, _handles is implemented, and an InputEvent happens in the 3D viewport. The return value decides whether the InputEvent is consumed or forwarded to other EditorPlugins. See AfterGUIInput for options. Example:  GDScript# Prevents the InputEvent from reaching other Editor classes.
func _forward_3d_gui_input(camera, event):
    return EditorPlugin.AFTER_GUI_INPUT_STOP
 C#// Prevents the InputEvent from reaching other Editor classes.
public override EditorPlugin.AfterGuiInput _Forward3DGuiInput(Camera3D camera, InputEvent @event)
{
    return EditorPlugin.AfterGuiInput.Stop;
}
  Must return EditorPlugin.AFTER_GUI_INPUT_PASS in order to forward the InputEvent to other Editor classes. Example:  GDScript# Consumes InputEventMouseMotion and forwards other InputEvent types.
func _forward_3d_gui_input(camera, event):
    return EditorPlugin.AFTER_GUI_INPUT_STOP if event is InputEventMouseMotion else EditorPlugin.AFTER_GUI_INPUT_PASS
 C#// Consumes InputEventMouseMotion and forwards other InputEvent types.
public override EditorPlugin.AfterGuiInput _Forward3DGuiInput(Camera3D camera, InputEvent @event)
{
    return @event is InputEventMouseMotion ? EditorPlugin.AfterGuiInput.Stop : EditorPlugin.AfterGuiInput.Pass;
}
  void _forward_canvas_draw_over_viewport ( Control viewport_control ) virtual
 Called by the engine when the 2D editor's viewport is updated. Use the overlay Control for drawing. You can update the viewport manually by calling update_overlays.  GDScriptfunc _forward_canvas_draw_over_viewport(overlay):
    # Draw a circle at cursor position.
    overlay.draw_circle(overlay.get_local_mouse_position(), 64, Color.WHITE)
func _forward_canvas_gui_input(event):
    if event is InputEventMouseMotion:
        # Redraw viewport when cursor is moved.
        update_overlays()
        return true
    return false
 C#public override void _ForwardCanvasDrawOverViewport(Control viewportControl)
{
    // Draw a circle at cursor position.
    viewportControl.DrawCircle(viewportControl.GetLocalMousePosition(), 64, Colors.White);
}
public override bool _ForwardCanvasGuiInput(InputEvent @event)
{
    if (@event is InputEventMouseMotion)
    {
        // Redraw viewport when cursor is moved.
        UpdateOverlays();
        return true;
    }
    return false;
}
  void _forward_canvas_force_draw_over_viewport ( Control viewport_control ) virtual
 This method is the same as _forward_canvas_draw_over_viewport, except it draws on top of everything. Useful when you need an extra layer that shows over anything else. You need to enable calling of this method by using set_force_draw_over_forwarding_enabled. 
bool _forward_canvas_gui_input ( InputEvent event ) virtual
 Called when there is a root node in the current edited scene, _handles is implemented and an InputEvent happens in the 2D viewport. Intercepts the InputEvent, if return true EditorPlugin consumes the event, otherwise forwards event to other Editor classes. Example:  GDScript# Prevents the InputEvent from reaching other Editor classes.
func _forward_canvas_gui_input(event):
    return true
 C#// Prevents the InputEvent from reaching other Editor classes.
public override bool ForwardCanvasGuiInput(InputEvent @event)
{
    return true;
}
  Must return false in order to forward the InputEvent to other Editor classes. Example:  GDScript# Consumes InputEventMouseMotion and forwards other InputEvent types.
func _forward_canvas_gui_input(event):
    if (event is InputEventMouseMotion):
        return true
    return false
 C#// Consumes InputEventMouseMotion and forwards other InputEvent types.
public override bool _ForwardCanvasGuiInput(InputEvent @event)
{
    if (@event is InputEventMouseMotion)
    {
        return true;
    }
    return false;
}
  
PackedStringArray _get_breakpoints ( ) virtual const
 This is for editors that edit script-based objects. You can return a list of breakpoints in the format (script:line), for example: res://path_to_script.gd:25. 
Texture2D _get_plugin_icon ( ) virtual const
 Override this method in your plugin to return a Texture2D in order to give it an icon. For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", and "AssetLib" buttons. Ideally, the plugin icon should be white with a transparent background and 16x16 pixels in size.  GDScriptfunc _get_plugin_icon():
    # You can use a custom icon:
    return preload("res://addons/my_plugin/my_plugin_icon.svg")
    # Or use a built-in icon:
    return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")
 C#public override Texture2D _GetPluginIcon()
{
    // You can use a custom icon:
    return ResourceLoader.Load<Texture2D>("res://addons/my_plugin/my_plugin_icon.svg");
    // Or use a built-in icon:
    return EditorInterface.Singleton.GetEditorTheme().GetIcon("Node", "EditorIcons");
}
  
String _get_plugin_name ( ) virtual const
 Override this method in your plugin to provide the name of the plugin when displayed in the Godot editor. For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", and "AssetLib" buttons. 
Dictionary _get_state ( ) virtual const
 Override this method to provide a state data you want to be saved, like view position, grid settings, folding, etc. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns). This data is automatically saved for each scene in an editstate file in the editor metadata folder. If you want to store global (scene-independent) editor data for your plugin, you can use _get_window_layout instead. Use _set_state to restore your saved state. Note: This method should not be used to save important settings that should persist with the project. Note: You must implement _get_plugin_name for the state to be stored and restored correctly. func _get_state():
    var state = {"zoom": zoom, "preferred_color": my_color}
    return state
 
String _get_unsaved_status ( String for_scene ) virtual const
 Override this method to provide a custom message that lists unsaved changes. The editor will call this method when exiting or when closing a scene, and display the returned string in a confirmation dialog. Return empty string if the plugin has no unsaved changes. When closing a scene, for_scene is the path to the scene being closed. You can use it to handle built-in resources in that scene. If the user confirms saving, _save_external_data will be called, before closing the editor. func _get_unsaved_status(for_scene):
    if not unsaved:
        return ""
    if for_scene.is_empty():
        return "Save changes in MyCustomPlugin before closing?"
    else:
        return "Scene %s has changes from MyCustomPlugin. Save before closing?" % for_scene.get_file()
func _save_external_data():
    unsaved = false
 If the plugin has no scene-specific changes, you can ignore the calls when closing scenes: func _get_unsaved_status(for_scene):
    if not for_scene.is_empty():
        return ""
 void _get_window_layout ( ConfigFile configuration ) virtual
 Override this method to provide the GUI layout of the plugin or any other data you want to be stored. This is used to save the project's editor layout when queue_save_layout is called or the editor layout was changed (for example changing the position of a dock). The data is stored in the editor_layout.cfg file in the editor metadata directory. Use _set_window_layout to restore your saved layout. func _get_window_layout(configuration):
    configuration.set_value("MyPlugin", "window_position", $Window.position)
    configuration.set_value("MyPlugin", "icon_color", $Icon.modulate)
 
bool _handles ( Object object ) virtual const
 Implement this function if your plugin edits a specific type of object (Resource or Node). If you return true, then you will get the functions _edit and _make_visible called when the editor requests them. If you have declared the methods _forward_canvas_gui_input and _forward_3d_gui_input these will be called too. Note: Each plugin should handle only one type of objects at a time. If a plugin handles more types of objects and they are edited at the same time, it will result in errors. 
bool _has_main_screen ( ) virtual const
 Returns true if this is a main screen editor plugin (it goes in the workspace selector together with 2D, 3D, Script and AssetLib). When the plugin's workspace is selected, other main screen plugins will be hidden, but your plugin will not appear automatically. It needs to be added as a child of EditorInterface.get_base_control and made visible inside _make_visible. Use _get_plugin_name and _get_plugin_icon to customize the plugin button's appearance. var plugin_control
func _enter_tree():
    plugin_control = preload("my_plugin_control.tscn").instantiate()
    EditorInterface.get_editor_main_screen().add_child(plugin_control)
    plugin_control.hide()
func _has_main_screen():
    return true
func _make_visible(visible):
    plugin_control.visible = visible
func _get_plugin_name():
    return "My Super Cool Plugin 3000"
func _get_plugin_icon():
    return EditorInterface.get_editor_theme().get_icon("Node", "EditorIcons")
 void _make_visible ( bool visible ) virtual
 This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type. Remember that you have to manage the visibility of all your editor controls manually. void _save_external_data ( ) virtual
 This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources. void _set_state ( Dictionary state ) virtual
 Restore the state saved by _get_state. This method is called when the current scene tab is changed in the editor. Note: Your plugin must implement _get_plugin_name, otherwise it will not be recognized and this method will not be called. func _set_state(data):
    zoom = data.get("zoom", 1.0)
    preferred_color = data.get("my_color", Color.WHITE)
 void _set_window_layout ( ConfigFile configuration ) virtual
 Restore the plugin GUI layout and data saved by _get_window_layout. This method is called for every plugin on editor startup. Use the provided configuration file to read your saved data. func _set_window_layout(configuration):
    $Window.position = configuration.get_value("MyPlugin", "window_position", Vector2())
    $Icon.modulate = configuration.get_value("MyPlugin", "icon_color", Color.WHITE)
 void add_autoload_singleton ( String name, String path ) Adds a script at path to the Autoload list as name. 
Button add_control_to_bottom_panel ( Control control, String title ) Adds a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. When your plugin is deactivated, make sure to remove your custom control with remove_control_from_bottom_panel and free it with Node.queue_free. void add_control_to_container ( CustomControlContainer container, Control control ) Adds a custom control to a container (see CustomControlContainer). There are many locations where custom controls can be added in the editor UI. Please remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it). When your plugin is deactivated, make sure to remove your custom control with remove_control_from_container and free it with Node.queue_free. void add_control_to_dock ( DockSlot slot, Control control ) Adds the control to a specific dock slot (see DockSlot for options). If the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions. When your plugin is deactivated, make sure to remove your custom control with remove_control_from_docks and free it with Node.queue_free. void add_custom_type ( String type, String base, Script script, Texture2D icon ) Adds a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed. When a given node or resource is selected, the base type will be instantiated (e.g. "Node3D", "Control", "Resource"), then the script will be loaded and set to this object. Note: The base type is the base engine class which this type's class hierarchy inherits, not any custom type parent classes. You can use the virtual method _handles to check if your custom object is being edited by checking the script or using the is keyword. During run-time, this will be a simple object with a script so this function does not need to be called then. Note: Custom types added this way are not true classes. They are just a helper to create a node with specific script. void add_debugger_plugin ( EditorDebuggerPlugin script ) Adds a Script as debugger plugin to the Debugger. The script must extend EditorDebuggerPlugin. void add_export_plugin ( EditorExportPlugin plugin ) Registers a new EditorExportPlugin. Export plugins are used to perform tasks when the project is being exported. See add_inspector_plugin for an example of how to register a plugin. void add_import_plugin ( EditorImportPlugin importer, bool first_priority=false ) Registers a new EditorImportPlugin. Import plugins are used to import custom and unsupported assets as a custom Resource type. If first_priority is true, the new import plugin is inserted first in the list and takes precedence over pre-existing plugins. Note: If you want to import custom 3D asset formats use add_scene_format_importer_plugin instead. See add_inspector_plugin for an example of how to register a plugin. void add_inspector_plugin ( EditorInspectorPlugin plugin ) Registers a new EditorInspectorPlugin. Inspector plugins are used to extend EditorInspector and provide custom configuration tools for your object's properties. Note: Always use remove_inspector_plugin to remove the registered EditorInspectorPlugin when your EditorPlugin is disabled to prevent leaks and an unexpected behavior.  GDScriptconst MyInspectorPlugin = preload("res://addons/your_addon/path/to/your/script.gd")
var inspector_plugin = MyInspectorPlugin.new()
func _enter_tree():
    add_inspector_plugin(inspector_plugin)
func _exit_tree():
    remove_inspector_plugin(inspector_plugin)
  void add_node_3d_gizmo_plugin ( EditorNode3DGizmoPlugin plugin ) Registers a new EditorNode3DGizmoPlugin. Gizmo plugins are used to add custom gizmos to the 3D preview viewport for a Node3D. See add_inspector_plugin for an example of how to register a plugin. void add_resource_conversion_plugin ( EditorResourceConversionPlugin plugin ) Registers a new EditorResourceConversionPlugin. Resource conversion plugins are used to add custom resource converters to the editor inspector. See EditorResourceConversionPlugin for an example of how to create a resource conversion plugin. void add_scene_format_importer_plugin ( EditorSceneFormatImporter scene_format_importer, bool first_priority=false ) Registers a new EditorSceneFormatImporter. Scene importers are used to import custom 3D asset formats as scenes. If first_priority is true, the new import plugin is inserted first in the list and takes precedence over pre-existing plugins. void add_scene_post_import_plugin ( EditorScenePostImportPlugin scene_import_plugin, bool first_priority=false ) Add a EditorScenePostImportPlugin. These plugins allow customizing the import process of 3D assets by adding new options to the import dialogs. If first_priority is true, the new import plugin is inserted first in the list and takes precedence over pre-existing plugins. void add_tool_menu_item ( String name, Callable callable ) Adds a custom menu item to Project > Tools named name. When clicked, the provided callable will be called. void add_tool_submenu_item ( String name, PopupMenu submenu ) Adds a custom PopupMenu submenu under Project > Tools > name. Use remove_tool_menu_item on plugin clean up to remove the menu. void add_translation_parser_plugin ( EditorTranslationParserPlugin parser ) Registers a custom translation parser plugin for extracting translatable strings from custom files. void add_undo_redo_inspector_hook_callback ( Callable callable ) Hooks a callback into the undo/redo action creation when a property is modified in the inspector. This allows, for example, to save other properties that may be lost when a given property is modified. The callback should have 4 arguments: Object undo_redo, Object modified_object, String property and Variant new_value. They are, respectively, the UndoRedo object used by the inspector, the currently modified object, the name of the modified property and the new value the property is about to take. 
EditorInterface get_editor_interface ( ) Returns the EditorInterface singleton instance. Deprecated. EditorInterface is a global singleton and can be accessed directly by its name. 
PopupMenu get_export_as_menu ( ) Returns the PopupMenu under Scene > Export As.... 
String get_plugin_version ( ) const
 Provide the version of the plugin declared in the plugin.cfg config file. 
ScriptCreateDialog get_script_create_dialog ( ) Gets the Editor's dialog used for making scripts. Note: Users can configure it before use. Warning: Removing and freeing this node will render a part of the editor useless and may cause a crash. 
EditorUndoRedoManager get_undo_redo ( ) Gets the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it. void hide_bottom_panel ( ) Minimizes the bottom panel. void make_bottom_panel_item_visible ( Control item ) Makes a specific item in the bottom panel visible. void queue_save_layout ( ) Queue save the project's editor layout. void remove_autoload_singleton ( String name ) Removes an Autoload name from the list. void remove_control_from_bottom_panel ( Control control ) Removes the control from the bottom panel. You have to manually Node.queue_free the control. void remove_control_from_container ( CustomControlContainer container, Control control ) Removes the control from the specified container. You have to manually Node.queue_free the control. void remove_control_from_docks ( Control control ) Removes the control from the dock. You have to manually Node.queue_free the control. void remove_custom_type ( String type ) Removes a custom type added by add_custom_type. void remove_debugger_plugin ( EditorDebuggerPlugin script ) Removes the debugger plugin with given script from the Debugger. void remove_export_plugin ( EditorExportPlugin plugin ) Removes an export plugin registered by add_export_plugin. void remove_import_plugin ( EditorImportPlugin importer ) Removes an import plugin registered by add_import_plugin. void remove_inspector_plugin ( EditorInspectorPlugin plugin ) Removes an inspector plugin registered by add_import_plugin void remove_node_3d_gizmo_plugin ( EditorNode3DGizmoPlugin plugin ) Removes a gizmo plugin registered by add_node_3d_gizmo_plugin. void remove_resource_conversion_plugin ( EditorResourceConversionPlugin plugin ) Removes a resource conversion plugin registered by add_resource_conversion_plugin. void remove_scene_format_importer_plugin ( EditorSceneFormatImporter scene_format_importer ) Removes a scene format importer registered by add_scene_format_importer_plugin. void remove_scene_post_import_plugin ( EditorScenePostImportPlugin scene_import_plugin ) Remove the EditorScenePostImportPlugin, added with add_scene_post_import_plugin. void remove_tool_menu_item ( String name ) Removes a menu name from Project > Tools. void remove_translation_parser_plugin ( EditorTranslationParserPlugin parser ) Removes a custom translation parser plugin registered by add_translation_parser_plugin. void remove_undo_redo_inspector_hook_callback ( Callable callable ) Removes a callback previously added by add_undo_redo_inspector_hook_callback. void set_force_draw_over_forwarding_enabled ( ) Enables calling of _forward_canvas_force_draw_over_viewport for the 2D editor and _forward_3d_force_draw_over_viewport for the 3D editor when their viewports are updated. You need to call this method only once and it will work permanently for this plugin. void set_input_event_forwarding_always_enabled ( ) Use this method if you always want to receive inputs from 3D view screen inside _forward_3d_gui_input. It might be especially usable if your plugin will want to use raycast in the scene. 
int update_overlays ( ) const
 Updates the overlays of the 2D and 3D editor viewport. Causes methods _forward_canvas_draw_over_viewport, _forward_canvas_force_draw_over_viewport, _forward_3d_draw_over_viewport and _forward_3d_force_draw_over_viewport to be called.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editorplugin.html


classes/class_animationnodeblend2
-----------------------------------------------------------
AnimationNodeBlend2 Inherits: AnimationNodeSync < AnimationNode < Resource < RefCounted < Object Blends two animations linearly inside of an AnimationNodeBlendTree.  Description A resource to add to an AnimationNodeBlendTree. Blends two animations linearly based on the amount value. In general, the blend value should be in the [0.0, 1.0] range. Values outside of this range can blend amplified or inverted animations, however, AnimationNodeAdd2 works better for this purpose.   Tutorials  Using AnimationTree 3D Platformer Demo Third Person Shooter Demo   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodeblend2.html


classes/class_multimeshinstance3d
-----------------------------------------------------------
MultiMeshInstance3D Inherits: GeometryInstance3D < VisualInstance3D < Node3D < Node < Object Node that instances a MultiMesh.  Description MultiMeshInstance3D is a specialized node to instance GeometryInstance3Ds based on a MultiMesh resource. This is useful to optimize the rendering of a high number of instances of a given mesh (for example trees in a forest or grass strands).   Tutorials  Using MultiMeshInstance Optimization using MultiMeshes Animating thousands of fish with MultiMeshInstance    Properties  
MultiMesh multimesh     Property Descriptions 
MultiMesh multimesh  void set_multimesh ( MultiMesh value )
 
MultiMesh get_multimesh ( )
  The MultiMesh resource that will be used and shared among all instances of the MultiMeshInstance3D.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_multimeshinstance3d.html


classes/class_polygonpathfinder
-----------------------------------------------------------
PolygonPathFinder Inherits: Resource < RefCounted < Object  There is currently no description for this class. Please help us by contributing one!   Methods  
PackedVector2Array find_path ( Vector2 from, Vector2 to )  
Rect2 get_bounds ( ) const  
Vector2 get_closest_point ( Vector2 point ) const  
PackedVector2Array get_intersections ( Vector2 from, Vector2 to ) const  
float get_point_penalty ( int idx ) const  
bool is_point_inside ( Vector2 point ) const  
void set_point_penalty ( int idx, float penalty )  
void setup ( PackedVector2Array points, PackedInt32Array connections )     Method Descriptions 
PackedVector2Array find_path ( Vector2 from, Vector2 to )  There is currently no description for this method. Please help us by contributing one!  
Rect2 get_bounds ( ) const
  There is currently no description for this method. Please help us by contributing one!  
Vector2 get_closest_point ( Vector2 point ) const
  There is currently no description for this method. Please help us by contributing one!  
PackedVector2Array get_intersections ( Vector2 from, Vector2 to ) const
  There is currently no description for this method. Please help us by contributing one!  
float get_point_penalty ( int idx ) const
  There is currently no description for this method. Please help us by contributing one!  
bool is_point_inside ( Vector2 point ) const
  There is currently no description for this method. Please help us by contributing one!  void set_point_penalty ( int idx, float penalty )  There is currently no description for this method. Please help us by contributing one!  void setup ( PackedVector2Array points, PackedInt32Array connections )  There is currently no description for this method. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_polygonpathfinder.html


classes/class_audioeffectbandpassfilter
-----------------------------------------------------------
AudioEffectBandPassFilter Inherits: AudioEffectFilter < AudioEffect < Resource < RefCounted < Object Adds a band pass filter to the audio bus.  Description Attenuates the frequencies inside of a range around the AudioEffectFilter.cutoff_hz and cuts frequencies outside of this band.   Tutorials  Audio buses   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectbandpassfilter.html


classes/class_canvaslayer
-----------------------------------------------------------
CanvasLayer Inherits: Node < Object Inherited By: ParallaxBackground A node used for independent rendering of objects within a 2D scene.  Description CanvasItem-derived nodes that are direct or indirect children of a CanvasLayer will be drawn in that layer. The layer is a numeric index that defines the draw order. The default 2D scene renders with index 0, so a CanvasLayer with index -1 will be drawn below, and a CanvasLayer with index 1 will be drawn above. This order will hold regardless of the CanvasItem.z_index of the nodes within each layer. CanvasLayers can be hidden and they can also optionally follow the viewport. This makes them useful for HUDs like health bar overlays (on layers 1 and higher) or backgrounds (on layers -1 and lower). Note: Embedded Windows are placed on layer 1024. CanvasItems on layers 1025 and higher appear in front of embedded windows. Note: Each CanvasLayer is drawn on one specific Viewport and cannot be shared between multiple Viewports, see custom_viewport. When using multiple Viewports, for example in a split-screen game, you need create an individual CanvasLayer for each Viewport you want it to be drawn on.   Tutorials  Viewport and canvas transforms Canvas layers 2D Dodge The Creeps Demo    Properties  
Node custom_viewport   
bool follow_viewport_enabled false  
float follow_viewport_scale 1.0  
int layer 1  
Vector2 offset Vector2(0, 0)  
float rotation 0.0  
Vector2 scale Vector2(1, 1)  
Transform2D transform Transform2D(1, 0, 0, 1, 0, 0)  
bool visible true     Methods  
RID get_canvas ( ) const  
Transform2D get_final_transform ( ) const  
void hide ( )  
void show ( )     Signals visibility_changed ( ) Emitted when visibility of the layer is changed. See visible.   Property Descriptions 
Node custom_viewport  void set_custom_viewport ( Node value )
 
Node get_custom_viewport ( )
  The custom Viewport node assigned to the CanvasLayer. If null, uses the default viewport instead. 
bool follow_viewport_enabled = false
  void set_follow_viewport ( bool value )
 
bool is_following_viewport ( )
  If enabled, the CanvasLayer will use the viewport's transform, so it will move when camera moves instead of being anchored in a fixed position on the screen. Together with follow_viewport_scale it can be used for a pseudo 3D effect. 
float follow_viewport_scale = 1.0
  void set_follow_viewport_scale ( float value )
 
float get_follow_viewport_scale ( )
  Scales the layer when using follow_viewport_enabled. Layers moving into the foreground should have increasing scales, while layers moving into the background should have decreasing scales. 
int layer = 1
  void set_layer ( int value )
 
int get_layer ( )
  Layer index for draw order. Lower values are drawn behind higher values. Note: If multiple CanvasLayers have the same layer index, CanvasItem children of one CanvasLayer are drawn behind the CanvasItem children of the other CanvasLayer. Which CanvasLayer is drawn in front is non-deterministic. 
Vector2 offset = Vector2(0, 0)
  void set_offset ( Vector2 value )
 
Vector2 get_offset ( )
  The layer's base offset. 
float rotation = 0.0
  void set_rotation ( float value )
 
float get_rotation ( )
  The layer's rotation in radians. 
Vector2 scale = Vector2(1, 1)
  void set_scale ( Vector2 value )
 
Vector2 get_scale ( )
  The layer's scale. 
Transform2D transform = Transform2D(1, 0, 0, 1, 0, 0)
  void set_transform ( Transform2D value )
 
Transform2D get_transform ( )
  The layer's transform. 
bool visible = true
  void set_visible ( bool value )
 
bool is_visible ( )
  If false, any CanvasItem under this CanvasLayer will be hidden. Unlike CanvasItem.visible, visibility of a CanvasLayer isn't propagated to underlying layers.   Method Descriptions 
RID get_canvas ( ) const
 Returns the RID of the canvas used by this layer. 
Transform2D get_final_transform ( ) const
 Returns the transform from the CanvasLayers coordinate system to the Viewports coordinate system. void hide ( ) Hides any CanvasItem under this CanvasLayer. This is equivalent to setting visible to false. void show ( ) Shows any CanvasItem under this CanvasLayer. This is equivalent to setting visible to true.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_canvaslayer.html


classes/class_concavepolygonshape2d
-----------------------------------------------------------
ConcavePolygonShape2D Inherits: Shape2D < Resource < RefCounted < Object A 2D polyline shape used for physics collision.  Description A 2D polyline shape, intended for use in physics. Used internally in CollisionPolygon2D when it's in CollisionPolygon2D.BUILD_SEGMENTS mode. Being just a collection of interconnected line segments, ConcavePolygonShape2D is the most freely configurable single 2D shape. It can be used to form polygons of any nature, or even shapes that don't enclose an area. However, ConcavePolygonShape2D is hollow even if the interconnected line segments do enclose an area, which often makes it unsuitable for physics or detection. Note: When used for collision, ConcavePolygonShape2D is intended to work with static CollisionShape2D nodes like StaticBody2D and will likely not behave well for CharacterBody2Ds or RigidBody2Ds in a mode other than Static. Warning: Physics bodies that are small have a chance to clip through this shape when moving fast. This happens because on one frame, the physics body may be on the "outside" of the shape, and on the next frame it may be "inside" it. ConcavePolygonShape2D is hollow, so it won't detect a collision. Performance: Due to its complexity, ConcavePolygonShape2D is the slowest 2D collision shape to check collisions against. Its use should generally be limited to level geometry. If the polyline is closed, CollisionPolygon2D's CollisionPolygon2D.BUILD_SOLIDS mode can be used, which decomposes the polygon into convex ones; see ConvexPolygonShape2D's documentation for instructions.   Properties  
PackedVector2Array segments PackedVector2Array()     Property Descriptions 
PackedVector2Array segments = PackedVector2Array()
  void set_segments ( PackedVector2Array value )
 
PackedVector2Array get_segments ( )
  The array of points that make up the ConcavePolygonShape2D's line segments. The array (of length divisible by two) is naturally divided into pairs (one pair for each segment); each pair consists of the starting point of a segment and the endpoint of a segment.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_concavepolygonshape2d.html


classes/class_syntaxhighlighter
-----------------------------------------------------------
SyntaxHighlighter Inherits: Resource < RefCounted < Object Inherited By: CodeHighlighter, EditorSyntaxHighlighter Base class for syntax highlighters. Provides syntax highlighting data to a TextEdit.  Description Base class for syntax highlighters. Provides syntax highlighting data to a TextEdit. The associated TextEdit will call into the SyntaxHighlighter on an as-needed basis. Note: A SyntaxHighlighter instance should not be used across multiple TextEdit nodes.   Methods  
void _clear_highlighting_cache ( ) virtual  
Dictionary _get_line_syntax_highlighting ( int line ) virtual const  
void _update_cache ( ) virtual  
void clear_highlighting_cache ( )  
Dictionary get_line_syntax_highlighting ( int line )  
TextEdit get_text_edit ( ) const  
void update_cache ( )     Method Descriptions void _clear_highlighting_cache ( ) virtual
 Virtual method which can be overridden to clear any local caches. 
Dictionary _get_line_syntax_highlighting ( int line ) virtual const
 Virtual method which can be overridden to return syntax highlighting data. See get_line_syntax_highlighting for more details. void _update_cache ( ) virtual
 Virtual method which can be overridden to update any local caches. void clear_highlighting_cache ( ) Clears all cached syntax highlighting data. Then calls overridable method _clear_highlighting_cache. 
Dictionary get_line_syntax_highlighting ( int line ) Returns syntax highlighting data for a single line. If the line is not cached, calls _get_line_syntax_highlighting to calculate the data. The return Dictionary is column number to Dictionary. The column number notes the start of a region, the region will end if another region is found, or at the end of the line. The nested Dictionary contains the data for that region, currently only the key "color" is supported. Example return: var color_map = {
    0: {
        "color": Color(1, 0, 0)
    },
    5: {
        "color": Color(0, 1, 0)
    }
}
 This will color columns 0-4 red, and columns 5-eol in green. 
TextEdit get_text_edit ( ) const
 Returns the associated TextEdit node. void update_cache ( ) Clears then updates the SyntaxHighlighter caches. Override _update_cache for a callback. Note: This is called automatically when the associated TextEdit node, updates its own cache.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_syntaxhighlighter.html


classes/class_oggpacketsequence
-----------------------------------------------------------
OggPacketSequence Inherits: Resource < RefCounted < Object A sequence of Ogg packets.  Description A sequence of Ogg packets.   Properties  
PackedInt64Array granule_positions PackedInt64Array()  
Array[] packet_data []  
float sampling_rate 0.0     Methods  
float get_length ( ) const     Property Descriptions 
PackedInt64Array granule_positions = PackedInt64Array()
  void set_packet_granule_positions ( PackedInt64Array value )
 
PackedInt64Array get_packet_granule_positions ( )
  Contains the granule positions for each page in this packet sequence. 
Array[] packet_data = []
  void set_packet_data ( Array[] value )
 
Array[] get_packet_data ( )
  Contains the raw packets that make up this OggPacketSequence. 
float sampling_rate = 0.0
  void set_sampling_rate ( float value )
 
float get_sampling_rate ( )
  Holds sample rate information about this sequence. Must be set by another class that actually understands the codec.   Method Descriptions 
float get_length ( ) const
 The length of this stream, in seconds.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_oggpacketsequence.html


classes/class_staticbody3d
-----------------------------------------------------------
StaticBody3D Inherits: PhysicsBody3D < CollisionObject3D < Node3D < Node < Object Inherited By: AnimatableBody3D A 3D physics body that can't be moved by external forces. When moved manually, it doesn't affect other bodies in its path.  Description A static 3D physics body. It can't be moved by external forces or contacts, but can be moved manually by other means such as code, AnimationMixers (with AnimationMixer.callback_mode_process set to AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS), and RemoteTransform3D. When StaticBody3D is moved, it is teleported to its new position without affecting other physics bodies in its path. If this is not desired, use AnimatableBody3D instead. StaticBody3D is useful for completely static objects like floors and walls, as well as moving surfaces like conveyor belts and circular revolving platforms (by using constant_linear_velocity and constant_angular_velocity).   Tutorials  3D Physics Tests Demo Third Person Shooter Demo 3D Voxel Demo    Properties  
Vector3 constant_angular_velocity Vector3(0, 0, 0)  
Vector3 constant_linear_velocity Vector3(0, 0, 0)  
PhysicsMaterial physics_material_override      Property Descriptions 
Vector3 constant_angular_velocity = Vector3(0, 0, 0)
  void set_constant_angular_velocity ( Vector3 value )
 
Vector3 get_constant_angular_velocity ( )
  The body's constant angular velocity. This does not rotate the body, but affects touching bodies, as if it were rotating. 
Vector3 constant_linear_velocity = Vector3(0, 0, 0)
  void set_constant_linear_velocity ( Vector3 value )
 
Vector3 get_constant_linear_velocity ( )
  The body's constant linear velocity. This does not move the body, but affects touching bodies, as if it were moving. 
PhysicsMaterial physics_material_override  void set_physics_material_override ( PhysicsMaterial value )
 
PhysicsMaterial get_physics_material_override ( )
  The physics material override for the body. If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_staticbody3d.html


classes/class_backbuffercopy
-----------------------------------------------------------
BackBufferCopy Inherits: Node2D < CanvasItem < Node < Object A node that copies a region of the screen to a buffer for access in shader code.  Description Node for back-buffering the currently-displayed screen. The region defined in the BackBufferCopy node is buffered with the content of the screen it covers, or the entire screen according to the copy_mode. It can be accessed in shader scripts using the screen texture (i.e. a uniform sampler with hint_screen_texture). Note: Since this node inherits from Node2D (and not Control), anchors and margins won't apply to child Control-derived nodes. This can be problematic when resizing the window. To avoid this, add Control-derived nodes as siblings to the BackBufferCopy node instead of adding them as children.   Properties  
CopyMode copy_mode 1  
Rect2 rect Rect2(-100, -100, 200, 200)     Enumerations enum CopyMode: 
CopyMode COPY_MODE_DISABLED = 0
 Disables the buffering mode. This means the BackBufferCopy node will directly use the portion of screen it covers. 
CopyMode COPY_MODE_RECT = 1
 BackBufferCopy buffers a rectangular region. 
CopyMode COPY_MODE_VIEWPORT = 2
 BackBufferCopy buffers the entire screen.   Property Descriptions 
CopyMode copy_mode = 1
  void set_copy_mode ( CopyMode value )
 
CopyMode get_copy_mode ( )
  Buffer mode. See CopyMode constants. 
Rect2 rect = Rect2(-100, -100, 200, 200)
  void set_rect ( Rect2 value )
 
Rect2 get_rect ( )
  The area covered by the BackBufferCopy. Only used if copy_mode is COPY_MODE_RECT.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_backbuffercopy.html


classes/class_visualshadernodeclamp
-----------------------------------------------------------
VisualShaderNodeClamp Inherits: VisualShaderNode < Resource < RefCounted < Object Clamps a value within the visual shader graph.  Description Constrains a value to lie between min and max values.   Properties  
OpType op_type 0     Enumerations enum OpType: 
OpType OP_TYPE_FLOAT = 0
 A floating-point scalar. 
OpType OP_TYPE_INT = 1
 An integer scalar. 
OpType OP_TYPE_UINT = 2
 An unsigned integer scalar. 
OpType OP_TYPE_VECTOR_2D = 3
 A 2D vector type. 
OpType OP_TYPE_VECTOR_3D = 4
 A 3D vector type. 
OpType OP_TYPE_VECTOR_4D = 5
 A 4D vector type. 
OpType OP_TYPE_MAX = 6
 Represents the size of the OpType enum.   Property Descriptions 
OpType op_type = 0
  void set_op_type ( OpType value )
 
OpType get_op_type ( )
  A type of operands and returned value.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualshadernodeclamp.html


classes/class_animationnodeblendspace1d
-----------------------------------------------------------
AnimationNodeBlendSpace1D Inherits: AnimationRootNode < AnimationNode < Resource < RefCounted < Object A set of AnimationRootNodes placed on a virtual axis, crossfading between the two adjacent ones. Used by AnimationTree.  Description A resource used by AnimationNodeBlendTree. AnimationNodeBlendSpace1D represents a virtual axis on which any type of AnimationRootNodes can be added using add_blend_point. Outputs the linear blend of the two AnimationRootNodes adjacent to the current value. You can set the extents of the axis with min_space and max_space.   Tutorials  Using AnimationTree    Properties  
BlendMode blend_mode 0  
float max_space 1.0  
float min_space -1.0  
float snap 0.1  
bool sync false  
String value_label "value"     Methods  
void add_blend_point ( AnimationRootNode node, float pos, int at_index=-1 )  
int get_blend_point_count ( ) const  
AnimationRootNode get_blend_point_node ( int point ) const  
float get_blend_point_position ( int point ) const  
void remove_blend_point ( int point )  
void set_blend_point_node ( int point, AnimationRootNode node )  
void set_blend_point_position ( int point, float pos )     Enumerations enum BlendMode: 
BlendMode BLEND_MODE_INTERPOLATED = 0
 The interpolation between animations is linear. 
BlendMode BLEND_MODE_DISCRETE = 1
 The blend space plays the animation of the animation node which blending position is closest to. Useful for frame-by-frame 2D animations. 
BlendMode BLEND_MODE_DISCRETE_CARRY = 2
 Similar to BLEND_MODE_DISCRETE, but starts the new animation at the last animation's playback position.   Property Descriptions 
BlendMode blend_mode = 0
  void set_blend_mode ( BlendMode value )
 
BlendMode get_blend_mode ( )
  Controls the interpolation between animations. See BlendMode constants. 
float max_space = 1.0
  void set_max_space ( float value )
 
float get_max_space ( )
  The blend space's axis's upper limit for the points' position. See add_blend_point. 
float min_space = -1.0
  void set_min_space ( float value )
 
float get_min_space ( )
  The blend space's axis's lower limit for the points' position. See add_blend_point. 
float snap = 0.1
  void set_snap ( float value )
 
float get_snap ( )
  Position increment to snap to when moving a point on the axis. 
bool sync = false
  void set_use_sync ( bool value )
 
bool is_using_sync ( )
  If false, the blended animations' frame are stopped when the blend value is 0. If true, forcing the blended animations to advance frame. 
String value_label = "value"
  void set_value_label ( String value )
 
String get_value_label ( )
  Label of the virtual axis of the blend space.   Method Descriptions void add_blend_point ( AnimationRootNode node, float pos, int at_index=-1 ) Adds a new point that represents a node on the virtual axis at a given position set by pos. You can insert it at a specific index using the at_index argument. If you use the default value for at_index, the point is inserted at the end of the blend points array. 
int get_blend_point_count ( ) const
 Returns the number of points on the blend axis. 
AnimationRootNode get_blend_point_node ( int point ) const
 Returns the AnimationNode referenced by the point at index point. 
float get_blend_point_position ( int point ) const
 Returns the position of the point at index point. void remove_blend_point ( int point ) Removes the point at index point from the blend axis. void set_blend_point_node ( int point, AnimationRootNode node ) Changes the AnimationNode referenced by the point at index point. void set_blend_point_position ( int point, float pos ) Updates the position of the point at index point on the blend axis.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodeblendspace1d.html


classes/class_remotetransform3d
-----------------------------------------------------------
RemoteTransform3D Inherits: Node3D < Node < Object RemoteTransform3D pushes its own Transform3D to another Node3D derived Node in the scene.  Description RemoteTransform3D pushes its own Transform3D to another Node3D derived Node (called the remote node) in the scene. It can be set to update another Node's position, rotation and/or scale. It can use either global or local coordinates.   Properties  
NodePath remote_path NodePath("")  
bool update_position true  
bool update_rotation true  
bool update_scale true  
bool use_global_coordinates true     Methods  
void force_update_cache ( )     Property Descriptions 
NodePath remote_path = NodePath("")
  void set_remote_node ( NodePath value )
 
NodePath get_remote_node ( )
  The NodePath to the remote node, relative to the RemoteTransform3D's position in the scene. 
bool update_position = true
  void set_update_position ( bool value )
 
bool get_update_position ( )
  If true, the remote node's position is updated. 
bool update_rotation = true
  void set_update_rotation ( bool value )
 
bool get_update_rotation ( )
  If true, the remote node's rotation is updated. 
bool update_scale = true
  void set_update_scale ( bool value )
 
bool get_update_scale ( )
  If true, the remote node's scale is updated. 
bool use_global_coordinates = true
  void set_use_global_coordinates ( bool value )
 
bool get_use_global_coordinates ( )
  If true, global coordinates are used. If false, local coordinates are used.   Method Descriptions void force_update_cache ( ) RemoteTransform3D caches the remote node. It may not notice if the remote node disappears; force_update_cache forces it to update the cache again.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_remotetransform3d.html


classes/class_panel
-----------------------------------------------------------
Panel Inherits: Control < CanvasItem < Node < Object A GUI control that displays a StyleBox.  Description Panel is a GUI control that displays a StyleBox. See also PanelContainer.   Tutorials  2D Role Playing Game Demo 2D Finite State Machine Demo 3D Inverse Kinematics Demo    Theme Properties  
StyleBox panel     Theme Property Descriptions 
StyleBox panel The StyleBox of this control.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_panel.html


classes/class_animationnodetimescale
-----------------------------------------------------------
AnimationNodeTimeScale Inherits: AnimationNode < Resource < RefCounted < Object A time-scaling animation node used in AnimationTree.  Description Allows to scale the speed of the animation (or reverse it) in any child AnimationNodes. Setting it to 0.0 will pause the animation.   Tutorials  Using AnimationTree 3D Platformer Demo   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodetimescale.html


classes/class_animationnodeblend3
-----------------------------------------------------------
AnimationNodeBlend3 Inherits: AnimationNodeSync < AnimationNode < Resource < RefCounted < Object Blends two of three animations linearly inside of an AnimationNodeBlendTree.  Description A resource to add to an AnimationNodeBlendTree. Blends two animations out of three linearly out of three based on the amount value. This animation node has three inputs:  The base animation to blend with A "-blend" animation to blend with when the blend amount is negative value A "+blend" animation to blend with when the blend amount is positive value  In general, the blend value should be in the [-1.0, 1.0] range. Values outside of this range can blend amplified animations, however, AnimationNodeAdd3 works better for this purpose.   Tutorials  Using AnimationTree   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodeblend3.html


classes/class_generic6dofjoint3d
-----------------------------------------------------------
Generic6DOFJoint3D Inherits: Joint3D < Node3D < Node < Object A physics joint that allows for complex movement and rotation between two 3D physics bodies.  Description The Generic6DOFJoint3D (6 Degrees Of Freedom) joint allows for implementing custom types of joints by locking the rotation and translation of certain axes. The first 3 DOF represent the linear motion of the physics bodies and the last 3 DOF represent the angular motion of the physics bodies. Each axis can be either locked, or limited.   Properties  
float angular_limit_x/damping 1.0  
bool angular_limit_x/enabled true  
float angular_limit_x/erp 0.5  
float angular_limit_x/force_limit 0.0  
float angular_limit_x/lower_angle 0.0  
float angular_limit_x/restitution 0.0  
float angular_limit_x/softness 0.5  
float angular_limit_x/upper_angle 0.0  
float angular_limit_y/damping 1.0  
bool angular_limit_y/enabled true  
float angular_limit_y/erp 0.5  
float angular_limit_y/force_limit 0.0  
float angular_limit_y/lower_angle 0.0  
float angular_limit_y/restitution 0.0  
float angular_limit_y/softness 0.5  
float angular_limit_y/upper_angle 0.0  
float angular_limit_z/damping 1.0  
bool angular_limit_z/enabled true  
float angular_limit_z/erp 0.5  
float angular_limit_z/force_limit 0.0  
float angular_limit_z/lower_angle 0.0  
float angular_limit_z/restitution 0.0  
float angular_limit_z/softness 0.5  
float angular_limit_z/upper_angle 0.0  
bool angular_motor_x/enabled false  
float angular_motor_x/force_limit 300.0  
float angular_motor_x/target_velocity 0.0  
bool angular_motor_y/enabled false  
float angular_motor_y/force_limit 300.0  
float angular_motor_y/target_velocity 0.0  
bool angular_motor_z/enabled false  
float angular_motor_z/force_limit 300.0  
float angular_motor_z/target_velocity 0.0  
float angular_spring_x/damping 0.0  
bool angular_spring_x/enabled false  
float angular_spring_x/equilibrium_point 0.0  
float angular_spring_x/stiffness 0.0  
float angular_spring_y/damping 0.0  
bool angular_spring_y/enabled false  
float angular_spring_y/equilibrium_point 0.0  
float angular_spring_y/stiffness 0.0  
float angular_spring_z/damping 0.0  
bool angular_spring_z/enabled false  
float angular_spring_z/equilibrium_point 0.0  
float angular_spring_z/stiffness 0.0  
float linear_limit_x/damping 1.0  
bool linear_limit_x/enabled true  
float linear_limit_x/lower_distance 0.0  
float linear_limit_x/restitution 0.5  
float linear_limit_x/softness 0.7  
float linear_limit_x/upper_distance 0.0  
float linear_limit_y/damping 1.0  
bool linear_limit_y/enabled true  
float linear_limit_y/lower_distance 0.0  
float linear_limit_y/restitution 0.5  
float linear_limit_y/softness 0.7  
float linear_limit_y/upper_distance 0.0  
float linear_limit_z/damping 1.0  
bool linear_limit_z/enabled true  
float linear_limit_z/lower_distance 0.0  
float linear_limit_z/restitution 0.5  
float linear_limit_z/softness 0.7  
float linear_limit_z/upper_distance 0.0  
bool linear_motor_x/enabled false  
float linear_motor_x/force_limit 0.0  
float linear_motor_x/target_velocity 0.0  
bool linear_motor_y/enabled false  
float linear_motor_y/force_limit 0.0  
float linear_motor_y/target_velocity 0.0  
bool linear_motor_z/enabled false  
float linear_motor_z/force_limit 0.0  
float linear_motor_z/target_velocity 0.0  
float linear_spring_x/damping 0.01  
bool linear_spring_x/enabled false  
float linear_spring_x/equilibrium_point 0.0  
float linear_spring_x/stiffness 0.01  
float linear_spring_y/damping 0.01  
bool linear_spring_y/enabled false  
float linear_spring_y/equilibrium_point 0.0  
float linear_spring_y/stiffness 0.01  
float linear_spring_z/damping 0.01  
bool linear_spring_z/enabled false  
float linear_spring_z/equilibrium_point 0.0  
float linear_spring_z/stiffness 0.01     Methods  
bool get_flag_x ( Flag flag ) const  
bool get_flag_y ( Flag flag ) const  
bool get_flag_z ( Flag flag ) const  
float get_param_x ( Param param ) const  
float get_param_y ( Param param ) const  
float get_param_z ( Param param ) const  
void set_flag_x ( Flag flag, bool value )  
void set_flag_y ( Flag flag, bool value )  
void set_flag_z ( Flag flag, bool value )  
void set_param_x ( Param param, float value )  
void set_param_y ( Param param, float value )  
void set_param_z ( Param param, float value )     Enumerations enum Param: 
Param PARAM_LINEAR_LOWER_LIMIT = 0
 The minimum difference between the pivot points' axes. 
Param PARAM_LINEAR_UPPER_LIMIT = 1
 The maximum difference between the pivot points' axes. 
Param PARAM_LINEAR_LIMIT_SOFTNESS = 2
 A factor applied to the movement across the axes. The lower, the slower the movement. 
Param PARAM_LINEAR_RESTITUTION = 3
 The amount of restitution on the axes' movement. The lower, the more momentum gets lost. 
Param PARAM_LINEAR_DAMPING = 4
 The amount of damping that happens at the linear motion across the axes. 
Param PARAM_LINEAR_MOTOR_TARGET_VELOCITY = 5
 The velocity the linear motor will try to reach. 
Param PARAM_LINEAR_MOTOR_FORCE_LIMIT = 6
 The maximum force the linear motor will apply while trying to reach the velocity target. 
Param PARAM_LINEAR_SPRING_STIFFNESS = 7
 
Param PARAM_LINEAR_SPRING_DAMPING = 8
 
Param PARAM_LINEAR_SPRING_EQUILIBRIUM_POINT = 9
 
Param PARAM_ANGULAR_LOWER_LIMIT = 10
 The minimum rotation in negative direction to break loose and rotate around the axes. 
Param PARAM_ANGULAR_UPPER_LIMIT = 11
 The minimum rotation in positive direction to break loose and rotate around the axes. 
Param PARAM_ANGULAR_LIMIT_SOFTNESS = 12
 The speed of all rotations across the axes. 
Param PARAM_ANGULAR_DAMPING = 13
 The amount of rotational damping across the axes. The lower, the more damping occurs. 
Param PARAM_ANGULAR_RESTITUTION = 14
 The amount of rotational restitution across the axes. The lower, the more restitution occurs. 
Param PARAM_ANGULAR_FORCE_LIMIT = 15
 The maximum amount of force that can occur, when rotating around the axes. 
Param PARAM_ANGULAR_ERP = 16
 When rotating across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower. 
Param PARAM_ANGULAR_MOTOR_TARGET_VELOCITY = 17
 Target speed for the motor at the axes. 
Param PARAM_ANGULAR_MOTOR_FORCE_LIMIT = 18
 Maximum acceleration for the motor at the axes. 
Param PARAM_ANGULAR_SPRING_STIFFNESS = 19
 
Param PARAM_ANGULAR_SPRING_DAMPING = 20
 
Param PARAM_ANGULAR_SPRING_EQUILIBRIUM_POINT = 21
 
Param PARAM_MAX = 22
 Represents the size of the Param enum. enum Flag: 
Flag FLAG_ENABLE_LINEAR_LIMIT = 0
 If enabled, linear motion is possible within the given limits. 
Flag FLAG_ENABLE_ANGULAR_LIMIT = 1
 If enabled, rotational motion is possible within the given limits. 
Flag FLAG_ENABLE_LINEAR_SPRING = 3
 
Flag FLAG_ENABLE_ANGULAR_SPRING = 2
 
Flag FLAG_ENABLE_MOTOR = 4
 If enabled, there is a rotational motor across these axes. 
Flag FLAG_ENABLE_LINEAR_MOTOR = 5
 If enabled, there is a linear motor across these axes. 
Flag FLAG_MAX = 6
 Represents the size of the Flag enum.   Property Descriptions 
float angular_limit_x/damping = 1.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  The amount of rotational damping across the X axis. The lower, the longer an impulse from one side takes to travel to the other side. 
bool angular_limit_x/enabled = true
  void set_flag_x ( Flag flag, bool value )
 
bool get_flag_x ( Flag flag ) const
  If true, rotation across the X axis is limited. 
float angular_limit_x/erp = 0.5
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  When rotating across the X axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower. 
float angular_limit_x/force_limit = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  The maximum amount of force that can occur, when rotating around the X axis. 
float angular_limit_x/lower_angle = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  The minimum rotation in negative direction to break loose and rotate around the X axis. 
float angular_limit_x/restitution = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  The amount of rotational restitution across the X axis. The lower, the more restitution occurs. 
float angular_limit_x/softness = 0.5
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  The speed of all rotations across the X axis. 
float angular_limit_x/upper_angle = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  The minimum rotation in positive direction to break loose and rotate around the X axis. 
float angular_limit_y/damping = 1.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  The amount of rotational damping across the Y axis. The lower, the more damping occurs. 
bool angular_limit_y/enabled = true
  void set_flag_y ( Flag flag, bool value )
 
bool get_flag_y ( Flag flag ) const
  If true, rotation across the Y axis is limited. 
float angular_limit_y/erp = 0.5
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  When rotating across the Y axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower. 
float angular_limit_y/force_limit = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  The maximum amount of force that can occur, when rotating around the Y axis. 
float angular_limit_y/lower_angle = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  The minimum rotation in negative direction to break loose and rotate around the Y axis. 
float angular_limit_y/restitution = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  The amount of rotational restitution across the Y axis. The lower, the more restitution occurs. 
float angular_limit_y/softness = 0.5
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  The speed of all rotations across the Y axis. 
float angular_limit_y/upper_angle = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  The minimum rotation in positive direction to break loose and rotate around the Y axis. 
float angular_limit_z/damping = 1.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  The amount of rotational damping across the Z axis. The lower, the more damping occurs. 
bool angular_limit_z/enabled = true
  void set_flag_z ( Flag flag, bool value )
 
bool get_flag_z ( Flag flag ) const
  If true, rotation across the Z axis is limited. 
float angular_limit_z/erp = 0.5
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  When rotating across the Z axis, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower. 
float angular_limit_z/force_limit = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  The maximum amount of force that can occur, when rotating around the Z axis. 
float angular_limit_z/lower_angle = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  The minimum rotation in negative direction to break loose and rotate around the Z axis. 
float angular_limit_z/restitution = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  The amount of rotational restitution across the Z axis. The lower, the more restitution occurs. 
float angular_limit_z/softness = 0.5
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  The speed of all rotations across the Z axis. 
float angular_limit_z/upper_angle = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  The minimum rotation in positive direction to break loose and rotate around the Z axis. 
bool angular_motor_x/enabled = false
  void set_flag_x ( Flag flag, bool value )
 
bool get_flag_x ( Flag flag ) const
  If true, a rotating motor at the X axis is enabled. 
float angular_motor_x/force_limit = 300.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  Maximum acceleration for the motor at the X axis. 
float angular_motor_x/target_velocity = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  Target speed for the motor at the X axis. 
bool angular_motor_y/enabled = false
  void set_flag_y ( Flag flag, bool value )
 
bool get_flag_y ( Flag flag ) const
  If true, a rotating motor at the Y axis is enabled. 
float angular_motor_y/force_limit = 300.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  Maximum acceleration for the motor at the Y axis. 
float angular_motor_y/target_velocity = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  Target speed for the motor at the Y axis. 
bool angular_motor_z/enabled = false
  void set_flag_z ( Flag flag, bool value )
 
bool get_flag_z ( Flag flag ) const
  If true, a rotating motor at the Z axis is enabled. 
float angular_motor_z/force_limit = 300.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  Maximum acceleration for the motor at the Z axis. 
float angular_motor_z/target_velocity = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  Target speed for the motor at the Z axis. 
float angular_spring_x/damping = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
bool angular_spring_x/enabled = false
  void set_flag_x ( Flag flag, bool value )
 
bool get_flag_x ( Flag flag ) const
   There is currently no description for this property. Please help us by contributing one!  
float angular_spring_x/equilibrium_point = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
float angular_spring_x/stiffness = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
float angular_spring_y/damping = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
bool angular_spring_y/enabled = false
  void set_flag_y ( Flag flag, bool value )
 
bool get_flag_y ( Flag flag ) const
   There is currently no description for this property. Please help us by contributing one!  
float angular_spring_y/equilibrium_point = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
float angular_spring_y/stiffness = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
float angular_spring_z/damping = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
bool angular_spring_z/enabled = false
  void set_flag_z ( Flag flag, bool value )
 
bool get_flag_z ( Flag flag ) const
   There is currently no description for this property. Please help us by contributing one!  
float angular_spring_z/equilibrium_point = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
float angular_spring_z/stiffness = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
float linear_limit_x/damping = 1.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  The amount of damping that happens at the X motion. 
bool linear_limit_x/enabled = true
  void set_flag_x ( Flag flag, bool value )
 
bool get_flag_x ( Flag flag ) const
  If true, the linear motion across the X axis is limited. 
float linear_limit_x/lower_distance = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  The minimum difference between the pivot points' X axis. 
float linear_limit_x/restitution = 0.5
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  The amount of restitution on the X axis movement. The lower, the more momentum gets lost. 
float linear_limit_x/softness = 0.7
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  A factor applied to the movement across the X axis. The lower, the slower the movement. 
float linear_limit_x/upper_distance = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  The maximum difference between the pivot points' X axis. 
float linear_limit_y/damping = 1.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  The amount of damping that happens at the Y motion. 
bool linear_limit_y/enabled = true
  void set_flag_y ( Flag flag, bool value )
 
bool get_flag_y ( Flag flag ) const
  If true, the linear motion across the Y axis is limited. 
float linear_limit_y/lower_distance = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  The minimum difference between the pivot points' Y axis. 
float linear_limit_y/restitution = 0.5
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  The amount of restitution on the Y axis movement. The lower, the more momentum gets lost. 
float linear_limit_y/softness = 0.7
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  A factor applied to the movement across the Y axis. The lower, the slower the movement. 
float linear_limit_y/upper_distance = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  The maximum difference between the pivot points' Y axis. 
float linear_limit_z/damping = 1.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  The amount of damping that happens at the Z motion. 
bool linear_limit_z/enabled = true
  void set_flag_z ( Flag flag, bool value )
 
bool get_flag_z ( Flag flag ) const
  If true, the linear motion across the Z axis is limited. 
float linear_limit_z/lower_distance = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  The minimum difference between the pivot points' Z axis. 
float linear_limit_z/restitution = 0.5
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  The amount of restitution on the Z axis movement. The lower, the more momentum gets lost. 
float linear_limit_z/softness = 0.7
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  A factor applied to the movement across the Z axis. The lower, the slower the movement. 
float linear_limit_z/upper_distance = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  The maximum difference between the pivot points' Z axis. 
bool linear_motor_x/enabled = false
  void set_flag_x ( Flag flag, bool value )
 
bool get_flag_x ( Flag flag ) const
  If true, then there is a linear motor on the X axis. It will attempt to reach the target velocity while staying within the force limits. 
float linear_motor_x/force_limit = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  The maximum force the linear motor can apply on the X axis while trying to reach the target velocity. 
float linear_motor_x/target_velocity = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
  The speed that the linear motor will attempt to reach on the X axis. 
bool linear_motor_y/enabled = false
  void set_flag_y ( Flag flag, bool value )
 
bool get_flag_y ( Flag flag ) const
  If true, then there is a linear motor on the Y axis. It will attempt to reach the target velocity while staying within the force limits. 
float linear_motor_y/force_limit = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  The maximum force the linear motor can apply on the Y axis while trying to reach the target velocity. 
float linear_motor_y/target_velocity = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
  The speed that the linear motor will attempt to reach on the Y axis. 
bool linear_motor_z/enabled = false
  void set_flag_z ( Flag flag, bool value )
 
bool get_flag_z ( Flag flag ) const
  If true, then there is a linear motor on the Z axis. It will attempt to reach the target velocity while staying within the force limits. 
float linear_motor_z/force_limit = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  The maximum force the linear motor can apply on the Z axis while trying to reach the target velocity. 
float linear_motor_z/target_velocity = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
  The speed that the linear motor will attempt to reach on the Z axis. 
float linear_spring_x/damping = 0.01
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
bool linear_spring_x/enabled = false
  void set_flag_x ( Flag flag, bool value )
 
bool get_flag_x ( Flag flag ) const
   There is currently no description for this property. Please help us by contributing one!  
float linear_spring_x/equilibrium_point = 0.0
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
float linear_spring_x/stiffness = 0.01
  void set_param_x ( Param param, float value )
 
float get_param_x ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
float linear_spring_y/damping = 0.01
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
bool linear_spring_y/enabled = false
  void set_flag_y ( Flag flag, bool value )
 
bool get_flag_y ( Flag flag ) const
   There is currently no description for this property. Please help us by contributing one!  
float linear_spring_y/equilibrium_point = 0.0
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
float linear_spring_y/stiffness = 0.01
  void set_param_y ( Param param, float value )
 
float get_param_y ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
float linear_spring_z/damping = 0.01
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
bool linear_spring_z/enabled = false
  void set_flag_z ( Flag flag, bool value )
 
bool get_flag_z ( Flag flag ) const
   There is currently no description for this property. Please help us by contributing one!  
float linear_spring_z/equilibrium_point = 0.0
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
float linear_spring_z/stiffness = 0.01
  void set_param_z ( Param param, float value )
 
float get_param_z ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!    Method Descriptions 
bool get_flag_x ( Flag flag ) const
  There is currently no description for this method. Please help us by contributing one!  
bool get_flag_y ( Flag flag ) const
  There is currently no description for this method. Please help us by contributing one!  
bool get_flag_z ( Flag flag ) const
  There is currently no description for this method. Please help us by contributing one!  
float get_param_x ( Param param ) const
  There is currently no description for this method. Please help us by contributing one!  
float get_param_y ( Param param ) const
  There is currently no description for this method. Please help us by contributing one!  
float get_param_z ( Param param ) const
  There is currently no description for this method. Please help us by contributing one!  void set_flag_x ( Flag flag, bool value )  There is currently no description for this method. Please help us by contributing one!  void set_flag_y ( Flag flag, bool value )  There is currently no description for this method. Please help us by contributing one!  void set_flag_z ( Flag flag, bool value )  There is currently no description for this method. Please help us by contributing one!  void set_param_x ( Param param, float value )  There is currently no description for this method. Please help us by contributing one!  void set_param_y ( Param param, float value )  There is currently no description for this method. Please help us by contributing one!  void set_param_z ( Param param, float value )  There is currently no description for this method. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_generic6dofjoint3d.html


classes/class_animationnodeanimation
-----------------------------------------------------------
AnimationNodeAnimation Inherits: AnimationRootNode < AnimationNode < Resource < RefCounted < Object An input animation for an AnimationNodeBlendTree.  Description A resource to add to an AnimationNodeBlendTree. Only has one output port using the animation property. Used as an input for AnimationNodes that blend animations together.   Tutorials  Using AnimationTree 3D Platformer Demo Third Person Shooter Demo    Properties  
StringName animation &""  
PlayMode play_mode 0     Enumerations enum PlayMode: 
PlayMode PLAY_MODE_FORWARD = 0
 Plays animation in forward direction. 
PlayMode PLAY_MODE_BACKWARD = 1
 Plays animation in backward direction.   Property Descriptions 
StringName animation = &""
  void set_animation ( StringName value )
 
StringName get_animation ( )
  Animation to use as an output. It is one of the animations provided by AnimationTree.anim_player. 
PlayMode play_mode = 0
  void set_play_mode ( PlayMode value )
 
PlayMode get_play_mode ( )
  Determines the playback direction of the animation.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodeanimation.html


classes/class_animationnodetransition
-----------------------------------------------------------
AnimationNodeTransition Inherits: AnimationNodeSync < AnimationNode < Resource < RefCounted < Object A transition within an AnimationTree connecting two AnimationNodes.  Description Simple state machine for cases which don't require a more advanced AnimationNodeStateMachine. Animations can be connected to the inputs and transition times can be specified. After setting the request and changing the animation playback, the transition node automatically clears the request on the next process frame by setting its transition_request value to empty. Note: When using a cross-fade, current_state and current_index change to the next state immediately after the cross-fade begins.  GDScript# Play child animation connected to "state_2" port.
animation_tree.set("parameters/Transition/transition_request", "state_2")
# Alternative syntax (same result as above).
animation_tree["parameters/Transition/transition_request"] = "state_2"
# Get current state name (read-only).
animation_tree.get("parameters/Transition/current_state")
# Alternative syntax (same result as above).
animation_tree["parameters/Transition/current_state"]
# Get current state index (read-only).
animation_tree.get("parameters/Transition/current_index")
# Alternative syntax (same result as above).
animation_tree["parameters/Transition/current_index"]
 C#// Play child animation connected to "state_2" port.
animationTree.Set("parameters/Transition/transition_request", "state_2");
// Get current state name (read-only).
animationTree.Get("parameters/Transition/current_state");
// Get current state index (read-only).
animationTree.Get("parameters/Transition/current_index");
    Tutorials  Using AnimationTree 3D Platformer Demo Third Person Shooter Demo    Properties  
bool allow_transition_to_self false  
int input_count 0  
Curve xfade_curve   
float xfade_time 0.0     Methods  
bool is_input_reset ( int input ) const  
bool is_input_set_as_auto_advance ( int input ) const  
void set_input_as_auto_advance ( int input, bool enable )  
void set_input_reset ( int input, bool enable )     Property Descriptions 
bool allow_transition_to_self = false
  void set_allow_transition_to_self ( bool value )
 
bool is_allow_transition_to_self ( )
  If true, allows transition to the self state. When the reset option is enabled in input, the animation is restarted. If false, nothing happens on the transition to the self state. 
int input_count = 0
  void set_input_count ( int value )
 
int get_input_count ( )
  The number of enabled input ports for this animation node. 
Curve xfade_curve  void set_xfade_curve ( Curve value )
 
Curve get_xfade_curve ( )
  Determines how cross-fading between animations is eased. If empty, the transition will be linear. 
float xfade_time = 0.0
  void set_xfade_time ( float value )
 
float get_xfade_time ( )
  Cross-fading time (in seconds) between each animation connected to the inputs.   Method Descriptions 
bool is_input_reset ( int input ) const
 Returns whether the animation restarts when the animation transitions from the other animation. 
bool is_input_set_as_auto_advance ( int input ) const
 Returns true if auto-advance is enabled for the given input index. void set_input_as_auto_advance ( int input, bool enable ) Enables or disables auto-advance for the given input index. If enabled, state changes to the next input after playing the animation once. If enabled for the last input state, it loops to the first. void set_input_reset ( int input, bool enable ) If true, the destination animation is restarted when the animation transitions.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodetransition.html


classes/class_torusmesh
-----------------------------------------------------------
TorusMesh Inherits: PrimitiveMesh < Mesh < Resource < RefCounted < Object Class representing a torus PrimitiveMesh.  Description Class representing a torus PrimitiveMesh.   Properties  
float inner_radius 0.5  
float outer_radius 1.0  
int ring_segments 32  
int rings 64     Property Descriptions 
float inner_radius = 0.5
  void set_inner_radius ( float value )
 
float get_inner_radius ( )
  The inner radius of the torus. 
float outer_radius = 1.0
  void set_outer_radius ( float value )
 
float get_outer_radius ( )
  The outer radius of the torus. 
int ring_segments = 32
  void set_ring_segments ( int value )
 
int get_ring_segments ( )
  The number of edges each ring of the torus is constructed of. 
int rings = 64
  void set_rings ( int value )
 
int get_rings ( )
  The number of slices the torus is constructed of.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_torusmesh.html


classes/class_visualshadernodecompare
-----------------------------------------------------------
VisualShaderNodeCompare Inherits: VisualShaderNode < Resource < RefCounted < Object A comparison function for common types within the visual shader graph.  Description Compares a and b of type by function. Returns a boolean scalar. Translates to if instruction in shader code.   Properties  
Condition condition 0  
Function function 0  
ComparisonType type 0     Enumerations enum ComparisonType: 
ComparisonType CTYPE_SCALAR = 0
 A floating-point scalar. 
ComparisonType CTYPE_SCALAR_INT = 1
 An integer scalar. 
ComparisonType CTYPE_SCALAR_UINT = 2
 An unsigned integer scalar. 
ComparisonType CTYPE_VECTOR_2D = 3
 A 2D vector type. 
ComparisonType CTYPE_VECTOR_3D = 4
 A 3D vector type. 
ComparisonType CTYPE_VECTOR_4D = 5
 A 4D vector type. 
ComparisonType CTYPE_BOOLEAN = 6
 A boolean type. 
ComparisonType CTYPE_TRANSFORM = 7
 A transform (mat4) type. 
ComparisonType CTYPE_MAX = 8
 Represents the size of the ComparisonType enum. enum Function: 
Function FUNC_EQUAL = 0
 Comparison for equality (a == b). 
Function FUNC_NOT_EQUAL = 1
 Comparison for inequality (a != b). 
Function FUNC_GREATER_THAN = 2
 Comparison for greater than (a > b). Cannot be used if type set to CTYPE_BOOLEAN or CTYPE_TRANSFORM. 
Function FUNC_GREATER_THAN_EQUAL = 3
 Comparison for greater than or equal (a >= b). Cannot be used if type set to CTYPE_BOOLEAN or CTYPE_TRANSFORM. 
Function FUNC_LESS_THAN = 4
 Comparison for less than (a < b). Cannot be used if type set to CTYPE_BOOLEAN or CTYPE_TRANSFORM. 
Function FUNC_LESS_THAN_EQUAL = 5
 Comparison for less than or equal (a <= b). Cannot be used if type set to CTYPE_BOOLEAN or CTYPE_TRANSFORM. 
Function FUNC_MAX = 6
 Represents the size of the Function enum. enum Condition: 
Condition COND_ALL = 0
 The result will be true if all of component in vector satisfy the comparison condition. 
Condition COND_ANY = 1
 The result will be true if any of component in vector satisfy the comparison condition. 
Condition COND_MAX = 2
 Represents the size of the Condition enum.   Property Descriptions 
Condition condition = 0
  void set_condition ( Condition value )
 
Condition get_condition ( )
  Extra condition which is applied if type is set to CTYPE_VECTOR_3D. 
Function function = 0
  void set_function ( Function value )
 
Function get_function ( )
  A comparison function. See Function for options. 
ComparisonType type = 0
  void set_comparison_type ( ComparisonType value )
 
ComparisonType get_comparison_type ( )
  The type to be used in the comparison. See ComparisonType for options.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualshadernodecompare.html


classes/class_collisionshape3d
-----------------------------------------------------------
CollisionShape3D Inherits: Node3D < Node < Object A node that provides a Shape3D to a CollisionObject3D parent.  Description A node that provides a Shape3D to a CollisionObject3D parent and allows to edit it. This can give a detection shape to an Area3D or turn a PhysicsBody3D into a solid object. Warning: A non-uniformly scaled CollisionShape3D will likely not behave as expected. Make sure to keep its scale the same on all axes and adjust its shape resource instead.   Tutorials  Physics introduction 3D Kinematic Character Demo 3D Platformer Demo Third Person Shooter Demo    Properties  
bool disabled false  
Shape3D shape      Methods  
void make_convex_from_siblings ( )  
void resource_changed ( Resource resource )     Property Descriptions 
bool disabled = false
  void set_disabled ( bool value )
 
bool is_disabled ( )
  A disabled collision shape has no effect in the world. 
Shape3D shape  void set_shape ( Shape3D value )
 
Shape3D get_shape ( )
  The actual shape owned by this collision shape.   Method Descriptions void make_convex_from_siblings ( ) Sets the collision shape's shape to the addition of all its convexed MeshInstance3D siblings geometry. void resource_changed ( Resource resource ) Obsoleted. Use Resource.changed instead.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_collisionshape3d.html


classes/class_gltfdocumentextensionconvertimportermesh
-----------------------------------------------------------
GLTFDocumentExtensionConvertImporterMesh Inherits: GLTFDocumentExtension < Resource < RefCounted < Object  There is currently no description for this class. Please help us by contributing one!   Tutorials  Runtime file loading and saving   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfdocumentextensionconvertimportermesh.html


classes/class_navigationobstacle2d
-----------------------------------------------------------
NavigationObstacle2D Inherits: Node2D < CanvasItem < Node < Object 2D Obstacle used in navigation to constrain avoidance controlled agents outside or inside an area.  Description 2D Obstacle used in navigation to constrain avoidance controlled agents outside or inside an area. The obstacle needs a navigation map and outline vertices defined to work correctly. If the obstacle's vertices are winded in clockwise order, avoidance agents will be pushed in by the obstacle, otherwise, avoidance agents will be pushed out. Outlines must not cross or overlap. Obstacles are not a replacement for a (re)baked navigation mesh. Obstacles don't change the resulting path from the pathfinding, obstacles only affect the navigation avoidance agent movement by altering the suggested velocity of the avoidance agent. Obstacles using vertices can warp to a new position but should not moved every frame as each move requires a rebuild of the avoidance map.   Tutorials  Using NavigationObstacles    Properties  
bool avoidance_enabled true  
int avoidance_layers 1  
float radius 0.0  
Vector2 velocity Vector2(0, 0)  
PackedVector2Array vertices PackedVector2Array()     Methods  
bool get_avoidance_layer_value ( int layer_number ) const  
RID get_navigation_map ( ) const  
RID get_rid ( ) const  
void set_avoidance_layer_value ( int layer_number, bool value )  
void set_navigation_map ( RID navigation_map )     Property Descriptions 
bool avoidance_enabled = true
  void set_avoidance_enabled ( bool value )
 
bool get_avoidance_enabled ( )
  If true the obstacle affects avoidance using agents. 
int avoidance_layers = 1
  void set_avoidance_layers ( int value )
 
int get_avoidance_layers ( )
  A bitfield determining the avoidance layers for this obstacle. Agents with a matching bit on the their avoidance mask will avoid this obstacle. 
float radius = 0.0
  void set_radius ( float value )
 
float get_radius ( )
  Sets the avoidance radius for the obstacle. 
Vector2 velocity = Vector2(0, 0)
  void set_velocity ( Vector2 value )
 
Vector2 get_velocity ( )
  Sets the wanted velocity for the obstacle so other agent's can better predict the obstacle if it is moved with a velocity regularly (every frame) instead of warped to a new position. Does only affect avoidance for the obstacles radius. Does nothing for the obstacles static vertices. 
PackedVector2Array vertices = PackedVector2Array()
  void set_vertices ( PackedVector2Array value )
 
PackedVector2Array get_vertices ( )
  The outline vertices of the obstacle. If the vertices are winded in clockwise order agents will be pushed in by the obstacle, else they will be pushed out. Outlines can not be crossed or overlap. Should the vertices using obstacle be warped to a new position agent's can not predict this movement and may get trapped inside the obstacle.   Method Descriptions 
bool get_avoidance_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the avoidance_layers bitmask is enabled, given a layer_number between 1 and 32. 
RID get_navigation_map ( ) const
 Returns the RID of the navigation map for this NavigationObstacle node. This function returns always the map set on the NavigationObstacle node and not the map of the abstract obstacle on the NavigationServer. If the obstacle map is changed directly with the NavigationServer API the NavigationObstacle node will not be aware of the map change. Use set_navigation_map to change the navigation map for the NavigationObstacle and also update the obstacle on the NavigationServer. 
RID get_rid ( ) const
 Returns the RID of this obstacle on the NavigationServer2D. void set_avoidance_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the avoidance_layers bitmask, given a layer_number between 1 and 32. void set_navigation_map ( RID navigation_map ) Sets the RID of the navigation map this NavigationObstacle node should use and also updates the obstacle on the NavigationServer.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_navigationobstacle2d.html


classes/class_colorpickerbutton
-----------------------------------------------------------
ColorPickerButton Inherits: Button < BaseButton < Control < CanvasItem < Node < Object A button that brings up a ColorPicker when pressed.  Description Encapsulates a ColorPicker, making it accessible by pressing a button. Pressing the button will toggle the ColorPicker's visibility. See also BaseButton which contains common properties and methods associated with this node. Note: By default, the button may not be wide enough for the color preview swatch to be visible. Make sure to set Control.custom_minimum_size to a big enough value to give the button enough space.   Tutorials  GUI Drag And Drop Demo 2D GD Paint Demo    Properties  
Color color Color(0, 0, 0, 1)  
bool edit_alpha true  
bool toggle_mode true (overrides BaseButton)     Methods  
ColorPicker get_picker ( )  
PopupPanel get_popup ( )     Theme Properties  
Texture2D bg     Signals color_changed ( Color color ) Emitted when the color changes. picker_created ( ) Emitted when the ColorPicker is created (the button is pressed for the first time). popup_closed ( ) Emitted when the ColorPicker is closed.   Property Descriptions 
Color color = Color(0, 0, 0, 1)
  void set_pick_color ( Color value )
 
Color get_pick_color ( )
  The currently selected color. 
bool edit_alpha = true
  void set_edit_alpha ( bool value )
 
bool is_editing_alpha ( )
  If true, the alpha channel in the displayed ColorPicker will be visible.   Method Descriptions 
ColorPicker get_picker ( ) Returns the ColorPicker that this node toggles. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their CanvasItem.visible property. 
PopupPanel get_popup ( ) Returns the control's PopupPanel which allows you to connect to popup signals. This allows you to handle events when the ColorPicker is shown or hidden. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their Window.visible property.   Theme Property Descriptions 
Texture2D bg The background of the color preview rect on the button.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_colorpickerbutton.html


classes/class_animatablebody3d
-----------------------------------------------------------
AnimatableBody3D Inherits: StaticBody3D < PhysicsBody3D < CollisionObject3D < Node3D < Node < Object A 3D physics body that can't be moved by external forces. When moved manually, it affects other bodies in its path.  Description An animatable 3D physics body. It can't be moved by external forces or contacts, but can be moved manually by other means such as code, AnimationMixers (with AnimationMixer.callback_mode_process set to AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS), and RemoteTransform3D. When AnimatableBody3D is moved, its linear and angular velocity are estimated and used to affect other physics bodies in its path. This makes it useful for moving platforms, doors, and other moving objects.   Tutorials  3D Physics Tests Demo Third Person Shooter Demo 3D Voxel Demo    Properties  
bool sync_to_physics true     Property Descriptions 
bool sync_to_physics = true
  void set_sync_to_physics ( bool value )
 
bool is_sync_to_physics_enabled ( )
  If true, the body's movement will be synchronized to the physics frame. This is useful when animating movement via AnimationPlayer, for example on moving platforms. Do not use together with PhysicsBody3D.move_and_collide.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animatablebody3d.html


classes/class_hboxcontainer
-----------------------------------------------------------
HBoxContainer Inherits: BoxContainer < Container < Control < CanvasItem < Node < Object Inherited By: EditorResourcePicker A container that arranges its child controls horizontally.  Description A variant of BoxContainer that can only arrange its child controls horizontally. Child controls are rearranged automatically when their minimum size changes.   Tutorials  Using Containers   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_hboxcontainer.html


classes/class_audiostreamwav
-----------------------------------------------------------
AudioStreamWAV Inherits: AudioStream < Resource < RefCounted < Object Stores audio data loaded from WAV files.  Description AudioStreamWAV stores sound samples loaded from WAV files. To play the stored sound, use an AudioStreamPlayer (for non-positional audio) or AudioStreamPlayer2D/AudioStreamPlayer3D (for positional audio). The sound can be looped. This class can also be used to store dynamically-generated PCM audio data. See also AudioStreamGenerator for procedural audio generation.   Tutorials  Runtime file loading and saving    Properties  
PackedByteArray data PackedByteArray()  
Format format 0  
int loop_begin 0  
int loop_end 0  
LoopMode loop_mode 0  
int mix_rate 44100  
bool stereo false     Methods  
Error save_to_wav ( String path )     Enumerations enum Format: 
Format FORMAT_8_BITS = 0
 8-bit audio codec. 
Format FORMAT_16_BITS = 1
 16-bit audio codec. 
Format FORMAT_IMA_ADPCM = 2
 Audio is compressed using IMA ADPCM. enum LoopMode: 
LoopMode LOOP_DISABLED = 0
 Audio does not loop. 
LoopMode LOOP_FORWARD = 1
 Audio loops the data between loop_begin and loop_end, playing forward only. 
LoopMode LOOP_PINGPONG = 2
 Audio loops the data between loop_begin and loop_end, playing back and forth. 
LoopMode LOOP_BACKWARD = 3
 Audio loops the data between loop_begin and loop_end, playing backward only.   Property Descriptions 
PackedByteArray data = PackedByteArray()
  void set_data ( PackedByteArray value )
 
PackedByteArray get_data ( )
  Contains the audio data in bytes. Note: This property expects signed PCM8 data. To convert unsigned PCM8 to signed PCM8, subtract 128 from each byte. 
Format format = 0
  void set_format ( Format value )
 
Format get_format ( )
  Audio format. See Format constants for values. 
int loop_begin = 0
  void set_loop_begin ( int value )
 
int get_loop_begin ( )
  The loop start point (in number of samples, relative to the beginning of the sample). This information will be imported automatically from the WAV file if present. 
int loop_end = 0
  void set_loop_end ( int value )
 
int get_loop_end ( )
  The loop end point (in number of samples, relative to the beginning of the sample). This information will be imported automatically from the WAV file if present. 
LoopMode loop_mode = 0
  void set_loop_mode ( LoopMode value )
 
LoopMode get_loop_mode ( )
  The loop mode. This information will be imported automatically from the WAV file if present. See LoopMode constants for values. 
int mix_rate = 44100
  void set_mix_rate ( int value )
 
int get_mix_rate ( )
  The sample rate for mixing this audio. Higher values require more storage space, but result in better quality. In games, common sample rates in use are 11025, 16000, 22050, 32000, 44100, and 48000. According to the Nyquist-Shannon sampling theorem, there is no quality difference to human hearing when going past 40,000 Hz (since most humans can only hear up to ~20,000 Hz, often less). If you are using lower-pitched sounds such as voices, lower sample rates such as 32000 or 22050 may be usable with no loss in quality. 
bool stereo = false
  void set_stereo ( bool value )
 
bool is_stereo ( )
  If true, audio is stereo.   Method Descriptions 
Error save_to_wav ( String path ) Saves the AudioStreamWAV as a WAV file to path. Samples with IMA ADPCM format can't be saved. Note: A .wav extension is automatically appended to path if it is missing.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiostreamwav.html


classes/class_compressedtexture2d
-----------------------------------------------------------
CompressedTexture2D Inherits: Texture2D < Texture < Resource < RefCounted < Object Texture with 2 dimensions, optionally compressed.  Description A texture that is loaded from a .ctex file. This file format is internal to Godot; it is created by importing other image formats with the import system. CompressedTexture2D can use one of 4 compression methods (including a lack of any compression):  Lossless (WebP or PNG, uncompressed on the GPU) Lossy (WebP, uncompressed on the GPU) VRAM Compressed (compressed on the GPU) VRAM Uncompressed (uncompressed on the GPU) Basis Universal (compressed on the GPU. Lower file sizes than VRAM Compressed, but slower to compress and lower quality than VRAM Compressed)  Only VRAM Compressed actually reduces the memory usage on the GPU. The Lossless and Lossy compression methods will reduce the required storage on disk, but they will not reduce memory usage on the GPU as the texture is sent to the GPU uncompressed. Using VRAM Compressed also improves loading times, as VRAM-compressed textures are faster to load compared to textures using lossless or lossy compression. VRAM compression can exhibit noticeable artifacts and is intended to be used for 3D rendering, not 2D.   Properties  
String load_path ""  
bool resource_local_to_scene false (overrides Resource)     Methods  
Error load ( String path )     Property Descriptions 
String load_path = ""
  
Error load ( String path )
 
String get_load_path ( )
  The CompressedTexture2D's file path to a .ctex file.   Method Descriptions 
Error load ( String path ) Loads the texture from the specified path.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_compressedtexture2d.html


classes/class_shaderinclude
-----------------------------------------------------------
ShaderInclude Inherits: Resource < RefCounted < Object A snippet of shader code to be included in a Shader with #include.  Description A shader include file, saved with the .gdshaderinc extension. This class allows you to define a custom shader snippet that can be included in a Shader by using the preprocessor directive #include, followed by the file path (e.g. #include "res://shader_lib.gdshaderinc"). The snippet doesn't have to be a valid shader on its own.   Tutorials  Shader preprocessor    Properties  
String code ""     Property Descriptions 
String code = ""
  void set_code ( String value )
 
String get_code ( )
  Returns the code of the shader include file. The returned text is what the user has written, not the full generated code used internally.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_shaderinclude.html


classes/class_animationnodetimeseek
-----------------------------------------------------------
AnimationNodeTimeSeek Inherits: AnimationNode < Resource < RefCounted < Object A time-seeking animation node used in AnimationTree.  Description This animation node can be used to cause a seek command to happen to any sub-children of the animation graph. Use to play an Animation from the start or a certain playback position inside the AnimationNodeBlendTree. After setting the time and changing the animation playback, the time seek node automatically goes into sleep mode on the next process frame by setting its seek_request value to -1.0.  GDScript# Play child animation from the start.
animation_tree.set("parameters/TimeSeek/seek_request", 0.0)
# Alternative syntax (same result as above).
animation_tree["parameters/TimeSeek/seek_request"] = 0.0
# Play child animation from 12 second timestamp.
animation_tree.set("parameters/TimeSeek/seek_request", 12.0)
# Alternative syntax (same result as above).
animation_tree["parameters/TimeSeek/seek_request"] = 12.0
 C#// Play child animation from the start.
animationTree.Set("parameters/TimeSeek/seek_request", 0.0);
// Play child animation from 12 second timestamp.
animationTree.Set("parameters/TimeSeek/seek_request", 12.0);
    Tutorials  Using AnimationTree   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodetimeseek.html


classes/class_noisetexture3d
-----------------------------------------------------------
NoiseTexture3D Inherits: Texture3D < Texture < Resource < RefCounted < Object A 3D texture filled with noise generated by a Noise object.  Description Uses the FastNoiseLite library or other noise generators to fill the texture data of your desired size. The class uses Threads to generate the texture data internally, so Texture3D.get_data may return null if the generation process has not completed yet. In that case, you need to wait for the texture to be generated before accessing the image: var texture = NoiseTexture3D.new()
texture.noise = FastNoiseLite.new()
await texture.changed
var data = texture.get_data()
   Properties  
Gradient color_ramp   
int depth 64  
int height 64  
bool invert false  
Noise noise   
bool normalize true  
bool seamless false  
float seamless_blend_skirt 0.1  
int width 64     Property Descriptions 
Gradient color_ramp  void set_color_ramp ( Gradient value )
 
Gradient get_color_ramp ( )
  A Gradient which is used to map the luminance of each pixel to a color value. 
int depth = 64
  void set_depth ( int value )
 
int get_depth ( )
  Depth of the generated texture (in pixels). 
int height = 64
  void set_height ( int value )
 
int get_height ( )
  Height of the generated texture (in pixels). 
bool invert = false
  void set_invert ( bool value )
 
bool get_invert ( )
  If true, inverts the noise texture. White becomes black, black becomes white. 
Noise noise  void set_noise ( Noise value )
 
Noise get_noise ( )
  The instance of the Noise object. 
bool normalize = true
  void set_normalize ( bool value )
 
bool is_normalized ( )
  If true, the noise image coming from the noise generator is normalized to the range 0.0 to 1.0. Turning normalization off can affect the contrast and allows you to generate non repeating tileable noise textures. 
bool seamless = false
  void set_seamless ( bool value )
 
bool get_seamless ( )
  If true, a seamless texture is requested from the Noise resource. Note: Seamless noise textures may take longer to generate and/or can have a lower contrast compared to non-seamless noise depending on the used Noise resource. This is because some implementations use higher dimensions for generating seamless noise. Note: The default FastNoiseLite implementation uses the fallback path for seamless generation. If using a width, height or depth lower than the default, you may need to increase seamless_blend_skirt to make seamless blending more effective. 
float seamless_blend_skirt = 0.1
  void set_seamless_blend_skirt ( float value )
 
float get_seamless_blend_skirt ( )
  Used for the default/fallback implementation of the seamless texture generation. It determines the distance over which the seams are blended. High values may result in less details and contrast. See Noise for further details. Note: If using a width, height or depth lower than the default, you may need to increase seamless_blend_skirt to make seamless blending more effective. 
int width = 64
  void set_width ( int value )
 
int get_width ( )
  Width of the generated texture (in pixels).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_noisetexture3d.html


classes/class_instanceplaceholder
-----------------------------------------------------------
InstancePlaceholder Inherits: Node < Object Placeholder for the root Node of a PackedScene.  Description Turning on the option Load As Placeholder for an instantiated scene in the editor causes it to be replaced by an InstancePlaceholder when running the game, this will not replace the node in the editor. This makes it possible to delay actually loading the scene until calling create_instance. This is useful to avoid loading large scenes all at once by loading parts of it selectively. The InstancePlaceholder does not have a transform. This causes any child nodes to be positioned relatively to the Viewport from point (0,0), rather than their parent as displayed in the editor. Replacing the placeholder with a scene with a transform will transform children relatively to their parent again.   Methods  
Node create_instance ( bool replace=false, PackedScene custom_scene=null )  
String get_instance_path ( ) const  
Dictionary get_stored_values ( bool with_order=false )     Method Descriptions 
Node create_instance ( bool replace=false, PackedScene custom_scene=null ) Call this method to actually load in the node. The created node will be placed as a sibling above the InstancePlaceholder in the scene tree. The Node's reference is also returned for convenience. Note: create_instance is not thread-safe. Use Object.call_deferred if calling from a thread. 
String get_instance_path ( ) const
 Gets the path to the PackedScene resource file that is loaded by default when calling create_instance. Not thread-safe. Use Object.call_deferred if calling from a thread. 
Dictionary get_stored_values ( bool with_order=false ) Returns the list of properties that will be applied to the node when create_instance is called. If with_order is true, a key named .order (note the leading period) is added to the dictionary. This .order key is an Array of String property names specifying the order in which properties will be applied (with index 0 being the first).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_instanceplaceholder.html


classes/class_canvasitemmaterial
-----------------------------------------------------------
CanvasItemMaterial Inherits: Material < Resource < RefCounted < Object A material for CanvasItems.  Description CanvasItemMaterials provide a means of modifying the textures associated with a CanvasItem. They specialize in describing blend and lighting behaviors for textures. Use a ShaderMaterial to more fully customize a material's interactions with a CanvasItem.   Properties  
BlendMode blend_mode 0  
LightMode light_mode 0  
int particles_anim_h_frames   
bool particles_anim_loop   
int particles_anim_v_frames   
bool particles_animation false     Enumerations enum BlendMode: 
BlendMode BLEND_MODE_MIX = 0
 Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value. 
BlendMode BLEND_MODE_ADD = 1
 Additive blending mode. 
BlendMode BLEND_MODE_SUB = 2
 Subtractive blending mode. 
BlendMode BLEND_MODE_MUL = 3
 Multiplicative blending mode. 
BlendMode BLEND_MODE_PREMULT_ALPHA = 4
 Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value. enum LightMode: 
LightMode LIGHT_MODE_NORMAL = 0
 Render the material using both light and non-light sensitive material properties. 
LightMode LIGHT_MODE_UNSHADED = 1
 Render the material as if there were no light. 
LightMode LIGHT_MODE_LIGHT_ONLY = 2
 Render the material as if there were only light.   Property Descriptions 
BlendMode blend_mode = 0
  void set_blend_mode ( BlendMode value )
 
BlendMode get_blend_mode ( )
  The manner in which a material's rendering is applied to underlying textures. 
LightMode light_mode = 0
  void set_light_mode ( LightMode value )
 
LightMode get_light_mode ( )
  The manner in which material reacts to lighting. 
int particles_anim_h_frames  void set_particles_anim_h_frames ( int value )
 
int get_particles_anim_h_frames ( )
  The number of columns in the spritesheet assigned as Texture2D for a GPUParticles2D or CPUParticles2D. Note: This property is only used and visible in the editor if particles_animation is true. 
bool particles_anim_loop  void set_particles_anim_loop ( bool value )
 
bool get_particles_anim_loop ( )
  If true, the particles animation will loop. Note: This property is only used and visible in the editor if particles_animation is true. 
int particles_anim_v_frames  void set_particles_anim_v_frames ( int value )
 
int get_particles_anim_v_frames ( )
  The number of rows in the spritesheet assigned as Texture2D for a GPUParticles2D or CPUParticles2D. Note: This property is only used and visible in the editor if particles_animation is true. 
bool particles_animation = false
  void set_particles_animation ( bool value )
 
bool get_particles_animation ( )
  If true, enable spritesheet-based animation features when assigned to GPUParticles2D and CPUParticles2D nodes. The ParticleProcessMaterial.anim_speed_max or CPUParticles2D.anim_speed_max should also be set to a positive value for the animation to play. This property (and other particles_anim_* properties that depend on it) has no effect on other types of nodes.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_canvasitemmaterial.html


classes/class_touchscreenbutton
-----------------------------------------------------------
TouchScreenButton Inherits: Node2D < CanvasItem < Node < Object Button for touch screen devices for gameplay use.  Description TouchScreenButton allows you to create on-screen buttons for touch devices. It's intended for gameplay use, such as a unit you have to touch to move. Unlike Button, TouchScreenButton supports multitouch out of the box. Several TouchScreenButtons can be pressed at the same time with touch input. This node inherits from Node2D. Unlike with Control nodes, you cannot set anchors on it. If you want to create menus or user interfaces, you may want to use Button nodes instead. To make button nodes react to touch events, you can enable the Emulate Mouse option in the Project Settings. You can configure TouchScreenButton to be visible only on touch devices, helping you develop your game both for desktop and mobile devices.   Properties  
String action ""  
BitMap bitmask   
bool passby_press false  
Shape2D shape   
bool shape_centered true  
bool shape_visible true  
Texture2D texture_normal   
Texture2D texture_pressed   
VisibilityMode visibility_mode 0     Methods  
bool is_pressed ( ) const     Signals pressed ( ) Emitted when the button is pressed (down). released ( ) Emitted when the button is released (up).   Enumerations enum VisibilityMode: 
VisibilityMode VISIBILITY_ALWAYS = 0
 Always visible. 
VisibilityMode VISIBILITY_TOUCHSCREEN_ONLY = 1
 Visible on touch screens only.   Property Descriptions 
String action = ""
  void set_action ( String value )
 
String get_action ( )
  The button's action. Actions can be handled with InputEventAction. 
BitMap bitmask  void set_bitmask ( BitMap value )
 
BitMap get_bitmask ( )
  The button's bitmask. 
bool passby_press = false
  void set_passby_press ( bool value )
 
bool is_passby_press_enabled ( )
  If true, the pressed and released signals are emitted whenever a pressed finger goes in and out of the button, even if the pressure started outside the active area of the button. Note: This is a "pass-by" (not "bypass") press mode. 
Shape2D shape  void set_shape ( Shape2D value )
 
Shape2D get_shape ( )
  The button's shape. 
bool shape_centered = true
  void set_shape_centered ( bool value )
 
bool is_shape_centered ( )
  If true, the button's shape is centered in the provided texture. If no texture is used, this property has no effect. 
bool shape_visible = true
  void set_shape_visible ( bool value )
 
bool is_shape_visible ( )
  If true, the button's shape is visible in the editor. 
Texture2D texture_normal  void set_texture_normal ( Texture2D value )
 
Texture2D get_texture_normal ( )
  The button's texture for the normal state. 
Texture2D texture_pressed  void set_texture_pressed ( Texture2D value )
 
Texture2D get_texture_pressed ( )
  The button's texture for the pressed state. 
VisibilityMode visibility_mode = 0
  void set_visibility_mode ( VisibilityMode value )
 
VisibilityMode get_visibility_mode ( )
  The button's visibility mode. See VisibilityMode for possible values.   Method Descriptions 
bool is_pressed ( ) const
 Returns true if this button is currently pressed.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_touchscreenbutton.html


classes/class_animationrootnode
-----------------------------------------------------------
AnimationRootNode Inherits: AnimationNode < Resource < RefCounted < Object Inherited By: AnimationNodeAnimation, AnimationNodeBlendSpace1D, AnimationNodeBlendSpace2D, AnimationNodeBlendTree, AnimationNodeStateMachine Base class for AnimationNodes that hold one or multiple composite animations. Usually used for AnimationTree.tree_root.  Description AnimationRootNode is a base class for AnimationNodes that hold a complete animation. A complete animation refers to the output of an AnimationNodeOutput in an AnimationNodeBlendTree or the output of another AnimationRootNode. Used for AnimationTree.tree_root or in other AnimationRootNodes. Examples of built-in root nodes include AnimationNodeBlendTree (allows blending nodes between each other using various modes), AnimationNodeStateMachine (allows to configure blending and transitions between nodes using a state machine pattern), AnimationNodeBlendSpace2D (allows linear blending between three AnimationNodes), AnimationNodeBlendSpace1D (allows linear blending only between two AnimationNodes).   Tutorials  Using AnimationTree   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationrootnode.html


classes/class_lightmapprobe
-----------------------------------------------------------
LightmapProbe Inherits: Node3D < Node < Object Represents a single manually placed probe for dynamic object lighting with LightmapGI.  Description LightmapProbe represents the position of a single manually placed probe for dynamic object lighting with LightmapGI. Typically, LightmapGI probes are placed automatically by setting LightmapGI.generate_probes_subdiv to a value other than LightmapGI.GENERATE_PROBES_DISABLED. By creating LightmapProbe nodes before baking lightmaps, you can add more probes in specific areas for greater detail, or disable automatic generation and rely only on manually placed probes instead.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_lightmapprobe.html


classes/class_filesystemdock
-----------------------------------------------------------
FileSystemDock Inherits: VBoxContainer < BoxContainer < Container < Control < CanvasItem < Node < Object Godot editor's dock for managing files in the project.  Description This class is available only in EditorPlugins and can't be instantiated. You can access it using EditorInterface.get_file_system_dock. While FileSystemDock doesn't expose any methods for file manipulation, it can listen for various file-related signals.   Methods  
void add_resource_tooltip_plugin ( EditorResourceTooltipPlugin plugin )  
void navigate_to_path ( String path )  
void remove_resource_tooltip_plugin ( EditorResourceTooltipPlugin plugin )     Signals display_mode_changed ( ) Emitted when the user switches file display mode or split mode. file_removed ( String file ) Emitted when the given file was removed. files_moved ( String old_file, String new_file ) Emitted when a file is moved from old_file path to new_file path. folder_moved ( String old_folder, String new_folder ) Emitted when a folder is moved from old_folder path to new_folder path. folder_removed ( String folder ) Emitted when the given folder was removed. inherit ( String file ) Emitted when a new scene is created that inherits the scene at file path. instantiate ( PackedStringArray files ) Emitted when the given scenes are being instantiated in the editor. resource_removed ( Resource resource ) Emitted when an external resource had its file removed.   Method Descriptions void add_resource_tooltip_plugin ( EditorResourceTooltipPlugin plugin ) Registers a new EditorResourceTooltipPlugin. void navigate_to_path ( String path ) Sets the given path as currently selected, ensuring that the selected file/directory is visible. void remove_resource_tooltip_plugin ( EditorResourceTooltipPlugin plugin ) Removes an EditorResourceTooltipPlugin. Fails if the plugin wasn't previously added.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_filesystemdock.html


classes/class_gltfaccessor
-----------------------------------------------------------
GLTFAccessor Inherits: Resource < RefCounted < Object  There is currently no description for this class. Please help us by contributing one!   Tutorials  Runtime file loading and saving    Properties  
int buffer_view -1  
int byte_offset 0  
int component_type 0  
int count 0  
PackedFloat64Array max PackedFloat64Array()  
PackedFloat64Array min PackedFloat64Array()  
bool normalized false  
int sparse_count 0  
int sparse_indices_buffer_view 0  
int sparse_indices_byte_offset 0  
int sparse_indices_component_type 0  
int sparse_values_buffer_view 0  
int sparse_values_byte_offset 0  
int type 0     Property Descriptions 
int buffer_view = -1
  void set_buffer_view ( int value )
 
int get_buffer_view ( )
   There is currently no description for this property. Please help us by contributing one!  
int byte_offset = 0
  void set_byte_offset ( int value )
 
int get_byte_offset ( )
   There is currently no description for this property. Please help us by contributing one!  
int component_type = 0
  void set_component_type ( int value )
 
int get_component_type ( )
   There is currently no description for this property. Please help us by contributing one!  
int count = 0
  void set_count ( int value )
 
int get_count ( )
   There is currently no description for this property. Please help us by contributing one!  
PackedFloat64Array max = PackedFloat64Array()
  void set_max ( PackedFloat64Array value )
 
PackedFloat64Array get_max ( )
   There is currently no description for this property. Please help us by contributing one!  
PackedFloat64Array min = PackedFloat64Array()
  void set_min ( PackedFloat64Array value )
 
PackedFloat64Array get_min ( )
   There is currently no description for this property. Please help us by contributing one!  
bool normalized = false
  void set_normalized ( bool value )
 
bool get_normalized ( )
   There is currently no description for this property. Please help us by contributing one!  
int sparse_count = 0
  void set_sparse_count ( int value )
 
int get_sparse_count ( )
   There is currently no description for this property. Please help us by contributing one!  
int sparse_indices_buffer_view = 0
  void set_sparse_indices_buffer_view ( int value )
 
int get_sparse_indices_buffer_view ( )
   There is currently no description for this property. Please help us by contributing one!  
int sparse_indices_byte_offset = 0
  void set_sparse_indices_byte_offset ( int value )
 
int get_sparse_indices_byte_offset ( )
   There is currently no description for this property. Please help us by contributing one!  
int sparse_indices_component_type = 0
  void set_sparse_indices_component_type ( int value )
 
int get_sparse_indices_component_type ( )
   There is currently no description for this property. Please help us by contributing one!  
int sparse_values_buffer_view = 0
  void set_sparse_values_buffer_view ( int value )
 
int get_sparse_values_buffer_view ( )
   There is currently no description for this property. Please help us by contributing one!  
int sparse_values_byte_offset = 0
  void set_sparse_values_byte_offset ( int value )
 
int get_sparse_values_byte_offset ( )
   There is currently no description for this property. Please help us by contributing one!  
int type = 0
  void set_type ( int value )
 
int get_type ( )
   There is currently no description for this property. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfaccessor.html


classes/class_heightmapshape3d
-----------------------------------------------------------
HeightMapShape3D Inherits: Shape3D < Resource < RefCounted < Object A 3D height map shape used for physics collision.  Description A 3D heightmap shape, intended for use in physics. Usually used to provide a shape for a CollisionShape3D. This is useful for terrain, but it is limited as overhangs (such as caves) cannot be stored. Holes in a HeightMapShape3D are created by assigning very low values to points in the desired area. Performance: HeightMapShape3D is faster to check collisions against than ConcavePolygonShape3D, but it is significantly slower than primitive shapes like BoxShape3D.   Properties  
PackedFloat32Array map_data PackedFloat32Array(0, 0, 0, 0)  
int map_depth 2  
int map_width 2     Property Descriptions 
PackedFloat32Array map_data = PackedFloat32Array(0, 0, 0, 0)
  void set_map_data ( PackedFloat32Array value )
 
PackedFloat32Array get_map_data ( )
  Height map data, pool array must be of map_width * map_depth size. 
int map_depth = 2
  void set_map_depth ( int value )
 
int get_map_depth ( )
  Number of vertices in the depth of the height map. Changing this will resize the map_data. 
int map_width = 2
  void set_map_width ( int value )
 
int get_map_width ( )
  Number of vertices in the width of the height map. Changing this will resize the map_data.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_heightmapshape3d.html


classes/class_timer
-----------------------------------------------------------
Timer Inherits: Node < Object A countdown timer.  Description Counts down a specified interval and emits a signal on reaching 0. Can be set to repeat or "one-shot" mode. Note: Timers are affected by Engine.time_scale, a higher scale means quicker timeouts, and vice versa. Note: To create a one-shot timer without instantiating a node, use SceneTree.create_timer.   Tutorials  2D Dodge The Creeps Demo    Properties  
bool autostart false  
bool one_shot false  
bool paused   
TimerProcessCallback process_callback 1  
float time_left   
float wait_time 1.0     Methods  
bool is_stopped ( ) const  
void start ( float time_sec=-1 )  
void stop ( )     Signals timeout ( ) Emitted when the timer reaches 0.   Enumerations enum TimerProcessCallback: 
TimerProcessCallback TIMER_PROCESS_PHYSICS = 0
 Update the timer during physics frames (see Node.NOTIFICATION_INTERNAL_PHYSICS_PROCESS). 
TimerProcessCallback TIMER_PROCESS_IDLE = 1
 Update the timer during process frames (see Node.NOTIFICATION_INTERNAL_PROCESS).   Property Descriptions 
bool autostart = false
  void set_autostart ( bool value )
 
bool has_autostart ( )
  If true, the timer will automatically start when entering the scene tree. Note: This property is automatically set to false after the timer enters the scene tree and starts. 
bool one_shot = false
  void set_one_shot ( bool value )
 
bool is_one_shot ( )
  If true, the timer will stop when reaching 0. If false, it will restart. 
bool paused  void set_paused ( bool value )
 
bool is_paused ( )
  If true, the timer is paused and will not process until it is unpaused again, even if start is called. 
TimerProcessCallback process_callback = 1
  void set_timer_process_callback ( TimerProcessCallback value )
 
TimerProcessCallback get_timer_process_callback ( )
  Processing callback. See TimerProcessCallback. 
float time_left  
float get_time_left ( )
  The timer's remaining time in seconds. Returns 0 if the timer is inactive. Note: This value is read-only and cannot be set. It is based on wait_time, which can be set using start. 
float wait_time = 1.0
  void set_wait_time ( float value )
 
float get_wait_time ( )
  The wait time in seconds. Note: Timers can only emit once per rendered frame at most (or once per physics frame if process_callback is TIMER_PROCESS_PHYSICS). This means very low wait times (lower than 0.05 seconds) will behave in significantly different ways depending on the rendered framerate. For very low wait times, it is recommended to use a process loop in a script instead of using a Timer node. Timers are affected by Engine.time_scale, a higher scale means quicker timeouts, and vice versa.   Method Descriptions 
bool is_stopped ( ) const
 Returns true if the timer is stopped. void start ( float time_sec=-1 ) Starts the timer. Sets wait_time to time_sec if time_sec > 0. This also resets the remaining time to wait_time. Note: This method will not resume a paused timer. See paused. void stop ( ) Stops the timer.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_timer.html


classes/class_concavepolygonshape3d
-----------------------------------------------------------
ConcavePolygonShape3D Inherits: Shape3D < Resource < RefCounted < Object A 3D trimesh shape used for physics collision.  Description A 3D trimesh shape, intended for use in physics. Usually used to provide a shape for a CollisionShape3D. Being just a collection of interconnected triangles, ConcavePolygonShape3D is the most freely configurable single 3D shape. It can be used to form polyhedra of any nature, or even shapes that don't enclose a volume. However, ConcavePolygonShape3D is hollow even if the interconnected triangles do enclose a volume, which often makes it unsuitable for physics or detection. Note: When used for collision, ConcavePolygonShape3D is intended to work with static CollisionShape3D nodes like StaticBody3D and will likely not behave well for CharacterBody3Ds or RigidBody3Ds in a mode other than Static. Warning: Physics bodies that are small have a chance to clip through this shape when moving fast. This happens because on one frame, the physics body may be on the "outside" of the shape, and on the next frame it may be "inside" it. ConcavePolygonShape3D is hollow, so it won't detect a collision. Performance: Due to its complexity, ConcavePolygonShape3D is the slowest 3D collision shape to check collisions against. Its use should generally be limited to level geometry. For convex geometry, ConvexPolygonShape3D should be used. For dynamic physics bodies that need concave collision, several ConvexPolygonShape3Ds can be used to represent its collision by using convex decomposition; see ConvexPolygonShape3D's documentation for instructions.   Tutorials  3D Physics Tests Demo    Properties  
bool backface_collision false     Methods  
PackedVector3Array get_faces ( ) const  
void set_faces ( PackedVector3Array faces )     Property Descriptions 
bool backface_collision = false
  void set_backface_collision_enabled ( bool value )
 
bool is_backface_collision_enabled ( )
  If set to true, collisions occur on both sides of the concave shape faces. Otherwise they occur only along the face normals.   Method Descriptions 
PackedVector3Array get_faces ( ) const
 Returns the faces of the trimesh shape as an array of vertices. The array (of length divisible by three) is naturally divided into triples; each triple of vertices defines a triangle. void set_faces ( PackedVector3Array faces ) Sets the faces of the trimesh shape from an array of vertices. The faces array should be composed of triples such that each triple of vertices defines a triangle.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_concavepolygonshape3d.html


classes/class_texturecubemaparrayrd
-----------------------------------------------------------
TextureCubemapArrayRD Inherits: TextureLayeredRD < TextureLayered < Texture < Resource < RefCounted < Object Texture Array for Cubemaps that is bound to a texture created on the RenderingDevice.  Description This texture class allows you to use a cubemap array texture created directly on the RenderingDevice as a texture for materials, meshes, etc.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texturecubemaparrayrd.html


classes/class_csgbox3d
-----------------------------------------------------------
CSGBox3D Inherits: CSGPrimitive3D < CSGShape3D < GeometryInstance3D < VisualInstance3D < Node3D < Node < Object A CSG Box shape.  Description This node allows you to create a box for use with the CSG system. Note: CSG nodes are intended to be used for level prototyping. Creating CSG nodes has a significant CPU cost compared to creating a MeshInstance3D with a PrimitiveMesh. Moving a CSG node within another CSG node also has a significant CPU cost, so it should be avoided during gameplay.   Tutorials  Prototyping levels with CSG    Properties  
Material material   
Vector3 size Vector3(1, 1, 1)     Property Descriptions 
Material material  void set_material ( Material value )
 
Material get_material ( )
  The material used to render the box. 
Vector3 size = Vector3(1, 1, 1)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The box's width, height and depth.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_csgbox3d.html


classes/class_audioeffectspectrumanalyzer
-----------------------------------------------------------
AudioEffectSpectrumAnalyzer Inherits: AudioEffect < Resource < RefCounted < Object Audio effect that can be used for real-time audio visualizations.  Description This audio effect does not affect sound output, but can be used for real-time audio visualizations. See also AudioStreamGenerator for procedurally generating sounds.   Tutorials  Audio Spectrum Demo Godot 3.2 will get new audio features    Properties  
float buffer_length 2.0  
FFTSize fft_size 2  
float tap_back_pos 0.01     Enumerations enum FFTSize: 
FFTSize FFT_SIZE_256 = 0
 Use a buffer of 256 samples for the Fast Fourier transform. Lowest latency, but least stable over time. 
FFTSize FFT_SIZE_512 = 1
 Use a buffer of 512 samples for the Fast Fourier transform. Low latency, but less stable over time. 
FFTSize FFT_SIZE_1024 = 2
 Use a buffer of 1024 samples for the Fast Fourier transform. This is a compromise between latency and stability over time. 
FFTSize FFT_SIZE_2048 = 3
 Use a buffer of 2048 samples for the Fast Fourier transform. High latency, but stable over time. 
FFTSize FFT_SIZE_4096 = 4
 Use a buffer of 4096 samples for the Fast Fourier transform. Highest latency, but most stable over time. 
FFTSize FFT_SIZE_MAX = 5
 Represents the size of the FFTSize enum.   Property Descriptions 
float buffer_length = 2.0
  void set_buffer_length ( float value )
 
float get_buffer_length ( )
  The length of the buffer to keep (in seconds). Higher values keep data around for longer, but require more memory. 
FFTSize fft_size = 2
  void set_fft_size ( FFTSize value )
 
FFTSize get_fft_size ( )
  The size of the Fast Fourier transform buffer. Higher values smooth out the spectrum analysis over time, but have greater latency. The effects of this higher latency are especially noticeable with sudden amplitude changes. 
float tap_back_pos = 0.01
  void set_tap_back_pos ( float value )
 
float get_tap_back_pos ( )
   There is currently no description for this property. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectspectrumanalyzer.html


classes/class_openxripbinding
-----------------------------------------------------------
OpenXRIPBinding Inherits: Resource < RefCounted < Object Defines a binding between an OpenXRAction and an XR input or output.  Description This binding resource binds an OpenXRAction to inputs or outputs. As most controllers have left hand and right versions that are handled by the same interaction profile we can specify multiple bindings. For instance an action "Fire" could be bound to both "/user/hand/left/input/trigger" and "/user/hand/right/input/trigger".   Properties  
OpenXRAction action   
PackedStringArray paths PackedStringArray()     Methods  
void add_path ( String path )  
int get_path_count ( ) const  
bool has_path ( String path ) const  
void remove_path ( String path )     Property Descriptions 
OpenXRAction action  void set_action ( OpenXRAction value )
 
OpenXRAction get_action ( )
  OpenXRAction that is bound to these paths. 
PackedStringArray paths = PackedStringArray()
  void set_paths ( PackedStringArray value )
 
PackedStringArray get_paths ( )
  Paths that define the inputs or outputs bound on the device.   Method Descriptions void add_path ( String path ) Add an input/output path to this binding. 
int get_path_count ( ) const
 Get the number of input/output paths in this binding. 
bool has_path ( String path ) const
 Returns true if this input/output path is part of this binding. void remove_path ( String path ) Removes this input/output path from this binding.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_openxripbinding.html


classes/class_placeholdertexture2darray
-----------------------------------------------------------
PlaceholderTexture2DArray Inherits: PlaceholderTextureLayered < TextureLayered < Texture < Resource < RefCounted < Object Placeholder class for a 2-dimensional texture array.  Description This class is used when loading a project that uses a Texture2D subclass in 2 conditions:  When running the project exported in dedicated server mode, only the texture's dimensions are kept (as they may be relied upon for gameplay purposes or positioning of other elements). This allows reducing the exported PCK's size significantly. When this subclass is missing due to using a different engine version or build (e.g. modules disabled).  Note: This is not intended to be used as an actual texture for rendering. It is not guaranteed to work like one in shaders or materials (for example when calculating UV).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_placeholdertexture2darray.html


classes/class_visibleonscreennotifier2d
-----------------------------------------------------------
VisibleOnScreenNotifier2D Inherits: Node2D < CanvasItem < Node < Object Inherited By: VisibleOnScreenEnabler2D A rectangular region of 2D space that detects whether it is visible on screen.  Description VisibleOnScreenEnabler2D represents a rectangular region of 2D space. When any part of this region becomes visible on screen or in a viewport, it will emit a screen_entered signal, and likewise it will emit a screen_exited signal when no part of it remains visible. If you want a node to be enabled automatically when this region is visible on screen, use VisibleOnScreenEnabler2D. Note: VisibleOnScreenNotifier2D uses the render culling code to determine whether it's visible on screen, so it won't function unless CanvasItem.visible is set to true.   Tutorials  2D Dodge The Creeps Demo    Properties  
Rect2 rect Rect2(-10, -10, 20, 20)     Methods  
bool is_on_screen ( ) const     Signals screen_entered ( ) Emitted when the VisibleOnScreenNotifier2D enters the screen. screen_exited ( ) Emitted when the VisibleOnScreenNotifier2D exits the screen.   Property Descriptions 
Rect2 rect = Rect2(-10, -10, 20, 20)
  void set_rect ( Rect2 value )
 
Rect2 get_rect ( )
  The VisibleOnScreenNotifier2D's bounding rectangle.   Method Descriptions 
bool is_on_screen ( ) const
 If true, the bounding rectangle is on the screen. Note: It takes one frame for the VisibleOnScreenNotifier2D's visibility to be determined once added to the scene tree, so this method will always return false right after it is instantiated, before the draw pass.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visibleonscreennotifier2d.html


classes/class_cameraattributes
-----------------------------------------------------------
CameraAttributes Inherits: Resource < RefCounted < Object Inherited By: CameraAttributesPhysical, CameraAttributesPractical Parent class for camera settings.  Description Controls camera-specific attributes such as depth of field and exposure override. When used in a WorldEnvironment it provides default settings for exposure, auto-exposure, and depth of field that will be used by all cameras without their own CameraAttributes, including the editor camera. When used in a Camera3D it will override any CameraAttributes set in the WorldEnvironment. When used in VoxelGI or LightmapGI, only the exposure settings will be used. See also Environment for general 3D environment settings. This is a pure virtual class that is inherited by CameraAttributesPhysical and CameraAttributesPractical.   Properties  
bool auto_exposure_enabled false  
float auto_exposure_scale 0.4  
float auto_exposure_speed 0.5  
float exposure_multiplier 1.0  
float exposure_sensitivity 100.0     Property Descriptions 
bool auto_exposure_enabled = false
  void set_auto_exposure_enabled ( bool value )
 
bool is_auto_exposure_enabled ( )
  If true, enables the tonemapping auto exposure mode of the scene renderer. If true, the renderer will automatically determine the exposure setting to adapt to the scene's illumination and the observed light. 
float auto_exposure_scale = 0.4
  void set_auto_exposure_scale ( float value )
 
float get_auto_exposure_scale ( )
  The scale of the auto exposure effect. Affects the intensity of auto exposure. 
float auto_exposure_speed = 0.5
  void set_auto_exposure_speed ( float value )
 
float get_auto_exposure_speed ( )
  The speed of the auto exposure effect. Affects the time needed for the camera to perform auto exposure. 
float exposure_multiplier = 1.0
  void set_exposure_multiplier ( float value )
 
float get_exposure_multiplier ( )
  Multiplier for the exposure amount. A higher value results in a brighter image. 
float exposure_sensitivity = 100.0
  void set_exposure_sensitivity ( float value )
 
float get_exposure_sensitivity ( )
  Sensitivity of camera sensors, measured in ISO. A higher sensitivity results in a brighter image. Only available when ProjectSettings.rendering/lights_and_shadows/use_physical_light_units is enabled. When auto_exposure_enabled this can be used as a method of exposure compensation, doubling the value will increase the exposure value (measured in EV100) by 1 stop.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_cameraattributes.html


classes/class_gltfskeleton
-----------------------------------------------------------
GLTFSkeleton Inherits: Resource < RefCounted < Object  There is currently no description for this class. Please help us by contributing one!   Tutorials  Runtime file loading and saving    Properties  
PackedInt32Array joints PackedInt32Array()  
PackedInt32Array roots PackedInt32Array()     Methods  
BoneAttachment3D get_bone_attachment ( int idx )  
int get_bone_attachment_count ( )  
Dictionary get_godot_bone_node ( )  
Skeleton3D get_godot_skeleton ( )  
String[] get_unique_names ( )  
void set_godot_bone_node ( Dictionary godot_bone_node )  
void set_unique_names ( String[] unique_names )     Property Descriptions 
PackedInt32Array joints = PackedInt32Array()
  void set_joints ( PackedInt32Array value )
 
PackedInt32Array get_joints ( )
   There is currently no description for this property. Please help us by contributing one!  
PackedInt32Array roots = PackedInt32Array()
  void set_roots ( PackedInt32Array value )
 
PackedInt32Array get_roots ( )
   There is currently no description for this property. Please help us by contributing one!    Method Descriptions 
BoneAttachment3D get_bone_attachment ( int idx )  There is currently no description for this method. Please help us by contributing one!  
int get_bone_attachment_count ( )  There is currently no description for this method. Please help us by contributing one!  
Dictionary get_godot_bone_node ( ) Returns a Dictionary that maps skeleton bone indices to the indices of GLTF nodes. This property is unused during import, and only set during export. In a GLTF file, a bone is a node, so Godot converts skeleton bones to GLTF nodes. 
Skeleton3D get_godot_skeleton ( )  There is currently no description for this method. Please help us by contributing one!  
String[] get_unique_names ( )  There is currently no description for this method. Please help us by contributing one!  void set_godot_bone_node ( Dictionary godot_bone_node ) Sets a Dictionary that maps skeleton bone indices to the indices of GLTF nodes. This property is unused during import, and only set during export. In a GLTF file, a bone is a node, so Godot converts skeleton bones to GLTF nodes. void set_unique_names ( String[] unique_names )  There is currently no description for this method. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfskeleton.html


classes/class_audioeffectbandlimitfilter
-----------------------------------------------------------
AudioEffectBandLimitFilter Inherits: AudioEffectFilter < AudioEffect < Resource < RefCounted < Object Adds a band limit filter to the audio bus.  Description Limits the frequencies in a range around the AudioEffectFilter.cutoff_hz and allows frequencies outside of this range to pass.   Tutorials  Audio buses   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectbandlimitfilter.html


classes/class_physicsbody2d
-----------------------------------------------------------
PhysicsBody2D Inherits: CollisionObject2D < Node2D < CanvasItem < Node < Object Inherited By: CharacterBody2D, RigidBody2D, StaticBody2D Abstract base class for 2D game objects affected by physics.  Description PhysicsBody2D is an abstract base class for 2D game objects affected by physics. All 2D physics bodies inherit from it.   Tutorials  Physics introduction    Properties  
bool input_pickable false (overrides CollisionObject2D)     Methods  
void add_collision_exception_with ( Node body )  
PhysicsBody2D[] get_collision_exceptions ( )  
KinematicCollision2D move_and_collide ( Vector2 motion, bool test_only=false, float safe_margin=0.08, bool recovery_as_collision=false )  
void remove_collision_exception_with ( Node body )  
bool test_move ( Transform2D from, Vector2 motion, KinematicCollision2D collision=null, float safe_margin=0.08, bool recovery_as_collision=false )     Method Descriptions void add_collision_exception_with ( Node body ) Adds a body to the list of bodies that this body can't collide with. 
PhysicsBody2D[] get_collision_exceptions ( ) Returns an array of nodes that were added as collision exceptions for this body. 
KinematicCollision2D move_and_collide ( Vector2 motion, bool test_only=false, float safe_margin=0.08, bool recovery_as_collision=false ) Moves the body along the vector motion. In order to be frame rate independent in Node._physics_process or Node._process, motion should be computed using delta. Returns a KinematicCollision2D, which contains information about the collision when stopped, or when touching another body along the motion. If test_only is true, the body does not move but the would-be collision information is given. safe_margin is the extra margin used for collision recovery (see CharacterBody2D.safe_margin for more details). If recovery_as_collision is true, any depenetration from the recovery phase is also reported as a collision; this is used e.g. by CharacterBody2D for improving floor detection during floor snapping. void remove_collision_exception_with ( Node body ) Removes a body from the list of bodies that this body can't collide with. 
bool test_move ( Transform2D from, Vector2 motion, KinematicCollision2D collision=null, float safe_margin=0.08, bool recovery_as_collision=false ) Checks for collisions without moving the body. In order to be frame rate independent in Node._physics_process or Node._process, motion should be computed using delta. Virtually sets the node's position, scale and rotation to that of the given Transform2D, then tries to move the body along the vector motion. Returns true if a collision would stop the body from moving along the whole path. collision is an optional object of type KinematicCollision2D, which contains additional information about the collision when stopped, or when touching another body along the motion. safe_margin is the extra margin used for collision recovery (see CharacterBody2D.safe_margin for more details). If recovery_as_collision is true, any depenetration from the recovery phase is also reported as a collision; this is useful for checking whether the body would touch any other bodies.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_physicsbody2d.html


classes/class_range
-----------------------------------------------------------
Range Inherits: Control < CanvasItem < Node < Object Inherited By: EditorSpinSlider, ProgressBar, ScrollBar, Slider, SpinBox, TextureProgressBar Abstract base class for controls that represent a number within a range.  Description Range is an abstract base class for controls that represent a number within a range, using a configured step and page size. See e.g. ScrollBar and Slider for examples of higher-level nodes using Range.   Properties  
bool allow_greater false  
bool allow_lesser false  
bool exp_edit false  
float max_value 100.0  
float min_value 0.0  
float page 0.0  
float ratio   
bool rounded false  
BitField<SizeFlags> size_flags_vertical 0 (overrides Control)  
float step 0.01  
float value 0.0     Methods  
void _value_changed ( float new_value ) virtual  
void set_value_no_signal ( float value )  
void share ( Node with )  
void unshare ( )     Signals changed ( ) Emitted when min_value, max_value, page, or step change. value_changed ( float value ) Emitted when value changes. When used on a Slider, this is called continuously while dragging (potentially every frame). If you are performing an expensive operation in a function connected to value_changed, consider using a debouncing Timer to call the function less often. Note: Unlike signals such as LineEdit.text_changed, value_changed is also emitted when value is set directly via code.   Property Descriptions 
bool allow_greater = false
  void set_allow_greater ( bool value )
 
bool is_greater_allowed ( )
  If true, value may be greater than max_value. 
bool allow_lesser = false
  void set_allow_lesser ( bool value )
 
bool is_lesser_allowed ( )
  If true, value may be less than min_value. 
bool exp_edit = false
  void set_exp_ratio ( bool value )
 
bool is_ratio_exp ( )
  If true, and min_value is greater than 0, value will be represented exponentially rather than linearly. 
float max_value = 100.0
  void set_max ( float value )
 
float get_max ( )
  Maximum value. Range is clamped if value is greater than max_value. 
float min_value = 0.0
  void set_min ( float value )
 
float get_min ( )
  Minimum value. Range is clamped if value is less than min_value. 
float page = 0.0
  void set_page ( float value )
 
float get_page ( )
  Page size. Used mainly for ScrollBar. ScrollBar's length is its size multiplied by page over the difference between min_value and max_value. 
float ratio  void set_as_ratio ( float value )
 
float get_as_ratio ( )
  The value mapped between 0 and 1. 
bool rounded = false
  void set_use_rounded_values ( bool value )
 
bool is_using_rounded_values ( )
  If true, value will always be rounded to the nearest integer. 
float step = 0.01
  void set_step ( float value )
 
float get_step ( )
  If greater than 0, value will always be rounded to a multiple of this property's value. If rounded is also true, value will first be rounded to a multiple of this property's value, then rounded to the nearest integer. 
float value = 0.0
  void set_value ( float value )
 
float get_value ( )
  Range's current value. Changing this property (even via code) will trigger value_changed signal. Use set_value_no_signal if you want to avoid it.   Method Descriptions void _value_changed ( float new_value ) virtual
 Called when the Range's value is changed (following the same conditions as value_changed). void set_value_no_signal ( float value ) Sets the Range's current value to the specified value, without emitting the value_changed signal. void share ( Node with ) Binds two Ranges together along with any ranges previously grouped with either of them. When any of range's member variables change, it will share the new value with all other ranges in its group. void unshare ( ) Stops the Range from sharing its member variables with any other.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_range.html


classes/class_ninepatchrect
-----------------------------------------------------------
NinePatchRect Inherits: Control < CanvasItem < Node < Object A control that displays a texture by keeping its corners intact, but tiling its edges and center.  Description Also known as 9-slice panels, NinePatchRect produces clean panels of any size based on a small texture. To do so, it splits the texture in a 3Ã—3 grid. When you scale the node, it tiles the texture's edges horizontally or vertically, tiles the center on both axes, and leaves the corners unchanged.   Properties  
AxisStretchMode axis_stretch_horizontal 0  
AxisStretchMode axis_stretch_vertical 0  
bool draw_center true  
MouseFilter mouse_filter 2 (overrides Control)  
int patch_margin_bottom 0  
int patch_margin_left 0  
int patch_margin_right 0  
int patch_margin_top 0  
Rect2 region_rect Rect2(0, 0, 0, 0)  
Texture2D texture      Methods  
int get_patch_margin ( Side margin ) const  
void set_patch_margin ( Side margin, int value )     Signals texture_changed ( ) Emitted when the node's texture changes.   Enumerations enum AxisStretchMode: 
AxisStretchMode AXIS_STRETCH_MODE_STRETCH = 0
 Stretches the center texture across the NinePatchRect. This may cause the texture to be distorted. 
AxisStretchMode AXIS_STRETCH_MODE_TILE = 1
 Repeats the center texture across the NinePatchRect. This won't cause any visible distortion. The texture must be seamless for this to work without displaying artifacts between edges. 
AxisStretchMode AXIS_STRETCH_MODE_TILE_FIT = 2
 Repeats the center texture across the NinePatchRect, but will also stretch the texture to make sure each tile is visible in full. This may cause the texture to be distorted, but less than AXIS_STRETCH_MODE_STRETCH. The texture must be seamless for this to work without displaying artifacts between edges.   Property Descriptions 
AxisStretchMode axis_stretch_horizontal = 0
  void set_h_axis_stretch_mode ( AxisStretchMode value )
 
AxisStretchMode get_h_axis_stretch_mode ( )
  The stretch mode to use for horizontal stretching/tiling. See AxisStretchMode for possible values. 
AxisStretchMode axis_stretch_vertical = 0
  void set_v_axis_stretch_mode ( AxisStretchMode value )
 
AxisStretchMode get_v_axis_stretch_mode ( )
  The stretch mode to use for vertical stretching/tiling. See AxisStretchMode for possible values. 
bool draw_center = true
  void set_draw_center ( bool value )
 
bool is_draw_center_enabled ( )
  If true, draw the panel's center. Else, only draw the 9-slice's borders. 
int patch_margin_bottom = 0
  void set_patch_margin ( Side margin, int value )
 
int get_patch_margin ( Side margin ) const
  The height of the 9-slice's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders. 
int patch_margin_left = 0
  void set_patch_margin ( Side margin, int value )
 
int get_patch_margin ( Side margin ) const
  The width of the 9-slice's left column. A margin of 16 means the 9-slice's left corners and side will have a width of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders. 
int patch_margin_right = 0
  void set_patch_margin ( Side margin, int value )
 
int get_patch_margin ( Side margin ) const
  The width of the 9-slice's right column. A margin of 16 means the 9-slice's right corners and side will have a width of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders. 
int patch_margin_top = 0
  void set_patch_margin ( Side margin, int value )
 
int get_patch_margin ( Side margin ) const
  The height of the 9-slice's top row. A margin of 16 means the 9-slice's top corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders. 
Rect2 region_rect = Rect2(0, 0, 0, 0)
  void set_region_rect ( Rect2 value )
 
Rect2 get_region_rect ( )
  Rectangular region of the texture to sample from. If you're working with an atlas, use this property to define the area the 9-slice should use. All other properties are relative to this one. If the rect is empty, NinePatchRect will use the whole texture. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  The node's texture resource.   Method Descriptions 
int get_patch_margin ( Side margin ) const
 Returns the size of the margin on the specified Side. void set_patch_margin ( Side margin, int value ) Sets the size of the margin on the specified Side to value pixels.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_ninepatchrect.html


getting_started/introduction/learning_new_features
-----------------------------------------------------------
Learning new features Godot is a feature-rich game engine. There is a lot to learn about it. This page explains how you can use the online manual, built-in code reference, and join online communities to learn new features and techniques.  Making the most of this manual What you are reading now is the user manual. It documents each of the engine's concepts and available features. When learning a new topic, you can start by browsing the corresponding section of this website. The left menu allows you to explore broad topics while the search bar will help you find more specific pages. If a page exists for a given theme, it will often link to more related content.  The manual has a companion class reference that explains each Godot class's available functions and properties when programming. While the manual covers general features, concepts, and how to use the editor, the reference is all about using Godot's scripting API (Application Programming Interface). You can access it both online and offline. We recommend browsing the reference offline, from within the Godot editor. To do so, go to Help -> Search Help or press F1.  To browse it online, head to the manual's Class Reference section. A class reference's page tells you:  
Where the class exists in the inheritance hierarchy. You can click the top links to jump to parent classes and see the properties and methods a type inherits.   A summary of the class's role and use cases. An explanation of the class's properties, methods, signals, enums, and constants. Links to manual pages further detailing the class.   Note If the manual or class reference is missing or has insufficient information, please open an Issue in the official godot-docs GitHub repository to report it.  You can Ctrl-click any underlined text like the name of a class, property, method, signal, or constant to jump to it.   Learning to think like a programmer Teaching programming foundations and how to think like a game developer is beyond the scope of Godot's documentation. If you're new to programming, we recommend two excellent free resources to get you started:  Harvard university offers a free courseware to learn to program, CS50. It will teach you programming fundamentals, how code works, and how to think like a programmer. These skills are essential to become a game developer and learn any game engine efficiently. You can see this course as an investment that will save you time and trouble when you learn to create games. If you prefer books, check out the free ebook Automate The Boring Stuff With Python by Al Sweigart.    Learning with the community Godot has a growing community of users. If you're stuck on a problem or need help to better understand how to achieve something, you can ask other users for help on one of the many active communities. The best place to ask questions and find already answered ones is the official Questions & Answers site. These responses show up in search engine results and get saved, allowing other users to benefit from discussions on the platform. Once you have asked a question there, you can share its link on other social platforms. Before asking a question, be sure to look for existing answers that might solve your problem on this website or using your preferred search engine. Asking questions well and providing details will help others answer you faster and better. When asking questions, we recommend including the following information:  
Describe your goal. You want to explain what you are trying to achieve design-wise. If you are having trouble figuring out how to make a solution work, there may be a different, easier solution that accomplishes the same goal. If there is an error involved, share the exact error message. You can copy the exact error message in the editor's Debugger bottom panel by clicking the Copy Error icon. Knowing what it says can help community members better identify how you triggered the error. If there is code involved, share a code sample. Other users won't be able to help you fix a problem without seeing your code. Share the code as text directly. To do so, you can copy and paste a short code snippet in a chat box, or use a website like Pastebin to share long files. 
Share a screenshot of your Scene dock along with your written code. Most of the code you write affects nodes in your scenes. As a result, you should think of those scenes as part of your source code.  Also, please don't take a picture with your phone, the low quality and screen reflections can make it hard to understand the image. Your operating system should have a built-in tool to take screenshots with the PrtSc (Print Screen) key. Alternatively, you can use a program like ShareX on Windows or FlameShot on Linux.  
Sharing a video of your running game can also be really useful to troubleshoot your game. You can use programs like OBS Studio and Screen to GIF to capture your screen. You can then use a service like streamable or a cloud provider to upload and share your videos for free.  If you're not using the stable version of Godot, please mention the version you're using. The answer can be different as available features and the interface evolve rapidly.  Following these guidelines will maximize your chances of getting the answer you're looking for. They will save time both for you and the persons helping you.   Community tutorials This manual aims to provide a comprehensive reference of Godot's features. Aside from the 2D and 3D getting started series, it does not contain tutorials to implement specific game genres. If you're looking for a tutorial about creating a role-playing game, a platformer, or other, please see Tutorials and resources, which lists content made by the Godot community.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/getting_started/introduction/learning_new_features.html


classes/class_polygon2d
-----------------------------------------------------------
Polygon2D Inherits: Node2D < CanvasItem < Node < Object A 2D polygon.  Description A Polygon2D is defined by a set of points. Each point is connected to the next, with the final point being connected to the first, resulting in a closed polygon. Polygon2Ds can be filled with color (solid or gradient) or filled with a given texture.   Properties  
bool antialiased false  
Array bones []  
Color color Color(1, 1, 1, 1)  
int internal_vertex_count 0  
float invert_border 100.0  
bool invert_enabled false  
Vector2 offset Vector2(0, 0)  
PackedVector2Array polygon PackedVector2Array()  
Array polygons []  
NodePath skeleton NodePath("")  
Texture2D texture   
Vector2 texture_offset Vector2(0, 0)  
float texture_rotation 0.0  
Vector2 texture_scale Vector2(1, 1)  
PackedVector2Array uv PackedVector2Array()  
PackedColorArray vertex_colors PackedColorArray()     Methods  
void add_bone ( NodePath path, PackedFloat32Array weights )  
void clear_bones ( )  
void erase_bone ( int index )  
int get_bone_count ( ) const  
NodePath get_bone_path ( int index ) const  
PackedFloat32Array get_bone_weights ( int index ) const  
void set_bone_path ( int index, NodePath path )  
void set_bone_weights ( int index, PackedFloat32Array weights )     Property Descriptions 
bool antialiased = false
  void set_antialiased ( bool value )
 
bool get_antialiased ( )
  If true, polygon edges will be anti-aliased. 
Array bones = []
 Internal list of Bone2D nodes used by the assigned skeleton. Edited using the Polygon2D editor ("UV" button on the top toolbar). 
Color color = Color(1, 1, 1, 1)
  void set_color ( Color value )
 
Color get_color ( )
  The polygon's fill color. If texture is set, it will be multiplied by this color. It will also be the default color for vertices not set in vertex_colors. 
int internal_vertex_count = 0
  void set_internal_vertex_count ( int value )
 
int get_internal_vertex_count ( )
  Number of internal vertices, used for UV mapping. 
float invert_border = 100.0
  void set_invert_border ( float value )
 
float get_invert_border ( )
  Added padding applied to the bounding box when invert_enabled is set to true. Setting this value too small may result in a "Bad Polygon" error. 
bool invert_enabled = false
  void set_invert_enabled ( bool value )
 
bool get_invert_enabled ( )
  If true, the polygon will be inverted, containing the area outside the defined points and extending to the invert_border. 
Vector2 offset = Vector2(0, 0)
  void set_offset ( Vector2 value )
 
Vector2 get_offset ( )
  The offset applied to each vertex. 
PackedVector2Array polygon = PackedVector2Array()
  void set_polygon ( PackedVector2Array value )
 
PackedVector2Array get_polygon ( )
  The polygon's list of vertices. The final point will be connected to the first. Note: This returns a copy of the PackedVector2Array rather than a reference. 
Array polygons = []
  void set_polygons ( Array value )
 
Array get_polygons ( )
  The list of polygons, in case more than one is being represented. Every individual polygon is stored as a PackedInt32Array where each int is an index to a point in polygon. If empty, this property will be ignored, and the resulting single polygon will be composed of all points in polygon, using the order they are stored in. 
NodePath skeleton = NodePath("")
  void set_skeleton ( NodePath value )
 
NodePath get_skeleton ( )
  Path to a Skeleton2D node used for skeleton-based deformations of this polygon. If empty or invalid, skeletal deformations will not be used. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  The polygon's fill texture. Use uv to set texture coordinates. 
Vector2 texture_offset = Vector2(0, 0)
  void set_texture_offset ( Vector2 value )
 
Vector2 get_texture_offset ( )
  Amount to offset the polygon's texture. If set to Vector2(0, 0), the texture's origin (its top-left corner) will be placed at the polygon's position. 
float texture_rotation = 0.0
  void set_texture_rotation ( float value )
 
float get_texture_rotation ( )
  The texture's rotation in radians. 
Vector2 texture_scale = Vector2(1, 1)
  void set_texture_scale ( Vector2 value )
 
Vector2 get_texture_scale ( )
  Amount to multiply the uv coordinates when using texture. Larger values make the texture smaller, and vice versa. 
PackedVector2Array uv = PackedVector2Array()
  void set_uv ( PackedVector2Array value )
 
PackedVector2Array get_uv ( )
  Texture coordinates for each vertex of the polygon. There should be one UV value per polygon vertex. If there are fewer, undefined vertices will use Vector2(0, 0). 
PackedColorArray vertex_colors = PackedColorArray()
  void set_vertex_colors ( PackedColorArray value )
 
PackedColorArray get_vertex_colors ( )
  Color for each vertex. Colors are interpolated between vertices, resulting in smooth gradients. There should be one per polygon vertex. If there are fewer, undefined vertices will use color.   Method Descriptions void add_bone ( NodePath path, PackedFloat32Array weights ) Adds a bone with the specified path and weights. void clear_bones ( ) Removes all bones from this Polygon2D. void erase_bone ( int index ) Removes the specified bone from this Polygon2D. 
int get_bone_count ( ) const
 Returns the number of bones in this Polygon2D. 
NodePath get_bone_path ( int index ) const
 Returns the path to the node associated with the specified bone. 
PackedFloat32Array get_bone_weights ( int index ) const
 Returns the weight values of the specified bone. void set_bone_path ( int index, NodePath path ) Sets the path to the node associated with the specified bone. void set_bone_weights ( int index, PackedFloat32Array weights ) Sets the weight values for the specified bone.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_polygon2d.html


classes/class_videostreamplayer
-----------------------------------------------------------
VideoStreamPlayer Inherits: Control < CanvasItem < Node < Object A control used for video playback.  Description A control used for playback of VideoStream resources. Supported video formats are Ogg Theora (.ogv, VideoStreamTheora) and any format exposed via a GDExtension plugin. Warning: On Web, video playback will perform poorly due to missing architecture-specific assembly optimizations.   Tutorials  Playing videos    Properties  
int audio_track 0  
bool autoplay false  
int buffering_msec 500  
StringName bus &"Master"  
bool expand false  
bool loop false  
bool paused false  
VideoStream stream   
float stream_position   
float volume   
float volume_db 0.0     Methods  
float get_stream_length ( ) const  
String get_stream_name ( ) const  
Texture2D get_video_texture ( ) const  
bool is_playing ( ) const  
void play ( )  
void stop ( )     Signals finished ( ) Emitted when playback is finished.   Property Descriptions 
int audio_track = 0
  void set_audio_track ( int value )
 
int get_audio_track ( )
  The embedded audio track to play. 
bool autoplay = false
  void set_autoplay ( bool value )
 
bool has_autoplay ( )
  If true, playback starts when the scene loads. 
int buffering_msec = 500
  void set_buffering_msec ( int value )
 
int get_buffering_msec ( )
  Amount of time in milliseconds to store in buffer while playing. 
StringName bus = &"Master"
  void set_bus ( StringName value )
 
StringName get_bus ( )
  Audio bus to use for sound playback. 
bool expand = false
  void set_expand ( bool value )
 
bool has_expand ( )
  If true, the video scales to the control size. Otherwise, the control minimum size will be automatically adjusted to match the video stream's dimensions. 
bool loop = false
  void set_loop ( bool value )
 
bool has_loop ( )
  If true, the video restarts when it reaches its end. 
bool paused = false
  void set_paused ( bool value )
 
bool is_paused ( )
  If true, the video is paused. 
VideoStream stream  void set_stream ( VideoStream value )
 
VideoStream get_stream ( )
  The assigned video stream. See description for supported formats. 
float stream_position  void set_stream_position ( float value )
 
float get_stream_position ( )
  The current position of the stream, in seconds. Note: Changing this value won't have any effect as seeking is not implemented yet, except in video formats implemented by a GDExtension add-on. 
float volume  void set_volume ( float value )
 
float get_volume ( )
  Audio volume as a linear value. 
float volume_db = 0.0
  void set_volume_db ( float value )
 
float get_volume_db ( )
  Audio volume in dB.   Method Descriptions 
float get_stream_length ( ) const
 The length of the current stream, in seconds. Note: For VideoStreamTheora streams (the built-in format supported by Godot), this value will always be zero, as getting the stream length is not implemented yet. The feature may be supported by video formats implemented by a GDExtension add-on. 
String get_stream_name ( ) const
 Returns the video stream's name, or "<No Stream>" if no video stream is assigned. 
Texture2D get_video_texture ( ) const
 Returns the current frame as a Texture2D. 
bool is_playing ( ) const
 Returns true if the video is playing. Note: The video is still considered playing if paused during playback. void play ( ) Starts the video playback from the beginning. If the video is paused, this will not unpause the video. void stop ( ) Stops the video playback and sets the stream position to 0. Note: Although the stream position will be set to 0, the first frame of the video stream won't become the current frame.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_videostreamplayer.html


classes/class_canvasgroup
-----------------------------------------------------------
CanvasGroup Inherits: Node2D < CanvasItem < Node < Object Merges several 2D nodes into a single draw operation.  Description Child CanvasItem nodes of a CanvasGroup are drawn as a single object. It allows to e.g. draw overlapping translucent 2D nodes without blending (set CanvasItem.self_modulate property of CanvasGroup to achieve this effect). Note: The CanvasGroup uses a custom shader to read from the backbuffer to draw its children. Assigning a Material to the CanvasGroup overrides the builtin shader. To duplicate the behavior of the builtin shader in a custom Shader use the following: shader_type canvas_item;
render_mode unshaded;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_nearest;
void fragment() {
    vec4 c = textureLod(screen_texture, SCREEN_UV, 0.0);
    if (c.a > 0.0001) {
        c.rgb /= c.a;
    }
    COLOR *= c;
}
 Note: Since CanvasGroup and CanvasItem.clip_children both utilize the backbuffer, children of a CanvasGroup who have their CanvasItem.clip_children set to anything other than CanvasItem.CLIP_CHILDREN_DISABLED will not function correctly.   Properties  
float clear_margin 10.0  
float fit_margin 10.0  
bool use_mipmaps false     Property Descriptions 
float clear_margin = 10.0
  void set_clear_margin ( float value )
 
float get_clear_margin ( )
  Sets the size of the margin used to expand the clearing rect of this CanvasGroup. This expands the area of the backbuffer that will be used by the CanvasGroup. A smaller margin will reduce the area of the backbuffer used which can increase performance, however if use_mipmaps is enabled, a small margin may result in mipmap errors at the edge of the CanvasGroup. Accordingly, this should be left as small as possible, but should be increased if artifacts appear along the edges of the canvas group. 
float fit_margin = 10.0
  void set_fit_margin ( float value )
 
float get_fit_margin ( )
  Sets the size of a margin used to expand the drawable rect of this CanvasGroup. The size of the CanvasGroup is determined by fitting a rect around its children then expanding that rect by fit_margin. This increases both the backbuffer area used and the area covered by the CanvasGroup both of which can reduce performance. This should be kept as small as possible and should only be expanded when an increased size is needed (e.g. for custom shader effects). 
bool use_mipmaps = false
  void set_use_mipmaps ( bool value )
 
bool is_using_mipmaps ( )
  If true, calculates mipmaps for the backbuffer before drawing the CanvasGroup so that mipmaps can be used in a custom ShaderMaterial attached to the CanvasGroup. Generating mipmaps has a performance cost so this should not be enabled unless required.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_canvasgroup.html


getting_started/introduction/godot_design_philosophy
-----------------------------------------------------------
Godot's design philosophy Now that you've gotten your feet wet, let's talk about Godot's design. Every game engine is different and fits different needs. Not only do they offer a range of features, but the design of each engine is unique. This leads to different workflows and different ways to form your games' structures. This all stems from their respective design philosophies. This page is here to help you understand how Godot works, starting with some of its core pillars. It is not a list of available features, nor is it an engine comparison. To know if any engine can be a good fit for your project, you need to try it out for yourself and understand its design and limitations. Please watch Godot explained in 5 minutes if you're looking for an overview of the engine's features.  Object-oriented design and composition Godot embraces object-oriented design at its core with its flexible scene system and Node hierarchy. It tries to stay away from strict programming patterns to offer an intuitive way to structure your game. For one, Godot lets you compose or aggregate scenes. It's like nested prefabs: you can create a BlinkingLight scene and a BrokenLantern scene that uses the BlinkingLight. Then, create a city filled with BrokenLanterns. Change the BlinkingLight's color, save, and all the BrokenLanterns in the city will update instantly. On top of that, you can inherit from any scene. A Godot scene could be a Weapon, a Character, an Item, a Door, a Level, part of a levelâ€¦ anything you'd like. It works like a class in pure code, except you're free to design it by using the editor, using only the code, or mixing and matching the two. It's different from prefabs you find in several 3D engines, as you can then inherit from and extend those scenes. You may create a Magician that extends your Character. Modify the Character in the editor and the Magician will update as well. It helps you build your projects so that their structure matches the game's design.  Also note that Godot offers many different types of objects called nodes, each with a specific purpose. Nodes are part of a tree and always inherit from their parents up to the Node class. Although the engine does feature some nodes like collision shapes that a parent physics body will use, most nodes work independently from one another. In other words, Godot's nodes do not work like components in some other game engines.  Sprite2D is a Node2D, a CanvasItem and a Node. It has all the properties and features of its three parent classes, like transforms or the ability to draw custom shapes and render with a custom shader.   All-inclusive package Godot tries to provide its own tools to answer most common needs. It has a dedicated scripting workspace, an animation editor, a tilemap editor, a shader editor, a debugger, a profiler, the ability to hot-reload locally and on remote devices, etc.  The goal is to offer a full package to create games and a continuous user experience. You can still work with external programs as long as there is an import plugin available in Godot for it. Or you can create one, like the Tiled Map Importer. That is also partly why Godot offers its own programming language GDScript along with C#. GDScript is designed for the needs of game developers and game designers, and is tightly integrated in the engine and the editor. GDScript lets you write code using an indentation-based syntax, yet it detects types and offers a static language's quality of auto-completion. It is also optimized for gameplay code with built-in types like Vectors and Colors. Note that with GDExtension, you can write high-performance code using compiled languages like C, C++, Rust, D, Haxe, or Swift without recompiling the engine. Note that the 3D workspace doesn't feature as many tools as the 2D workspace. You'll need external programs or add-ons to edit terrains, animate complex characters, and so on. Godot provides a complete API to extend the editor's functionality using game code. See The Godot editor is a Godot game below.  A State Machine editor plugin in Godot 2 by kubecz3k. It lets you manage states and transitions visually.   Open source Godot offers a fully open source codebase under the MIT license. This means all the technologies that ship with it have to be Free (as in freedom) as well. For the most part, they're developed from the ground up by contributors. Anyone can plug in proprietary tools for the needs of their projects â€” they just won't ship with the engine. This may include Google AdMob, or FMOD. Any of these can come as third-party plugins instead. On the other hand, an open codebase means you can learn from and extend the engine to your heart's content. You can also debug games easily, as Godot will print errors with a stack trace, even if they come from the engine itself.  Note This does not affect the work you do with Godot in any way: there's no strings attached to the engine or anything you make with it.    Community-driven Godot is made by its community, for the community, and for all game creators out there. It's the needs of the users and open discussions that drive the core updates. New features from the core developers often focus on what will benefit the most users first. That said, although a handful of core developers work on it full-time, the project has thousands of contributors at the time of writing. Benevolent programmers work on features they may need themselves, so you'll see improvements in all corners of the engine at the same time in every major release.   The Godot editor is a Godot game The Godot editor runs on the game engine. It uses the engine's own UI system, it can hot-reload code and scenes when you test your projects, or run game code in the editor. This means you can use the same code and scenes for your games, or build plugins and extend the editor. This leads to a reliable and flexible UI system, as it powers the editor itself. With the @tool annotation, you can run any game code in the editor.  RPG in a Box is a voxel RPG editor made with Godot 2. It uses Godot's UI tools for its node-based programming system and for the rest of the interface. Put the @tool annotation at the top of any GDScript file and it will run in the editor. This lets you import and export plugins, create plugins like custom level editors, or create scripts with the same nodes and API you use in your projects.  Note The editor is fully written in C++ and is statically compiled into the binary. This means you can't import it as a typical project that would have a project.godot file.    Separate 2D and 3D engines Godot offers dedicated 2D and 3D rendering engines. As a result, the base unit for 2D scenes is pixels. Even though the engines are separate, you can render 2D in 3D, 3D in 2D, and overlay 2D sprites and interfaces over your 3D world.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/getting_started/introduction/godot_design_philosophy.html


classes/class_gltfphysicsshape
-----------------------------------------------------------
GLTFPhysicsShape Inherits: Resource < RefCounted < Object Represents a GLTF physics shape.  Description Represents a physics shape as defined by the OMI_collider GLTF extension. This class is an intermediary between the GLTF data and Godot's nodes, and it's abstracted in a way that allows adding support for different GLTF physics extensions in the future.   Tutorials  Runtime file loading and saving OMI_collider GLTF extension    Properties  
float height 2.0  
ImporterMesh importer_mesh   
bool is_trigger false  
int mesh_index -1  
float radius 0.5  
String shape_type ""  
Vector3 size Vector3(1, 1, 1)     Methods  
GLTFPhysicsShape from_dictionary ( Dictionary dictionary ) static  
GLTFPhysicsShape from_node ( CollisionShape3D shape_node ) static  
Dictionary to_dictionary ( ) const  
CollisionShape3D to_node ( bool cache_shapes=false )     Property Descriptions 
float height = 2.0
  void set_height ( float value )
 
float get_height ( )
  The height of the shape, in meters. This is only used when the shape type is "capsule" or "cylinder". This value should not be negative, and for "capsule" it should be at least twice the radius. 
ImporterMesh importer_mesh  void set_importer_mesh ( ImporterMesh value )
 
ImporterMesh get_importer_mesh ( )
  The ImporterMesh resource of the shape. This is only used when the shape type is "hull" (convex hull) or "trimesh" (concave trimesh). 
bool is_trigger = false
  void set_is_trigger ( bool value )
 
bool get_is_trigger ( )
  If true, indicates that this shape is a trigger. For Godot, this means that the shape should be a child of an Area3D node. This is the only variable not used in the to_node method, it's intended to be used alongside when deciding where to add the generated node as a child. 
int mesh_index = -1
  void set_mesh_index ( int value )
 
int get_mesh_index ( )
  The index of the shape's mesh in the GLTF file. This is only used when the shape type is "hull" (convex hull) or "trimesh" (concave trimesh). 
float radius = 0.5
  void set_radius ( float value )
 
float get_radius ( )
  The radius of the shape, in meters. This is only used when the shape type is "capsule", "cylinder", or "sphere". This value should not be negative. 
String shape_type = ""
  void set_shape_type ( String value )
 
String get_shape_type ( )
  The type of shape this shape represents. Valid values are "box", "capsule", "cylinder", "sphere", "hull", and "trimesh". 
Vector3 size = Vector3(1, 1, 1)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The size of the shape, in meters. This is only used when the shape type is "box", and it represents the "diameter" of the box. This value should not be negative.   Method Descriptions 
GLTFPhysicsShape from_dictionary ( Dictionary dictionary ) static
 Creates a new GLTFPhysicsShape instance by parsing the given Dictionary. 
GLTFPhysicsShape from_node ( CollisionShape3D shape_node ) static
 Create a new GLTFPhysicsShape instance from the given Godot CollisionShape3D node. 
Dictionary to_dictionary ( ) const
 Serializes this GLTFPhysicsShape instance into a Dictionary. 
CollisionShape3D to_node ( bool cache_shapes=false ) Converts this GLTFPhysicsShape instance into a Godot CollisionShape3D node.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfphysicsshape.html


classes/class_subviewport
-----------------------------------------------------------
SubViewport Inherits: Viewport < Node < Object An interface to a game world that doesn't create a window or draw to the screen directly.  Description SubViewport Isolates a rectangular region of a scene to be displayed independently. This can be used, for example, to display UI in 3D space. Note: SubViewport is a Viewport that isn't a Window, i.e. it doesn't draw anything by itself. To display anything, SubViewport must have a non-zero size and be either put inside a SubViewportContainer or assigned to a ViewportTexture.   Tutorials  Using Viewports Viewport and canvas transforms GUI in 3D Demo 3D in 2D Demo 2D in 3D Demo Screen Capture Demo Dynamic Split Screen Demo 3D Viewport Scaling Demo    Properties  
ClearMode render_target_clear_mode 0  
UpdateMode render_target_update_mode 2  
Vector2i size Vector2i(512, 512)  
Vector2i size_2d_override Vector2i(0, 0)  
bool size_2d_override_stretch false     Enumerations enum ClearMode: 
ClearMode CLEAR_MODE_ALWAYS = 0
 Always clear the render target before drawing. 
ClearMode CLEAR_MODE_NEVER = 1
 Never clear the render target. 
ClearMode CLEAR_MODE_ONCE = 2
 Clear the render target on the next frame, then switch to CLEAR_MODE_NEVER. enum UpdateMode: 
UpdateMode UPDATE_DISABLED = 0
 Do not update the render target. 
UpdateMode UPDATE_ONCE = 1
 Update the render target once, then switch to UPDATE_DISABLED. 
UpdateMode UPDATE_WHEN_VISIBLE = 2
 Update the render target only when it is visible. This is the default value. 
UpdateMode UPDATE_WHEN_PARENT_VISIBLE = 3
 Update the render target only when its parent is visible. 
UpdateMode UPDATE_ALWAYS = 4
 Always update the render target.   Property Descriptions 
ClearMode render_target_clear_mode = 0
  void set_clear_mode ( ClearMode value )
 
ClearMode get_clear_mode ( )
  The clear mode when the sub-viewport is used as a render target. Note: This property is intended for 2D usage. 
UpdateMode render_target_update_mode = 2
  void set_update_mode ( UpdateMode value )
 
UpdateMode get_update_mode ( )
  The update mode when the sub-viewport is used as a render target. 
Vector2i size = Vector2i(512, 512)
  void set_size ( Vector2i value )
 
Vector2i get_size ( )
  The width and height of the sub-viewport. Must be set to a value greater than or equal to 2 pixels on both dimensions. Otherwise, nothing will be displayed. Note: If the parent node is a SubViewportContainer and its SubViewportContainer.stretch is true, the viewport size cannot be changed manually. 
Vector2i size_2d_override = Vector2i(0, 0)
  void set_size_2d_override ( Vector2i value )
 
Vector2i get_size_2d_override ( )
  The 2D size override of the sub-viewport. If either the width or height is 0, the override is disabled. 
bool size_2d_override_stretch = false
  void set_size_2d_override_stretch ( bool value )
 
bool is_size_2d_override_stretch_enabled ( )
  If true, the 2D size override affects stretch as well.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_subviewport.html


classes/class_gradient
-----------------------------------------------------------
Gradient Inherits: Resource < RefCounted < Object A color transition.  Description This resource describes a color transition by defining a set of colored points and how to interpolate between them. See also Curve which supports more complex easing methods, but does not support colors.   Properties  
PackedColorArray colors PackedColorArray(0, 0, 0, 1, 1, 1, 1, 1)  
ColorSpace interpolation_color_space 0  
InterpolationMode interpolation_mode 0  
PackedFloat32Array offsets PackedFloat32Array(0, 1)     Methods  
void add_point ( float offset, Color color )  
Color get_color ( int point )  
float get_offset ( int point )  
int get_point_count ( ) const  
void remove_point ( int point )  
void reverse ( )  
Color sample ( float offset )  
void set_color ( int point, Color color )  
void set_offset ( int point, float offset )     Enumerations enum InterpolationMode: 
InterpolationMode GRADIENT_INTERPOLATE_LINEAR = 0
 Linear interpolation. 
InterpolationMode GRADIENT_INTERPOLATE_CONSTANT = 1
 Constant interpolation, color changes abruptly at each point and stays uniform between. This might cause visible aliasing when used for a gradient texture in some cases. 
InterpolationMode GRADIENT_INTERPOLATE_CUBIC = 2
 Cubic interpolation. enum ColorSpace: 
ColorSpace GRADIENT_COLOR_SPACE_SRGB = 0
 sRGB color space. 
ColorSpace GRADIENT_COLOR_SPACE_LINEAR_SRGB = 1
 Linear sRGB color space. 
ColorSpace GRADIENT_COLOR_SPACE_OKLAB = 2
 Oklab color space. This color space provides a smooth and uniform-looking transition between colors.   Property Descriptions 
PackedColorArray colors = PackedColorArray(0, 0, 0, 1, 1, 1, 1, 1)
  void set_colors ( PackedColorArray value )
 
PackedColorArray get_colors ( )
  Gradient's colors returned as a PackedColorArray. Note: This property returns a copy, modifying the return value does not update the gradient. To update the gradient use set_color method (for updating colors individually) or assign to this property directly (for bulk-updating all colors at once). 
ColorSpace interpolation_color_space = 0
  void set_interpolation_color_space ( ColorSpace value )
 
ColorSpace get_interpolation_color_space ( )
  The color space used to interpolate between points of the gradient. It does not affect the returned colors, which will always be in sRGB space. See ColorSpace for available modes. Note: This setting has no effect when interpolation_mode is set to GRADIENT_INTERPOLATE_CONSTANT. 
InterpolationMode interpolation_mode = 0
  void set_interpolation_mode ( InterpolationMode value )
 
InterpolationMode get_interpolation_mode ( )
  The algorithm used to interpolate between points of the gradient. See InterpolationMode for available modes. 
PackedFloat32Array offsets = PackedFloat32Array(0, 1)
  void set_offsets ( PackedFloat32Array value )
 
PackedFloat32Array get_offsets ( )
  Gradient's offsets returned as a PackedFloat32Array. Note: This property returns a copy, modifying the return value does not update the gradient. To update the gradient use set_offset method (for updating offsets individually) or assign to this property directly (for bulk-updating all offsets at once).   Method Descriptions void add_point ( float offset, Color color ) Adds the specified color to the gradient, with the specified offset. 
Color get_color ( int point ) Returns the color of the gradient color at index point. 
float get_offset ( int point ) Returns the offset of the gradient color at index point. 
int get_point_count ( ) const
 Returns the number of colors in the gradient. void remove_point ( int point ) Removes the color at index point. void reverse ( ) Reverses/mirrors the gradient. Note: This method mirrors all points around the middle of the gradient, which may produce unexpected results when interpolation_mode is set to GRADIENT_INTERPOLATE_CONSTANT. 
Color sample ( float offset ) Returns the interpolated color specified by offset. void set_color ( int point, Color color ) Sets the color of the gradient color at index point. void set_offset ( int point, float offset ) Sets the offset for the gradient color at index point.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gradient.html


classes/class_bitmap
-----------------------------------------------------------
BitMap Inherits: Resource < RefCounted < Object Boolean matrix.  Description A two-dimensional array of boolean values, can be used to efficiently store a binary matrix (every matrix element takes only one bit) and query the values using natural cartesian coordinates.   Methods  
Image convert_to_image ( ) const  
void create ( Vector2i size )  
void create_from_image_alpha ( Image image, float threshold=0.1 )  
bool get_bit ( int x, int y ) const  
bool get_bitv ( Vector2i position ) const  
Vector2i get_size ( ) const  
int get_true_bit_count ( ) const  
void grow_mask ( int pixels, Rect2i rect )  
PackedVector2Array[] opaque_to_polygons ( Rect2i rect, float epsilon=2.0 ) const  
void resize ( Vector2i new_size )  
void set_bit ( int x, int y, bool bit )  
void set_bit_rect ( Rect2i rect, bool bit )  
void set_bitv ( Vector2i position, bool bit )     Method Descriptions 
Image convert_to_image ( ) const
 Returns an image of the same size as the bitmap and with a Format of type Image.FORMAT_L8. true bits of the bitmap are being converted into white pixels, and false bits into black. void create ( Vector2i size ) Creates a bitmap with the specified size, filled with false. void create_from_image_alpha ( Image image, float threshold=0.1 ) Creates a bitmap that matches the given image dimensions, every element of the bitmap is set to false if the alpha value of the image at that position is equal to threshold or less, and true in other case. 
bool get_bit ( int x, int y ) const
 Returns bitmap's value at the specified position. 
bool get_bitv ( Vector2i position ) const
 Returns bitmap's value at the specified position. 
Vector2i get_size ( ) const
 Returns bitmap's dimensions. 
int get_true_bit_count ( ) const
 Returns the number of bitmap elements that are set to true. void grow_mask ( int pixels, Rect2i rect ) Applies morphological dilation or erosion to the bitmap. If pixels is positive, dilation is applied to the bitmap. If pixels is negative, erosion is applied to the bitmap. rect defines the area where the morphological operation is applied. Pixels located outside the rect are unaffected by grow_mask. 
PackedVector2Array[] opaque_to_polygons ( Rect2i rect, float epsilon=2.0 ) const
 Creates an Array of polygons covering a rectangular portion of the bitmap. It uses a marching squares algorithm, followed by Ramer-Douglas-Peucker (RDP) reduction of the number of vertices. Each polygon is described as a PackedVector2Array of its vertices. To get polygons covering the whole bitmap, pass: Rect2(Vector2(), get_size())
 epsilon is passed to RDP to control how accurately the polygons cover the bitmap: a lower epsilon corresponds to more points in the polygons. void resize ( Vector2i new_size ) Resizes the image to new_size. void set_bit ( int x, int y, bool bit ) Sets the bitmap's element at the specified position, to the specified value. void set_bit_rect ( Rect2i rect, bool bit ) Sets a rectangular portion of the bitmap to the specified value. void set_bitv ( Vector2i position, bool bit ) Sets the bitmap's element at the specified position, to the specified value.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_bitmap.html


classes/class_skeletonmodification2dfabrik
-----------------------------------------------------------
SkeletonModification2DFABRIK Inherits: SkeletonModification2D < Resource < RefCounted < Object A modification that uses FABRIK to manipulate a series of Bone2D nodes to reach a target.  Description This SkeletonModification2D uses an algorithm called Forward And Backward Reaching Inverse Kinematics, or FABRIK, to rotate a bone chain so that it reaches a target. FABRIK works by knowing the positions and lengths of a series of bones, typically called a "bone chain". It first starts by running a forward pass, which places the final bone at the target's position. Then all other bones are moved towards the tip bone, so they stay at the defined bone length away. Then a backwards pass is performed, where the root/first bone in the FABRIK chain is placed back at the origin. Then all other bones are moved so they stay at the defined bone length away. This positions the bone chain so that it reaches the target when possible, but all of the bones stay the correct length away from each other. Because of how FABRIK works, it often gives more natural results than those seen in SkeletonModification2DCCDIK. FABRIK also supports angle constraints, which are fully taken into account when solving. Note: The FABRIK modifier has fabrik_joints, which are the data objects that hold the data for each joint in the FABRIK chain. This is different from Bone2D nodes! FABRIK joints hold the data needed for each Bone2D in the bone chain used by FABRIK. To help control how the FABRIK joints move, a magnet vector can be passed, which can nudge the bones in a certain direction prior to solving, giving a level of control over the final result.   Properties  
int fabrik_data_chain_length 0  
NodePath target_nodepath NodePath("")     Methods  
NodePath get_fabrik_joint_bone2d_node ( int joint_idx ) const  
int get_fabrik_joint_bone_index ( int joint_idx ) const  
Vector2 get_fabrik_joint_magnet_position ( int joint_idx ) const  
bool get_fabrik_joint_use_target_rotation ( int joint_idx ) const  
void set_fabrik_joint_bone2d_node ( int joint_idx, NodePath bone2d_nodepath )  
void set_fabrik_joint_bone_index ( int joint_idx, int bone_idx )  
void set_fabrik_joint_magnet_position ( int joint_idx, Vector2 magnet_position )  
void set_fabrik_joint_use_target_rotation ( int joint_idx, bool use_target_rotation )     Property Descriptions 
int fabrik_data_chain_length = 0
  void set_fabrik_data_chain_length ( int value )
 
int get_fabrik_data_chain_length ( )
  The number of FABRIK joints in the FABRIK modification. 
NodePath target_nodepath = NodePath("")
  void set_target_node ( NodePath value )
 
NodePath get_target_node ( )
  The NodePath to the node that is the target for the FABRIK modification. This node is what the FABRIK chain will attempt to rotate the bone chain to.   Method Descriptions 
NodePath get_fabrik_joint_bone2d_node ( int joint_idx ) const
 Returns the Bone2D node assigned to the FABRIK joint at joint_idx. 
int get_fabrik_joint_bone_index ( int joint_idx ) const
 Returns the index of the Bone2D node assigned to the FABRIK joint at joint_idx. 
Vector2 get_fabrik_joint_magnet_position ( int joint_idx ) const
 Returns the magnet position vector for the joint at joint_idx. 
bool get_fabrik_joint_use_target_rotation ( int joint_idx ) const
 Returns whether the joint is using the target's rotation rather than allowing FABRIK to rotate the joint. This option only applies to the tip/final joint in the chain. void set_fabrik_joint_bone2d_node ( int joint_idx, NodePath bone2d_nodepath ) Sets the Bone2D node assigned to the FABRIK joint at joint_idx. void set_fabrik_joint_bone_index ( int joint_idx, int bone_idx ) Sets the bone index, bone_idx, of the FABRIK joint at joint_idx. When possible, this will also update the bone2d_node of the FABRIK joint based on data provided by the linked skeleton. void set_fabrik_joint_magnet_position ( int joint_idx, Vector2 magnet_position ) Sets the magnet position vector for the joint at joint_idx. void set_fabrik_joint_use_target_rotation ( int joint_idx, bool use_target_rotation ) Sets whether the joint at joint_idx will use the target node's rotation rather than letting FABRIK rotate the node. Note: This option only works for the tip/final joint in the chain. For all other nodes, this option will be ignored.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeletonmodification2dfabrik.html


classes/class_omnilight3d
-----------------------------------------------------------
OmniLight3D Inherits: Light3D < VisualInstance3D < Node3D < Node < Object Omnidirectional light, such as a light bulb or a candle.  Description An Omnidirectional light is a type of Light3D that emits light in all directions. The light is attenuated by distance and this attenuation can be configured by changing its energy, radius, and attenuation parameters. Note: When using the Mobile rendering method, only 8 omni lights can be displayed on each mesh resource. Attempting to display more than 8 omni lights on a single mesh resource will result in omni lights flickering in and out as the camera moves. When using the Compatibility rendering method, only 8 omni lights can be displayed on each mesh resource by default, but this can be increased by adjusting ProjectSettings.rendering/limits/opengl/max_lights_per_object. Note: When using the Mobile or Compatibility rendering methods, omni lights will only correctly affect meshes whose visibility AABB intersects with the light's AABB. If using a shader to deform the mesh in a way that makes it go outside its AABB, GeometryInstance3D.extra_cull_margin must be increased on the mesh. Otherwise, the light may not be visible on the mesh.   Tutorials  3D lights and shadows Faking global illumination    Properties  
float omni_attenuation 1.0  
float omni_range 5.0  
ShadowMode omni_shadow_mode 1  
float shadow_normal_bias 1.0 (overrides Light3D)     Enumerations enum ShadowMode: 
ShadowMode SHADOW_DUAL_PARABOLOID = 0
 Shadows are rendered to a dual-paraboloid texture. Faster than SHADOW_CUBE, but lower-quality. 
ShadowMode SHADOW_CUBE = 1
 Shadows are rendered to a cubemap. Slower than SHADOW_DUAL_PARABOLOID, but higher-quality.   Property Descriptions 
float omni_attenuation = 1.0
  void set_param ( float value )
 
float get_param ( )
  The light's attenuation (drop-off) curve. A number of presets are available in the Inspector by right-clicking the curve. Zero and negative values are allowed but can produce unusual effects. Note: Very high omni_attenuation values (typically above 10) can impact performance negatively if the light is made to use a larger omni_range to compensate. This is because culling opportunities will become less common and shading costs will be increased (as the light will cover more pixels on screen while resulting in the same amount of brightness). To improve performance, use the lowest omni_attenuation value possible for the visuals you're trying to achieve. 
float omni_range = 5.0
  void set_param ( float value )
 
float get_param ( )
  The light's radius. Note that the effectively lit area may appear to be smaller depending on the omni_attenuation in use. No matter the omni_attenuation in use, the light will never reach anything outside this radius. Note: omni_range is not affected by Node3D.scale (the light's scale or its parent's scale). 
ShadowMode omni_shadow_mode = 1
  void set_shadow_mode ( ShadowMode value )
 
ShadowMode get_shadow_mode ( )
  See ShadowMode.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_omnilight3d.html


classes/class_audiostreamplayer
-----------------------------------------------------------
AudioStreamPlayer Inherits: Node < Object Plays back audio non-positionally.  Description Plays an audio stream non-positionally. To play audio positionally, use AudioStreamPlayer2D or AudioStreamPlayer3D instead of AudioStreamPlayer.   Tutorials  Audio streams 2D Dodge The Creeps Demo Audio Device Changer Demo Audio Generator Demo Audio Mic Record Demo Audio Spectrum Demo    Properties  
bool autoplay false  
StringName bus &"Master"  
int max_polyphony 1  
MixTarget mix_target 0  
float pitch_scale 1.0  
bool playing false  
AudioStream stream   
bool stream_paused false  
float volume_db 0.0     Methods  
float get_playback_position ( )  
AudioStreamPlayback get_stream_playback ( )  
bool has_stream_playback ( )  
void play ( float from_position=0.0 )  
void seek ( float to_position )  
void stop ( )     Signals finished ( ) Emitted when the audio stops playing.   Enumerations enum MixTarget: 
MixTarget MIX_TARGET_STEREO = 0
 The audio will be played only on the first channel. 
MixTarget MIX_TARGET_SURROUND = 1
 The audio will be played on all surround channels. 
MixTarget MIX_TARGET_CENTER = 2
 The audio will be played on the second channel, which is usually the center.   Property Descriptions 
bool autoplay = false
  void set_autoplay ( bool value )
 
bool is_autoplay_enabled ( )
  If true, audio plays when added to scene tree. 
StringName bus = &"Master"
  void set_bus ( StringName value )
 
StringName get_bus ( )
  Bus on which this audio is playing. Note: When setting this property, keep in mind that no validation is performed to see if the given name matches an existing bus. This is because audio bus layouts might be loaded after this property is set. If this given name can't be resolved at runtime, it will fall back to "Master". 
int max_polyphony = 1
  void set_max_polyphony ( int value )
 
int get_max_polyphony ( )
  The maximum number of sounds this node can play at the same time. Playing additional sounds after this value is reached will cut off the oldest sounds. 
MixTarget mix_target = 0
  void set_mix_target ( MixTarget value )
 
MixTarget get_mix_target ( )
  If the audio configuration has more than two speakers, this sets the target channels. See MixTarget constants. 
float pitch_scale = 1.0
  void set_pitch_scale ( float value )
 
float get_pitch_scale ( )
  The pitch and the tempo of the audio, as a multiplier of the audio sample's sample rate. 
bool playing = false
  
bool is_playing ( )
  If true, audio is playing. 
AudioStream stream  void set_stream ( AudioStream value )
 
AudioStream get_stream ( )
  The AudioStream object to be played. 
bool stream_paused = false
  void set_stream_paused ( bool value )
 
bool get_stream_paused ( )
  If true, the playback is paused. You can resume it by setting stream_paused to false. 
float volume_db = 0.0
  void set_volume_db ( float value )
 
float get_volume_db ( )
  Volume of sound, in dB.   Method Descriptions 
float get_playback_position ( ) Returns the position in the AudioStream in seconds. 
AudioStreamPlayback get_stream_playback ( ) Returns the AudioStreamPlayback object associated with this AudioStreamPlayer. 
bool has_stream_playback ( ) Returns whether the AudioStreamPlayer can return the AudioStreamPlayback object or not. void play ( float from_position=0.0 ) Plays the audio from the given from_position, in seconds. void seek ( float to_position ) Sets the position from which audio will be played, in seconds. void stop ( ) Stops the audio.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiostreamplayer.html


classes/class_texture2d
-----------------------------------------------------------
Texture2D Inherits: Texture < Resource < RefCounted < Object Inherited By: AnimatedTexture, AtlasTexture, CameraTexture, CanvasTexture, CompressedTexture2D, CurveTexture, CurveXYZTexture, GradientTexture1D, GradientTexture2D, ImageTexture, MeshTexture, NoiseTexture2D, PlaceholderTexture2D, PortableCompressedTexture2D, Texture2DRD, ViewportTexture Texture for 2D and 3D.  Description A texture works by registering an image in the video hardware, which then can be used in 3D models or 2D Sprite2D or GUI Control. Textures are often created by loading them from a file. See @GDScript.load. Texture2D is a base for other resources. It cannot be used directly. Note: The maximum texture size is 16384Ã—16384 pixels due to graphics hardware limitations. Larger textures may fail to import.   Methods  
void _draw ( RID to_canvas_item, Vector2 pos, Color modulate, bool transpose ) virtual const  
void _draw_rect ( RID to_canvas_item, Rect2 rect, bool tile, Color modulate, bool transpose ) virtual const  
void _draw_rect_region ( RID to_canvas_item, Rect2 rect, Rect2 src_rect, Color modulate, bool transpose, bool clip_uv ) virtual const  
int _get_height ( ) virtual const  
int _get_width ( ) virtual const  
bool _has_alpha ( ) virtual const  
bool _is_pixel_opaque ( int x, int y ) virtual const  
Resource create_placeholder ( ) const  
void draw ( RID canvas_item, Vector2 position, Color modulate=Color(1, 1, 1, 1), bool transpose=false ) const  
void draw_rect ( RID canvas_item, Rect2 rect, bool tile, Color modulate=Color(1, 1, 1, 1), bool transpose=false ) const  
void draw_rect_region ( RID canvas_item, Rect2 rect, Rect2 src_rect, Color modulate=Color(1, 1, 1, 1), bool transpose=false, bool clip_uv=true ) const  
int get_height ( ) const  
Image get_image ( ) const  
Vector2 get_size ( ) const  
int get_width ( ) const  
bool has_alpha ( ) const     Method Descriptions void _draw ( RID to_canvas_item, Vector2 pos, Color modulate, bool transpose ) virtual const
 Called when the entire Texture2D is requested to be drawn over a CanvasItem, with the top-left offset specified in pos. modulate specifies a multiplier for the colors being drawn, while transpose specifies whether drawing should be performed in column-major order instead of row-major order (resulting in 90-degree clockwise rotation). Note: This is only used in 2D rendering, not 3D. void _draw_rect ( RID to_canvas_item, Rect2 rect, bool tile, Color modulate, bool transpose ) virtual const
 Called when the Texture2D is requested to be drawn onto CanvasItem's specified rect. modulate specifies a multiplier for the colors being drawn, while transpose specifies whether drawing should be performed in column-major order instead of row-major order (resulting in 90-degree clockwise rotation). Note: This is only used in 2D rendering, not 3D. void _draw_rect_region ( RID to_canvas_item, Rect2 rect, Rect2 src_rect, Color modulate, bool transpose, bool clip_uv ) virtual const
 Called when a part of the Texture2D specified by src_rect's coordinates is requested to be drawn onto CanvasItem's specified rect. modulate specifies a multiplier for the colors being drawn, while transpose specifies whether drawing should be performed in column-major order instead of row-major order (resulting in 90-degree clockwise rotation). Note: This is only used in 2D rendering, not 3D. 
int _get_height ( ) virtual const
 Called when the Texture2D's height is queried. 
int _get_width ( ) virtual const
 Called when the Texture2D's width is queried. 
bool _has_alpha ( ) virtual const
 Called when the presence of an alpha channel in the Texture2D is queried. 
bool _is_pixel_opaque ( int x, int y ) virtual const
 Called when a pixel's opaque state in the Texture2D is queried at the specified (x, y) position. 
Resource create_placeholder ( ) const
 Creates a placeholder version of this resource (PlaceholderTexture2D). void draw ( RID canvas_item, Vector2 position, Color modulate=Color(1, 1, 1, 1), bool transpose=false ) const
 Draws the texture using a CanvasItem with the RenderingServer API at the specified position. void draw_rect ( RID canvas_item, Rect2 rect, bool tile, Color modulate=Color(1, 1, 1, 1), bool transpose=false ) const
 Draws the texture using a CanvasItem with the RenderingServer API. void draw_rect_region ( RID canvas_item, Rect2 rect, Rect2 src_rect, Color modulate=Color(1, 1, 1, 1), bool transpose=false, bool clip_uv=true ) const
 Draws a part of the texture using a CanvasItem with the RenderingServer API. 
int get_height ( ) const
 Returns the texture height in pixels. 
Image get_image ( ) const
 Returns an Image that is a copy of data from this Texture2D (a new Image is created each time). Images can be accessed and manipulated directly. Note: This will return null if this Texture2D is invalid. Note: This will fetch the texture data from the GPU, which might cause performance problems when overused. 
Vector2 get_size ( ) const
 Returns the texture size in pixels. 
int get_width ( ) const
 Returns the texture width in pixels. 
bool has_alpha ( ) const
 Returns true if this Texture2D has an alpha channel.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texture2d.html


classes/class_gltfstate
-----------------------------------------------------------
GLTFState Inherits: Resource < RefCounted < Object Represents all data of a GLTF file.  Description Contains all nodes and resources of a GLTF file. This is used by GLTFDocument as data storage, which allows GLTFDocument and all GLTFDocumentExtension classes to remain stateless. GLTFState can be populated by GLTFDocument reading a file or by converting a Godot scene. Then the data can either be used to create a Godot scene or save to a GLTF file. The code that converts to/from a Godot scene can be intercepted at arbitrary points by GLTFDocumentExtension classes. This allows for custom data to be stored in the GLTF file or for custom data to be converted to/from Godot nodes.   Tutorials  Runtime file loading and saving GLTF asset header schema    Properties  
String base_path ""  
PackedByteArray[] buffers []  
String copyright ""  
bool create_animations true  
String filename ""  
PackedByteArray glb_data PackedByteArray()  
Dictionary json {}  
int major_version 0  
int minor_version 0  
PackedInt32Array root_nodes PackedInt32Array()  
String scene_name ""  
bool use_named_skin_binds false     Methods  
void add_used_extension ( String extension_name, bool required )  
GLTFAccessor[] get_accessors ( )  
Variant get_additional_data ( StringName extension_name )  
AnimationPlayer get_animation_player ( int idx )  
int get_animation_players_count ( int idx )  
GLTFAnimation[] get_animations ( )  
GLTFBufferView[] get_buffer_views ( )  
GLTFCamera[] get_cameras ( )  
int get_handle_binary_image ( )  
Texture2D[] get_images ( )  
GLTFLight[] get_lights ( )  
Material[] get_materials ( )  
GLTFMesh[] get_meshes ( )  
int get_node_index ( Node scene_node )  
GLTFNode[] get_nodes ( )  
Node get_scene_node ( int idx )  
GLTFSkeleton[] get_skeletons ( )  
GLTFSkin[] get_skins ( )  
GLTFTextureSampler[] get_texture_samplers ( )  
GLTFTexture[] get_textures ( )  
String[] get_unique_animation_names ( )  
String[] get_unique_names ( )  
void set_accessors ( GLTFAccessor[] accessors )  
void set_additional_data ( StringName extension_name, Variant additional_data )  
void set_animations ( GLTFAnimation[] animations )  
void set_buffer_views ( GLTFBufferView[] buffer_views )  
void set_cameras ( GLTFCamera[] cameras )  
void set_handle_binary_image ( int method )  
void set_images ( Texture2D[] images )  
void set_lights ( GLTFLight[] lights )  
void set_materials ( Material[] materials )  
void set_meshes ( GLTFMesh[] meshes )  
void set_nodes ( GLTFNode[] nodes )  
void set_skeletons ( GLTFSkeleton[] skeletons )  
void set_skins ( GLTFSkin[] skins )  
void set_texture_samplers ( GLTFTextureSampler[] texture_samplers )  
void set_textures ( GLTFTexture[] textures )  
void set_unique_animation_names ( String[] unique_animation_names )  
void set_unique_names ( String[] unique_names )     Constants HANDLE_BINARY_DISCARD_TEXTURES = 0
 Discards all embedded textures and uses untextured materials. HANDLE_BINARY_EXTRACT_TEXTURES = 1
 Extracts embedded textures to be reimported and compressed. Editor only. Acts as uncompressed at runtime. HANDLE_BINARY_EMBED_AS_BASISU = 2
 Embeds textures VRAM compressed with Basis Universal into the generated scene. HANDLE_BINARY_EMBED_AS_UNCOMPRESSED = 3
 Embeds textures compressed losslessly into the generated scene, matching old behavior.   Property Descriptions 
String base_path = ""
  void set_base_path ( String value )
 
String get_base_path ( )
  The folder path associated with this GLTF data. This is used to find other files the GLTF file references, like images or binary buffers. This will be set during import when appending from a file, and will be set during export when writing to a file. 
PackedByteArray[] buffers = []
  void set_buffers ( PackedByteArray[] value )
 
PackedByteArray[] get_buffers ( )
   There is currently no description for this property. Please help us by contributing one!  
String copyright = ""
  void set_copyright ( String value )
 
String get_copyright ( )
  The copyright string in the asset header of the GLTF file. This is set during import if present and export if non-empty. See the GLTF asset header documentation for more information. 
bool create_animations = true
  void set_create_animations ( bool value )
 
bool get_create_animations ( )
   There is currently no description for this property. Please help us by contributing one!  
String filename = ""
  void set_filename ( String value )
 
String get_filename ( )
  The file name associated with this GLTF data. If it ends with .gltf, this is text-based GLTF, otherwise this is binary GLB. This will be set during import when appending from a file, and will be set during export when writing to a file. If writing to a buffer, this will be an empty string. 
PackedByteArray glb_data = PackedByteArray()
  void set_glb_data ( PackedByteArray value )
 
PackedByteArray get_glb_data ( )
   There is currently no description for this property. Please help us by contributing one!  
Dictionary json = {}
  void set_json ( Dictionary value )
 
Dictionary get_json ( )
   There is currently no description for this property. Please help us by contributing one!  
int major_version = 0
  void set_major_version ( int value )
 
int get_major_version ( )
   There is currently no description for this property. Please help us by contributing one!  
int minor_version = 0
  void set_minor_version ( int value )
 
int get_minor_version ( )
   There is currently no description for this property. Please help us by contributing one!  
PackedInt32Array root_nodes = PackedInt32Array()
  void set_root_nodes ( PackedInt32Array value )
 
PackedInt32Array get_root_nodes ( )
  The root nodes of the GLTF file. Typically, a GLTF file will only have one scene, and therefore one root node. However, a GLTF file may have multiple scenes and therefore multiple root nodes, which will be generated as siblings of each other and as children of the root node of the generated Godot scene. 
String scene_name = ""
  void set_scene_name ( String value )
 
String get_scene_name ( )
  The name of the scene. When importing, if not specified, this will be the file name. When exporting, if specified, the scene name will be saved to the GLTF file. 
bool use_named_skin_binds = false
  void set_use_named_skin_binds ( bool value )
 
bool get_use_named_skin_binds ( )
   There is currently no description for this property. Please help us by contributing one!    Method Descriptions void add_used_extension ( String extension_name, bool required ) Appends an extension to the list of extensions used by this GLTF file during serialization. If required is true, the extension will also be added to the list of required extensions. Do not run this in GLTFDocumentExtension._export_post, as that stage is too late to add extensions. The final list is sorted alphabetically. 
GLTFAccessor[] get_accessors ( )  There is currently no description for this method. Please help us by contributing one!  
Variant get_additional_data ( StringName extension_name ) Gets additional arbitrary data in this GLTFState instance. This can be used to keep per-file state data in GLTFDocumentExtension classes, which is important because they are stateless. The argument should be the GLTFDocumentExtension name (does not have to match the extension name in the GLTF file), and the return value can be anything you set. If nothing was set, the return value is null. 
AnimationPlayer get_animation_player ( int idx ) Returns the AnimationPlayer node with the given index. These nodes are only used during the export process when converting Godot AnimationPlayer nodes to GLTF animations. 
int get_animation_players_count ( int idx ) Returns the number of AnimationPlayer nodes in this GLTFState. These nodes are only used during the export process when converting Godot AnimationPlayer nodes to GLTF animations. 
GLTFAnimation[] get_animations ( ) Returns an array of all GLTFAnimations in the GLTF file. When importing, these will be generated as animations in an AnimationPlayer node. When exporting, these will be generated from Godot AnimationPlayer nodes. 
GLTFBufferView[] get_buffer_views ( )  There is currently no description for this method. Please help us by contributing one!  
GLTFCamera[] get_cameras ( ) Returns an array of all GLTFCameras in the GLTF file. These are the cameras that the GLTFNode.camera index refers to. 
int get_handle_binary_image ( )  There is currently no description for this method. Please help us by contributing one!  
Texture2D[] get_images ( ) Gets the images of the GLTF file as an array of Texture2Ds. These are the images that the GLTFTexture.src_image index refers to. 
GLTFLight[] get_lights ( ) Returns an array of all GLTFLights in the GLTF file. These are the lights that the GLTFNode.light index refers to. 
Material[] get_materials ( )  There is currently no description for this method. Please help us by contributing one!  
GLTFMesh[] get_meshes ( ) Returns an array of all GLTFMeshes in the GLTF file. These are the meshes that the GLTFNode.mesh index refers to. 
int get_node_index ( Node scene_node ) Returns the index of the GLTFNode corresponding to this Godot scene node. This is the inverse of get_scene_node. Useful during the export process. Note: Not every Godot scene node will have a corresponding GLTFNode, and not every GLTFNode will have a scene node generated. If there is no GLTFNode index for this scene node, -1 is returned. 
GLTFNode[] get_nodes ( ) Returns an array of all GLTFNodes in the GLTF file. These are the nodes that GLTFNode.children and root_nodes refer to. This includes nodes that may not be generated in the Godot scene, or nodes that may generate multiple Godot scene nodes. 
Node get_scene_node ( int idx ) Returns the Godot scene node that corresponds to the same index as the GLTFNode it was generated from. This is the inverse of get_node_index. Useful during the import process. Note: Not every GLTFNode will have a scene node generated, and not every generated scene node will have a corresponding GLTFNode. If there is no scene node for this GLTFNode index, null is returned. 
GLTFSkeleton[] get_skeletons ( ) Returns an array of all GLTFSkeletons in the GLTF file. These are the skeletons that the GLTFNode.skeleton index refers to. 
GLTFSkin[] get_skins ( ) Returns an array of all GLTFSkins in the GLTF file. These are the skins that the GLTFNode.skin index refers to. 
GLTFTextureSampler[] get_texture_samplers ( ) Retrieves the array of texture samplers that are used by the textures contained in the GLTF. 
GLTFTexture[] get_textures ( )  There is currently no description for this method. Please help us by contributing one!  
String[] get_unique_animation_names ( ) Returns an array of unique animation names. This is only used during the import process. 
String[] get_unique_names ( ) Returns an array of unique node names. This is used in both the import process and export process. void set_accessors ( GLTFAccessor[] accessors )  There is currently no description for this method. Please help us by contributing one!  void set_additional_data ( StringName extension_name, Variant additional_data ) Sets additional arbitrary data in this GLTFState instance. This can be used to keep per-file state data in GLTFDocumentExtension classes, which is important because they are stateless. The first argument should be the GLTFDocumentExtension name (does not have to match the extension name in the GLTF file), and the second argument can be anything you want. void set_animations ( GLTFAnimation[] animations ) Sets the GLTFAnimations in the state. When importing, these will be generated as animations in an AnimationPlayer node. When exporting, these will be generated from Godot AnimationPlayer nodes. void set_buffer_views ( GLTFBufferView[] buffer_views )  There is currently no description for this method. Please help us by contributing one!  void set_cameras ( GLTFCamera[] cameras ) Sets the GLTFCameras in the state. These are the cameras that the GLTFNode.camera index refers to. void set_handle_binary_image ( int method )  There is currently no description for this method. Please help us by contributing one!  void set_images ( Texture2D[] images ) Sets the images in the state stored as an array of Texture2Ds. This can be used during export. These are the images that the GLTFTexture.src_image index refers to. void set_lights ( GLTFLight[] lights ) Sets the GLTFLights in the state. These are the lights that the GLTFNode.light index refers to. void set_materials ( Material[] materials )  There is currently no description for this method. Please help us by contributing one!  void set_meshes ( GLTFMesh[] meshes ) Sets the GLTFMeshes in the state. These are the meshes that the GLTFNode.mesh index refers to. void set_nodes ( GLTFNode[] nodes ) Sets the GLTFNodes in the state. These are the nodes that GLTFNode.children and root_nodes refer to. Some of the nodes set here may not be generated in the Godot scene, or may generate multiple Godot scene nodes. void set_skeletons ( GLTFSkeleton[] skeletons ) Sets the GLTFSkeletons in the state. These are the skeletons that the GLTFNode.skeleton index refers to. void set_skins ( GLTFSkin[] skins ) Sets the GLTFSkins in the state. These are the skins that the GLTFNode.skin index refers to. void set_texture_samplers ( GLTFTextureSampler[] texture_samplers ) Sets the array of texture samplers that are used by the textures contained in the GLTF. void set_textures ( GLTFTexture[] textures )  There is currently no description for this method. Please help us by contributing one!  void set_unique_animation_names ( String[] unique_animation_names ) Sets the unique animation names in the state. This is only used during the import process. void set_unique_names ( String[] unique_names ) Sets the unique node names in the state. This is used in both the import process and export process.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfstate.html


getting_started/introduction/introduction_to_godot
-----------------------------------------------------------
Introduction to Godot This article is here to help you figure out whether Godot might be a good fit for you. We will introduce some broad features of the engine to give you a feel for what you can achieve with it and answer questions such as "what do I need to know to get started?". This is by no means an exhaustive overview. We will introduce many more features in this getting started series.  What is Godot? Godot is a general-purpose 2D and 3D game engine designed to support all sorts of projects. You can use it to create games or applications you can then release on desktop or mobile, as well as on the web. You can also create console games with it, although you either need strong programming skills or a developer to port the game for you.  Note The Godot team can't provide an open source console export due to the licensing terms imposed by console manufacturers. Regardless of the engine you use, though, releasing games on consoles is always a lot of work. You can read more on that here: Console support in Godot.    What can the engine do? Godot was initially developed in-house by an Argentinian game studio. Its development started in 2001, and the engine was rewritten and improved tremendously since its open source release in 2014. Some examples of games created with Godot include Ex-Zodiac and Helms of Fury.   As for applications, the open source pixel art drawing program Pixelorama is powered by Godot, and so is the voxel RPG creator RPG in a box.  You can find many more examples in the official showcase videos.   How does it work and look? Godot comes with a fully-fledged game editor with integrated tools to answer the most common needs. It includes a code editor, an animation editor, a tilemap editor, a shader editor, a debugger, a profiler, and more.  The team strives to offer a feature-rich game editor with a consistent user experience. While there is always room for improvement, the user interface keeps getting refined. Of course, if you prefer, you can work with external programs. We officially support importing 3D scenes designed in Blender and maintain plugins to code in VSCode and Emacs for GDScript and C#. We also support Visual Studio for C# on Windows.    Programming languages Let's talk about the available programming languages. You can code your games using GDScript, a Godot-specific and tightly integrated language with a lightweight syntax, or C#, which is popular in the games industry. These are the two main scripting languages we support. With the GDExtension technology, you can also write gameplay or high-performance algorithms in C or C++ without recompiling the engine. You can use this technology to integrate third-party libraries and other Software Development Kits (SDK) in the engine. Of course, you can also directly add modules and features to the engine, as it's completely free and open source.   What do I need to know to use Godot? Godot is a feature-packed game engine. With its thousands of features, there is a lot to learn. To make the most of it, you need good programming foundations. While we try to make the engine accessible, you will benefit a lot from knowing how to think like a programmer first. Godot relies on the object-oriented programming paradigm. Being comfortable with concepts such as classes and objects will help you code efficiently in it. If you are entirely new to programming, we recommend following the CS50 open courseware from Harvard University. It's a great free course that will teach you everything you need to know to be off to a good start. It will save you countless hours and hurdles learning any game engine afterward.  Note In CS50, you will learn multiple programming languages. Don't be afraid of that: programming languages have many similarities. The skills you learn with one language transfer well to others.  We will provide you with more Godot-specific learning resources in Learning new features. In the next part, you will get an overview of the engine's essential concepts.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/getting_started/introduction/introduction_to_godot.html


getting_started/introduction/key_concepts_overview
-----------------------------------------------------------
Overview of Godot's key concepts Every game engine revolves around abstractions you use to build your applications. In Godot, a game is a tree of nodes that you group together into scenes. You can then wire these nodes so they can communicate using signals. These are the four concepts you will learn here. We're going to look at them briefly to give you a sense of how the engine works. In the getting started series, you will get to use them in practice.  Scenes In Godot, you break down your game in reusable scenes. A scene can be a character, a weapon, a menu in the user interface, a single house, an entire level, or anything you can think of. Godot's scenes are flexible; they fill the role of both prefabs and scenes in some other game engines.  You can also nest scenes. For example, you can put your character in a level, and drag and drop a scene as a child of it.    Nodes A scene is composed of one or more nodes. Nodes are your game's smallest building blocks that you arrange into trees. Here's an example of a character's nodes.  It is made of a CharacterBody2D node named "Player", a Camera2D, a Sprite2D, and a CollisionShape2D.  Note The node names end with "2D" because this is a 2D scene. Their 3D counterparts have names that end with "3D". Be aware that "Spatial" Nodes are now called "Node3D" starting with Godot 4.  Notice how nodes and scenes look the same in the editor. When you save a tree of nodes as a scene, it then shows as a single node, with its internal structure hidden in the editor. Godot provides an extensive library of base node types you can combine and extend to build more powerful ones. 2D, 3D, or user interface, you will do most things with these nodes.    The scene tree All your game's scenes come together in the scene tree, literally a tree of scenes. And as scenes are trees of nodes, the scene tree also is a tree of nodes. But it's easier to think of your game in terms of scenes as they can represent characters, weapons, doors, or your user interface.    Signals Nodes emit signals when some event occurs. This feature allows you to make nodes communicate without hard-wiring them in code. It gives you a lot of flexibility in how you structure your scenes.   Note Signals are Godot's version of the observer pattern. You can read more about it here: https://gameprogrammingpatterns.com/observer.html  For example, buttons emit a signal when pressed. You can connect to this signal to run code in reaction to this event, like starting the game or opening a menu. Other built-in signals can tell you when two objects collided, when a character or monster entered a given area, and much more. You can also define new signals tailored to your game.   Summary Nodes, scenes, the scene tree, and signals are four core concepts in Godot that you will manipulate all the time. Nodes are your game's smallest building blocks. You combine them to create scenes that you then combine and nest into the scene tree. You can then use signals to make nodes react to events in other nodes or different scene tree branches. After this short breakdown, you probably have many questions. Bear with us as you will get many answers throughout the getting started series.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/getting_started/introduction/key_concepts_overview.html


getting_started/introduction/first_look_at_the_editor
-----------------------------------------------------------
First look at Godot's editor This page will give you a brief overview of Godot's interface. We're going to look at the different main screens and docks to help you situate yourself.  See also For a comprehensive breakdown of the editor's interface and how to use it, see the Editor manual.   The Project Manager When you launch Godot, the first window you see is the Project Manager. In the default tab Local Projects, you can manage existing projects, import or create new ones, and more.  At the top of the window, there is another tab named "Asset Library Projects". You can search for demo projects in the open source asset library, which includes many projects developed by the community.  See also To learn the Project Manager's ins and outs, read Using the Project Manager.   You can also change the editor's language using the drop-down menu to the right of the engine's version in the window's top-right corner. By default, it is in English (EN).    First look at Godot's editor When you open a new or an existing project, the editor's interface appears. Let's look at its main areas.  By default, it features menus, main screens, and playtest buttons along the window's top edge.  In the center is the viewport with its toolbar at the top, where you'll find tools to move, scale, or lock the scene's nodes.  On either side of the viewport sit the docks. And at the bottom of the window lies the bottom panel. The toolbar changes based on the context and selected node. Here is the 2D toolbar.  Below is the 3D one.  Let's look at the docks. The FileSystem dock lists your project files, including scripts, images, audio samples, and more.  The Scene dock lists the active scene's nodes.  The Inspector allows you to edit the properties of a selected node.  The bottom panel, situated below the viewport, is the host for the debug console, the animation editor, the audio mixer, and more. They can take precious space, that's why they're folded by default.  When you click on one, it expands vertically. Below, you can see the animation editor opened.    The four main screens There are four main screen buttons centered at the top of the editor: 2D, 3D, Script, and AssetLib. You'll use the 2D screen for all types of games. In addition to 2D games, the 2D screen is where you'll build your interfaces.  In the 3D screen, you can work with meshes, lights, and design levels for 3D games.  Notice the perspective button under the toolbar. Clicking on it opens a list of options related to the 3D view.   Note Read Introduction to 3D for more detail about the 3D main screen.  The Script screen is a complete code editor with a debugger, rich auto-completion, and built-in code reference.  Finally, the AssetLib is a library of free and open source add-ons, scripts, and assets to use in your projects.   See also You can learn more about the asset library in About the Asset Library.    Integrated class reference Godot comes with a built-in class reference. You can search for information about a class, method, property, constant, or signal by any one of the following methods:  Pressing F1 (or Opt + Space on macOS, or fn + F1 for laptops with a fn key) anywhere in the editor. Clicking the "Search Help" button in the top-right of the Script main screen. Clicking on the Help menu and Search Help. Clicking while pressing the Ctrl key on a class name, function name, or built-in variable in the script editor.   When you do any of these, a window pops up. Type to search for any item. You can also use it to browse available objects and methods.  Double-click on an item to open the corresponding page in the script main screen.   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/getting_started/introduction/first_look_at_the_editor.html


getting_started/introduction/learn_to_code_with_gdscript
-----------------------------------------------------------
Learn to code with GDScript In Godot, you can write code using the GDScript and C# programming languages. If you are new to programming, we recommend starting with GDScript because we designed it to be simpler than all-purpose languages like C#. It will be both faster and easier to learn. While GDScript is a language specific to Godot, the techniques you will learn with it will apply to other programming languages. Note that it is completely normal for a programmer to learn and use multiple languages. Programming languages have more similarities than differences, so once you know one, you can learn another much faster.  Learn in your browser with the GDScript app To learn GDScript, you can use the app Learn GDScript From Zero. It is a complete beginner course with interactive practices you can do right in your browser.  Click here to access the app: Learn GDScript From Zero app This app is an open-source project. To report bugs or contribute, head to the app's source code repository: GitHub repository. In the next part, you will get an overview of the engine's essential concepts.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/getting_started/introduction/learn_to_code_with_gdscript.html


classes/class_scriptextension
-----------------------------------------------------------
ScriptExtension Inherits: Script < Resource < RefCounted < Object  There is currently no description for this class. Please help us by contributing one!   Methods  
bool _can_instantiate ( ) virtual const  
bool _editor_can_reload_from_file ( ) virtual  
Script _get_base_script ( ) virtual const  
String _get_class_icon_path ( ) virtual const  
Dictionary _get_constants ( ) virtual const  
Dictionary[] _get_documentation ( ) virtual const  
StringName _get_global_name ( ) virtual const  
StringName _get_instance_base_type ( ) virtual const  
ScriptLanguage _get_language ( ) virtual const  
int _get_member_line ( StringName member ) virtual const  
StringName[] _get_members ( ) virtual const  
Dictionary _get_method_info ( StringName method ) virtual const  
Variant _get_property_default_value ( StringName property ) virtual const  
Variant _get_rpc_config ( ) virtual const  
Dictionary[] _get_script_method_list ( ) virtual const  
Dictionary[] _get_script_property_list ( ) virtual const  
Dictionary[] _get_script_signal_list ( ) virtual const  
String _get_source_code ( ) virtual const  
bool _has_method ( StringName method ) virtual const  
bool _has_property_default_value ( StringName property ) virtual const  
bool _has_script_signal ( StringName signal ) virtual const  
bool _has_source_code ( ) virtual const  
bool _has_static_method ( StringName method ) virtual const  
bool _inherits_script ( Script script ) virtual const  
void* _instance_create ( Object for_object ) virtual const  
bool _instance_has ( Object object ) virtual const  
bool _is_abstract ( ) virtual const  
bool _is_placeholder_fallback_enabled ( ) virtual const  
bool _is_tool ( ) virtual const  
bool _is_valid ( ) virtual const  
void _placeholder_erased ( void* placeholder ) virtual  
void* _placeholder_instance_create ( Object for_object ) virtual const  
Error _reload ( bool keep_state ) virtual  
void _set_source_code ( String code ) virtual  
void _update_exports ( ) virtual     Method Descriptions 
bool _can_instantiate ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
bool _editor_can_reload_from_file ( ) virtual
  There is currently no description for this method. Please help us by contributing one!  
Script _get_base_script ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
String _get_class_icon_path ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
Dictionary _get_constants ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
Dictionary[] _get_documentation ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
StringName _get_global_name ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
StringName _get_instance_base_type ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
ScriptLanguage _get_language ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
int _get_member_line ( StringName member ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
StringName[] _get_members ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
Dictionary _get_method_info ( StringName method ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
Variant _get_property_default_value ( StringName property ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
Variant _get_rpc_config ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
Dictionary[] _get_script_method_list ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
Dictionary[] _get_script_property_list ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
Dictionary[] _get_script_signal_list ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
String _get_source_code ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
bool _has_method ( StringName method ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
bool _has_property_default_value ( StringName property ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
bool _has_script_signal ( StringName signal ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
bool _has_source_code ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
bool _has_static_method ( StringName method ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
bool _inherits_script ( Script script ) virtual const
  There is currently no description for this method. Please help us by contributing one!  void* _instance_create ( Object for_object ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
bool _instance_has ( Object object ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
bool _is_abstract ( ) virtual const
 Returns true if the script is an abstract script. An abstract script does not have a constructor and cannot be instantiated. 
bool _is_placeholder_fallback_enabled ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
bool _is_tool ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
bool _is_valid ( ) virtual const
  There is currently no description for this method. Please help us by contributing one!  void _placeholder_erased ( void* placeholder ) virtual
  There is currently no description for this method. Please help us by contributing one!  void* _placeholder_instance_create ( Object for_object ) virtual const
  There is currently no description for this method. Please help us by contributing one!  
Error _reload ( bool keep_state ) virtual
  There is currently no description for this method. Please help us by contributing one!  void _set_source_code ( String code ) virtual
  There is currently no description for this method. Please help us by contributing one!  void _update_exports ( ) virtual
  There is currently no description for this method. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_scriptextension.html


classes/class_skeletonmodification2dccdik
-----------------------------------------------------------
SkeletonModification2DCCDIK Inherits: SkeletonModification2D < Resource < RefCounted < Object A modification that uses CCDIK to manipulate a series of bones to reach a target in 2D.  Description This SkeletonModification2D uses an algorithm called Cyclic Coordinate Descent Inverse Kinematics, or CCDIK, to manipulate a chain of bones in a Skeleton2D so it reaches a defined target. CCDIK works by rotating a set of bones, typically called a "bone chain", on a single axis. Each bone is rotated to face the target from the tip (by default), which over a chain of bones allow it to rotate properly to reach the target. Because the bones only rotate on a single axis, CCDIK can look more robotic than other IK solvers. Note: The CCDIK modifier has ccdik_joints, which are the data objects that hold the data for each joint in the CCDIK chain. This is different from a bone! CCDIK joints hold the data needed for each bone in the bone chain used by CCDIK. CCDIK also fully supports angle constraints, allowing for more control over how a solution is met.   Properties  
int ccdik_data_chain_length 0  
NodePath target_nodepath NodePath("")  
NodePath tip_nodepath NodePath("")     Methods  
NodePath get_ccdik_joint_bone2d_node ( int joint_idx ) const  
int get_ccdik_joint_bone_index ( int joint_idx ) const  
bool get_ccdik_joint_constraint_angle_invert ( int joint_idx ) const  
float get_ccdik_joint_constraint_angle_max ( int joint_idx ) const  
float get_ccdik_joint_constraint_angle_min ( int joint_idx ) const  
bool get_ccdik_joint_enable_constraint ( int joint_idx ) const  
bool get_ccdik_joint_rotate_from_joint ( int joint_idx ) const  
void set_ccdik_joint_bone2d_node ( int joint_idx, NodePath bone2d_nodepath )  
void set_ccdik_joint_bone_index ( int joint_idx, int bone_idx )  
void set_ccdik_joint_constraint_angle_invert ( int joint_idx, bool invert )  
void set_ccdik_joint_constraint_angle_max ( int joint_idx, float angle_max )  
void set_ccdik_joint_constraint_angle_min ( int joint_idx, float angle_min )  
void set_ccdik_joint_enable_constraint ( int joint_idx, bool enable_constraint )  
void set_ccdik_joint_rotate_from_joint ( int joint_idx, bool rotate_from_joint )     Property Descriptions 
int ccdik_data_chain_length = 0
  void set_ccdik_data_chain_length ( int value )
 
int get_ccdik_data_chain_length ( )
  The number of CCDIK joints in the CCDIK modification. 
NodePath target_nodepath = NodePath("")
  void set_target_node ( NodePath value )
 
NodePath get_target_node ( )
  The NodePath to the node that is the target for the CCDIK modification. This node is what the CCDIK chain will attempt to rotate the bone chain to. 
NodePath tip_nodepath = NodePath("")
  void set_tip_node ( NodePath value )
 
NodePath get_tip_node ( )
  The end position of the CCDIK chain. Typically, this should be a child of a Bone2D node attached to the final Bone2D in the CCDIK chain.   Method Descriptions 
NodePath get_ccdik_joint_bone2d_node ( int joint_idx ) const
 Returns the Bone2D node assigned to the CCDIK joint at joint_idx. 
int get_ccdik_joint_bone_index ( int joint_idx ) const
 Returns the index of the Bone2D node assigned to the CCDIK joint at joint_idx. 
bool get_ccdik_joint_constraint_angle_invert ( int joint_idx ) const
 Returns whether the CCDIK joint at joint_idx uses an inverted joint constraint. See set_ccdik_joint_constraint_angle_invert for details. 
float get_ccdik_joint_constraint_angle_max ( int joint_idx ) const
 Returns the maximum angle constraint for the joint at joint_idx. 
float get_ccdik_joint_constraint_angle_min ( int joint_idx ) const
 Returns the minimum angle constraint for the joint at joint_idx. 
bool get_ccdik_joint_enable_constraint ( int joint_idx ) const
 Returns whether angle constraints on the CCDIK joint at joint_idx are enabled. 
bool get_ccdik_joint_rotate_from_joint ( int joint_idx ) const
 Returns whether the joint at joint_idx is set to rotate from the joint, true, or to rotate from the tip, false. The default is to rotate from the tip. void set_ccdik_joint_bone2d_node ( int joint_idx, NodePath bone2d_nodepath ) Sets the Bone2D node assigned to the CCDIK joint at joint_idx. void set_ccdik_joint_bone_index ( int joint_idx, int bone_idx ) Sets the bone index, bone_idx, of the CCDIK joint at joint_idx. When possible, this will also update the bone2d_node of the CCDIK joint based on data provided by the linked skeleton. void set_ccdik_joint_constraint_angle_invert ( int joint_idx, bool invert ) Sets whether the CCDIK joint at joint_idx uses an inverted joint constraint. An inverted joint constraint only constraints the CCDIK joint to the angles outside of the inputted minimum and maximum angles. For this reason, it is referred to as an inverted joint constraint, as it constraints the joint to the outside of the inputted values. void set_ccdik_joint_constraint_angle_max ( int joint_idx, float angle_max ) Sets the maximum angle constraint for the joint at joint_idx. void set_ccdik_joint_constraint_angle_min ( int joint_idx, float angle_min ) Sets the minimum angle constraint for the joint at joint_idx. void set_ccdik_joint_enable_constraint ( int joint_idx, bool enable_constraint ) Determines whether angle constraints on the CCDIK joint at joint_idx are enabled. When true, constraints will be enabled and taken into account when solving. void set_ccdik_joint_rotate_from_joint ( int joint_idx, bool rotate_from_joint ) Sets whether the joint at joint_idx is set to rotate from the joint, true, or to rotate from the tip, false.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeletonmodification2dccdik.html


classes/class_inputeventjoypadmotion
-----------------------------------------------------------
InputEventJoypadMotion Inherits: InputEvent < Resource < RefCounted < Object Represents axis motions (such as joystick or analog triggers) from a gamepad.  Description Stores information about joystick motions. One InputEventJoypadMotion represents one axis at a time. For gamepad buttons, see InputEventJoypadButton.   Tutorials  Using InputEvent    Properties  
JoyAxis axis 0  
float axis_value 0.0     Property Descriptions 
JoyAxis axis = 0
  void set_axis ( JoyAxis value )
 
JoyAxis get_axis ( )
  Axis identifier. Use one of the JoyAxis axis constants. 
float axis_value = 0.0
  void set_axis_value ( float value )
 
float get_axis_value ( )
  Current position of the joystick on the given axis. The value ranges from -1.0 to 1.0. A value of 0 means the axis is in its resting position.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventjoypadmotion.html


classes/class_cameratexture
-----------------------------------------------------------
CameraTexture Inherits: Texture2D < Texture < Resource < RefCounted < Object Texture provided by a CameraFeed.  Description This texture gives access to the camera texture provided by a CameraFeed. Note: Many cameras supply YCbCr images which need to be converted in a shader.   Properties  
int camera_feed_id 0  
bool camera_is_active false  
bool resource_local_to_scene false (overrides Resource)  
FeedImage which_feed 0     Property Descriptions 
int camera_feed_id = 0
  void set_camera_feed_id ( int value )
 
int get_camera_feed_id ( )
  The ID of the CameraFeed for which we want to display the image. 
bool camera_is_active = false
  void set_camera_active ( bool value )
 
bool get_camera_active ( )
  Convenience property that gives access to the active property of the CameraFeed. 
FeedImage which_feed = 0
  void set_which_feed ( FeedImage value )
 
FeedImage get_which_feed ( )
  Which image within the CameraFeed we want access to, important if the camera image is split in a Y and CbCr component.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_cameratexture.html


classes/class_fogvolume
-----------------------------------------------------------
FogVolume Inherits: VisualInstance3D < Node3D < Node < Object A region that contributes to the default volumetric fog from the world environment.  Description FogVolumes are used to add localized fog into the global volumetric fog effect. FogVolumes can also remove volumetric fog from specific areas if using a FogMaterial with a negative FogMaterial.density. Performance of FogVolumes is directly related to their relative size on the screen and the complexity of their attached FogMaterial. It is best to keep FogVolumes relatively small and simple where possible. Note: FogVolumes only have a visible effect if Environment.volumetric_fog_enabled is true. If you don't want fog to be globally visible (but only within FogVolume nodes), set Environment.volumetric_fog_density to 0.0.   Tutorials  Volumetric fog and fog volumes    Properties  
Material material   
FogVolumeShape shape 3  
Vector3 size Vector3(2, 2, 2)     Property Descriptions 
Material material  void set_material ( Material value )
 
Material get_material ( )
  The Material used by the FogVolume. Can be either a built-in FogMaterial or a custom ShaderMaterial. 
FogVolumeShape shape = 3
  void set_shape ( FogVolumeShape value )
 
FogVolumeShape get_shape ( )
  The shape of the FogVolume. This can be set to either RenderingServer.FOG_VOLUME_SHAPE_ELLIPSOID, RenderingServer.FOG_VOLUME_SHAPE_CONE, RenderingServer.FOG_VOLUME_SHAPE_CYLINDER, RenderingServer.FOG_VOLUME_SHAPE_BOX or RenderingServer.FOG_VOLUME_SHAPE_WORLD. 
Vector3 size = Vector3(2, 2, 2)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The size of the FogVolume when shape is RenderingServer.FOG_VOLUME_SHAPE_ELLIPSOID, RenderingServer.FOG_VOLUME_SHAPE_CONE, RenderingServer.FOG_VOLUME_SHAPE_CYLINDER or RenderingServer.FOG_VOLUME_SHAPE_BOX. Note: Thin fog volumes may appear to flicker when the camera moves or rotates. This can be alleviated by increasing ProjectSettings.rendering/environment/volumetric_fog/volume_depth (at a performance cost) or by decreasing Environment.volumetric_fog_length (at no performance cost, but at the cost of lower fog range). Alternatively, the FogVolume can be made thicker and use a lower density in the material. Note: If shape is RenderingServer.FOG_VOLUME_SHAPE_CONE or RenderingServer.FOG_VOLUME_SHAPE_CYLINDER, the cone/cylinder will be adjusted to fit within the size. Non-uniform scaling of cone/cylinder shapes via the size property is not supported, but you can scale the FogVolume node instead.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_fogvolume.html


classes/class_inputeventscreendrag
-----------------------------------------------------------
InputEventScreenDrag Inherits: InputEventFromWindow < InputEvent < Resource < RefCounted < Object Represents a screen drag event.  Description Stores information about screen drag events. See Node._input.   Tutorials  Using InputEvent    Properties  
int index 0  
bool pen_inverted false  
Vector2 position Vector2(0, 0)  
float pressure 0.0  
Vector2 relative Vector2(0, 0)  
Vector2 tilt Vector2(0, 0)  
Vector2 velocity Vector2(0, 0)     Property Descriptions 
int index = 0
  void set_index ( int value )
 
int get_index ( )
  The drag event index in the case of a multi-drag event. 
bool pen_inverted = false
  void set_pen_inverted ( bool value )
 
bool get_pen_inverted ( )
  Returns true when using the eraser end of a stylus pen. 
Vector2 position = Vector2(0, 0)
  void set_position ( Vector2 value )
 
Vector2 get_position ( )
  The drag position in the viewport the node is in, using the coordinate system of this viewport. 
float pressure = 0.0
  void set_pressure ( float value )
 
float get_pressure ( )
  Represents the pressure the user puts on the pen. Ranges from 0.0 to 1.0. 
Vector2 relative = Vector2(0, 0)
  void set_relative ( Vector2 value )
 
Vector2 get_relative ( )
  The drag position relative to the previous position (position at the last frame). 
Vector2 tilt = Vector2(0, 0)
  void set_tilt ( Vector2 value )
 
Vector2 get_tilt ( )
  Represents the angles of tilt of the pen. Positive X-coordinate value indicates a tilt to the right. Positive Y-coordinate value indicates a tilt toward the user. Ranges from -1.0 to 1.0 for both axes. 
Vector2 velocity = Vector2(0, 0)
  void set_velocity ( Vector2 value )
 
Vector2 get_velocity ( )
  The drag velocity.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventscreendrag.html


classes/class_path3d
-----------------------------------------------------------
Path3D Inherits: Node3D < Node < Object Contains a Curve3D path for PathFollow3D nodes to follow.  Description Can have PathFollow3D child nodes moving along the Curve3D. See PathFollow3D for more information on the usage. Note that the path is considered as relative to the moved nodes (children of PathFollow3D). As such, the curve should usually start with a zero vector (0, 0, 0).   Properties  
Curve3D curve     Signals curve_changed ( ) Emitted when the curve changes.   Property Descriptions 
Curve3D curve  void set_curve ( Curve3D value )
 
Curve3D get_curve ( )
  A Curve3D describing the path.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_path3d.html


classes/class_gridcontainer
-----------------------------------------------------------
GridContainer Inherits: Container < Control < CanvasItem < Node < Object A container that arranges its child controls in a grid layout.  Description GridContainer arranges its child controls in a grid layout. The number of columns is specified by the columns property, whereas the number of rows depends on how many are needed for the child controls. The number of rows and columns is preserved for every size of the container. Note: GridContainer only works with child nodes inheriting from Control. It won't rearrange child nodes inheriting from Node2D.   Tutorials  Using Containers OS Test Demo    Properties  
int columns 1     Theme Properties  
int h_separation 4  
int v_separation 4     Property Descriptions 
int columns = 1
  void set_columns ( int value )
 
int get_columns ( )
  The number of columns in the GridContainer. If modified, GridContainer reorders its Control-derived children to accommodate the new layout.   Theme Property Descriptions 
int h_separation = 4
 The horizontal separation of child nodes. 
int v_separation = 4
 The vertical separation of child nodes.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gridcontainer.html


classes/class_navigationmeshsourcegeometrydata2d
-----------------------------------------------------------
NavigationMeshSourceGeometryData2D Inherits: Resource < RefCounted < Object Container for parsed source geometry data used in navigation mesh baking.  Description Container for parsed source geometry data used in navigation mesh baking.   Methods  
void add_obstruction_outline ( PackedVector2Array shape_outline )  
void add_traversable_outline ( PackedVector2Array shape_outline )  
void clear ( )  
PackedVector2Array[] get_obstruction_outlines ( ) const  
PackedVector2Array[] get_traversable_outlines ( ) const  
bool has_data ( )  
void set_obstruction_outlines ( PackedVector2Array[] obstruction_outlines )  
void set_traversable_outlines ( PackedVector2Array[] traversable_outlines )     Method Descriptions void add_obstruction_outline ( PackedVector2Array shape_outline ) Adds the outline points of a shape as obstructed area. void add_traversable_outline ( PackedVector2Array shape_outline ) Adds the outline points of a shape as traversable area. void clear ( ) Clears the internal data. 
PackedVector2Array[] get_obstruction_outlines ( ) const
 Returns all the obstructed area outlines arrays. 
PackedVector2Array[] get_traversable_outlines ( ) const
 Returns all the traversable area outlines arrays. 
bool has_data ( ) Returns true when parsed source geometry data exists. void set_obstruction_outlines ( PackedVector2Array[] obstruction_outlines ) Sets all the obstructed area outlines arrays. void set_traversable_outlines ( PackedVector2Array[] traversable_outlines ) Sets all the traversable area outlines arrays.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_navigationmeshsourcegeometrydata2d.html


classes/class_editorresourcepreview
-----------------------------------------------------------
EditorResourcePreview Inherits: Node < Object A node used to generate previews of resources or files.  Description This node is used to generate previews for resources or files. Note: This class shouldn't be instantiated directly. Instead, access the singleton using EditorInterface.get_resource_previewer.   Methods  
void add_preview_generator ( EditorResourcePreviewGenerator generator )  
void check_for_invalidation ( String path )  
void queue_edited_resource_preview ( Resource resource, Object receiver, StringName receiver_func, Variant userdata )  
void queue_resource_preview ( String path, Object receiver, StringName receiver_func, Variant userdata )  
void remove_preview_generator ( EditorResourcePreviewGenerator generator )     Signals preview_invalidated ( String path ) Emitted if a preview was invalidated (changed). path corresponds to the path of the preview.   Method Descriptions void add_preview_generator ( EditorResourcePreviewGenerator generator ) Create an own, custom preview generator. void check_for_invalidation ( String path ) Check if the resource changed, if so, it will be invalidated and the corresponding signal emitted. void queue_edited_resource_preview ( Resource resource, Object receiver, StringName receiver_func, Variant userdata ) Queue the resource being edited for preview. Once the preview is ready, the receiver's receiver_func will be called. The receiver_func must take the following four arguments: String path, Texture2D preview, Texture2D thumbnail_preview, Variant userdata. userdata can be anything, and will be returned when receiver_func is called. Note: If it was not possible to create the preview the receiver_func will still be called, but the preview will be null. void queue_resource_preview ( String path, Object receiver, StringName receiver_func, Variant userdata ) Queue a resource file located at path for preview. Once the preview is ready, the receiver's receiver_func will be called. The receiver_func must take the following four arguments: String path, Texture2D preview, Texture2D thumbnail_preview, Variant userdata. userdata can be anything, and will be returned when receiver_func is called. Note: If it was not possible to create the preview the receiver_func will still be called, but the preview will be null. void remove_preview_generator ( EditorResourcePreviewGenerator generator ) Removes a custom preview generator.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editorresourcepreview.html


classes/class_vsplitcontainer
-----------------------------------------------------------
VSplitContainer Inherits: SplitContainer < Container < Control < CanvasItem < Node < Object A container that splits two child controls vertically and provides a grabber for adjusting the split ratio.  Description A container that accepts only two child controls, then arranges them vertically and creates a divisor between them. The divisor can be dragged around to change the size relation between the child controls.   Tutorials  Using Containers   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_vsplitcontainer.html


classes/class_animationnodeoutput
-----------------------------------------------------------
AnimationNodeOutput Inherits: AnimationNode < Resource < RefCounted < Object The animation output node of an AnimationNodeBlendTree.  Description A node created automatically in an AnimationNodeBlendTree that outputs the final animation.   Tutorials  Using AnimationTree 3D Platformer Demo Third Person Shooter Demo   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodeoutput.html


classes/class_texturebutton
-----------------------------------------------------------
TextureButton Inherits: BaseButton < Control < CanvasItem < Node < Object Texture-based button. Supports Pressed, Hover, Disabled and Focused states.  Description TextureButton has the same functionality as Button, except it uses sprites instead of Godot's Theme resource. It is faster to create, but it doesn't support localization like more complex Controls. The "normal" state must contain a texture (texture_normal); other textures are optional. See also BaseButton which contains common properties and methods associated with this node.   Tutorials  3D Voxel Demo    Properties  
bool flip_h false  
bool flip_v false  
bool ignore_texture_size false  
StretchMode stretch_mode 2  
BitMap texture_click_mask   
Texture2D texture_disabled   
Texture2D texture_focused   
Texture2D texture_hover   
Texture2D texture_normal   
Texture2D texture_pressed      Enumerations enum StretchMode: 
StretchMode STRETCH_SCALE = 0
 Scale to fit the node's bounding rectangle. 
StretchMode STRETCH_TILE = 1
 Tile inside the node's bounding rectangle. 
StretchMode STRETCH_KEEP = 2
 The texture keeps its original size and stays in the bounding rectangle's top-left corner. 
StretchMode STRETCH_KEEP_CENTERED = 3
 The texture keeps its original size and stays centered in the node's bounding rectangle. 
StretchMode STRETCH_KEEP_ASPECT = 4
 Scale the texture to fit the node's bounding rectangle, but maintain the texture's aspect ratio. 
StretchMode STRETCH_KEEP_ASPECT_CENTERED = 5
 Scale the texture to fit the node's bounding rectangle, center it, and maintain its aspect ratio. 
StretchMode STRETCH_KEEP_ASPECT_COVERED = 6
 Scale the texture so that the shorter side fits the bounding rectangle. The other side clips to the node's limits.   Property Descriptions 
bool flip_h = false
  void set_flip_h ( bool value )
 
bool is_flipped_h ( )
  If true, texture is flipped horizontally. 
bool flip_v = false
  void set_flip_v ( bool value )
 
bool is_flipped_v ( )
  If true, texture is flipped vertically. 
bool ignore_texture_size = false
  void set_ignore_texture_size ( bool value )
 
bool get_ignore_texture_size ( )
  If true, the size of the texture won't be considered for minimum size calculation, so the TextureButton can be shrunk down past the texture size. 
StretchMode stretch_mode = 2
  void set_stretch_mode ( StretchMode value )
 
StretchMode get_stretch_mode ( )
  Controls the texture's behavior when you resize the node's bounding rectangle. See the StretchMode constants for available options. 
BitMap texture_click_mask  void set_click_mask ( BitMap value )
 
BitMap get_click_mask ( )
  Pure black and white BitMap image to use for click detection. On the mask, white pixels represent the button's clickable area. Use it to create buttons with curved shapes. 
Texture2D texture_disabled  void set_texture_disabled ( Texture2D value )
 
Texture2D get_texture_disabled ( )
  Texture to display when the node is disabled. See BaseButton.disabled. 
Texture2D texture_focused  void set_texture_focused ( Texture2D value )
 
Texture2D get_texture_focused ( )
  Texture to display when the node has mouse or keyboard focus. texture_focused is displayed over the base texture, so a partially transparent texture should be used to ensure the base texture remains visible. A texture that represents an outline or an underline works well for this purpose. To disable the focus visual effect, assign a fully transparent texture of any size. Note that disabling the focus visual effect will harm keyboard/controller navigation usability, so this is not recommended for accessibility reasons. 
Texture2D texture_hover  void set_texture_hover ( Texture2D value )
 
Texture2D get_texture_hover ( )
  Texture to display when the mouse hovers the node. 
Texture2D texture_normal  void set_texture_normal ( Texture2D value )
 
Texture2D get_texture_normal ( )
  Texture to display by default, when the node is not in the disabled, hover or pressed state. This texture is still displayed in the focused state, with texture_focused drawn on top. 
Texture2D texture_pressed  void set_texture_pressed ( Texture2D value )
 
Texture2D get_texture_pressed ( )
  Texture to display on mouse down over the node, if the node has keyboard focus and the player presses the Enter key or if the player presses the BaseButton.shortcut key.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texturebutton.html


classes/class_worldenvironment
-----------------------------------------------------------
WorldEnvironment Inherits: Node < Object Default environment properties for the entire scene (post-processing effects, lighting and background settings).  Description The WorldEnvironment node is used to configure the default Environment for the scene. The parameters defined in the WorldEnvironment can be overridden by an Environment node set on the current Camera3D. Additionally, only one WorldEnvironment may be instantiated in a given scene at a time. The WorldEnvironment allows the user to specify default lighting parameters (e.g. ambient lighting), various post-processing effects (e.g. SSAO, DOF, Tonemapping), and how to draw the background (e.g. solid color, skybox). Usually, these are added in order to improve the realism/color balance of the scene.   Tutorials  Environment and post-processing 3D Material Testers Demo 2D HDR Demo Third Person Shooter Demo    Properties  
CameraAttributes camera_attributes  
Environment environment     Property Descriptions 
CameraAttributes camera_attributes  void set_camera_attributes ( CameraAttributes value )
 
CameraAttributes get_camera_attributes ( )
  The default CameraAttributes resource to use if none set on the Camera3D. 
Environment environment  void set_environment ( Environment value )
 
Environment get_environment ( )
  The Environment resource used by this WorldEnvironment, defining the default properties.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_worldenvironment.html


classes/class_animationnodeadd2
-----------------------------------------------------------
AnimationNodeAdd2 Inherits: AnimationNodeSync < AnimationNode < Resource < RefCounted < Object Blends two animations additively inside of an AnimationNodeBlendTree.  Description A resource to add to an AnimationNodeBlendTree. Blends two animations additively based on the amount value. If the amount is greater than 1.0, the animation connected to "in" port is blended with the amplified animation connected to "add" port. If the amount is less than 0.0, the animation connected to "in" port is blended with the inverted animation connected to "add" port.   Tutorials  Using AnimationTree   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodeadd2.html


classes/class_compressedtexturelayered
-----------------------------------------------------------
CompressedTextureLayered Inherits: TextureLayered < Texture < Resource < RefCounted < Object Inherited By: CompressedCubemap, CompressedCubemapArray, CompressedTexture2DArray Base class for texture arrays that can optionally be compressed.  Description Base class for CompressedTexture2DArray and CompressedTexture3D. Cannot be used directly, but contains all the functions necessary for accessing the derived resource types. See also TextureLayered.   Properties  
String load_path ""     Methods  
Error load ( String path )     Property Descriptions 
String load_path = ""
  
Error load ( String path )
 
String get_load_path ( )
  The path the texture should be loaded from.   Method Descriptions 
Error load ( String path ) Loads the texture at path.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_compressedtexturelayered.html


classes/class_inputeventshortcut
-----------------------------------------------------------
InputEventShortcut Inherits: InputEvent < Resource < RefCounted < Object Represents a triggered keyboard Shortcut.  Description InputEventShortcut is a special event that can be received in Node._unhandled_key_input. It is typically sent by the editor's Command Palette to trigger actions, but can also be sent manually using Viewport.push_input.   Properties  
Shortcut shortcut     Property Descriptions 
Shortcut shortcut  void set_shortcut ( Shortcut value )
 
Shortcut get_shortcut ( )
  The Shortcut represented by this event. Its Shortcut.matches_event method will always return true for this event.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventshortcut.html


classes/class_gridmap
-----------------------------------------------------------
GridMap Inherits: Node3D < Node < Object Node for 3D tile-based maps.  Description GridMap lets you place meshes on a grid interactively. It works both from the editor and from scripts, which can help you create in-game level editors. GridMaps use a MeshLibrary which contains a list of tiles. Each tile is a mesh with materials plus optional collision and navigation shapes. A GridMap contains a collection of cells. Each grid cell refers to a tile in the MeshLibrary. All cells in the map have the same dimensions. Internally, a GridMap is split into a sparse collection of octants for efficient rendering and physics processing. Every octant has the same dimensions and can contain several cells. Note: GridMap doesn't extend VisualInstance3D and therefore can't be hidden or cull masked based on VisualInstance3D.layers. If you make a light not affect the first layer, the whole GridMap won't be lit by the light in question.   Tutorials  Using gridmaps 3D Platformer Demo 3D Kinematic Character Demo    Properties  
bool bake_navigation false  
bool cell_center_x true  
bool cell_center_y true  
bool cell_center_z true  
int cell_octant_size 8  
float cell_scale 1.0  
Vector3 cell_size Vector3(2, 2, 2)  
int collision_layer 1  
int collision_mask 1  
float collision_priority 1.0  
MeshLibrary mesh_library   
PhysicsMaterial physics_material      Methods  
void clear ( )  
void clear_baked_meshes ( )  
RID get_bake_mesh_instance ( int idx )  
Array get_bake_meshes ( )  
Basis get_basis_with_orthogonal_index ( int index ) const  
int get_cell_item ( Vector3i position ) const  
Basis get_cell_item_basis ( Vector3i position ) const  
int get_cell_item_orientation ( Vector3i position ) const  
bool get_collision_layer_value ( int layer_number ) const  
bool get_collision_mask_value ( int layer_number ) const  
Array get_meshes ( ) const  
RID get_navigation_map ( ) const  
int get_orthogonal_index_from_basis ( Basis basis ) const  
Vector3i[] get_used_cells ( ) const  
Vector3i[] get_used_cells_by_item ( int item ) const  
Vector3i local_to_map ( Vector3 local_position ) const  
void make_baked_meshes ( bool gen_lightmap_uv=false, float lightmap_uv_texel_size=0.1 )  
Vector3 map_to_local ( Vector3i map_position ) const  
void resource_changed ( Resource resource )  
void set_cell_item ( Vector3i position, int item, int orientation=0 )  
void set_collision_layer_value ( int layer_number, bool value )  
void set_collision_mask_value ( int layer_number, bool value )  
void set_navigation_map ( RID navigation_map )     Signals cell_size_changed ( Vector3 cell_size ) Emitted when cell_size changes. changed ( ) Emitted when the MeshLibrary of this GridMap changes.   Constants INVALID_CELL_ITEM = -1
 Invalid cell item that can be used in set_cell_item to clear cells (or represent an empty cell in get_cell_item).   Property Descriptions 
bool bake_navigation = false
  void set_bake_navigation ( bool value )
 
bool is_baking_navigation ( )
  If true, this GridMap creates a navigation region for each cell that uses a mesh_library item with a navigation mesh. The created navigation region will use the navigation layers bitmask assigned to the MeshLibrary's item. 
bool cell_center_x = true
  void set_center_x ( bool value )
 
bool get_center_x ( )
  If true, grid items are centered on the X axis. 
bool cell_center_y = true
  void set_center_y ( bool value )
 
bool get_center_y ( )
  If true, grid items are centered on the Y axis. 
bool cell_center_z = true
  void set_center_z ( bool value )
 
bool get_center_z ( )
  If true, grid items are centered on the Z axis. 
int cell_octant_size = 8
  void set_octant_size ( int value )
 
int get_octant_size ( )
  The size of each octant measured in number of cells. This applies to all three axis. 
float cell_scale = 1.0
  void set_cell_scale ( float value )
 
float get_cell_scale ( )
  The scale of the cell items. This does not affect the size of the grid cells themselves, only the items in them. This can be used to make cell items overlap their neighbors. 
Vector3 cell_size = Vector3(2, 2, 2)
  void set_cell_size ( Vector3 value )
 
Vector3 get_cell_size ( )
  The dimensions of the grid's cells. This does not affect the size of the meshes. See cell_scale. 
int collision_layer = 1
  void set_collision_layer ( int value )
 
int get_collision_layer ( )
  The physics layers this GridMap is in. GridMaps act as static bodies, meaning they aren't affected by gravity or other forces. They only affect other physics bodies that collide with them. 
int collision_mask = 1
  void set_collision_mask ( int value )
 
int get_collision_mask ( )
  The physics layers this GridMap detects collisions in. See Collision layers and masks in the documentation for more information. 
float collision_priority = 1.0
  void set_collision_priority ( float value )
 
float get_collision_priority ( )
  The priority used to solve colliding when occurring penetration. The higher the priority is, the lower the penetration into the object will be. This can for example be used to prevent the player from breaking through the boundaries of a level. 
MeshLibrary mesh_library  void set_mesh_library ( MeshLibrary value )
 
MeshLibrary get_mesh_library ( )
  The assigned MeshLibrary. 
PhysicsMaterial physics_material  void set_physics_material ( PhysicsMaterial value )
 
PhysicsMaterial get_physics_material ( )
  Overrides the default friction and bounce physics properties for the whole GridMap.   Method Descriptions void clear ( ) Clear all cells. void clear_baked_meshes ( ) Clears all baked meshes. See make_baked_meshes. 
RID get_bake_mesh_instance ( int idx ) Returns RID of a baked mesh with the given idx. 
Array get_bake_meshes ( ) Returns an array of ArrayMeshes and Transform3D references of all bake meshes that exist within the current GridMap. 
Basis get_basis_with_orthogonal_index ( int index ) const
 Returns one of 24 possible rotations that lie along the vectors (x,y,z) with each component being either -1, 0, or 1. For further details, refer to the Godot source code. 
int get_cell_item ( Vector3i position ) const
 The MeshLibrary item index located at the given grid coordinates. If the cell is empty, INVALID_CELL_ITEM will be returned. 
Basis get_cell_item_basis ( Vector3i position ) const
 Returns the basis that gives the specified cell its orientation. 
int get_cell_item_orientation ( Vector3i position ) const
 The orientation of the cell at the given grid coordinates. -1 is returned if the cell is empty. 
bool get_collision_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_layer is enabled, given a layer_number between 1 and 32. 
bool get_collision_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_mask is enabled, given a layer_number between 1 and 32. 
Array get_meshes ( ) const
 Returns an array of Transform3D and Mesh references corresponding to the non-empty cells in the grid. The transforms are specified in local space. 
RID get_navigation_map ( ) const
 Returns the RID of the navigation map this GridMap node uses for its cell baked navigation meshes. This function returns always the map set on the GridMap node and not the map on the NavigationServer. If the map is changed directly with the NavigationServer API the GridMap node will not be aware of the map change. 
int get_orthogonal_index_from_basis ( Basis basis ) const
 This function considers a discretization of rotations into 24 points on unit sphere, lying along the vectors (x,y,z) with each component being either -1, 0, or 1, and returns the index (in the range from 0 to 23) of the point best representing the orientation of the object. For further details, refer to the Godot source code. 
Vector3i[] get_used_cells ( ) const
 Returns an array of Vector3 with the non-empty cell coordinates in the grid map. 
Vector3i[] get_used_cells_by_item ( int item ) const
 Returns an array of all cells with the given item index specified in item. 
Vector3i local_to_map ( Vector3 local_position ) const
 Returns the map coordinates of the cell containing the given local_position. If local_position is in global coordinates, consider using Node3D.to_local before passing it to this method. See also map_to_local. void make_baked_meshes ( bool gen_lightmap_uv=false, float lightmap_uv_texel_size=0.1 ) Bakes lightmap data for all meshes in the assigned MeshLibrary. 
Vector3 map_to_local ( Vector3i map_position ) const
 Returns the position of a grid cell in the GridMap's local coordinate space. To convert the returned value into global coordinates, use Node3D.to_global. See also map_to_local. void resource_changed ( Resource resource ) Obsoleted. Use Resource.changed instead. void set_cell_item ( Vector3i position, int item, int orientation=0 ) Sets the mesh index for the cell referenced by its grid coordinates. A negative item index such as INVALID_CELL_ITEM will clear the cell. Optionally, the item's orientation can be passed. For valid orientation values, see get_orthogonal_index_from_basis. void set_collision_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_layer, given a layer_number between 1 and 32. void set_collision_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_mask, given a layer_number between 1 and 32. void set_navigation_map ( RID navigation_map ) Sets the RID of the navigation map this GridMap node should use for its cell baked navigation meshes.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gridmap.html


classes/class_gpuparticles2d
-----------------------------------------------------------
GPUParticles2D Inherits: Node2D < CanvasItem < Node < Object A 2D particle emitter.  Description 2D particle node used to create a variety of particle systems and effects. GPUParticles2D features an emitter that generates some number of particles at a given rate. Use the process_material property to add a ParticleProcessMaterial to configure particle appearance and behavior. Alternatively, you can add a ShaderMaterial which will be applied to all particles. 2D particles can optionally collide with LightOccluder2D, but they don't collide with PhysicsBody2D nodes.   Tutorials  Particle systems (2D) 2D Particles Demo 2D Dodge The Creeps Demo (uses GPUParticles2D for the trail behind the player)    Properties  
int amount 8  
float amount_ratio 1.0  
float collision_base_size 1.0  
DrawOrder draw_order 1  
bool emitting true  
float explosiveness 0.0  
int fixed_fps 30  
bool fract_delta true  
float interp_to_end 0.0  
bool interpolate true  
float lifetime 1.0  
bool local_coords false  
bool one_shot false  
float preprocess 0.0  
Material process_material   
float randomness 0.0  
float speed_scale 1.0  
NodePath sub_emitter NodePath("")  
Texture2D texture   
bool trail_enabled false  
float trail_lifetime 0.3  
int trail_section_subdivisions 4  
int trail_sections 8  
Rect2 visibility_rect Rect2(-100, -100, 200, 200)     Methods  
Rect2 capture_rect ( ) const  
void convert_from_particles ( Node particles )  
void emit_particle ( Transform2D xform, Vector2 velocity, Color color, Color custom, int flags )  
void restart ( )     Signals finished ( ) Emitted when all active particles have finished processing. When one_shot is disabled, particles will process continuously, so this is never emitted. Note: Due to the particles being computed on the GPU there might be a delay before the signal gets emitted.   Enumerations enum DrawOrder: 
DrawOrder DRAW_ORDER_INDEX = 0
 Particles are drawn in the order emitted. 
DrawOrder DRAW_ORDER_LIFETIME = 1
 Particles are drawn in order of remaining lifetime. In other words, the particle with the highest lifetime is drawn at the front. 
DrawOrder DRAW_ORDER_REVERSE_LIFETIME = 2
 Particles are drawn in reverse order of remaining lifetime. In other words, the particle with the lowest lifetime is drawn at the front. enum EmitFlags: 
EmitFlags EMIT_FLAG_POSITION = 1
 Particle starts at the specified position. 
EmitFlags EMIT_FLAG_ROTATION_SCALE = 2
 Particle starts with specified rotation and scale. 
EmitFlags EMIT_FLAG_VELOCITY = 4
 Particle starts with the specified velocity vector, which defines the emission direction and speed. 
EmitFlags EMIT_FLAG_COLOR = 8
 Particle starts with specified color. 
EmitFlags EMIT_FLAG_CUSTOM = 16
 Particle starts with specified CUSTOM data.   Property Descriptions 
int amount = 8
  void set_amount ( int value )
 
int get_amount ( )
  The number of particles to emit in one emission cycle. The effective emission rate is (amount * amount_ratio) / lifetime particles per second. Higher values will increase GPU requirements, even if not all particles are visible at a given time or if amount_ratio is decreased. Note: Changing this value will cause the particle system to restart. To avoid this, change amount_ratio instead. 
float amount_ratio = 1.0
  void set_amount_ratio ( float value )
 
float get_amount_ratio ( )
  The ratio of particles that should actually be emitted. If set to a value lower than 1.0, this will set the amount of emitted particles throughout the lifetime to amount * amount_ratio. Unlike changing amount, changing amount_ratio while emitting does not affect already-emitted particles and doesn't cause the particle system to restart. amount_ratio can be used to create effects that make the number of emitted particles vary over time. Note: Reducing the amount_ratio has no performance benefit, since resources need to be allocated and processed for the total amount of particles regardless of the amount_ratio. If you don't intend to change the number of particles emitted while the particles are emitting, make sure amount_ratio is set to 1 and change amount to your liking instead. 
float collision_base_size = 1.0
  void set_collision_base_size ( float value )
 
float get_collision_base_size ( )
  Multiplier for particle's collision radius. 1.0 corresponds to the size of the sprite. If particles appear to sink into the ground when colliding, increase this value. If particles appear to float when colliding, decrease this value. Only effective if ParticleProcessMaterial.collision_mode is ParticleProcessMaterial.COLLISION_RIGID or ParticleProcessMaterial.COLLISION_HIDE_ON_CONTACT. Note: Particles always have a spherical collision shape. 
DrawOrder draw_order = 1
  void set_draw_order ( DrawOrder value )
 
DrawOrder get_draw_order ( )
  Particle draw order. Uses DrawOrder values. 
bool emitting = true
  void set_emitting ( bool value )
 
bool is_emitting ( )
  If true, particles are being emitted. emitting can be used to start and stop particles from emitting. However, if one_shot is true setting emitting to true will not restart the emission cycle until after all active particles finish processing. You can use the finished signal to be notified once all active particles finish processing. 
float explosiveness = 0.0
  void set_explosiveness_ratio ( float value )
 
float get_explosiveness_ratio ( )
  How rapidly particles in an emission cycle are emitted. If greater than 0, there will be a gap in emissions before the next cycle begins. 
int fixed_fps = 30
  void set_fixed_fps ( int value )
 
int get_fixed_fps ( )
  The particle system's frame rate is fixed to a value. For example, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the simulation of the particle system itself. 
bool fract_delta = true
  void set_fractional_delta ( bool value )
 
bool get_fractional_delta ( )
  If true, results in fractional delta calculation which has a smoother particles display effect. 
float interp_to_end = 0.0
  void set_interp_to_end ( float value )
 
float get_interp_to_end ( )
  Causes all the particles in this node to interpolate towards the end of their lifetime. Note: This only works when used with a ParticleProcessMaterial. It needs to be manually implemented for custom process shaders. 
bool interpolate = true
  void set_interpolate ( bool value )
 
bool get_interpolate ( )
  Enables particle interpolation, which makes the particle movement smoother when their fixed_fps is lower than the screen refresh rate. 
float lifetime = 1.0
  void set_lifetime ( float value )
 
float get_lifetime ( )
  The amount of time each particle will exist (in seconds). The effective emission rate is (amount * amount_ratio) / lifetime particles per second. 
bool local_coords = false
  void set_use_local_coordinates ( bool value )
 
bool get_use_local_coordinates ( )
  If true, particles use the parent node's coordinate space (known as local coordinates). This will cause particles to move and rotate along the GPUParticles2D node (and its parents) when it is moved or rotated. If false, particles use global coordinates; they will not move or rotate along the GPUParticles2D node (and its parents) when it is moved or rotated. 
bool one_shot = false
  void set_one_shot ( bool value )
 
bool get_one_shot ( )
  If true, only one emission cycle occurs. If set true during a cycle, emission will stop at the cycle's end. 
float preprocess = 0.0
  void set_pre_process_time ( float value )
 
float get_pre_process_time ( )
  Particle system starts as if it had already run for this many seconds. 
Material process_material  void set_process_material ( Material value )
 
Material get_process_material ( )
  Material for processing particles. Can be a ParticleProcessMaterial or a ShaderMaterial. 
float randomness = 0.0
  void set_randomness_ratio ( float value )
 
float get_randomness_ratio ( )
  Emission lifetime randomness ratio. 
float speed_scale = 1.0
  void set_speed_scale ( float value )
 
float get_speed_scale ( )
  Particle system's running speed scaling ratio. A value of 0 can be used to pause the particles. 
NodePath sub_emitter = NodePath("")
  void set_sub_emitter ( NodePath value )
 
NodePath get_sub_emitter ( )
  Path to another GPUParticles2D node that will be used as a subemitter (see ParticleProcessMaterial.sub_emitter_mode). Subemitters can be used to achieve effects such as fireworks, sparks on collision, bubbles popping into water drops, and more. Note: When sub_emitter is set, the target GPUParticles2D node will no longer emit particles on its own. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  Particle texture. If null, particles will be squares with a size of 1Ã—1 pixels. Note: To use a flipbook texture, assign a new CanvasItemMaterial to the GPUParticles2D's CanvasItem.material property, then enable CanvasItemMaterial.particles_animation and set CanvasItemMaterial.particles_anim_h_frames, CanvasItemMaterial.particles_anim_v_frames, and CanvasItemMaterial.particles_anim_loop to match the flipbook texture. 
bool trail_enabled = false
  void set_trail_enabled ( bool value )
 
bool is_trail_enabled ( )
  If true, enables particle trails using a mesh skinning system. Note: Unlike GPUParticles3D, the number of trail sections and subdivisions is set with the trail_sections and trail_section_subdivisions properties. 
float trail_lifetime = 0.3
  void set_trail_lifetime ( float value )
 
float get_trail_lifetime ( )
  The amount of time the particle's trail should represent (in seconds). Only effective if trail_enabled is true. 
int trail_section_subdivisions = 4
  void set_trail_section_subdivisions ( int value )
 
int get_trail_section_subdivisions ( )
  The number of subdivisions to use for the particle trail rendering. Higher values can result in smoother trail curves, at the cost of performance due to increased mesh complexity. See also trail_sections. Only effective if trail_enabled is true. 
int trail_sections = 8
  void set_trail_sections ( int value )
 
int get_trail_sections ( )
  The number of sections to use for the particle trail rendering. Higher values can result in smoother trail curves, at the cost of performance due to increased mesh complexity. See also trail_section_subdivisions. Only effective if trail_enabled is true. 
Rect2 visibility_rect = Rect2(-100, -100, 200, 200)
  void set_visibility_rect ( Rect2 value )
 
Rect2 get_visibility_rect ( )
  The Rect2 that determines the node's region which needs to be visible on screen for the particle system to be active. Grow the rect if particles suddenly appear/disappear when the node enters/exits the screen. The Rect2 can be grown via code or with the Particles â†’ Generate Visibility Rect editor tool.   Method Descriptions 
Rect2 capture_rect ( ) const
 Returns a rectangle containing the positions of all existing particles. Note: When using threaded rendering this method synchronizes the rendering thread. Calling it often may have a negative impact on performance. void convert_from_particles ( Node particles ) Sets this node's properties to match a given CPUParticles2D node. void emit_particle ( Transform2D xform, Vector2 velocity, Color color, Color custom, int flags ) Emits a single particle. Whether xform, velocity, color and custom are applied depends on the value of flags. See EmitFlags. void restart ( ) Restarts all the existing particles.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gpuparticles2d.html


classes/class_compressedcubemap
-----------------------------------------------------------
CompressedCubemap Inherits: CompressedTextureLayered < TextureLayered < Texture < Resource < RefCounted < Object An optionally compressed Cubemap.  Description A cubemap that is loaded from a .ccube file. This file format is internal to Godot; it is created by importing other image formats with the import system. CompressedCubemap can use one of 4 compression methods:  Lossless (WebP or PNG, uncompressed on the GPU) Lossy (WebP, uncompressed on the GPU) VRAM Compressed (compressed on the GPU) VRAM Uncompressed (uncompressed on the GPU) Basis Universal (compressed on the GPU. Lower file sizes than VRAM Compressed, but slower to compress and lower quality than VRAM Compressed)  Only VRAM Compressed actually reduces the memory usage on the GPU. The Lossless and Lossy compression methods will reduce the required storage on disk, but they will not reduce memory usage on the GPU as the texture is sent to the GPU uncompressed. Using VRAM Compressed also improves loading times, as VRAM-compressed textures are faster to load compared to textures using lossless or lossy compression. VRAM compression can exhibit noticeable artifacts and is intended to be used for 3D rendering, not 2D. See Cubemap for a general description of cubemaps.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_compressedcubemap.html


classes/class_physicalbone2d
-----------------------------------------------------------
PhysicalBone2D Inherits: RigidBody2D < PhysicsBody2D < CollisionObject2D < Node2D < CanvasItem < Node < Object A RigidBody2D-derived node used to make Bone2Ds in a Skeleton2D react to physics.  Description The PhysicalBone2D node is a RigidBody2D-based node that can be used to make Bone2Ds in a Skeleton2D react to physics. Note: To make the Bone2Ds visually follow the PhysicalBone2D node, use a SkeletonModification2DPhysicalBones modification on the Skeleton2D parent. Note: The PhysicalBone2D node does not automatically create a Joint2D node to keep PhysicalBone2D nodes together. They must be created manually. For most cases, you want to use a PinJoint2D node. The PhysicalBone2D node will automatically configure the Joint2D node once it's been added as a child node.   Properties  
bool auto_configure_joint true  
int bone2d_index -1  
NodePath bone2d_nodepath NodePath("")  
bool follow_bone_when_simulating false  
bool simulate_physics false     Methods  
Joint2D get_joint ( ) const  
bool is_simulating_physics ( ) const     Property Descriptions 
bool auto_configure_joint = true
  void set_auto_configure_joint ( bool value )
 
bool get_auto_configure_joint ( )
  If true, the PhysicalBone2D will automatically configure the first Joint2D child node. The automatic configuration is limited to setting up the node properties and positioning the Joint2D. 
int bone2d_index = -1
  void set_bone2d_index ( int value )
 
int get_bone2d_index ( )
  The index of the Bone2D that this PhysicalBone2D should simulate. 
NodePath bone2d_nodepath = NodePath("")
  void set_bone2d_nodepath ( NodePath value )
 
NodePath get_bone2d_nodepath ( )
  The NodePath to the Bone2D that this PhysicalBone2D should simulate. 
bool follow_bone_when_simulating = false
  void set_follow_bone_when_simulating ( bool value )
 
bool get_follow_bone_when_simulating ( )
  If true, the PhysicalBone2D will keep the transform of the bone it is bound to when simulating physics. 
bool simulate_physics = false
  void set_simulate_physics ( bool value )
 
bool get_simulate_physics ( )
  If true, the PhysicalBone2D will start simulating using physics. If false, the PhysicalBone2D will follow the transform of the Bone2D node. Note: To have the Bone2Ds visually follow the PhysicalBone2D, use a SkeletonModification2DPhysicalBones modification on the Skeleton2D node with the Bone2D nodes.   Method Descriptions 
Joint2D get_joint ( ) const
 Returns the first Joint2D child node, if one exists. This is mainly a helper function to make it easier to get the Joint2D that the PhysicalBone2D is autoconfiguring. 
bool is_simulating_physics ( ) const
 Returns a boolean that indicates whether the PhysicalBone2D is running and simulating using the Godot 2D physics engine. When true, the PhysicalBone2D node is using physics.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_physicalbone2d.html


classes/class_portablecompressedtexture2d
-----------------------------------------------------------
PortableCompressedTexture2D Inherits: Texture2D < Texture < Resource < RefCounted < Object Provides a compressed texture for disk and/or VRAM in a way that is portable.  Description This class allows storing compressed textures as self contained (not imported) resources. For 2D usage (compressed on disk, uncompressed on VRAM), the lossy and lossless modes are recommended. For 3D usage (compressed on VRAM) it depends on the target platform. If you intend to only use desktop, S3TC or BPTC are recommended. For only mobile, ETC2 is recommended. For portable, self contained 3D textures that work on both desktop and mobile, Basis Universal is recommended (although it has a small quality cost and longer compression time as a tradeoff). This resource is intended to be created from code.   Properties  
PackedByteArray _data PackedByteArray()  
bool keep_compressed_buffer false  
bool resource_local_to_scene false (overrides Resource)  
Vector2 size_override Vector2(0, 0)     Methods  
void create_from_image ( Image image, CompressionMode compression_mode, bool normal_map=false, float lossy_quality=0.8 )  
CompressionMode get_compression_mode ( ) const  
Format get_format ( ) const  
bool is_keeping_all_compressed_buffers ( ) static  
void set_keep_all_compressed_buffers ( bool keep ) static     Enumerations enum CompressionMode: 
CompressionMode COMPRESSION_MODE_LOSSLESS = 0
 
CompressionMode COMPRESSION_MODE_LOSSY = 1
 
CompressionMode COMPRESSION_MODE_BASIS_UNIVERSAL = 2
 
CompressionMode COMPRESSION_MODE_S3TC = 3
 
CompressionMode COMPRESSION_MODE_ETC2 = 4
 
CompressionMode COMPRESSION_MODE_BPTC = 5
   Property Descriptions 
PackedByteArray _data = PackedByteArray()
  There is currently no description for this property. Please help us by contributing one!  
bool keep_compressed_buffer = false
  void set_keep_compressed_buffer ( bool value )
 
bool is_keeping_compressed_buffer ( )
  When running on the editor, this class will keep the source compressed data in memory. Otherwise, the source compressed data is lost after loading and the resource can't be re saved. This flag allows to keep the compressed data in memory if you intend it to persist after loading. 
Vector2 size_override = Vector2(0, 0)
  void set_size_override ( Vector2 value )
 
Vector2 get_size_override ( )
  Allow overriding the texture size (for 2D only).   Method Descriptions void create_from_image ( Image image, CompressionMode compression_mode, bool normal_map=false, float lossy_quality=0.8 ) Initializes the compressed texture from a base image. The compression mode must be provided. normal_map is recommended to ensure optimum quality if this image will be used as a normal map. If lossy compression is requested, the quality setting can optionally be provided. This maps to Lossy WebP compression quality. 
CompressionMode get_compression_mode ( ) const
 Return the compression mode used (valid after initialized). 
Format get_format ( ) const
 Return the image format used (valid after initialized). 
bool is_keeping_all_compressed_buffers ( ) static
 Return whether the flag is overridden for all textures of this type. void set_keep_all_compressed_buffers ( bool keep ) static
 Overrides the flag globally for all textures of this type. This is used primarily by the editor.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_portablecompressedtexture2d.html


classes/class_xrnode3d
-----------------------------------------------------------
XRNode3D Inherits: Node3D < Node < Object Inherited By: XRAnchor3D, XRController3D A spatial node that has its position automatically updated by the XRServer.  Description This node can be bound to a specific pose of a XRPositionalTracker and will automatically have its Node3D.transform updated by the XRServer. Nodes of this type must be added as children of the XROrigin3D node.   Tutorials  XR documentation index    Properties  
StringName pose &"default"  
StringName tracker &""     Methods  
bool get_has_tracking_data ( ) const  
bool get_is_active ( ) const  
XRPose get_pose ( )  
void trigger_haptic_pulse ( String action_name, float frequency, float amplitude, float duration_sec, float delay_sec )     Signals tracking_changed ( bool tracking ) Emitted when the tracker starts or stops receiving updated tracking data for the pose being tracked. The tracking argument indicates whether the tracker is getting updated tracking data.   Property Descriptions 
StringName pose = &"default"
  void set_pose_name ( StringName value )
 
StringName get_pose_name ( )
  The name of the pose we're bound to. Which poses a tracker supports is not known during design time. Godot defines number of standard pose names such as aim and grip but other may be configured within a given XRInterface. 
StringName tracker = &""
  void set_tracker ( StringName value )
 
StringName get_tracker ( )
  The name of the tracker we're bound to. Which trackers are available is not known during design time. Godot defines a number of standard trackers such as left_hand and right_hand but others may be configured within a given XRInterface.   Method Descriptions 
bool get_has_tracking_data ( ) const
 Returns true if the tracker has current tracking data for the pose being tracked. 
bool get_is_active ( ) const
 Returns true if the tracker has been registered and the pose is being tracked. 
XRPose get_pose ( ) Returns the XRPose containing the current state of the pose being tracked. This gives access to additional properties of this pose. void trigger_haptic_pulse ( String action_name, float frequency, float amplitude, float duration_sec, float delay_sec ) Triggers a haptic pulse on a device associated with this interface. action_name is the name of the action for this pulse.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_xrnode3d.html


classes/class_hsplitcontainer
-----------------------------------------------------------
HSplitContainer Inherits: SplitContainer < Container < Control < CanvasItem < Node < Object A container that splits two child controls horizontally and provides a grabber for adjusting the split ratio.  Description A container that accepts only two child controls, then arranges them horizontally and creates a divisor between them. The divisor can be dragged around to change the size relation between the child controls.   Tutorials  Using Containers   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_hsplitcontainer.html


classes/class_tubetrailmesh
-----------------------------------------------------------
TubeTrailMesh Inherits: PrimitiveMesh < Mesh < Resource < RefCounted < Object Represents a straight tube-shaped PrimitiveMesh with variable width.  Description TubeTrailMesh represents a straight tube-shaped mesh with variable width. The tube is composed of a number of cylindrical sections, each with the same section_length and number of section_rings. A curve is sampled along the total length of the tube, meaning that the curve determines the radius of the tube along its length. This primitive mesh is usually used for particle trails.   Tutorials  3D Particle trails Particle systems (3D)    Properties  
bool cap_bottom true  
bool cap_top true  
Curve curve   
int radial_steps 8  
float radius 0.5  
float section_length 0.2  
int section_rings 3  
int sections 5     Property Descriptions 
bool cap_bottom = true
  void set_cap_bottom ( bool value )
 
bool is_cap_bottom ( )
  If true, generates a cap at the bottom of the tube. This can be set to false to speed up generation and rendering when the cap is never seen by the camera. 
bool cap_top = true
  void set_cap_top ( bool value )
 
bool is_cap_top ( )
  If true, generates a cap at the top of the tube. This can be set to false to speed up generation and rendering when the cap is never seen by the camera. 
Curve curve  void set_curve ( Curve value )
 
Curve get_curve ( )
  Determines the radius of the tube along its length. The radius of a particular section ring is obtained by multiplying the baseline radius by the value of this curve at the given distance. For values smaller than 0, the faces will be inverted. 
int radial_steps = 8
  void set_radial_steps ( int value )
 
int get_radial_steps ( )
  The number of sides on the tube. For example, a value of 5 means the tube will be pentagonal. Higher values result in a more detailed tube at the cost of performance. 
float radius = 0.5
  void set_radius ( float value )
 
float get_radius ( )
  The baseline radius of the tube. The radius of a particular section ring is obtained by multiplying this radius by the value of the curve at the given distance. 
float section_length = 0.2
  void set_section_length ( float value )
 
float get_section_length ( )
  The length of a section of the tube. 
int section_rings = 3
  void set_section_rings ( int value )
 
int get_section_rings ( )
  The number of rings in a section. The curve is sampled on each ring to determine its radius. Higher values result in a more detailed tube at the cost of performance. 
int sections = 5
  void set_sections ( int value )
 
int get_sections ( )
  The total number of sections on the tube.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_tubetrailmesh.html


classes/class_editorspinslider
-----------------------------------------------------------
EditorSpinSlider Inherits: Range < Control < CanvasItem < Node < Object Godot editor's control for editing numeric values.  Description This Control node is used in the editor's Inspector dock to allow editing of numeric values. Can be used with EditorInspectorPlugin to recreate the same behavior. If the Range.step value is 1, the EditorSpinSlider will display up/down arrows, similar to SpinBox. If the Range.step value is not 1, a slider will be displayed instead.   Properties  
bool flat false  
FocusMode focus_mode 2 (overrides Control)  
bool hide_slider false  
String label ""  
bool read_only false  
BitField<SizeFlags> size_flags_vertical 1 (overrides Control)  
float step 1.0 (overrides Range)  
String suffix ""     Signals grabbed ( ) Emitted when the spinner/slider is grabbed. ungrabbed ( ) Emitted when the spinner/slider is ungrabbed. value_focus_entered ( ) Emitted when the value form gains focus. value_focus_exited ( ) Emitted when the value form loses focus.   Property Descriptions 
bool flat = false
  void set_flat ( bool value )
 
bool is_flat ( )
  If true, the slider will not draw background. 
bool hide_slider = false
  void set_hide_slider ( bool value )
 
bool is_hiding_slider ( )
  If true, the slider and up/down arrows are hidden. 
String label = ""
  void set_label ( String value )
 
String get_label ( )
  The text that displays to the left of the value. 
bool read_only = false
  void set_read_only ( bool value )
 
bool is_read_only ( )
  If true, the slider can't be interacted with. 
String suffix = ""
  void set_suffix ( String value )
 
String get_suffix ( )
  The suffix to display after the value (in a faded color). This should generally be a plural word. You may have to use an abbreviation if the suffix is too long to be displayed.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editorspinslider.html


classes/class_filedialog
-----------------------------------------------------------
FileDialog Inherits: ConfirmationDialog < AcceptDialog < Window < Viewport < Node < Object A dialog for selecting files or directories in the filesystem.  Description FileDialog is a preset dialog used to choose files and directories in the filesystem. It supports filter masks. FileDialog automatically sets its window title according to the file_mode. If you want to use a custom title, disable this by setting mode_overrides_title to false.   Properties  
Access access 0  
String current_dir   
String current_file   
String current_path   
bool dialog_hide_on_ok false (overrides AcceptDialog)  
FileMode file_mode 4  
PackedStringArray filters PackedStringArray()  
bool mode_overrides_title true  
String root_subfolder ""  
bool show_hidden_files false  
String title "Save a File" (overrides Window)  
bool use_native_dialog false     Methods  
void add_filter ( String filter, String description="" )  
void clear_filters ( )  
void deselect_all ( )  
LineEdit get_line_edit ( )  
VBoxContainer get_vbox ( )  
void invalidate ( )     Theme Properties  
Color file_disabled_color Color(1, 1, 1, 0.25)  
Color file_icon_color Color(1, 1, 1, 1)  
Color folder_icon_color Color(1, 1, 1, 1)  
Texture2D back_folder   
Texture2D file   
Texture2D folder   
Texture2D forward_folder   
Texture2D parent_folder   
Texture2D reload   
Texture2D toggle_hidden      Signals dir_selected ( String dir ) Emitted when the user selects a directory. file_selected ( String path ) Emitted when the user selects a file by double-clicking it or pressing the OK button. files_selected ( PackedStringArray paths ) Emitted when the user selects multiple files.   Enumerations enum FileMode: 
FileMode FILE_MODE_OPEN_FILE = 0
 The dialog allows selecting one, and only one file. 
FileMode FILE_MODE_OPEN_FILES = 1
 The dialog allows selecting multiple files. 
FileMode FILE_MODE_OPEN_DIR = 2
 The dialog only allows selecting a directory, disallowing the selection of any file. 
FileMode FILE_MODE_OPEN_ANY = 3
 The dialog allows selecting one file or directory. 
FileMode FILE_MODE_SAVE_FILE = 4
 The dialog will warn when a file exists. enum Access: 
Access ACCESS_RESOURCES = 0
 The dialog only allows accessing files under the Resource path (res://). 
Access ACCESS_USERDATA = 1
 The dialog only allows accessing files under user data path (user://). 
Access ACCESS_FILESYSTEM = 2
 The dialog allows accessing files on the whole file system.   Property Descriptions 
Access access = 0
  void set_access ( Access value )
 
Access get_access ( )
  The file system access scope. See Access constants. Warning: Currently, in sandboxed environments such as Web builds or sandboxed macOS apps, FileDialog cannot access the host file system. See godot-proposals#1123. 
String current_dir  void set_current_dir ( String value )
 
String get_current_dir ( )
  The current working directory of the file dialog. 
String current_file  void set_current_file ( String value )
 
String get_current_file ( )
  The currently selected file of the file dialog. 
String current_path  void set_current_path ( String value )
 
String get_current_path ( )
  The currently selected file path of the file dialog. 
FileMode file_mode = 4
  void set_file_mode ( FileMode value )
 
FileMode get_file_mode ( )
  The dialog's open or save mode, which affects the selection behavior. See FileMode. 
PackedStringArray filters = PackedStringArray()
  void set_filters ( PackedStringArray value )
 
PackedStringArray get_filters ( )
  The available file type filters. For example, this shows only .png and .gd files: set_filters(PackedStringArray(["*.png ; PNG Images","*.gd ; GDScript Files"])). Multiple file types can also be specified in a single filter. "*.png, *.jpg, *.jpeg ; Supported Images" will show both PNG and JPEG files when selected. 
bool mode_overrides_title = true
  void set_mode_overrides_title ( bool value )
 
bool is_mode_overriding_title ( )
  If true, changing the file_mode property will set the window title accordingly (e.g. setting file_mode to FILE_MODE_OPEN_FILE will change the window title to "Open a File"). 
String root_subfolder = ""
  void set_root_subfolder ( String value )
 
String get_root_subfolder ( )
  If non-empty, the given sub-folder will be "root" of this FileDialog, i.e. user won't be able to go to its parent directory. 
bool show_hidden_files = false
  void set_show_hidden_files ( bool value )
 
bool is_showing_hidden_files ( )
  If true, the dialog will show hidden files. 
bool use_native_dialog = false
  void set_use_native_dialog ( bool value )
 
bool get_use_native_dialog ( )
  If true, access is set to ACCESS_FILESYSTEM, and it is supported by the current DisplayServer, OS native dialog will be used instead of custom one. Note: On macOS, sandboxed apps always use native dialogs to access host filesystem.   Method Descriptions void add_filter ( String filter, String description="" ) Adds a comma-delimited file name filter option to the FileDialog with an optional description, which restricts what files can be picked. A filter should be of the form "filename.extension", where filename and extension can be * to match any string. Filters starting with . (i.e. empty filenames) are not allowed. For example, a filter of "*.png, *.jpg" and a description of "Images" results in filter text "Images (*.png, *.jpg)". void clear_filters ( ) Clear all the added filters in the dialog. void deselect_all ( ) Clear all currently selected items in the dialog. 
LineEdit get_line_edit ( ) Returns the LineEdit for the selected file. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their CanvasItem.visible property. 
VBoxContainer get_vbox ( ) Returns the vertical box container of the dialog, custom controls can be added to it. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their CanvasItem.visible property. void invalidate ( ) Invalidate and update the current dialog content list.   Theme Property Descriptions 
Color file_disabled_color = Color(1, 1, 1, 0.25)
 The color tint for disabled files (when the FileDialog is used in open folder mode). 
Color file_icon_color = Color(1, 1, 1, 1)
 The color modulation applied to the file icon. 
Color folder_icon_color = Color(1, 1, 1, 1)
 The color modulation applied to the folder icon. 
Texture2D back_folder Custom icon for the back arrow. 
Texture2D file Custom icon for files. 
Texture2D folder Custom icon for folders. 
Texture2D forward_folder Custom icon for the forward arrow. 
Texture2D parent_folder Custom icon for the parent folder arrow. 
Texture2D reload Custom icon for the reload button. 
Texture2D toggle_hidden Custom icon for the toggle hidden button.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_filedialog.html


classes/class_audioeffectnotchfilter
-----------------------------------------------------------
AudioEffectNotchFilter Inherits: AudioEffectFilter < AudioEffect < Resource < RefCounted < Object Adds a notch filter to the Audio bus.  Description Attenuates frequencies in a narrow band around the AudioEffectFilter.cutoff_hz and cuts frequencies outside of this range.   Tutorials  Audio buses   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectnotchfilter.html


classes/class_bone2d
-----------------------------------------------------------
Bone2D Inherits: Node2D < CanvasItem < Node < Object A joint used with Skeleton2D to control and animate other nodes.  Description A hierarchy of Bone2Ds can be bound to a Skeleton2D to control and animate other Node2D nodes. You can use Bone2D and Skeleton2D nodes to animate 2D meshes created with the Polygon2D UV editor. Each bone has a rest transform that you can reset to with apply_rest. These rest poses are relative to the bone's parent. If in the editor, you can set the rest pose of an entire skeleton using a menu option, from the code, you need to iterate over the bones to set their individual rest poses.   Properties  
Transform2D rest Transform2D(0, 0, 0, 0, 0, 0)     Methods  
void apply_rest ( )  
bool get_autocalculate_length_and_angle ( ) const  
float get_bone_angle ( ) const  
int get_index_in_skeleton ( ) const  
float get_length ( ) const  
Transform2D get_skeleton_rest ( ) const  
void set_autocalculate_length_and_angle ( bool auto_calculate )  
void set_bone_angle ( float angle )  
void set_length ( float length )     Property Descriptions 
Transform2D rest = Transform2D(0, 0, 0, 0, 0, 0)
  void set_rest ( Transform2D value )
 
Transform2D get_rest ( )
  Rest transform of the bone. You can reset the node's transforms to this value using apply_rest.   Method Descriptions void apply_rest ( ) Resets the bone to the rest pose. This is equivalent to setting Node2D.transform to rest. 
bool get_autocalculate_length_and_angle ( ) const
 Returns whether this Bone2D is going to autocalculate its length and bone angle using its first Bone2D child node, if one exists. If there are no Bone2D children, then it cannot autocalculate these values and will print a warning. 
float get_bone_angle ( ) const
 Returns the angle of the bone in the Bone2D. Note: This is different from the Bone2D's rotation. The bone's angle is the rotation of the bone shown by the gizmo, which is unaffected by the Bone2D's Node2D.transform. 
int get_index_in_skeleton ( ) const
 Returns the node's index as part of the entire skeleton. See Skeleton2D. 
float get_length ( ) const
 Returns the length of the bone in the Bone2D node. 
Transform2D get_skeleton_rest ( ) const
 Returns the node's rest Transform2D if it doesn't have a parent, or its rest pose relative to its parent. void set_autocalculate_length_and_angle ( bool auto_calculate ) When set to true, the Bone2D node will attempt to automatically calculate the bone angle and length using the first child Bone2D node, if one exists. If none exist, the Bone2D cannot automatically calculate these values and will print a warning. void set_bone_angle ( float angle ) Sets the bone angle for the Bone2D. This is typically set to the rotation from the Bone2D to a child Bone2D node. Note: This is different from the Bone2D's rotation. The bone's angle is the rotation of the bone shown by the gizmo, which is unaffected by the Bone2D's Node2D.transform. void set_length ( float length ) Sets the length of the bone in the Bone2D.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_bone2d.html


classes/class_checkbutton
-----------------------------------------------------------
CheckButton Inherits: Button < BaseButton < Control < CanvasItem < Node < Object A button that represents a binary choice.  Description CheckButton is a toggle button displayed as a check field. It's similar to CheckBox in functionality, but it has a different appearance. To follow established UX patterns, it's recommended to use CheckButton when toggling it has an immediate effect on something. For example, it can be used when pressing it shows or hides advanced settings, without asking the user to confirm this action. See also BaseButton which contains common properties and methods associated with this node.   Properties  
HorizontalAlignment alignment 0 (overrides Button)  
bool toggle_mode true (overrides BaseButton)     Theme Properties  
int check_v_offset 0  
Texture2D checked   
Texture2D checked_disabled   
Texture2D checked_disabled_mirrored   
Texture2D checked_mirrored   
Texture2D unchecked   
Texture2D unchecked_disabled   
Texture2D unchecked_disabled_mirrored   
Texture2D unchecked_mirrored      Theme Property Descriptions 
int check_v_offset = 0
 The vertical offset used when rendering the toggle icons (in pixels). 
Texture2D checked The icon to display when the CheckButton is checked (for left-to-right layouts). 
Texture2D checked_disabled The icon to display when the CheckButton is checked and disabled (for left-to-right layouts). 
Texture2D checked_disabled_mirrored The icon to display when the CheckButton is checked and disabled (for right-to-left layouts). 
Texture2D checked_mirrored The icon to display when the CheckButton is checked (for right-to-left layouts). 
Texture2D unchecked The icon to display when the CheckButton is unchecked (for left-to-right layouts). 
Texture2D unchecked_disabled The icon to display when the CheckButton is unchecked and disabled (for left-to-right layouts). 
Texture2D unchecked_disabled_mirrored The icon to display when the CheckButton is unchecked and disabled (for right-to-left layouts). 
Texture2D unchecked_mirrored The icon to display when the CheckButton is unchecked (for right-to-left layouts).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_checkbutton.html


classes/class_vseparator
-----------------------------------------------------------
VSeparator Inherits: Separator < Control < CanvasItem < Node < Object A vertical line used for separating other controls.  Description A vertical separator used for separating other controls that are arranged horizontally. VSeparator is purely visual and normally drawn as a StyleBoxLine.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_vseparator.html


classes/class_marker3d
-----------------------------------------------------------
Marker3D Inherits: Node3D < Node < Object Generic 3D position hint for editing.  Description Generic 3D position hint for editing. It's just like a plain Node3D, but it displays as a cross in the 3D editor at all times.   Properties  
float gizmo_extents 0.25     Property Descriptions 
float gizmo_extents = 0.25
  void set_gizmo_extents ( float value )
 
float get_gizmo_extents ( )
  Size of the gizmo cross that appears in the editor.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_marker3d.html


classes/class_missingnode
-----------------------------------------------------------
MissingNode Inherits: Node < Object An internal editor class intended for keeping the data of unrecognized nodes.  Description This is an internal editor class intended for keeping data of nodes of unknown type (most likely this type was supplied by an extension that is no longer loaded). It can't be manually instantiated or placed in the scene. Ignore it if you don't know what it is.   Properties  
String original_class  
bool recording_properties     Property Descriptions 
String original_class  void set_original_class ( String value )
 
String get_original_class ( )
  Returns the name of the type this node was originally. 
bool recording_properties  void set_recording_properties ( bool value )
 
bool is_recording_properties ( )
   There is currently no description for this property. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_missingnode.html


classes/class_tilesetsource
-----------------------------------------------------------
TileSetSource Inherits: Resource < RefCounted < Object Inherited By: TileSetAtlasSource, TileSetScenesCollectionSource Exposes a set of tiles for a TileSet resource.  Description Exposes a set of tiles for a TileSet resource. Tiles in a source are indexed with two IDs, coordinates ID (of type Vector2i) and an alternative ID (of type int), named according to their use in the TileSetAtlasSource class. Depending on the TileSet source type, those IDs might have restrictions on their values, this is why the base TileSetSource class only exposes getters for them. You can iterate over all tiles exposed by a TileSetSource by first iterating over coordinates IDs using get_tiles_count and get_tile_id, then over alternative IDs using get_alternative_tiles_count and get_alternative_tile_id. Warning: TileSetSource can only be added to one TileSet at the same time. Calling TileSet.add_source on a second TileSet will remove the source from the first one.   Methods  
int get_alternative_tile_id ( Vector2i atlas_coords, int index ) const  
int get_alternative_tiles_count ( Vector2i atlas_coords ) const  
Vector2i get_tile_id ( int index ) const  
int get_tiles_count ( ) const  
bool has_alternative_tile ( Vector2i atlas_coords, int alternative_tile ) const  
bool has_tile ( Vector2i atlas_coords ) const     Method Descriptions 
int get_alternative_tile_id ( Vector2i atlas_coords, int index ) const
 Returns the alternative ID for the tile with coordinates ID atlas_coords at index index. 
int get_alternative_tiles_count ( Vector2i atlas_coords ) const
 Returns the number of alternatives tiles for the coordinates ID atlas_coords. For TileSetAtlasSource, this always return at least 1, as the base tile with ID 0 is always part of the alternatives list. Returns -1 if there is not tile at the given coords. 
Vector2i get_tile_id ( int index ) const
 Returns the tile coordinates ID of the tile with index index. 
int get_tiles_count ( ) const
 Returns how many tiles this atlas source defines (not including alternative tiles). 
bool has_alternative_tile ( Vector2i atlas_coords, int alternative_tile ) const
 Returns if the base tile at coordinates atlas_coords has an alternative with ID alternative_tile. 
bool has_tile ( Vector2i atlas_coords ) const
 Returns if this atlas has a tile with coordinates ID atlas_coords.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_tilesetsource.html


classes/class_colorrect
-----------------------------------------------------------
ColorRect Inherits: Control < CanvasItem < Node < Object A control that displays a solid color rectangle.  Description Displays a rectangle filled with a solid color. If you need to display the border alone, consider using a Panel instead.   Tutorials  2D Dodge The Creeps Demo    Properties  
Color color Color(1, 1, 1, 1)     Property Descriptions 
Color color = Color(1, 1, 1, 1)
  void set_color ( Color value )
 
Color get_color ( )
  The fill color of the rectangle.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_colorrect.html


classes/class_rdshaderspirv
-----------------------------------------------------------
RDShaderSPIRV Inherits: Resource < RefCounted < Object SPIR-V intermediate representation as part of a RDShaderFile (used by RenderingDevice).  Description RDShaderSPIRV represents a RDShaderFile's SPIR-V code for various shader stages, as well as possible compilation error messages. SPIR-V is a low-level intermediate shader representation. This intermediate representation is not used directly by GPUs for rendering, but it can be compiled into binary shaders that GPUs can understand. Unlike compiled shaders, SPIR-V is portable across GPU models and driver versions. This object is used by RenderingDevice.   Properties  
PackedByteArray bytecode_compute PackedByteArray()  
PackedByteArray bytecode_fragment PackedByteArray()  
PackedByteArray bytecode_tesselation_control PackedByteArray()  
PackedByteArray bytecode_tesselation_evaluation PackedByteArray()  
PackedByteArray bytecode_vertex PackedByteArray()  
String compile_error_compute ""  
String compile_error_fragment ""  
String compile_error_tesselation_control ""  
String compile_error_tesselation_evaluation ""  
String compile_error_vertex ""     Methods  
PackedByteArray get_stage_bytecode ( ShaderStage stage ) const  
String get_stage_compile_error ( ShaderStage stage ) const  
void set_stage_bytecode ( ShaderStage stage, PackedByteArray bytecode )  
void set_stage_compile_error ( ShaderStage stage, String compile_error )     Property Descriptions 
PackedByteArray bytecode_compute = PackedByteArray()
  void set_stage_bytecode ( ShaderStage stage, PackedByteArray bytecode )
 
PackedByteArray get_stage_bytecode ( ShaderStage stage ) const
  The SPIR-V bytecode for the compute shader stage. 
PackedByteArray bytecode_fragment = PackedByteArray()
  void set_stage_bytecode ( ShaderStage stage, PackedByteArray bytecode )
 
PackedByteArray get_stage_bytecode ( ShaderStage stage ) const
  The SPIR-V bytecode for the fragment shader stage. 
PackedByteArray bytecode_tesselation_control = PackedByteArray()
  void set_stage_bytecode ( ShaderStage stage, PackedByteArray bytecode )
 
PackedByteArray get_stage_bytecode ( ShaderStage stage ) const
  The SPIR-V bytecode for the tessellation control shader stage. 
PackedByteArray bytecode_tesselation_evaluation = PackedByteArray()
  void set_stage_bytecode ( ShaderStage stage, PackedByteArray bytecode )
 
PackedByteArray get_stage_bytecode ( ShaderStage stage ) const
  The SPIR-V bytecode for the tessellation evaluation shader stage. 
PackedByteArray bytecode_vertex = PackedByteArray()
  void set_stage_bytecode ( ShaderStage stage, PackedByteArray bytecode )
 
PackedByteArray get_stage_bytecode ( ShaderStage stage ) const
  The SPIR-V bytecode for the vertex shader stage. 
String compile_error_compute = ""
  void set_stage_compile_error ( ShaderStage stage, String compile_error )
 
String get_stage_compile_error ( ShaderStage stage ) const
  The compilation error message for the compute shader stage (set by the SPIR-V compiler and Godot). If empty, shader compilation was successful. 
String compile_error_fragment = ""
  void set_stage_compile_error ( ShaderStage stage, String compile_error )
 
String get_stage_compile_error ( ShaderStage stage ) const
  The compilation error message for the fragment shader stage (set by the SPIR-V compiler and Godot). If empty, shader compilation was successful. 
String compile_error_tesselation_control = ""
  void set_stage_compile_error ( ShaderStage stage, String compile_error )
 
String get_stage_compile_error ( ShaderStage stage ) const
  The compilation error message for the tessellation control shader stage (set by the SPIR-V compiler and Godot). If empty, shader compilation was successful. 
String compile_error_tesselation_evaluation = ""
  void set_stage_compile_error ( ShaderStage stage, String compile_error )
 
String get_stage_compile_error ( ShaderStage stage ) const
  The compilation error message for the tessellation evaluation shader stage (set by the SPIR-V compiler and Godot). If empty, shader compilation was successful. 
String compile_error_vertex = ""
  void set_stage_compile_error ( ShaderStage stage, String compile_error )
 
String get_stage_compile_error ( ShaderStage stage ) const
  The compilation error message for the vertex shader stage (set by the SPIR-V compiler and Godot). If empty, shader compilation was successful.   Method Descriptions 
PackedByteArray get_stage_bytecode ( ShaderStage stage ) const
 Equivalent to getting one of bytecode_compute, bytecode_fragment, bytecode_tesselation_control, bytecode_tesselation_evaluation, bytecode_vertex. 
String get_stage_compile_error ( ShaderStage stage ) const
 Returns the compilation error message for the given shader stage. Equivalent to getting one of compile_error_compute, compile_error_fragment, compile_error_tesselation_control, compile_error_tesselation_evaluation, compile_error_vertex. void set_stage_bytecode ( ShaderStage stage, PackedByteArray bytecode ) Sets the SPIR-V bytecode for the given shader stage. Equivalent to setting one of bytecode_compute, bytecode_fragment, bytecode_tesselation_control, bytecode_tesselation_evaluation, bytecode_vertex. void set_stage_compile_error ( ShaderStage stage, String compile_error ) Sets the compilation error message for the given shader stage to compile_error. Equivalent to setting one of compile_error_compute, compile_error_fragment, compile_error_tesselation_control, compile_error_tesselation_evaluation, compile_error_vertex.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_rdshaderspirv.html


classes/class_sprite3d
-----------------------------------------------------------
Sprite3D Inherits: SpriteBase3D < GeometryInstance3D < VisualInstance3D < Node3D < Node < Object 2D sprite node in a 3D world.  Description A node that displays a 2D texture in a 3D environment. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation. See also SpriteBase3D where properties such as the billboard mode are defined.   Properties  
int frame 0  
Vector2i frame_coords Vector2i(0, 0)  
int hframes 1  
bool region_enabled false  
Rect2 region_rect Rect2(0, 0, 0, 0)  
Texture2D texture   
int vframes 1     Signals frame_changed ( ) Emitted when the frame changes. texture_changed ( ) Emitted when the texture changes.   Property Descriptions 
int frame = 0
  void set_frame ( int value )
 
int get_frame ( )
  Current frame to display from sprite sheet. hframes or vframes must be greater than 1. This property is automatically adjusted when hframes or vframes are changed to keep pointing to the same visual frame (same column and row). If that's impossible, this value is reset to 0. 
Vector2i frame_coords = Vector2i(0, 0)
  void set_frame_coords ( Vector2i value )
 
Vector2i get_frame_coords ( )
  Coordinates of the frame to display from sprite sheet. This is as an alias for the frame property. hframes or vframes must be greater than 1. 
int hframes = 1
  void set_hframes ( int value )
 
int get_hframes ( )
  The number of columns in the sprite sheet. When this property is changed, frame is adjusted so that the same visual frame is maintained (same row and column). If that's impossible, frame is reset to 0. 
bool region_enabled = false
  void set_region_enabled ( bool value )
 
bool is_region_enabled ( )
  If true, the sprite will use region_rect and display only the specified part of its texture. 
Rect2 region_rect = Rect2(0, 0, 0, 0)
  void set_region_rect ( Rect2 value )
 
Rect2 get_region_rect ( )
  The region of the atlas texture to display. region_enabled must be true. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  Texture2D object to draw. If GeometryInstance3D.material_override is used, this will be overridden. The size information is still used. 
int vframes = 1
  void set_vframes ( int value )
 
int get_vframes ( )
  The number of rows in the sprite sheet. When this property is changed, frame is adjusted so that the same visual frame is maintained (same row and column). If that's impossible, frame is reset to 0.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_sprite3d.html


classes/class_texture2darray
-----------------------------------------------------------
Texture2DArray Inherits: ImageTextureLayered < TextureLayered < Texture < Resource < RefCounted < Object A single texture resource which consists of multiple, separate images. Each image has the same dimensions and number of mipmap levels.  Description A Texture2DArray is different from a Texture3D: The Texture2DArray does not support trilinear interpolation between the Images, i.e. no blending. See also Cubemap and CubemapArray, which are texture arrays with specialized cubemap functions. A Texture2DArray is also different from an AtlasTexture: In a Texture2DArray, all images are treated separately. In an atlas, the regions (i.e. the single images) can be of different sizes. Furthermore, you usually need to add a padding around the regions, to prevent accidental UV mapping to more than one region. The same goes for mipmapping: Mipmap chains are handled separately for each layer. In an atlas, the slicing has to be done manually in the fragment shader. To create such a texture file yourself, reimport your image files using the Godot Editor import presets.   Methods  
Resource create_placeholder ( ) const     Method Descriptions 
Resource create_placeholder ( ) const
 Creates a placeholder version of this resource (PlaceholderTexture2DArray).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texture2darray.html


classes/class_shader
-----------------------------------------------------------
Shader Inherits: Resource < RefCounted < Object Inherited By: VisualShader A shader implemented in the Godot shading language.  Description A custom shader program implemented in the Godot shading language, saved with the .gdshader extension. This class is used by a ShaderMaterial and allows you to write your own custom behavior for rendering visual items or updating particle information. For a detailed explanation and usage, please see the tutorials linked below.   Tutorials  Shaders documentation index    Properties  
String code ""     Methods  
Texture2D get_default_texture_parameter ( StringName name, int index=0 ) const  
Mode get_mode ( ) const  
Array get_shader_uniform_list ( bool get_groups=false )  
void set_default_texture_parameter ( StringName name, Texture2D texture, int index=0 )     Enumerations enum Mode: 
Mode MODE_SPATIAL = 0
 Mode used to draw all 3D objects. 
Mode MODE_CANVAS_ITEM = 1
 Mode used to draw all 2D objects. 
Mode MODE_PARTICLES = 2
 Mode used to calculate particle information on a per-particle basis. Not used for drawing. 
Mode MODE_SKY = 3
 Mode used for drawing skies. Only works with shaders attached to Sky objects. 
Mode MODE_FOG = 4
 Mode used for setting the color and density of volumetric fog effect.   Property Descriptions 
String code = ""
  void set_code ( String value )
 
String get_code ( )
  Returns the shader's code as the user has written it, not the full generated code used internally.   Method Descriptions 
Texture2D get_default_texture_parameter ( StringName name, int index=0 ) const
 Returns the texture that is set as default for the specified parameter. Note: name must match the name of the uniform in the code exactly. Note: If the sampler array is used use index to access the specified texture. 
Mode get_mode ( ) const
 Returns the shader mode for the shader. 
Array get_shader_uniform_list ( bool get_groups=false ) Get the list of shader uniforms that can be assigned to a ShaderMaterial, for use with ShaderMaterial.set_shader_parameter and ShaderMaterial.get_shader_parameter. The parameters returned are contained in dictionaries in a similar format to the ones returned by Object.get_property_list. If argument get_groups is true, parameter grouping hints will be provided. void set_default_texture_parameter ( StringName name, Texture2D texture, int index=0 ) Sets the default texture to be used with a texture uniform. The default is used if a texture is not set in the ShaderMaterial. Note: name must match the name of the uniform in the code exactly. Note: If the sampler array is used use index to access the specified texture.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_shader.html


classes/class_shape3d
-----------------------------------------------------------
Shape3D Inherits: Resource < RefCounted < Object Inherited By: BoxShape3D, CapsuleShape3D, ConcavePolygonShape3D, ConvexPolygonShape3D, CylinderShape3D, HeightMapShape3D, SeparationRayShape3D, SphereShape3D, WorldBoundaryShape3D Abstract base class for 3D shapes used for physics collision.  Description Abstract base class for all 3D shapes, intended for use in physics. Performance: Primitive shapes, especially SphereShape3D, are fast to check collisions against. ConvexPolygonShape3D and HeightMapShape3D are slower, and ConcavePolygonShape3D is the slowest.   Tutorials  Physics introduction    Properties  
float custom_solver_bias 0.0  
float margin 0.04     Methods  
ArrayMesh get_debug_mesh ( )     Property Descriptions 
float custom_solver_bias = 0.0
  void set_custom_solver_bias ( float value )
 
float get_custom_solver_bias ( )
  The shape's custom solver bias. Defines how much bodies react to enforce contact separation when this shape is involved. When set to 0, the default value from ProjectSettings.physics/3d/solver/default_contact_bias is used. 
float margin = 0.04
  void set_margin ( float value )
 
float get_margin ( )
  The collision margin for the shape. This is not used in Godot Physics. Collision margins allow collision detection to be more efficient by adding an extra shell around shapes. Collision algorithms are more expensive when objects overlap by more than their margin, so a higher value for margins is better for performance, at the cost of accuracy around edges as it makes them less sharp.   Method Descriptions 
ArrayMesh get_debug_mesh ( ) Returns the ArrayMesh used to draw the debug collision for this Shape3D.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_shape3d.html


classes/class_physicalbone3d
-----------------------------------------------------------
PhysicalBone3D Inherits: PhysicsBody3D < CollisionObject3D < Node3D < Node < Object A physics body used to make bones in a Skeleton3D react to physics.  Description The PhysicalBone3D node is a physics body that can be used to make bones in a Skeleton3D react to physics.   Properties  
float angular_damp 0.0  
DampMode angular_damp_mode 0  
Vector3 angular_velocity Vector3(0, 0, 0)  
Transform3D body_offset Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)  
float bounce 0.0  
bool can_sleep true  
bool custom_integrator false  
float friction 1.0  
float gravity_scale 1.0  
Transform3D joint_offset Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)  
Vector3 joint_rotation Vector3(0, 0, 0)  
JointType joint_type 0  
float linear_damp 0.0  
DampMode linear_damp_mode 0  
Vector3 linear_velocity Vector3(0, 0, 0)  
float mass 1.0     Methods  
void _integrate_forces ( PhysicsDirectBodyState3D state ) virtual  
void apply_central_impulse ( Vector3 impulse )  
void apply_impulse ( Vector3 impulse, Vector3 position=Vector3(0, 0, 0) )  
int get_bone_id ( ) const  
bool get_simulate_physics ( )  
bool is_simulating_physics ( )     Enumerations enum DampMode: 
DampMode DAMP_MODE_COMBINE = 0
 In this mode, the body's damping value is added to any value set in areas or the default value. 
DampMode DAMP_MODE_REPLACE = 1
 In this mode, the body's damping value replaces any value set in areas or the default value. enum JointType: 
JointType JOINT_TYPE_NONE = 0
 
JointType JOINT_TYPE_PIN = 1
 
JointType JOINT_TYPE_CONE = 2
 
JointType JOINT_TYPE_HINGE = 3
 
JointType JOINT_TYPE_SLIDER = 4
 
JointType JOINT_TYPE_6DOF = 5
   Property Descriptions 
float angular_damp = 0.0
  void set_angular_damp ( float value )
 
float get_angular_damp ( )
  Damps the body's rotation. By default, the body will use the Default Angular Damp in Project > Project Settings > Physics > 3d or any value override set by an Area3D the body is in. Depending on angular_damp_mode, you can set angular_damp to be added to or to replace the body's damping value. See ProjectSettings.physics/3d/default_angular_damp for more details about damping. 
DampMode angular_damp_mode = 0
  void set_angular_damp_mode ( DampMode value )
 
DampMode get_angular_damp_mode ( )
  Defines how angular_damp is applied. See DampMode for possible values. 
Vector3 angular_velocity = Vector3(0, 0, 0)
  void set_angular_velocity ( Vector3 value )
 
Vector3 get_angular_velocity ( )
  The PhysicalBone3D's rotational velocity in radians per second. 
Transform3D body_offset = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
  void set_body_offset ( Transform3D value )
 
Transform3D get_body_offset ( )
  Sets the body's transform. 
float bounce = 0.0
  void set_bounce ( float value )
 
float get_bounce ( )
  The body's bounciness. Values range from 0 (no bounce) to 1 (full bounciness). Note: Even with bounce set to 1.0, some energy will be lost over time due to linear and angular damping. To have a PhysicalBone3D that preserves all its energy over time, set bounce to 1.0, linear_damp_mode to DAMP_MODE_REPLACE, linear_damp to 0.0, angular_damp_mode to DAMP_MODE_REPLACE, and angular_damp to 0.0. 
bool can_sleep = true
  void set_can_sleep ( bool value )
 
bool is_able_to_sleep ( )
  If true, the body is deactivated when there is no movement, so it will not take part in the simulation until it is awakened by an external force. 
bool custom_integrator = false
  void set_use_custom_integrator ( bool value )
 
bool is_using_custom_integrator ( )
  If true, internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the _integrate_forces function, if defined. 
float friction = 1.0
  void set_friction ( float value )
 
float get_friction ( )
  The body's friction, from 0 (frictionless) to 1 (max friction). 
float gravity_scale = 1.0
  void set_gravity_scale ( float value )
 
float get_gravity_scale ( )
  This is multiplied by the global 3D gravity setting found in Project > Project Settings > Physics > 3d to produce the body's gravity. For example, a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object. 
Transform3D joint_offset = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
  void set_joint_offset ( Transform3D value )
 
Transform3D get_joint_offset ( )
  Sets the joint's transform. 
Vector3 joint_rotation = Vector3(0, 0, 0)
  void set_joint_rotation ( Vector3 value )
 
Vector3 get_joint_rotation ( )
  Sets the joint's rotation in radians. 
JointType joint_type = 0
  void set_joint_type ( JointType value )
 
JointType get_joint_type ( )
  Sets the joint type. See JointType for possible values. 
float linear_damp = 0.0
  void set_linear_damp ( float value )
 
float get_linear_damp ( )
  Damps the body's movement. By default, the body will use the Default Linear Damp in Project > Project Settings > Physics > 3d or any value override set by an Area3D the body is in. Depending on linear_damp_mode, you can set linear_damp to be added to or to replace the body's damping value. See ProjectSettings.physics/3d/default_linear_damp for more details about damping. 
DampMode linear_damp_mode = 0
  void set_linear_damp_mode ( DampMode value )
 
DampMode get_linear_damp_mode ( )
  Defines how linear_damp is applied. See DampMode for possible values. 
Vector3 linear_velocity = Vector3(0, 0, 0)
  void set_linear_velocity ( Vector3 value )
 
Vector3 get_linear_velocity ( )
  The body's linear velocity in units per second. Can be used sporadically, but don't set this every frame, because physics may run in another thread and runs at a different granularity. Use _integrate_forces as your process loop for precise control of the body state. 
float mass = 1.0
  void set_mass ( float value )
 
float get_mass ( )
  The body's mass.   Method Descriptions void _integrate_forces ( PhysicsDirectBodyState3D state ) virtual
 Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it works in addition to the usual physics behavior, but the custom_integrator property allows you to disable the default behavior and do fully custom force integration for a body. void apply_central_impulse ( Vector3 impulse )  There is currently no description for this method. Please help us by contributing one!  void apply_impulse ( Vector3 impulse, Vector3 position=Vector3(0, 0, 0) )  There is currently no description for this method. Please help us by contributing one!  
int get_bone_id ( ) const
  There is currently no description for this method. Please help us by contributing one!  
bool get_simulate_physics ( )  There is currently no description for this method. Please help us by contributing one!  
bool is_simulating_physics ( )  There is currently no description for this method. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_physicalbone3d.html


classes/class_shaderglobalsoverride
-----------------------------------------------------------
ShaderGlobalsOverride Inherits: Node < Object A node used to override global shader parameters' values in a scene.  Description Similar to how a WorldEnvironment node can be used to override the environment while a specific scene is loaded, ShaderGlobalsOverride can be used to override global shader parameters temporarily. Once the node is removed, the project-wide values for the global shader parameters are restored. See the RenderingServer global_shader_parameter_* methods for more information. Note: Only one ShaderGlobalsOverride can be used per scene. If there is more than one ShaderGlobalsOverride node in the scene tree, only the first node (in tree order) will be taken into account. Note: All ShaderGlobalsOverride nodes are made part of a "shader_overrides_group" group when they are added to the scene tree. The currently active ShaderGlobalsOverride node also has a "shader_overrides_group_active" group added to it. You can use this to check which ShaderGlobalsOverride node is currently active.   Tutorials  Shading language   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_shaderglobalsoverride.html


classes/class_curve2d
-----------------------------------------------------------
Curve2D Inherits: Resource < RefCounted < Object Describes a BÃ©zier curve in 2D space.  Description This class describes a BÃ©zier curve in 2D space. It is mainly used to give a shape to a Path2D, but can be manually sampled for other purposes. It keeps a cache of precalculated points along the curve, to speed up further calculations.   Properties  
float bake_interval 5.0  
int point_count 0     Methods  
void add_point ( Vector2 position, Vector2 in=Vector2(0, 0), Vector2 out=Vector2(0, 0), int index=-1 )  
void clear_points ( )  
float get_baked_length ( ) const  
PackedVector2Array get_baked_points ( ) const  
float get_closest_offset ( Vector2 to_point ) const  
Vector2 get_closest_point ( Vector2 to_point ) const  
Vector2 get_point_in ( int idx ) const  
Vector2 get_point_out ( int idx ) const  
Vector2 get_point_position ( int idx ) const  
void remove_point ( int idx )  
Vector2 sample ( int idx, float t ) const  
Vector2 sample_baked ( float offset=0.0, bool cubic=false ) const  
Transform2D sample_baked_with_rotation ( float offset=0.0, bool cubic=false ) const  
Vector2 samplef ( float fofs ) const  
void set_point_in ( int idx, Vector2 position )  
void set_point_out ( int idx, Vector2 position )  
void set_point_position ( int idx, Vector2 position )  
PackedVector2Array tessellate ( int max_stages=5, float tolerance_degrees=4 ) const  
PackedVector2Array tessellate_even_length ( int max_stages=5, float tolerance_length=20.0 ) const     Property Descriptions 
float bake_interval = 5.0
  void set_bake_interval ( float value )
 
float get_bake_interval ( )
  The distance in pixels between two adjacent cached points. Changing it forces the cache to be recomputed the next time the get_baked_points or get_baked_length function is called. The smaller the distance, the more points in the cache and the more memory it will consume, so use with care. 
int point_count = 0
  void set_point_count ( int value )
 
int get_point_count ( )
  The number of points describing the curve.   Method Descriptions void add_point ( Vector2 position, Vector2 in=Vector2(0, 0), Vector2 out=Vector2(0, 0), int index=-1 ) Adds a point with the specified position relative to the curve's own position, with control points in and out. Appends the new point at the end of the point list. If index is given, the new point is inserted before the existing point identified by index index. Every existing point starting from index is shifted further down the list of points. The index must be greater than or equal to 0 and must not exceed the number of existing points in the line. See point_count. void clear_points ( ) Removes all points from the curve. 
float get_baked_length ( ) const
 Returns the total length of the curve, based on the cached points. Given enough density (see bake_interval), it should be approximate enough. 
PackedVector2Array get_baked_points ( ) const
 Returns the cache of points as a PackedVector2Array. 
float get_closest_offset ( Vector2 to_point ) const
 Returns the closest offset to to_point. This offset is meant to be used in sample_baked. to_point must be in this curve's local space. 
Vector2 get_closest_point ( Vector2 to_point ) const
 Returns the closest point on baked segments (in curve's local space) to to_point. to_point must be in this curve's local space. 
Vector2 get_point_in ( int idx ) const
 Returns the position of the control point leading to the vertex idx. The returned position is relative to the vertex idx. If the index is out of bounds, the function sends an error to the console, and returns (0, 0). 
Vector2 get_point_out ( int idx ) const
 Returns the position of the control point leading out of the vertex idx. The returned position is relative to the vertex idx. If the index is out of bounds, the function sends an error to the console, and returns (0, 0). 
Vector2 get_point_position ( int idx ) const
 Returns the position of the vertex idx. If the index is out of bounds, the function sends an error to the console, and returns (0, 0). void remove_point ( int idx ) Deletes the point idx from the curve. Sends an error to the console if idx is out of bounds. 
Vector2 sample ( int idx, float t ) const
 Returns the position between the vertex idx and the vertex idx + 1, where t controls if the point is the first vertex (t = 0.0), the last vertex (t = 1.0), or in between. Values of t outside the range (0.0 >= t <=1) give strange, but predictable results. If idx is out of bounds it is truncated to the first or last vertex, and t is ignored. If the curve has no points, the function sends an error to the console, and returns (0, 0). 
Vector2 sample_baked ( float offset=0.0, bool cubic=false ) const
 Returns a point within the curve at position offset, where offset is measured as a pixel distance along the curve. To do that, it finds the two cached points where the offset lies between, then interpolates the values. This interpolation is cubic if cubic is set to true, or linear if set to false. Cubic interpolation tends to follow the curves better, but linear is faster (and often, precise enough). 
Transform2D sample_baked_with_rotation ( float offset=0.0, bool cubic=false ) const
 Similar to sample_baked, but returns Transform2D that includes a rotation along the curve, with Transform2D.origin as the point position, Transform2D.x as the sideways vector, and Transform2D.y as the forward vector. Returns an empty transform if the length of the curve is 0. var baked = curve.sample_baked_with_rotation(offset)
# This will rotate and position the node with the up direction pointing along the curve.
position = baked.get_origin()
rotation = baked.get_rotation()
# Alternatively, not preserving scale.
transform = baked * Transform2D.FLIP_Y
# To match the rotation of PathFollow2D, not preserving scale.
transform = Transform2D(baked.y, baked.x, baked.origin)
 
Vector2 samplef ( float fofs ) const
 Returns the position at the vertex fofs. It calls sample using the integer part of fofs as idx, and its fractional part as t. void set_point_in ( int idx, Vector2 position ) Sets the position of the control point leading to the vertex idx. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex. void set_point_out ( int idx, Vector2 position ) Sets the position of the control point leading out of the vertex idx. If the index is out of bounds, the function sends an error to the console. The position is relative to the vertex. void set_point_position ( int idx, Vector2 position ) Sets the position for the vertex idx. If the index is out of bounds, the function sends an error to the console. 
PackedVector2Array tessellate ( int max_stages=5, float tolerance_degrees=4 ) const
 Returns a list of points along the curve, with a curvature controlled point density. That is, the curvier parts will have more points than the straighter parts. This approximation makes straight segments between each point, then subdivides those segments until the resulting shape is similar enough. max_stages controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care! tolerance_degrees controls how many degrees the midpoint of a segment may deviate from the real curve, before the segment has to be subdivided. 
PackedVector2Array tessellate_even_length ( int max_stages=5, float tolerance_length=20.0 ) const
 Returns a list of points along the curve, with almost uniform density. max_stages controls how many subdivisions a curve segment may face before it is considered approximate enough. Each subdivision splits the segment in half, so the default 5 stages may mean up to 32 subdivisions per curve segment. Increase with care! tolerance_length controls the maximal distance between two neighboring points, before the segment has to be subdivided.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_curve2d.html


classes/class_itemlist
-----------------------------------------------------------
ItemList Inherits: Control < CanvasItem < Node < Object A vertical list of selectable items with one or multiple columns.  Description This control provides a vertical list of selectable items that may be in a single or in multiple columns, with each item having options for text and an icon. Tooltips are supported and may be different for every item in the list. Selectable items in the list may be selected or deselected and multiple selection may be enabled. Selection with right mouse button may also be enabled to allow use of popup context menus. Items may also be "activated" by double-clicking them or by pressing Enter. Item text only supports single-line strings. Newline characters (e.g. 
) in the string won't produce a newline. Text wrapping is enabled in ICON_MODE_TOP mode, but the column's width is adjusted to fully fit its content by default. You need to set fixed_column_width greater than zero to wrap the text. All set_* methods allow negative item indices, i.e. -1 to access the last item, -2 to select the second-to-last item, and so on. Incremental search: Like PopupMenu and Tree, ItemList supports searching within the list while the control is focused. Press a key that matches the first letter of an item's name to select the first item starting with the given letter. After that point, there are two ways to perform incremental search: 1) Press the same key again before the timeout duration to select the next item starting with the same letter. 2) Press letter keys that match the rest of the word before the timeout duration to match to select the item in question directly. Both of these actions will be reset to the beginning of the list if the timeout duration has passed since the last keystroke was registered. You can adjust the timeout duration by changing ProjectSettings.gui/timers/incremental_search_max_interval_msec.   Properties  
bool allow_reselect false  
bool allow_rmb_select false  
bool allow_search true  
bool auto_height false  
bool clip_contents true (overrides Control)  
int fixed_column_width 0  
Vector2i fixed_icon_size Vector2i(0, 0)  
FocusMode focus_mode 2 (overrides Control)  
IconMode icon_mode 1  
float icon_scale 1.0  
int item_count 0  
int max_columns 1  
int max_text_lines 1  
bool same_column_width false  
SelectMode select_mode 0  
OverrunBehavior text_overrun_behavior 3     Methods  
int add_icon_item ( Texture2D icon, bool selectable=true )  
int add_item ( String text, Texture2D icon=null, bool selectable=true )  
void clear ( )  
void deselect ( int idx )  
void deselect_all ( )  
void ensure_current_is_visible ( )  
void force_update_list_size ( )  
int get_item_at_position ( Vector2 position, bool exact=false ) const  
Color get_item_custom_bg_color ( int idx ) const  
Color get_item_custom_fg_color ( int idx ) const  
Texture2D get_item_icon ( int idx ) const  
Color get_item_icon_modulate ( int idx ) const  
Rect2 get_item_icon_region ( int idx ) const  
String get_item_language ( int idx ) const  
Variant get_item_metadata ( int idx ) const  
Rect2 get_item_rect ( int idx, bool expand=true ) const  
String get_item_text ( int idx ) const  
TextDirection get_item_text_direction ( int idx ) const  
String get_item_tooltip ( int idx ) const  
PackedInt32Array get_selected_items ( )  
VScrollBar get_v_scroll_bar ( )  
bool is_anything_selected ( )  
bool is_item_disabled ( int idx ) const  
bool is_item_icon_transposed ( int idx ) const  
bool is_item_selectable ( int idx ) const  
bool is_item_tooltip_enabled ( int idx ) const  
bool is_selected ( int idx ) const  
void move_item ( int from_idx, int to_idx )  
void remove_item ( int idx )  
void select ( int idx, bool single=true )  
void set_item_custom_bg_color ( int idx, Color custom_bg_color )  
void set_item_custom_fg_color ( int idx, Color custom_fg_color )  
void set_item_disabled ( int idx, bool disabled )  
void set_item_icon ( int idx, Texture2D icon )  
void set_item_icon_modulate ( int idx, Color modulate )  
void set_item_icon_region ( int idx, Rect2 rect )  
void set_item_icon_transposed ( int idx, bool transposed )  
void set_item_language ( int idx, String language )  
void set_item_metadata ( int idx, Variant metadata )  
void set_item_selectable ( int idx, bool selectable )  
void set_item_text ( int idx, String text )  
void set_item_text_direction ( int idx, TextDirection direction )  
void set_item_tooltip ( int idx, String tooltip )  
void set_item_tooltip_enabled ( int idx, bool enable )  
void sort_items_by_text ( )     Theme Properties  
Color font_color Color(0.65, 0.65, 0.65, 1)  
Color font_hovered_color Color(0.95, 0.95, 0.95, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
Color font_selected_color Color(1, 1, 1, 1)  
Color guide_color Color(0.7, 0.7, 0.7, 0.25)  
int h_separation 4  
int icon_margin 4  
int line_separation 2  
int outline_size 0  
int v_separation 2  
Font font   
int font_size   
StyleBox cursor   
StyleBox cursor_unfocused   
StyleBox focus   
StyleBox hovered   
StyleBox panel   
StyleBox selected   
StyleBox selected_focus      Signals empty_clicked ( Vector2 at_position, int mouse_button_index ) Triggered when any mouse click is issued within the rect of the list but on empty space. item_activated ( int index ) Triggered when specified list item is activated via double-clicking or by pressing Enter. item_clicked ( int index, Vector2 at_position, int mouse_button_index ) Triggered when specified list item has been clicked with any mouse button. The click position is also provided to allow appropriate popup of context menus at the correct location. item_selected ( int index ) Triggered when specified item has been selected. allow_reselect must be enabled to reselect an item. multi_selected ( int index, bool selected ) Triggered when a multiple selection is altered on a list allowing multiple selection.   Enumerations enum IconMode: 
IconMode ICON_MODE_TOP = 0
 Icon is drawn above the text. 
IconMode ICON_MODE_LEFT = 1
 Icon is drawn to the left of the text. enum SelectMode: 
SelectMode SELECT_SINGLE = 0
 Only allow selecting a single item. 
SelectMode SELECT_MULTI = 1
 Allows selecting multiple items by holding Ctrl or Shift.   Property Descriptions 
bool allow_reselect = false
  void set_allow_reselect ( bool value )
 
bool get_allow_reselect ( )
  If true, the currently selected item can be selected again. 
bool allow_rmb_select = false
  void set_allow_rmb_select ( bool value )
 
bool get_allow_rmb_select ( )
  If true, right mouse button click can select items. 
bool allow_search = true
  void set_allow_search ( bool value )
 
bool get_allow_search ( )
  If true, allows navigating the ItemList with letter keys through incremental search. 
bool auto_height = false
  void set_auto_height ( bool value )
 
bool has_auto_height ( )
  If true, the control will automatically resize the height to fit its content. 
int fixed_column_width = 0
  void set_fixed_column_width ( int value )
 
int get_fixed_column_width ( )
  The width all columns will be adjusted to. A value of zero disables the adjustment, each item will have a width equal to the width of its content and the columns will have an uneven width. 
Vector2i fixed_icon_size = Vector2i(0, 0)
  void set_fixed_icon_size ( Vector2i value )
 
Vector2i get_fixed_icon_size ( )
  The size all icons will be adjusted to. If either X or Y component is not greater than zero, icon size won't be affected. 
IconMode icon_mode = 1
  void set_icon_mode ( IconMode value )
 
IconMode get_icon_mode ( )
  The icon position, whether above or to the left of the text. See the IconMode constants. 
float icon_scale = 1.0
  void set_icon_scale ( float value )
 
float get_icon_scale ( )
  The scale of icon applied after fixed_icon_size and transposing takes effect. 
int item_count = 0
  void set_item_count ( int value )
 
int get_item_count ( )
  The number of items currently in the list. 
int max_columns = 1
  void set_max_columns ( int value )
 
int get_max_columns ( )
  Maximum columns the list will have. If greater than zero, the content will be split among the specified columns. A value of zero means unlimited columns, i.e. all items will be put in the same row. 
int max_text_lines = 1
  void set_max_text_lines ( int value )
 
int get_max_text_lines ( )
  Maximum lines of text allowed in each item. Space will be reserved even when there is not enough lines of text to display. Note: This property takes effect only when icon_mode is ICON_MODE_TOP. To make the text wrap, fixed_column_width should be greater than zero. 
bool same_column_width = false
  void set_same_column_width ( bool value )
 
bool is_same_column_width ( )
  Whether all columns will have the same width. If true, the width is equal to the largest column width of all columns. 
SelectMode select_mode = 0
  void set_select_mode ( SelectMode value )
 
SelectMode get_select_mode ( )
  Allows single or multiple item selection. See the SelectMode constants. 
OverrunBehavior text_overrun_behavior = 3
  void set_text_overrun_behavior ( OverrunBehavior value )
 
OverrunBehavior get_text_overrun_behavior ( )
  Sets the clipping behavior when the text exceeds an item's bounding rectangle. See OverrunBehavior for a description of all modes.   Method Descriptions 
int add_icon_item ( Texture2D icon, bool selectable=true ) Adds an item to the item list with no text, only an icon. Returns the index of an added item. 
int add_item ( String text, Texture2D icon=null, bool selectable=true ) Adds an item to the item list with specified text. Returns the index of an added item. Specify an icon, or use null as the icon for a list item with no icon. If selectable is true, the list item will be selectable. void clear ( ) Removes all items from the list. void deselect ( int idx ) Ensures the item associated with the specified index is not selected. void deselect_all ( ) Ensures there are no items selected. void ensure_current_is_visible ( ) Ensure current selection is visible, adjusting the scroll position as necessary. void force_update_list_size ( ) Forces an update to the list size based on its items. This happens automatically whenever size of the items, or other relevant settings like auto_height, change. The method can be used to trigger the update ahead of next drawing pass. 
int get_item_at_position ( Vector2 position, bool exact=false ) const
 Returns the item index at the given position. When there is no item at that point, -1 will be returned if exact is true, and the closest item index will be returned otherwise. Note: The returned value is unreliable if called right after modifying the ItemList, before it redraws in the next frame. 
Color get_item_custom_bg_color ( int idx ) const
 Returns the custom background color of the item specified by idx index. 
Color get_item_custom_fg_color ( int idx ) const
 Returns the custom foreground color of the item specified by idx index. 
Texture2D get_item_icon ( int idx ) const
 Returns the icon associated with the specified index. 
Color get_item_icon_modulate ( int idx ) const
 Returns a Color modulating item's icon at the specified index. 
Rect2 get_item_icon_region ( int idx ) const
 Returns the region of item's icon used. The whole icon will be used if the region has no area. 
String get_item_language ( int idx ) const
 Returns item's text language code. 
Variant get_item_metadata ( int idx ) const
 Returns the metadata value of the specified index. 
Rect2 get_item_rect ( int idx, bool expand=true ) const
 Returns the position and size of the item with the specified index, in the coordinate system of the ItemList node. If expand is true the last column expands to fill the rest of the row. Note: The returned value is unreliable if called right after modifying the ItemList, before it redraws in the next frame. 
String get_item_text ( int idx ) const
 Returns the text associated with the specified index. 
TextDirection get_item_text_direction ( int idx ) const
 Returns item's text base writing direction. 
String get_item_tooltip ( int idx ) const
 Returns the tooltip hint associated with the specified index. 
PackedInt32Array get_selected_items ( ) Returns an array with the indexes of the selected items. 
VScrollBar get_v_scroll_bar ( ) Returns the vertical scrollbar. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their CanvasItem.visible property. 
bool is_anything_selected ( ) Returns true if one or more items are selected. 
bool is_item_disabled ( int idx ) const
 Returns true if the item at the specified index is disabled. 
bool is_item_icon_transposed ( int idx ) const
 Returns true if the item icon will be drawn transposed, i.e. the X and Y axes are swapped. 
bool is_item_selectable ( int idx ) const
 Returns true if the item at the specified index is selectable. 
bool is_item_tooltip_enabled ( int idx ) const
 Returns true if the tooltip is enabled for specified item index. 
bool is_selected ( int idx ) const
 Returns true if the item at the specified index is currently selected. void move_item ( int from_idx, int to_idx ) Moves item from index from_idx to to_idx. void remove_item ( int idx ) Removes the item specified by idx index from the list. void select ( int idx, bool single=true ) Select the item at the specified index. Note: This method does not trigger the item selection signal. void set_item_custom_bg_color ( int idx, Color custom_bg_color ) Sets the background color of the item specified by idx index to the specified Color. void set_item_custom_fg_color ( int idx, Color custom_fg_color ) Sets the foreground color of the item specified by idx index to the specified Color. void set_item_disabled ( int idx, bool disabled ) Disables (or enables) the item at the specified index. Disabled items cannot be selected and do not trigger activation signals (when double-clicking or pressing Enter). void set_item_icon ( int idx, Texture2D icon ) Sets (or replaces) the icon's Texture2D associated with the specified index. void set_item_icon_modulate ( int idx, Color modulate ) Sets a modulating Color of the item associated with the specified index. void set_item_icon_region ( int idx, Rect2 rect ) Sets the region of item's icon used. The whole icon will be used if the region has no area. void set_item_icon_transposed ( int idx, bool transposed ) Sets whether the item icon will be drawn transposed. void set_item_language ( int idx, String language ) Sets language code of item's text used for line-breaking and text shaping algorithms, if left empty current locale is used instead. void set_item_metadata ( int idx, Variant metadata ) Sets a value (of any type) to be stored with the item associated with the specified index. void set_item_selectable ( int idx, bool selectable ) Allows or disallows selection of the item associated with the specified index. void set_item_text ( int idx, String text ) Sets text of the item associated with the specified index. void set_item_text_direction ( int idx, TextDirection direction ) Sets item's text base writing direction. void set_item_tooltip ( int idx, String tooltip ) Sets the tooltip hint for the item associated with the specified index. void set_item_tooltip_enabled ( int idx, bool enable ) Sets whether the tooltip hint is enabled for specified item index. void sort_items_by_text ( ) Sorts items in the list by their text.   Theme Property Descriptions 
Color font_color = Color(0.65, 0.65, 0.65, 1)
 Default text Color of the item. 
Color font_hovered_color = Color(0.95, 0.95, 0.95, 1)
 Text Color used when the item is hovered and not selected yet. 
Color font_outline_color = Color(1, 1, 1, 1)
 The tint of text outline of the item. 
Color font_selected_color = Color(1, 1, 1, 1)
 Text Color used when the item is selected. 
Color guide_color = Color(0.7, 0.7, 0.7, 0.25)
 Color of the guideline. The guideline is a line drawn between each row of items. 
int h_separation = 4
 The horizontal spacing between items. 
int icon_margin = 4
 The spacing between item's icon and text. 
int line_separation = 2
 The vertical spacing between each line of text. 
int outline_size = 0
 The size of the item text outline. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. 
int v_separation = 2
 The vertical spacing between items. 
Font font Font of the item's text. 
int font_size Font size of the item's text. 
StyleBox cursor StyleBox used for the cursor, when the ItemList is being focused. 
StyleBox cursor_unfocused StyleBox used for the cursor, when the ItemList is not being focused. 
StyleBox focus The focused style for the ItemList, drawn on top of the background, but below everything else. 
StyleBox hovered StyleBox for the hovered, but not selected items. 
StyleBox panel The background style for the ItemList. 
StyleBox selected StyleBox for the selected items, used when the ItemList is not being focused. 
StyleBox selected_focus StyleBox for the selected items, used when the ItemList is being focused.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_itemlist.html


classes/class_richtextlabel
-----------------------------------------------------------
RichTextLabel Inherits: Control < CanvasItem < Node < Object A control for displaying text that can contain different font styles, images, and basic formatting.  Description A control for displaying text that can contain custom fonts, images, and basic formatting. RichTextLabel manages these as an internal tag stack. It also adapts itself to given width/heights. Note: Assignments to text clear the tag stack and reconstruct it from the property's contents. Any edits made to text will erase previous edits made from other manual sources such as append_text and the push_* / pop methods. Note: RichTextLabel doesn't support entangled BBCode tags. For example, instead of using [b]bold[i]bold italic[/b]italic[/i], use [b]bold[i]bold italic[/i][/b][i]italic[/i]. Note: push_*/pop_* functions won't affect BBCode. Note: Unlike Label, RichTextLabel doesn't have a property to horizontally align text to the center. Instead, enable bbcode_enabled and surround the text in a [center] tag as follows: [center]Example[/center]. There is currently no built-in way to vertically align text either, but this can be emulated by relying on anchors/containers and the fit_content property.   Tutorials  BBCode in RichTextLabel GUI Rich Text/BBcode Demo OS Test Demo    Properties  
AutowrapMode autowrap_mode 3  
bool bbcode_enabled false  
bool clip_contents true (overrides Control)  
bool context_menu_enabled false  
Array custom_effects []  
bool deselect_on_focus_loss_enabled true  
bool drag_and_drop_selection_enabled true  
bool fit_content false  
bool hint_underlined true  
String language ""  
bool meta_underlined true  
int progress_bar_delay 1000  
bool scroll_active true  
bool scroll_following false  
bool selection_enabled false  
bool shortcut_keys_enabled true  
StructuredTextParser structured_text_bidi_override 0  
Array structured_text_bidi_override_options []  
int tab_size 4  
String text ""  
TextDirection text_direction 0  
bool threaded false  
int visible_characters -1  
VisibleCharactersBehavior visible_characters_behavior 0  
float visible_ratio 1.0     Methods  
void add_image ( Texture2D image, int width=0, int height=0, Color color=Color(1, 1, 1, 1), InlineAlignment inline_align=5, Rect2 region=Rect2(0, 0, 0, 0), Variant key=null, bool pad=false, String tooltip="", bool size_in_percent=false )  
void add_text ( String text )  
void append_text ( String bbcode )  
void clear ( )  
void deselect ( )  
int get_character_line ( int character )  
int get_character_paragraph ( int character )  
int get_content_height ( ) const  
int get_content_width ( ) const  
int get_line_count ( ) const  
float get_line_offset ( int line )  
PopupMenu get_menu ( ) const  
int get_paragraph_count ( ) const  
float get_paragraph_offset ( int paragraph )  
String get_parsed_text ( ) const  
String get_selected_text ( ) const  
int get_selection_from ( ) const  
int get_selection_to ( ) const  
int get_total_character_count ( ) const  
VScrollBar get_v_scroll_bar ( )  
int get_visible_line_count ( ) const  
int get_visible_paragraph_count ( ) const  
void install_effect ( Variant effect )  
bool is_menu_visible ( ) const  
bool is_ready ( ) const  
void menu_option ( int option )  
void newline ( )  
void parse_bbcode ( String bbcode )  
Dictionary parse_expressions_for_values ( PackedStringArray expressions )  
void pop ( )  
void pop_all ( )  
void pop_context ( )  
void push_bgcolor ( Color bgcolor )  
void push_bold ( )  
void push_bold_italics ( )  
void push_cell ( )  
void push_color ( Color color )  
void push_context ( )  
void push_customfx ( RichTextEffect effect, Dictionary env )  
void push_dropcap ( String string, Font font, int size, Rect2 dropcap_margins=Rect2(0, 0, 0, 0), Color color=Color(1, 1, 1, 1), int outline_size=0, Color outline_color=Color(0, 0, 0, 0) )  
void push_fgcolor ( Color fgcolor )  
void push_font ( Font font, int font_size=0 )  
void push_font_size ( int font_size )  
void push_hint ( String description )  
void push_indent ( int level )  
void push_italics ( )  
void push_language ( String language )  
void push_list ( int level, ListType type, bool capitalize, String bullet="â€¢" )  
void push_meta ( Variant data )  
void push_mono ( )  
void push_normal ( )  
void push_outline_color ( Color color )  
void push_outline_size ( int outline_size )  
void push_paragraph ( HorizontalAlignment alignment, TextDirection base_direction=0, String language="", StructuredTextParser st_parser=0, BitField<JustificationFlag> justification_flags=163, PackedFloat32Array tab_stops=PackedFloat32Array() )  
void push_strikethrough ( )  
void push_table ( int columns, InlineAlignment inline_align=0, int align_to_row=-1 )  
void push_underline ( )  
bool remove_paragraph ( int paragraph )  
void scroll_to_line ( int line )  
void scroll_to_paragraph ( int paragraph )  
void scroll_to_selection ( )  
void select_all ( )  
void set_cell_border_color ( Color color )  
void set_cell_padding ( Rect2 padding )  
void set_cell_row_background_color ( Color odd_row_bg, Color even_row_bg )  
void set_cell_size_override ( Vector2 min_size, Vector2 max_size )  
void set_table_column_expand ( int column, bool expand, int ratio=1 )  
void update_image ( Variant key, BitField<ImageUpdateMask> mask, Texture2D image, int width=0, int height=0, Color color=Color(1, 1, 1, 1), InlineAlignment inline_align=5, Rect2 region=Rect2(0, 0, 0, 0), bool pad=false, String tooltip="", bool size_in_percent=false )     Theme Properties  
Color default_color Color(1, 1, 1, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
Color font_selected_color Color(0, 0, 0, 0)  
Color font_shadow_color Color(0, 0, 0, 0)  
Color selection_color Color(0.1, 0.1, 1, 0.8)  
Color table_border Color(0, 0, 0, 0)  
Color table_even_row_bg Color(0, 0, 0, 0)  
Color table_odd_row_bg Color(0, 0, 0, 0)  
int line_separation 0  
int outline_size 0  
int shadow_offset_x 1  
int shadow_offset_y 1  
int shadow_outline_size 1  
int table_h_separation 3  
int table_v_separation 3  
int text_highlight_h_padding 3  
int text_highlight_v_padding 3  
Font bold_font   
Font bold_italics_font   
Font italics_font   
Font mono_font   
Font normal_font   
int bold_font_size   
int bold_italics_font_size   
int italics_font_size   
int mono_font_size   
int normal_font_size   
StyleBox focus   
StyleBox normal      Signals finished ( ) Triggered when the document is fully loaded. meta_clicked ( Variant meta ) Triggered when the user clicks on content between meta (URL) tags. If the meta is defined in BBCode, e.g. [url={"key": "value"}]Text[/url], then the parameter for this signal will always be a String type. If a particular type or an object is desired, the push_meta method must be used to manually insert the data into the tag stack. Alternatively, you can convert the String input to the desired type based on its contents (such as calling JSON.parse on it). For example, the following method can be connected to meta_clicked to open clicked URLs using the user's default web browser:  GDScript# This assumes RichTextLabel's `meta_clicked` signal was connected to
# the function below using the signal connection dialog.
func _richtextlabel_on_meta_clicked(meta):
    # `meta` is of Variant type, so convert it to a String to avoid script errors at run-time.
    OS.shell_open(str(meta))
  meta_hover_ended ( Variant meta ) Triggers when the mouse exits a meta tag. meta_hover_started ( Variant meta ) Triggers when the mouse enters a meta tag.   Enumerations enum ListType: 
ListType LIST_NUMBERS = 0
 Each list item has a number marker. 
ListType LIST_LETTERS = 1
 Each list item has a letter marker. 
ListType LIST_ROMAN = 2
 Each list item has a roman number marker. 
ListType LIST_DOTS = 3
 Each list item has a filled circle marker. enum MenuItems: 
MenuItems MENU_COPY = 0
 Copies the selected text. 
MenuItems MENU_SELECT_ALL = 1
 Selects the whole RichTextLabel text. 
MenuItems MENU_MAX = 2
 Represents the size of the MenuItems enum. flags ImageUpdateMask: 
ImageUpdateMask UPDATE_TEXTURE = 1
 If this bit is set, update_image changes image texture. 
ImageUpdateMask UPDATE_SIZE = 2
 If this bit is set, update_image changes image size. 
ImageUpdateMask UPDATE_COLOR = 4
 If this bit is set, update_image changes image color. 
ImageUpdateMask UPDATE_ALIGNMENT = 8
 If this bit is set, update_image changes image inline alignment. 
ImageUpdateMask UPDATE_REGION = 16
 If this bit is set, update_image changes image texture region. 
ImageUpdateMask UPDATE_PAD = 32
 If this bit is set, update_image changes image padding. 
ImageUpdateMask UPDATE_TOOLTIP = 64
 If this bit is set, update_image changes image tooltip. 
ImageUpdateMask UPDATE_WIDTH_IN_PERCENT = 128
 If this bit is set, update_image changes image width from/to percents.   Property Descriptions 
AutowrapMode autowrap_mode = 3
  void set_autowrap_mode ( AutowrapMode value )
 
AutowrapMode get_autowrap_mode ( )
  If set to something other than TextServer.AUTOWRAP_OFF, the text gets wrapped inside the node's bounding rectangle. To see how each mode behaves, see AutowrapMode. 
bool bbcode_enabled = false
  void set_use_bbcode ( bool value )
 
bool is_using_bbcode ( )
  If true, the label uses BBCode formatting. 
bool context_menu_enabled = false
  void set_context_menu_enabled ( bool value )
 
bool is_context_menu_enabled ( )
  If true, a right-click displays the context menu. 
Array custom_effects = []
  void set_effects ( Array value )
 
Array get_effects ( )
  The currently installed custom effects. This is an array of RichTextEffects. To add a custom effect, it's more convenient to use install_effect. 
bool deselect_on_focus_loss_enabled = true
  void set_deselect_on_focus_loss_enabled ( bool value )
 
bool is_deselect_on_focus_loss_enabled ( )
  If true, the selected text will be deselected when focus is lost. 
bool drag_and_drop_selection_enabled = true
  void set_drag_and_drop_selection_enabled ( bool value )
 
bool is_drag_and_drop_selection_enabled ( )
  If true, allow drag and drop of selected text. 
bool fit_content = false
  void set_fit_content ( bool value )
 
bool is_fit_content_enabled ( )
  If true, the label's minimum size will be automatically updated to fit its content, matching the behavior of Label. 
bool hint_underlined = true
  void set_hint_underline ( bool value )
 
bool is_hint_underlined ( )
  If true, the label underlines hint tags such as [hint=description]{text}[/hint]. 
String language = ""
  void set_language ( String value )
 
String get_language ( )
  Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead. 
bool meta_underlined = true
  void set_meta_underline ( bool value )
 
bool is_meta_underlined ( )
  If true, the label underlines meta tags such as [url]{text}[/url]. These tags can call a function when clicked if meta_clicked is connected to a function. 
int progress_bar_delay = 1000
  void set_progress_bar_delay ( int value )
 
int get_progress_bar_delay ( )
  The delay after which the loading progress bar is displayed, in milliseconds. Set to -1 to disable progress bar entirely. Note: Progress bar is displayed only if threaded is enabled. 
bool scroll_active = true
  void set_scroll_active ( bool value )
 
bool is_scroll_active ( )
  If true, the scrollbar is visible. Setting this to false does not block scrolling completely. See scroll_to_line. 
bool scroll_following = false
  void set_scroll_follow ( bool value )
 
bool is_scroll_following ( )
  If true, the window scrolls down to display new content automatically. 
bool selection_enabled = false
  void set_selection_enabled ( bool value )
 
bool is_selection_enabled ( )
  If true, the label allows text selection. 
bool shortcut_keys_enabled = true
  void set_shortcut_keys_enabled ( bool value )
 
bool is_shortcut_keys_enabled ( )
  If true, shortcut keys for context menu items are enabled, even if the context menu is disabled. 
StructuredTextParser structured_text_bidi_override = 0
  void set_structured_text_bidi_override ( StructuredTextParser value )
 
StructuredTextParser get_structured_text_bidi_override ( )
  Set BiDi algorithm override for the structured text. 
Array structured_text_bidi_override_options = []
  void set_structured_text_bidi_override_options ( Array value )
 
Array get_structured_text_bidi_override_options ( )
  Set additional options for BiDi override. 
int tab_size = 4
  void set_tab_size ( int value )
 
int get_tab_size ( )
  The number of spaces associated with a single tab length. Does not affect \t in text tags, only indent tags. 
String text = ""
  void set_text ( String value )
 
String get_text ( )
  The label's text in BBCode format. Is not representative of manual modifications to the internal tag stack. Erases changes made by other methods when edited. Note: If bbcode_enabled is true, it is unadvised to use the += operator with text (e.g. text += "some string") as it replaces the whole text and can cause slowdowns. It will also erase all BBCode that was added to stack using push_* methods. Use append_text for adding text instead, unless you absolutely need to close a tag that was opened in an earlier method call. 
TextDirection text_direction = 0
  void set_text_direction ( TextDirection value )
 
TextDirection get_text_direction ( )
  Base text writing direction. 
bool threaded = false
  void set_threaded ( bool value )
 
bool is_threaded ( )
  If true, text processing is done in a background thread. 
int visible_characters = -1
  void set_visible_characters ( int value )
 
int get_visible_characters ( )
  The number of characters to display. If set to -1, all characters are displayed. This can be useful when animating the text appearing in a dialog box. Note: Setting this property updates visible_ratio accordingly. 
VisibleCharactersBehavior visible_characters_behavior = 0
  void set_visible_characters_behavior ( VisibleCharactersBehavior value )
 
VisibleCharactersBehavior get_visible_characters_behavior ( )
  Sets the clipping behavior when visible_characters or visible_ratio is set. See VisibleCharactersBehavior for more info. 
float visible_ratio = 1.0
  void set_visible_ratio ( float value )
 
float get_visible_ratio ( )
  The fraction of characters to display, relative to the total number of characters (see get_total_character_count). If set to 1.0, all characters are displayed. If set to 0.5, only half of the characters will be displayed. This can be useful when animating the text appearing in a dialog box. Note: Setting this property updates visible_characters accordingly.   Method Descriptions void add_image ( Texture2D image, int width=0, int height=0, Color color=Color(1, 1, 1, 1), InlineAlignment inline_align=5, Rect2 region=Rect2(0, 0, 0, 0), Variant key=null, bool pad=false, String tooltip="", bool size_in_percent=false ) Adds an image's opening and closing tags to the tag stack, optionally providing a width and height to resize the image, a color to tint the image and a region to only use parts of the image. If width or height is set to 0, the image size will be adjusted in order to keep the original aspect ratio. If width and height are not set, but region is, the region's rect will be used. key is an optional identifier, that can be used to modify the image via update_image. If pad is set, and the image is smaller than the size specified by width and height, the image padding is added to match the size instead of upscaling. If size_in_percent is set, width and height values are percentages of the control width instead of pixels. void add_text ( String text ) Adds raw non-BBCode-parsed text to the tag stack. void append_text ( String bbcode ) Parses bbcode and adds tags to the tag stack as needed. Note: Using this method, you can't close a tag that was opened in a previous append_text call. This is done to improve performance, especially when updating large RichTextLabels since rebuilding the whole BBCode every time would be slower. If you absolutely need to close a tag in a future method call, append the text instead of using append_text. void clear ( ) Clears the tag stack. Note: This method will not modify text, but setting text to an empty string also clears the stack. void deselect ( ) Clears the current selection. 
int get_character_line ( int character ) Returns the line number of the character position provided. Line and character numbers are both zero-indexed. Note: If threaded is enabled, this method returns a value for the loaded part of the document. Use is_ready or finished to determine whether document is fully loaded. 
int get_character_paragraph ( int character ) Returns the paragraph number of the character position provided. Paragraph and character numbers are both zero-indexed. Note: If threaded is enabled, this method returns a value for the loaded part of the document. Use is_ready or finished to determine whether document is fully loaded. 
int get_content_height ( ) const
 Returns the height of the content. Note: If threaded is enabled, this method returns a value for the loaded part of the document. Use is_ready or finished to determine whether document is fully loaded. 
int get_content_width ( ) const
 Returns the width of the content. Note: If threaded is enabled, this method returns a value for the loaded part of the document. Use is_ready or finished to determine whether document is fully loaded. 
int get_line_count ( ) const
 Returns the total number of lines in the text. Wrapped text is counted as multiple lines. Note: If threaded is enabled, this method returns a value for the loaded part of the document. Use is_ready or finished to determine whether document is fully loaded. 
float get_line_offset ( int line ) Returns the vertical offset of the line found at the provided index. Note: If threaded is enabled, this method returns a value for the loaded part of the document. Use is_ready or finished to determine whether document is fully loaded. 
PopupMenu get_menu ( ) const
 Returns the PopupMenu of this RichTextLabel. By default, this menu is displayed when right-clicking on the RichTextLabel. You can add custom menu items or remove standard ones. Make sure your IDs don't conflict with the standard ones (see MenuItems). For example:  GDScriptfunc _ready():
    var menu = get_menu()
    # Remove "Select All" item.
    menu.remove_item(MENU_SELECT_ALL)
    # Add custom items.
    menu.add_separator()
    menu.add_item("Duplicate Text", MENU_MAX + 1)
    # Connect callback.
    menu.id_pressed.connect(_on_item_pressed)
func _on_item_pressed(id):
    if id == MENU_MAX + 1:
        add_text("
" + get_parsed_text())
 C#public override void _Ready()
{
    var menu = GetMenu();
    // Remove "Select All" item.
    menu.RemoveItem(RichTextLabel.MenuItems.SelectAll);
    // Add custom items.
    menu.AddSeparator();
    menu.AddItem("Duplicate Text", RichTextLabel.MenuItems.Max + 1);
    // Add event handler.
    menu.IdPressed += OnItemPressed;
}
public void OnItemPressed(int id)
{
    if (id == TextEdit.MenuItems.Max + 1)
    {
        AddText("
" + GetParsedText());
    }
}
  Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their Window.visible property. 
int get_paragraph_count ( ) const
 Returns the total number of paragraphs (newlines or p tags in the tag stack's text tags). Considers wrapped text as one paragraph. 
float get_paragraph_offset ( int paragraph ) Returns the vertical offset of the paragraph found at the provided index. Note: If threaded is enabled, this method returns a value for the loaded part of the document. Use is_ready or finished to determine whether document is fully loaded. 
String get_parsed_text ( ) const
 Returns the text without BBCode mark-up. 
String get_selected_text ( ) const
 Returns the current selection text. Does not include BBCodes. 
int get_selection_from ( ) const
 Returns the current selection first character index if a selection is active, -1 otherwise. Does not include BBCodes. 
int get_selection_to ( ) const
 Returns the current selection last character index if a selection is active, -1 otherwise. Does not include BBCodes. 
int get_total_character_count ( ) const
 Returns the total number of characters from text tags. Does not include BBCodes. 
VScrollBar get_v_scroll_bar ( ) Returns the vertical scrollbar. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their CanvasItem.visible property. 
int get_visible_line_count ( ) const
 Returns the number of visible lines. Note: If threaded is enabled, this method returns a value for the loaded part of the document. Use is_ready or finished to determine whether document is fully loaded. 
int get_visible_paragraph_count ( ) const
 Returns the number of visible paragraphs. A paragraph is considered visible if at least one of its lines is visible. Note: If threaded is enabled, this method returns a value for the loaded part of the document. Use is_ready or finished to determine whether document is fully loaded. void install_effect ( Variant effect ) Installs a custom effect. This can also be done in the RichTextLabel inspector using the custom_effects property. effect should be a valid RichTextEffect. Example RichTextEffect: # effect.gd
class_name MyCustomEffect
extends RichTextEffect
var bbcode = "my_custom_effect"
# ...
 Registering the above effect in RichTextLabel from script: # rich_text_label.gd
extends RichTextLabel
func _ready():
    install_effect(MyCustomEffect.new())
    # Alternatively, if not using `class_name` in the script that extends RichTextEffect:
    install_effect(preload("res://effect.gd").new())
 
bool is_menu_visible ( ) const
 Returns whether the menu is visible. Use this instead of get_menu().visible to improve performance (so the creation of the menu is avoided). 
bool is_ready ( ) const
 If threaded is enabled, returns true if the background thread has finished text processing, otherwise always return true. void menu_option ( int option ) Executes a given action as defined in the MenuItems enum. void newline ( ) Adds a newline tag to the tag stack. void parse_bbcode ( String bbcode ) The assignment version of append_text. Clears the tag stack and inserts the new content. 
Dictionary parse_expressions_for_values ( PackedStringArray expressions ) Parses BBCode parameter expressions into a dictionary. void pop ( ) Terminates the current tag. Use after push_* methods to close BBCodes manually. Does not need to follow add_* methods. void pop_all ( ) Terminates all tags opened by push_* methods. void pop_context ( ) Terminates tags opened after the last push_context call (including context marker), or all tags if there's no context marker on the stack. void push_bgcolor ( Color bgcolor ) Adds a [bgcolor] tag to the tag stack. void push_bold ( ) Adds a [font] tag with a bold font to the tag stack. This is the same as adding a [b] tag if not currently in a [i] tag. void push_bold_italics ( ) Adds a [font] tag with a bold italics font to the tag stack. void push_cell ( ) Adds a [cell] tag to the tag stack. Must be inside a [table] tag. See push_table for details. void push_color ( Color color ) Adds a [color] tag to the tag stack. void push_context ( ) Adds a context marker to the tag stack. See pop_context. void push_customfx ( RichTextEffect effect, Dictionary env ) Adds a custom effect tag to the tag stack. The effect does not need to be in custom_effects. The environment is directly passed to the effect. void push_dropcap ( String string, Font font, int size, Rect2 dropcap_margins=Rect2(0, 0, 0, 0), Color color=Color(1, 1, 1, 1), int outline_size=0, Color outline_color=Color(0, 0, 0, 0) ) Adds a [dropcap] tag to the tag stack. Drop cap (dropped capital) is a decorative element at the beginning of a paragraph that is larger than the rest of the text. void push_fgcolor ( Color fgcolor ) Adds a [fgcolor] tag to the tag stack. void push_font ( Font font, int font_size=0 ) Adds a [font] tag to the tag stack. Overrides default fonts for its duration. Passing 0 to font_size will use the existing default font size. void push_font_size ( int font_size ) Adds a [font_size] tag to the tag stack. Overrides default font size for its duration. void push_hint ( String description ) Adds a [hint] tag to the tag stack. Same as BBCode [hint=something]{text}[/hint]. void push_indent ( int level ) Adds an [indent] tag to the tag stack. Multiplies level by current tab_size to determine new margin length. void push_italics ( ) Adds a [font] tag with an italics font to the tag stack. This is the same as adding an [i] tag if not currently in a [b] tag. void push_language ( String language ) Adds language code used for text shaping algorithm and Open-Type font features. void push_list ( int level, ListType type, bool capitalize, String bullet="â€¢" ) Adds [ol] or [ul] tag to the tag stack. Multiplies level by current tab_size to determine new margin length. void push_meta ( Variant data ) Adds a meta tag to the tag stack. Similar to the BBCode [url=something]{text}[/url], but supports non-String metadata types. Note: Meta tags do nothing by default when clicked. To assign behavior when clicked, connect meta_clicked to a function that is called when the meta tag is clicked. void push_mono ( ) Adds a [font] tag with a monospace font to the tag stack. void push_normal ( ) Adds a [font] tag with a normal font to the tag stack. void push_outline_color ( Color color ) Adds a [outline_color] tag to the tag stack. Adds text outline for its duration. void push_outline_size ( int outline_size ) Adds a [outline_size] tag to the tag stack. Overrides default text outline size for its duration. void push_paragraph ( HorizontalAlignment alignment, TextDirection base_direction=0, String language="", StructuredTextParser st_parser=0, BitField<JustificationFlag> justification_flags=163, PackedFloat32Array tab_stops=PackedFloat32Array() ) Adds a [p] tag to the tag stack. void push_strikethrough ( ) Adds a [s] tag to the tag stack. void push_table ( int columns, InlineAlignment inline_align=0, int align_to_row=-1 ) Adds a [table=columns,inline_align] tag to the tag stack. void push_underline ( ) Adds a [u] tag to the tag stack. 
bool remove_paragraph ( int paragraph ) Removes a paragraph of content from the label. Returns true if the paragraph exists. The paragraph argument is the index of the paragraph to remove, it can take values in the interval [0, get_paragraph_count() - 1]. void scroll_to_line ( int line ) Scrolls the window's top line to match line. void scroll_to_paragraph ( int paragraph ) Scrolls the window's top line to match first line of the paragraph. void scroll_to_selection ( ) Scrolls to the beginning of the current selection. void select_all ( ) Select all the text. If selection_enabled is false, no selection will occur. void set_cell_border_color ( Color color ) Sets color of a table cell border. void set_cell_padding ( Rect2 padding ) Sets inner padding of a table cell. void set_cell_row_background_color ( Color odd_row_bg, Color even_row_bg ) Sets color of a table cell. Separate colors for alternating rows can be specified. void set_cell_size_override ( Vector2 min_size, Vector2 max_size ) Sets minimum and maximum size overrides for a table cell. void set_table_column_expand ( int column, bool expand, int ratio=1 ) Edits the selected column's expansion options. If expand is true, the column expands in proportion to its expansion ratio versus the other columns' ratios. For example, 2 columns with ratios 3 and 4 plus 70 pixels in available width would expand 30 and 40 pixels, respectively. If expand is false, the column will not contribute to the total ratio. void update_image ( Variant key, BitField<ImageUpdateMask> mask, Texture2D image, int width=0, int height=0, Color color=Color(1, 1, 1, 1), InlineAlignment inline_align=5, Rect2 region=Rect2(0, 0, 0, 0), bool pad=false, String tooltip="", bool size_in_percent=false ) Updates the existing images with the key key. Only properties specified by mask bits are updated. See add_image.   Theme Property Descriptions 
Color default_color = Color(1, 1, 1, 1)
 The default text color. 
Color font_outline_color = Color(1, 1, 1, 1)
 The default tint of text outline. 
Color font_selected_color = Color(0, 0, 0, 0)
 The color of selected text, used when selection_enabled is true. If equal to Color(0, 0, 0, 0), it will be ignored. 
Color font_shadow_color = Color(0, 0, 0, 0)
 The color of the font's shadow. 
Color selection_color = Color(0.1, 0.1, 1, 0.8)
 The color of the selection box. 
Color table_border = Color(0, 0, 0, 0)
 The default cell border color. 
Color table_even_row_bg = Color(0, 0, 0, 0)
 The default background color for even rows. 
Color table_odd_row_bg = Color(0, 0, 0, 0)
 The default background color for odd rows. 
int line_separation = 0
 The vertical space between lines. 
int outline_size = 0
 The size of the text outline. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. 
int shadow_offset_x = 1
 The horizontal offset of the font's shadow. 
int shadow_offset_y = 1
 The vertical offset of the font's shadow. 
int shadow_outline_size = 1
 The size of the shadow outline. 
int table_h_separation = 3
 The horizontal separation of elements in a table. 
int table_v_separation = 3
 The vertical separation of elements in a table. 
int text_highlight_h_padding = 3
 The horizontal padding around boxes drawn by the [fgcolor] and [bgcolor] tags. This does not affect the appearance of text selection. 
int text_highlight_v_padding = 3
 The vertical padding around boxes drawn by the [fgcolor] and [bgcolor] tags. This does not affect the appearance of text selection. 
Font bold_font The font used for bold text. 
Font bold_italics_font The font used for bold italics text. 
Font italics_font The font used for italics text. 
Font mono_font The font used for monospace text. 
Font normal_font The default text font. 
int bold_font_size The font size used for bold text. 
int bold_italics_font_size The font size used for bold italics text. 
int italics_font_size The font size used for italics text. 
int mono_font_size The font size used for monospace text. 
int normal_font_size The default text font size. 
StyleBox focus The background used when the RichTextLabel is focused. The focus StyleBox is displayed over the base StyleBox, so a partially transparent StyleBox should be used to ensure the base StyleBox remains visible. A StyleBox that represents an outline or an underline works well for this purpose. To disable the focus visual effect, assign a StyleBoxEmpty resource. Note that disabling the focus visual effect will harm keyboard/controller navigation usability, so this is not recommended for accessibility reasons. 
StyleBox normal The normal background for the RichTextLabel.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_richtextlabel.html


classes/class_collisionobject3d
-----------------------------------------------------------
CollisionObject3D Inherits: Node3D < Node < Object Inherited By: Area3D, PhysicsBody3D Abstract base class for 3D physics objects.  Description Abstract base class for 3D physics objects. CollisionObject3D can hold any number of Shape3Ds for collision. Each shape must be assigned to a shape owner. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the shape_owner_* methods. Warning: With a non-uniform scale, this node will likely not behave as expected. It is advised to keep its scale the same on all axes and adjust its collision shape(s) instead.   Properties  
int collision_layer 1  
int collision_mask 1  
float collision_priority 1.0  
DisableMode disable_mode 0  
bool input_capture_on_drag false  
bool input_ray_pickable true     Methods  
void _input_event ( Camera3D camera, InputEvent event, Vector3 position, Vector3 normal, int shape_idx ) virtual  
void _mouse_enter ( ) virtual  
void _mouse_exit ( ) virtual  
int create_shape_owner ( Object owner )  
bool get_collision_layer_value ( int layer_number ) const  
bool get_collision_mask_value ( int layer_number ) const  
RID get_rid ( ) const  
PackedInt32Array get_shape_owners ( )  
bool is_shape_owner_disabled ( int owner_id ) const  
void remove_shape_owner ( int owner_id )  
void set_collision_layer_value ( int layer_number, bool value )  
void set_collision_mask_value ( int layer_number, bool value )  
int shape_find_owner ( int shape_index ) const  
void shape_owner_add_shape ( int owner_id, Shape3D shape )  
void shape_owner_clear_shapes ( int owner_id )  
Object shape_owner_get_owner ( int owner_id ) const  
Shape3D shape_owner_get_shape ( int owner_id, int shape_id ) const  
int shape_owner_get_shape_count ( int owner_id ) const  
int shape_owner_get_shape_index ( int owner_id, int shape_id ) const  
Transform3D shape_owner_get_transform ( int owner_id ) const  
void shape_owner_remove_shape ( int owner_id, int shape_id )  
void shape_owner_set_disabled ( int owner_id, bool disabled )  
void shape_owner_set_transform ( int owner_id, Transform3D transform )     Signals input_event ( Node camera, InputEvent event, Vector3 position, Vector3 normal, int shape_idx ) Emitted when the object receives an unhandled InputEvent. position is the location in world space of the mouse pointer on the surface of the shape with index shape_idx and normal is the normal vector of the surface at that point. mouse_entered ( ) Emitted when the mouse pointer enters any of this object's shapes. Requires input_ray_pickable to be true and at least one collision_layer bit to be set. Note: Due to the lack of continuous collision detection, this signal may not be emitted in the expected order if the mouse moves fast enough and the CollisionObject3D's area is small. This signal may also not be emitted if another CollisionObject3D is overlapping the CollisionObject3D in question. mouse_exited ( ) Emitted when the mouse pointer exits all this object's shapes. Requires input_ray_pickable to be true and at least one collision_layer bit to be set. Note: Due to the lack of continuous collision detection, this signal may not be emitted in the expected order if the mouse moves fast enough and the CollisionObject3D's area is small. This signal may also not be emitted if another CollisionObject3D is overlapping the CollisionObject3D in question.   Enumerations enum DisableMode: 
DisableMode DISABLE_MODE_REMOVE = 0
 When Node.process_mode is set to Node.PROCESS_MODE_DISABLED, remove from the physics simulation to stop all physics interactions with this CollisionObject3D. Automatically re-added to the physics simulation when the Node is processed again. 
DisableMode DISABLE_MODE_MAKE_STATIC = 1
 When Node.process_mode is set to Node.PROCESS_MODE_DISABLED, make the body static. Doesn't affect Area3D. PhysicsBody3D can't be affected by forces or other bodies while static. Automatically set PhysicsBody3D back to its original mode when the Node is processed again. 
DisableMode DISABLE_MODE_KEEP_ACTIVE = 2
 When Node.process_mode is set to Node.PROCESS_MODE_DISABLED, do not affect the physics simulation.   Property Descriptions 
int collision_layer = 1
  void set_collision_layer ( int value )
 
int get_collision_layer ( )
  The physics layers this CollisionObject3D is in. Collision objects can exist in one or more of 32 different layers. See also collision_mask. Note: Object A can detect a contact with object B only if object B is in any of the layers that object A scans. See Collision layers and masks in the documentation for more information. 
int collision_mask = 1
  void set_collision_mask ( int value )
 
int get_collision_mask ( )
  The physics layers this CollisionObject3D scans. Collision objects can scan one or more of 32 different layers. See also collision_layer. Note: Object A can detect a contact with object B only if object B is in any of the layers that object A scans. See Collision layers and masks in the documentation for more information. 
float collision_priority = 1.0
  void set_collision_priority ( float value )
 
float get_collision_priority ( )
  The priority used to solve colliding when occurring penetration. The higher the priority is, the lower the penetration into the object will be. This can for example be used to prevent the player from breaking through the boundaries of a level. 
DisableMode disable_mode = 0
  void set_disable_mode ( DisableMode value )
 
DisableMode get_disable_mode ( )
  Defines the behavior in physics when Node.process_mode is set to Node.PROCESS_MODE_DISABLED. See DisableMode for more details about the different modes. 
bool input_capture_on_drag = false
  void set_capture_input_on_drag ( bool value )
 
bool get_capture_input_on_drag ( )
  If true, the CollisionObject3D will continue to receive input events as the mouse is dragged across its shapes. 
bool input_ray_pickable = true
  void set_ray_pickable ( bool value )
 
bool is_ray_pickable ( )
  If true, this object is pickable. A pickable object can detect the mouse pointer entering/leaving, and if the mouse is inside it, report input events. Requires at least one collision_layer bit to be set.   Method Descriptions void _input_event ( Camera3D camera, InputEvent event, Vector3 position, Vector3 normal, int shape_idx ) virtual
 Receives unhandled InputEvents. position is the location in world space of the mouse pointer on the surface of the shape with index shape_idx and normal is the normal vector of the surface at that point. Connect to the input_event signal to easily pick up these events. Note: _input_event requires input_ray_pickable to be true and at least one collision_layer bit to be set. void _mouse_enter ( ) virtual
 Called when the mouse pointer enters any of this object's shapes. Requires input_ray_pickable to be true and at least one collision_layer bit to be set. Note that moving between different shapes within a single CollisionObject3D won't cause this function to be called. void _mouse_exit ( ) virtual
 Called when the mouse pointer exits all this object's shapes. Requires input_ray_pickable to be true and at least one collision_layer bit to be set. Note that moving between different shapes within a single CollisionObject3D won't cause this function to be called. 
int create_shape_owner ( Object owner ) Creates a new shape owner for the given object. Returns owner_id of the new owner for future reference. 
bool get_collision_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_layer is enabled, given a layer_number between 1 and 32. 
bool get_collision_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_mask is enabled, given a layer_number between 1 and 32. 
RID get_rid ( ) const
 Returns the object's RID. 
PackedInt32Array get_shape_owners ( ) Returns an Array of owner_id identifiers. You can use these ids in other methods that take owner_id as an argument. 
bool is_shape_owner_disabled ( int owner_id ) const
 If true, the shape owner and its shapes are disabled. void remove_shape_owner ( int owner_id ) Removes the given shape owner. void set_collision_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_layer, given a layer_number between 1 and 32. void set_collision_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_mask, given a layer_number between 1 and 32. 
int shape_find_owner ( int shape_index ) const
 Returns the owner_id of the given shape. void shape_owner_add_shape ( int owner_id, Shape3D shape ) Adds a Shape3D to the shape owner. void shape_owner_clear_shapes ( int owner_id ) Removes all shapes from the shape owner. 
Object shape_owner_get_owner ( int owner_id ) const
 Returns the parent object of the given shape owner. 
Shape3D shape_owner_get_shape ( int owner_id, int shape_id ) const
 Returns the Shape3D with the given ID from the given shape owner. 
int shape_owner_get_shape_count ( int owner_id ) const
 Returns the number of shapes the given shape owner contains. 
int shape_owner_get_shape_index ( int owner_id, int shape_id ) const
 Returns the child index of the Shape3D with the given ID from the given shape owner. 
Transform3D shape_owner_get_transform ( int owner_id ) const
 Returns the shape owner's Transform3D. void shape_owner_remove_shape ( int owner_id, int shape_id ) Removes a shape from the given shape owner. void shape_owner_set_disabled ( int owner_id, bool disabled ) If true, disables the given shape owner. void shape_owner_set_transform ( int owner_id, Transform3D transform ) Sets the Transform3D of the given shape owner.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_collisionobject3d.html


classes/class_labelsettings
-----------------------------------------------------------
LabelSettings Inherits: Resource < RefCounted < Object Provides common settings to customize the text in a Label.  Description LabelSettings is a resource that provides common settings to customize the text in a Label. It will take priority over the properties defined in Control.theme. The resource can be shared between multiple labels and changed on the fly, so it's convenient and flexible way to setup text style.   Properties  
Font font   
Color font_color Color(1, 1, 1, 1)  
int font_size 16  
float line_spacing 3.0  
Color outline_color Color(1, 1, 1, 1)  
int outline_size 0  
Color shadow_color Color(0, 0, 0, 0)  
Vector2 shadow_offset Vector2(1, 1)  
int shadow_size 1     Property Descriptions 
Font font  void set_font ( Font value )
 
Font get_font ( )
  Font used for the text. 
Color font_color = Color(1, 1, 1, 1)
  void set_font_color ( Color value )
 
Color get_font_color ( )
  Color of the text. 
int font_size = 16
  void set_font_size ( int value )
 
int get_font_size ( )
  Size of the text. 
float line_spacing = 3.0
  void set_line_spacing ( float value )
 
float get_line_spacing ( )
  Vertical space between lines when the text is multiline. 
Color outline_color = Color(1, 1, 1, 1)
  void set_outline_color ( Color value )
 
Color get_outline_color ( )
  The color of the outline. 
int outline_size = 0
  void set_outline_size ( int value )
 
int get_outline_size ( )
  Text outline size. 
Color shadow_color = Color(0, 0, 0, 0)
  void set_shadow_color ( Color value )
 
Color get_shadow_color ( )
  Color of the shadow effect. If alpha is 0, no shadow will be drawn. 
Vector2 shadow_offset = Vector2(1, 1)
  void set_shadow_offset ( Vector2 value )
 
Vector2 get_shadow_offset ( )
  Offset of the shadow effect, in pixels. 
int shadow_size = 1
  void set_shadow_size ( int value )
 
int get_shadow_size ( )
  Size of the shadow effect.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_labelsettings.html


classes/class_basebutton
-----------------------------------------------------------
BaseButton Inherits: Control < CanvasItem < Node < Object Inherited By: Button, LinkButton, TextureButton Abstract base class for GUI buttons.  Description BaseButton is an abstract base class for GUI buttons. It doesn't display anything by itself.   Properties  
ActionMode action_mode 1  
ButtonGroup button_group   
BitField<MouseButtonMask> button_mask 1  
bool button_pressed false  
bool disabled false  
FocusMode focus_mode 2 (overrides Control)  
bool keep_pressed_outside false  
Shortcut shortcut   
bool shortcut_feedback true  
bool shortcut_in_tooltip true  
bool toggle_mode false     Methods  
void _pressed ( ) virtual  
void _toggled ( bool toggled_on ) virtual  
DrawMode get_draw_mode ( ) const  
bool is_hovered ( ) const  
void set_pressed_no_signal ( bool pressed )     Signals button_down ( ) Emitted when the button starts being held down. button_up ( ) Emitted when the button stops being held down. pressed ( ) Emitted when the button is toggled or pressed. This is on button_down if action_mode is ACTION_MODE_BUTTON_PRESS and on button_up otherwise. If you need to know the button's pressed state (and toggle_mode is active), use toggled instead. toggled ( bool toggled_on ) Emitted when the button was just toggled between pressed and normal states (only if toggle_mode is active). The new state is contained in the toggled_on argument.   Enumerations enum DrawMode: 
DrawMode DRAW_NORMAL = 0
 The normal state (i.e. not pressed, not hovered, not toggled and enabled) of buttons. 
DrawMode DRAW_PRESSED = 1
 The state of buttons are pressed. 
DrawMode DRAW_HOVER = 2
 The state of buttons are hovered. 
DrawMode DRAW_DISABLED = 3
 The state of buttons are disabled. 
DrawMode DRAW_HOVER_PRESSED = 4
 The state of buttons are both hovered and pressed. enum ActionMode: 
ActionMode ACTION_MODE_BUTTON_PRESS = 0
 Require just a press to consider the button clicked. 
ActionMode ACTION_MODE_BUTTON_RELEASE = 1
 Require a press and a subsequent release before considering the button clicked.   Property Descriptions 
ActionMode action_mode = 1
  void set_action_mode ( ActionMode value )
 
ActionMode get_action_mode ( )
  Determines when the button is considered clicked, one of the ActionMode constants. 
ButtonGroup button_group  void set_button_group ( ButtonGroup value )
 
ButtonGroup get_button_group ( )
  The ButtonGroup associated with the button. Not to be confused with node groups. Note: The button will be configured as a radio button if a ButtonGroup is assigned to it. 
BitField<MouseButtonMask> button_mask = 1
  void set_button_mask ( BitField<MouseButtonMask> value )
 
BitField<MouseButtonMask> get_button_mask ( )
  Binary mask to choose which mouse buttons this button will respond to. To allow both left-click and right-click, use MOUSE_BUTTON_MASK_LEFT | MOUSE_BUTTON_MASK_RIGHT. 
bool button_pressed = false
  void set_pressed ( bool value )
 
bool is_pressed ( )
  If true, the button's state is pressed. Means the button is pressed down or toggled (if toggle_mode is active). Only works if toggle_mode is true. Note: Setting button_pressed will result in toggled to be emitted. If you want to change the pressed state without emitting that signal, use set_pressed_no_signal. 
bool disabled = false
  void set_disabled ( bool value )
 
bool is_disabled ( )
  If true, the button is in disabled state and can't be clicked or toggled. 
bool keep_pressed_outside = false
  void set_keep_pressed_outside ( bool value )
 
bool is_keep_pressed_outside ( )
  If true, the button stays pressed when moving the cursor outside the button while pressing it. Note: This property only affects the button's visual appearance. Signals will be emitted at the same moment regardless of this property's value. 
Shortcut shortcut  void set_shortcut ( Shortcut value )
 
Shortcut get_shortcut ( )
  Shortcut associated to the button. 
bool shortcut_feedback = true
  void set_shortcut_feedback ( bool value )
 
bool is_shortcut_feedback ( )
  If true, the button will highlight for a short amount of time when its shortcut is activated. If false and toggle_mode is false, the shortcut will activate without any visual feedback. 
bool shortcut_in_tooltip = true
  void set_shortcut_in_tooltip ( bool value )
 
bool is_shortcut_in_tooltip_enabled ( )
  If true, the button will add information about its shortcut in the tooltip. 
bool toggle_mode = false
  void set_toggle_mode ( bool value )
 
bool is_toggle_mode ( )
  If true, the button is in toggle mode. Makes the button flip state between pressed and unpressed each time its area is clicked.   Method Descriptions void _pressed ( ) virtual
 Called when the button is pressed. If you need to know the button's pressed state (and toggle_mode is active), use _toggled instead. void _toggled ( bool toggled_on ) virtual
 Called when the button is toggled (only if toggle_mode is active). 
DrawMode get_draw_mode ( ) const
 Returns the visual state used to draw the button. This is useful mainly when implementing your own draw code by either overriding _draw() or connecting to "draw" signal. The visual state of the button is defined by the DrawMode enum. 
bool is_hovered ( ) const
 Returns true if the mouse has entered the button and has not left it yet. void set_pressed_no_signal ( bool pressed ) Changes the button_pressed state of the button, without emitting toggled. Use when you just want to change the state of the button without sending the pressed event (e.g. when initializing scene). Only works if toggle_mode is true. Note: This method doesn't unpress other buttons in button_group.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_basebutton.html


classes/class_resourcepreloader
-----------------------------------------------------------
ResourcePreloader Inherits: Node < Object A node used to preload sub-resources inside a scene.  Description This node is used to preload sub-resources inside a scene, so when the scene is loaded, all the resources are ready to use and can be retrieved from the preloader. You can add the resources using the ResourcePreloader tab when the node is selected. GDScript has a simplified @GDScript.preload built-in method which can be used in most situations, leaving the use of ResourcePreloader for more advanced scenarios.   Methods  
void add_resource ( StringName name, Resource resource )  
Resource get_resource ( StringName name ) const  
PackedStringArray get_resource_list ( ) const  
bool has_resource ( StringName name ) const  
void remove_resource ( StringName name )  
void rename_resource ( StringName name, StringName newname )     Method Descriptions void add_resource ( StringName name, Resource resource ) Adds a resource to the preloader with the given name. If a resource with the given name already exists, the new resource will be renamed to "name N" where N is an incrementing number starting from 2. 
Resource get_resource ( StringName name ) const
 Returns the resource associated to name. 
PackedStringArray get_resource_list ( ) const
 Returns the list of resources inside the preloader. 
bool has_resource ( StringName name ) const
 Returns true if the preloader contains a resource associated to name. void remove_resource ( StringName name ) Removes the resource associated to name from the preloader. void rename_resource ( StringName name, StringName newname ) Renames a resource inside the preloader from name to newname.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_resourcepreloader.html


classes/class_audioeffectcompressor
-----------------------------------------------------------
AudioEffectCompressor Inherits: AudioEffect < Resource < RefCounted < Object Adds a compressor audio effect to an audio bus. Reduces sounds that exceed a certain threshold level, smooths out the dynamics and increases the overall volume.  Description Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB). Compressor has many uses in the mix:  In the Master bus to compress the whole output (although an AudioEffectLimiter is probably better). In voice channels to ensure they sound as balanced as possible. Sidechained. This can reduce the sound level sidechained with another audio bus for threshold detection. This technique is common in video game mixing to the level of music and SFX while voices are being heard. Accentuates transients by using a wider attack, making effects sound more punchy.    Tutorials  Audio buses    Properties  
float attack_us 20.0  
float gain 0.0  
float mix 1.0  
float ratio 4.0  
float release_ms 250.0  
StringName sidechain &""  
float threshold 0.0     Property Descriptions 
float attack_us = 20.0
  void set_attack_us ( float value )
 
float get_attack_us ( )
  Compressor's reaction time when the signal exceeds the threshold, in microseconds. Value can range from 20 to 2000. 
float gain = 0.0
  void set_gain ( float value )
 
float get_gain ( )
  Gain applied to the output signal. 
float mix = 1.0
  void set_mix ( float value )
 
float get_mix ( )
  Balance between original signal and effect signal. Value can range from 0 (totally dry) to 1 (totally wet). 
float ratio = 4.0
  void set_ratio ( float value )
 
float get_ratio ( )
  Amount of compression applied to the audio once it passes the threshold level. The higher the ratio, the more the loud parts of the audio will be compressed. Value can range from 1 to 48. 
float release_ms = 250.0
  void set_release_ms ( float value )
 
float get_release_ms ( )
  Compressor's delay time to stop reducing the signal after the signal level falls below the threshold, in milliseconds. Value can range from 20 to 2000. 
StringName sidechain = &""
  void set_sidechain ( StringName value )
 
StringName get_sidechain ( )
  Reduce the sound level using another audio bus for threshold detection. 
float threshold = 0.0
  void set_threshold ( float value )
 
float get_threshold ( )
  The level above which compression is applied to the audio. Value can range from -60 to 0.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectcompressor.html


classes/class_fogmaterial
-----------------------------------------------------------
FogMaterial Inherits: Material < Resource < RefCounted < Object A material that controls how volumetric fog is rendered, to be assigned to a FogVolume.  Description A Material resource that can be used by FogVolumes to draw volumetric effects. If you need more advanced effects, use a custom fog shader.   Properties  
Color albedo Color(1, 1, 1, 1)  
float density 1.0  
Texture3D density_texture   
float edge_fade 0.1  
Color emission Color(0, 0, 0, 1)  
float height_falloff 0.0     Property Descriptions 
Color albedo = Color(1, 1, 1, 1)
  void set_albedo ( Color value )
 
Color get_albedo ( )
  The single-scattering Color of the FogVolume. Internally, albedo is converted into single-scattering, which is additively blended with other FogVolumes and the Environment.volumetric_fog_albedo. 
float density = 1.0
  void set_density ( float value )
 
float get_density ( )
  The density of the FogVolume. Denser objects are more opaque, but may suffer from under-sampling artifacts that look like stripes. Negative values can be used to subtract fog from other FogVolumes or global volumetric fog. Note: Due to limited precision, density values between -0.001 and 0.001 (exclusive) act like 0.0. This does not apply to Environment.volumetric_fog_density. 
Texture3D density_texture  void set_density_texture ( Texture3D value )
 
Texture3D get_density_texture ( )
  The 3D texture that is used to scale the density of the FogVolume. This can be used to vary fog density within the FogVolume with any kind of static pattern. For animated effects, consider using a custom fog shader. 
float edge_fade = 0.1
  void set_edge_fade ( float value )
 
float get_edge_fade ( )
  The hardness of the edges of the FogVolume. A higher value will result in softer edges, while a lower value will result in harder edges. 
Color emission = Color(0, 0, 0, 1)
  void set_emission ( Color value )
 
Color get_emission ( )
  The Color of the light emitted by the FogVolume. Emitted light will not cast light or shadows on other objects, but can be useful for modulating the Color of the FogVolume independently from light sources. 
float height_falloff = 0.0
  void set_height_falloff ( float value )
 
float get_height_falloff ( )
  The rate by which the height-based fog decreases in density as height increases in world space. A high falloff will result in a sharp transition, while a low falloff will result in a smoother transition. A value of 0.0 results in uniform-density fog. The height threshold is determined by the height of the associated FogVolume.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_fogmaterial.html


classes/class_cubemap
-----------------------------------------------------------
Cubemap Inherits: ImageTextureLayered < TextureLayered < Texture < Resource < RefCounted < Object Six square textures representing the faces of a cube. Commonly used as a skybox.  Description A cubemap is made of 6 textures organized in layers. They are typically used for faking reflections in 3D rendering (see ReflectionProbe). It can be used to make an object look as if it's reflecting its surroundings. This usually delivers much better performance than other reflection methods. This resource is typically used as a uniform in custom shaders. Few core Godot methods make use of Cubemap resources. To create such a texture file yourself, reimport your image files using the Godot Editor import presets. Note: Godot doesn't support using cubemaps in a PanoramaSkyMaterial. You can use this tool to convert a cubemap to an equirectangular sky map.   Methods  
Resource create_placeholder ( ) const     Method Descriptions 
Resource create_placeholder ( ) const
 Creates a placeholder version of this resource (PlaceholderCubemap).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_cubemap.html


classes/class_csgsphere3d
-----------------------------------------------------------
CSGSphere3D Inherits: CSGPrimitive3D < CSGShape3D < GeometryInstance3D < VisualInstance3D < Node3D < Node < Object A CSG Sphere shape.  Description This node allows you to create a sphere for use with the CSG system. Note: CSG nodes are intended to be used for level prototyping. Creating CSG nodes has a significant CPU cost compared to creating a MeshInstance3D with a PrimitiveMesh. Moving a CSG node within another CSG node also has a significant CPU cost, so it should be avoided during gameplay.   Tutorials  Prototyping levels with CSG    Properties  
Material material   
int radial_segments 12  
float radius 0.5  
int rings 6  
bool smooth_faces true     Property Descriptions 
Material material  void set_material ( Material value )
 
Material get_material ( )
  The material used to render the sphere. 
int radial_segments = 12
  void set_radial_segments ( int value )
 
int get_radial_segments ( )
  Number of vertical slices for the sphere. 
float radius = 0.5
  void set_radius ( float value )
 
float get_radius ( )
  Radius of the sphere. 
int rings = 6
  void set_rings ( int value )
 
int get_rings ( )
  Number of horizontal slices for the sphere. 
bool smooth_faces = true
  void set_smooth_faces ( bool value )
 
bool get_smooth_faces ( )
  If true the normals of the sphere are set to give a smooth effect making the sphere seem rounded. If false the sphere will have a flat shaded look.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_csgsphere3d.html


classes/class_tilesetscenescollectionsource
-----------------------------------------------------------
TileSetScenesCollectionSource Inherits: TileSetSource < Resource < RefCounted < Object Exposes a set of scenes as tiles for a TileSet resource.  Description When placed on a TileMap, tiles from TileSetScenesCollectionSource will automatically instantiate an associated scene at the cell's position in the TileMap. Scenes are instantiated as children of the TileMap when it enters the tree. If you add/remove a scene tile in the TileMap that is already inside the tree, the TileMap will automatically instantiate/free the scene accordingly.   Methods  
int create_scene_tile ( PackedScene packed_scene, int id_override=-1 )  
int get_next_scene_tile_id ( ) const  
bool get_scene_tile_display_placeholder ( int id ) const  
int get_scene_tile_id ( int index )  
PackedScene get_scene_tile_scene ( int id ) const  
int get_scene_tiles_count ( )  
bool has_scene_tile_id ( int id )  
void remove_scene_tile ( int id )  
void set_scene_tile_display_placeholder ( int id, bool display_placeholder )  
void set_scene_tile_id ( int id, int new_id )  
void set_scene_tile_scene ( int id, PackedScene packed_scene )     Method Descriptions 
int create_scene_tile ( PackedScene packed_scene, int id_override=-1 ) Creates a scene-based tile out of the given scene. Returns a newly generated unique ID. 
int get_next_scene_tile_id ( ) const
 Returns the scene ID a following call to create_scene_tile would return. 
bool get_scene_tile_display_placeholder ( int id ) const
 Returns whether the scene tile with id displays a placeholder in the editor. 
int get_scene_tile_id ( int index ) Returns the scene tile ID of the scene tile at index. 
PackedScene get_scene_tile_scene ( int id ) const
 Returns the PackedScene resource of scene tile with id. 
int get_scene_tiles_count ( ) Returns the number or scene tiles this TileSet source has. 
bool has_scene_tile_id ( int id ) Returns whether this TileSet source has a scene tile with id. void remove_scene_tile ( int id ) Remove the scene tile with id. void set_scene_tile_display_placeholder ( int id, bool display_placeholder ) Sets whether or not the scene tile with id should display a placeholder in the editor. This might be useful for scenes that are not visible. void set_scene_tile_id ( int id, int new_id ) Changes a scene tile's ID from id to new_id. This will fail if there is already a tile with an ID equal to new_id. void set_scene_tile_scene ( int id, PackedScene packed_scene ) Assigns a PackedScene resource to the scene tile with id. This will fail if the scene does not extend CanvasItem, as positioning properties are needed to place the scene on the TileMap.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_tilesetscenescollectionsource.html


classes/class_characterbody2d
-----------------------------------------------------------
CharacterBody2D Inherits: PhysicsBody2D < CollisionObject2D < Node2D < CanvasItem < Node < Object A 2D physics body specialized for characters moved by script.  Description CharacterBody2D is a specialized class for physics bodies that are meant to be user-controlled. They are not affected by physics at all, but they affect other physics bodies in their path. They are mainly used to provide high-level API to move objects with wall and slope detection (move_and_slide method) in addition to the general collision detection provided by PhysicsBody2D.move_and_collide. This makes it useful for highly configurable physics bodies that must move in specific ways and collide with the world, as is often the case with user-controlled characters. For game objects that don't require complex movement or collision detection, such as moving platforms, AnimatableBody2D is simpler to configure.   Tutorials  Kinematic character (2D) Using CharacterBody2D 2D Kinematic Character Demo 2D Platformer Demo    Properties  
bool floor_block_on_wall true  
bool floor_constant_speed false  
float floor_max_angle 0.785398  
float floor_snap_length 1.0  
bool floor_stop_on_slope true  
int max_slides 4  
MotionMode motion_mode 0  
int platform_floor_layers 4294967295  
PlatformOnLeave platform_on_leave 0  
int platform_wall_layers 0  
float safe_margin 0.08  
bool slide_on_ceiling true  
Vector2 up_direction Vector2(0, -1)  
Vector2 velocity Vector2(0, 0)  
float wall_min_slide_angle 0.261799     Methods  
void apply_floor_snap ( )  
float get_floor_angle ( Vector2 up_direction=Vector2(0, -1) ) const  
Vector2 get_floor_normal ( ) const  
Vector2 get_last_motion ( ) const  
KinematicCollision2D get_last_slide_collision ( )  
Vector2 get_platform_velocity ( ) const  
Vector2 get_position_delta ( ) const  
Vector2 get_real_velocity ( ) const  
KinematicCollision2D get_slide_collision ( int slide_idx )  
int get_slide_collision_count ( ) const  
Vector2 get_wall_normal ( ) const  
bool is_on_ceiling ( ) const  
bool is_on_ceiling_only ( ) const  
bool is_on_floor ( ) const  
bool is_on_floor_only ( ) const  
bool is_on_wall ( ) const  
bool is_on_wall_only ( ) const  
bool move_and_slide ( )     Enumerations enum MotionMode: 
MotionMode MOTION_MODE_GROUNDED = 0
 Apply when notions of walls, ceiling and floor are relevant. In this mode the body motion will react to slopes (acceleration/slowdown). This mode is suitable for sided games like platformers. 
MotionMode MOTION_MODE_FLOATING = 1
 Apply when there is no notion of floor or ceiling. All collisions will be reported as on_wall. In this mode, when you slide, the speed will always be constant. This mode is suitable for top-down games. enum PlatformOnLeave: 
PlatformOnLeave PLATFORM_ON_LEAVE_ADD_VELOCITY = 0
 Add the last platform velocity to the velocity when you leave a moving platform. 
PlatformOnLeave PLATFORM_ON_LEAVE_ADD_UPWARD_VELOCITY = 1
 Add the last platform velocity to the velocity when you leave a moving platform, but any downward motion is ignored. It's useful to keep full jump height even when the platform is moving down. 
PlatformOnLeave PLATFORM_ON_LEAVE_DO_NOTHING = 2
 Do nothing when leaving a platform.   Property Descriptions 
bool floor_block_on_wall = true
  void set_floor_block_on_wall_enabled ( bool value )
 
bool is_floor_block_on_wall_enabled ( )
  If true, the body will be able to move on the floor only. This option avoids to be able to walk on walls, it will however allow to slide down along them. 
bool floor_constant_speed = false
  void set_floor_constant_speed_enabled ( bool value )
 
bool is_floor_constant_speed_enabled ( )
  If false (by default), the body will move faster on downward slopes and slower on upward slopes. If true, the body will always move at the same speed on the ground no matter the slope. Note that you need to use floor_snap_length to stick along a downward slope at constant speed. 
float floor_max_angle = 0.785398
  void set_floor_max_angle ( float value )
 
float get_floor_max_angle ( )
  Maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall, when calling move_and_slide. The default value equals 45 degrees. 
float floor_snap_length = 1.0
  void set_floor_snap_length ( float value )
 
float get_floor_snap_length ( )
  Sets a snapping distance. When set to a value different from 0.0, the body is kept attached to slopes when calling move_and_slide. The snapping vector is determined by the given distance along the opposite direction of the up_direction. As long as the snapping vector is in contact with the ground and the body moves against up_direction, the body will remain attached to the surface. Snapping is not applied if the body moves along up_direction, meaning it contains vertical rising velocity, so it will be able to detach from the ground when jumping or when the body is pushed up by something. If you want to apply a snap without taking into account the velocity, use apply_floor_snap. 
bool floor_stop_on_slope = true
  void set_floor_stop_on_slope_enabled ( bool value )
 
bool is_floor_stop_on_slope_enabled ( )
  If true, the body will not slide on slopes when calling move_and_slide when the body is standing still. If false, the body will slide on floor's slopes when velocity applies a downward force. 
int max_slides = 4
  void set_max_slides ( int value )
 
int get_max_slides ( )
  Maximum number of times the body can change direction before it stops when calling move_and_slide. 
MotionMode motion_mode = 0
  void set_motion_mode ( MotionMode value )
 
MotionMode get_motion_mode ( )
  Sets the motion mode which defines the behavior of move_and_slide. See MotionMode constants for available modes. 
int platform_floor_layers = 4294967295
  void set_platform_floor_layers ( int value )
 
int get_platform_floor_layers ( )
  Collision layers that will be included for detecting floor bodies that will act as moving platforms to be followed by the CharacterBody2D. By default, all floor bodies are detected and propagate their velocity. 
PlatformOnLeave platform_on_leave = 0
  void set_platform_on_leave ( PlatformOnLeave value )
 
PlatformOnLeave get_platform_on_leave ( )
  Sets the behavior to apply when you leave a moving platform. By default, to be physically accurate, when you leave the last platform velocity is applied. See PlatformOnLeave constants for available behavior. 
int platform_wall_layers = 0
  void set_platform_wall_layers ( int value )
 
int get_platform_wall_layers ( )
  Collision layers that will be included for detecting wall bodies that will act as moving platforms to be followed by the CharacterBody2D. By default, all wall bodies are ignored. 
float safe_margin = 0.08
  void set_safe_margin ( float value )
 
float get_safe_margin ( )
  Extra margin used for collision recovery when calling move_and_slide. If the body is at least this close to another body, it will consider them to be colliding and will be pushed away before performing the actual motion. A higher value means it's more flexible for detecting collision, which helps with consistently detecting walls and floors. A lower value forces the collision algorithm to use more exact detection, so it can be used in cases that specifically require precision, e.g at very low scale to avoid visible jittering, or for stability with a stack of character bodies. 
bool slide_on_ceiling = true
  void set_slide_on_ceiling_enabled ( bool value )
 
bool is_slide_on_ceiling_enabled ( )
  If true, during a jump against the ceiling, the body will slide, if false it will be stopped and will fall vertically. 
Vector2 up_direction = Vector2(0, -1)
  void set_up_direction ( Vector2 value )
 
Vector2 get_up_direction ( )
  Vector pointing upwards, used to determine what is a wall and what is a floor (or a ceiling) when calling move_and_slide. Defaults to Vector2.UP. As the vector will be normalized it can't be equal to Vector2.ZERO, if you want all collisions to be reported as walls, consider using MOTION_MODE_FLOATING as motion_mode. 
Vector2 velocity = Vector2(0, 0)
  void set_velocity ( Vector2 value )
 
Vector2 get_velocity ( )
  Current velocity vector in pixels per second, used and modified during calls to move_and_slide. 
float wall_min_slide_angle = 0.261799
  void set_wall_min_slide_angle ( float value )
 
float get_wall_min_slide_angle ( )
  Minimum angle (in radians) where the body is allowed to slide when it encounters a slope. The default value equals 15 degrees. This property only affects movement when motion_mode is MOTION_MODE_FLOATING.   Method Descriptions void apply_floor_snap ( ) Allows to manually apply a snap to the floor regardless of the body's velocity. This function does nothing when is_on_floor returns true. 
float get_floor_angle ( Vector2 up_direction=Vector2(0, -1) ) const
 Returns the floor's collision angle at the last collision point according to up_direction, which is Vector2.UP by default. This value is always positive and only valid after calling move_and_slide and when is_on_floor returns true. 
Vector2 get_floor_normal ( ) const
 Returns the surface normal of the floor at the last collision point. Only valid after calling move_and_slide and when is_on_floor returns true. 
Vector2 get_last_motion ( ) const
 Returns the last motion applied to the CharacterBody2D during the last call to move_and_slide. The movement can be split into multiple motions when sliding occurs, and this method return the last one, which is useful to retrieve the current direction of the movement. 
KinematicCollision2D get_last_slide_collision ( ) Returns a KinematicCollision2D, which contains information about the latest collision that occurred during the last call to move_and_slide. 
Vector2 get_platform_velocity ( ) const
 Returns the linear velocity of the platform at the last collision point. Only valid after calling move_and_slide. 
Vector2 get_position_delta ( ) const
 Returns the travel (position delta) that occurred during the last call to move_and_slide. 
Vector2 get_real_velocity ( ) const
 Returns the current real velocity since the last call to move_and_slide. For example, when you climb a slope, you will move diagonally even though the velocity is horizontal. This method returns the diagonal movement, as opposed to velocity which returns the requested velocity. 
KinematicCollision2D get_slide_collision ( int slide_idx ) Returns a KinematicCollision2D, which contains information about a collision that occurred during the last call to move_and_slide. Since the body can collide several times in a single call to move_and_slide, you must specify the index of the collision in the range 0 to (get_slide_collision_count - 1). Example usage:  GDScriptfor i in get_slide_collision_count():
    var collision = get_slide_collision(i)
    print("Collided with: ", collision.get_collider().name)
 C#for (int i = 0; i < GetSlideCollisionCount(); i++)
{
    KinematicCollision2D collision = GetSlideCollision(i);
    GD.Print("Collided with: ", (collision.GetCollider() as Node).Name);
}
  
int get_slide_collision_count ( ) const
 Returns the number of times the body collided and changed direction during the last call to move_and_slide. 
Vector2 get_wall_normal ( ) const
 Returns the surface normal of the wall at the last collision point. Only valid after calling move_and_slide and when is_on_wall returns true. 
bool is_on_ceiling ( ) const
 Returns true if the body collided with the ceiling on the last call of move_and_slide. Otherwise, returns false. The up_direction and floor_max_angle are used to determine whether a surface is "ceiling" or not. 
bool is_on_ceiling_only ( ) const
 Returns true if the body collided only with the ceiling on the last call of move_and_slide. Otherwise, returns false. The up_direction and floor_max_angle are used to determine whether a surface is "ceiling" or not. 
bool is_on_floor ( ) const
 Returns true if the body collided with the floor on the last call of move_and_slide. Otherwise, returns false. The up_direction and floor_max_angle are used to determine whether a surface is "floor" or not. 
bool is_on_floor_only ( ) const
 Returns true if the body collided only with the floor on the last call of move_and_slide. Otherwise, returns false. The up_direction and floor_max_angle are used to determine whether a surface is "floor" or not. 
bool is_on_wall ( ) const
 Returns true if the body collided with a wall on the last call of move_and_slide. Otherwise, returns false. The up_direction and floor_max_angle are used to determine whether a surface is "wall" or not. 
bool is_on_wall_only ( ) const
 Returns true if the body collided only with a wall on the last call of move_and_slide. Otherwise, returns false. The up_direction and floor_max_angle are used to determine whether a surface is "wall" or not. 
bool move_and_slide ( ) Moves the body based on velocity. If the body collides with another, it will slide along the other body (by default only on floor) rather than stop immediately. If the other body is a CharacterBody2D or RigidBody2D, it will also be affected by the motion of the other body. You can use this to make moving and rotating platforms, or to make nodes push other nodes. Modifies velocity if a slide collision occurred. To get the latest collision call get_last_slide_collision, for detailed information about collisions that occurred, use get_slide_collision. When the body touches a moving platform, the platform's velocity is automatically added to the body motion. If a collision occurs due to the platform's motion, it will always be first in the slide collisions. The general behavior and available properties change according to the motion_mode. Returns true if the body collided, otherwise, returns false.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_characterbody2d.html


classes/class_audioeffectfilter
-----------------------------------------------------------
AudioEffectFilter Inherits: AudioEffect < Resource < RefCounted < Object Inherited By: AudioEffectBandLimitFilter, AudioEffectBandPassFilter, AudioEffectHighPassFilter, AudioEffectHighShelfFilter, AudioEffectLowPassFilter, AudioEffectLowShelfFilter, AudioEffectNotchFilter Adds a filter to the audio bus.  Description Allows frequencies other than the cutoff_hz to pass.   Tutorials  Audio buses    Properties  
float cutoff_hz 2000.0  
FilterDB db 0  
float gain 1.0  
float resonance 0.5     Enumerations enum FilterDB: 
FilterDB FILTER_6DB = 0
 
FilterDB FILTER_12DB = 1
 
FilterDB FILTER_18DB = 2
 
FilterDB FILTER_24DB = 3
   Property Descriptions 
float cutoff_hz = 2000.0
  void set_cutoff ( float value )
 
float get_cutoff ( )
  Threshold frequency for the filter, in Hz. 
FilterDB db = 0
  void set_db ( FilterDB value )
 
FilterDB get_db ( )
   There is currently no description for this property. Please help us by contributing one!  
float gain = 1.0
  void set_gain ( float value )
 
float get_gain ( )
  Gain amount of the frequencies after the filter. 
float resonance = 0.5
  void set_resonance ( float value )
 
float get_resonance ( )
  Amount of boost in the frequency range near the cutoff frequency.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectfilter.html


classes/class_fontfile
-----------------------------------------------------------
FontFile Inherits: Font < Resource < RefCounted < Object Holds font source data and prerendered glyph cache, imported from a dynamic or a bitmap font.  Description FontFile contains a set of glyphs to represent Unicode characters imported from a font file, as well as a cache of rasterized glyphs, and a set of fallback Fonts to use. Use FontVariation to access specific OpenType variation of the font, create simulated bold / slanted version, and draw lines of text. For more complex text processing, use FontVariation in conjunction with TextLine or TextParagraph. Supported font formats:  Dynamic font importer: TrueType (.ttf), TrueType collection (.ttc), OpenType (.otf), OpenType collection (.otc), WOFF (.woff), WOFF2 (.woff2), Type 1 (.pfb, .pfm). Bitmap font importer: AngelCode BMFont (.fnt, .font), text and binary (version 3) format variants. Monospace image font importer: All supported image formats.  Note: A character is a symbol that represents an item (letter, digit etc.) in an abstract way. Note: A glyph is a bitmap or a shape used to draw one or more characters in a context-dependent manner. Glyph indices are bound to the specific font data source. Note: If none of the font data sources contain glyphs for a character used in a string, the character in question will be replaced with a box displaying its hexadecimal code.  GDScriptvar f = load("res://BarlowCondensed-Bold.ttf")
$Label.add_theme_font_override("font", f)
$Label.add_theme_font_size_override("font_size", 64)
 C#var f = ResourceLoader.Load<FontFile>("res://BarlowCondensed-Bold.ttf");
GetNode("Label").AddThemeFontOverride("font", f);
GetNode("Label").AddThemeFontSizeOverride("font_size", 64);
    Tutorials  Runtime file loading and saving    Properties  
bool allow_system_fallback true  
FontAntialiasing antialiasing 1  
PackedByteArray data PackedByteArray()  
int fixed_size 0  
FixedSizeScaleMode fixed_size_scale_mode 0  
String font_name ""  
int font_stretch 100  
BitField<FontStyle> font_style 0  
int font_weight 400  
bool force_autohinter false  
bool generate_mipmaps false  
Hinting hinting 1  
int msdf_pixel_range 16  
int msdf_size 48  
bool multichannel_signed_distance_field false  
Dictionary opentype_feature_overrides {}  
float oversampling 0.0  
String style_name ""  
SubpixelPositioning subpixel_positioning 1     Methods  
void clear_cache ( )  
void clear_glyphs ( int cache_index, Vector2i size )  
void clear_kerning_map ( int cache_index, int size )  
void clear_size_cache ( int cache_index )  
void clear_textures ( int cache_index, Vector2i size )  
float get_cache_ascent ( int cache_index, int size ) const  
int get_cache_count ( ) const  
float get_cache_descent ( int cache_index, int size ) const  
float get_cache_scale ( int cache_index, int size ) const  
float get_cache_underline_position ( int cache_index, int size ) const  
float get_cache_underline_thickness ( int cache_index, int size ) const  
int get_char_from_glyph_index ( int size, int glyph_index ) const  
float get_embolden ( int cache_index ) const  
int get_extra_spacing ( int cache_index, SpacingType spacing ) const  
int get_face_index ( int cache_index ) const  
Vector2 get_glyph_advance ( int cache_index, int size, int glyph ) const  
int get_glyph_index ( int size, int char, int variation_selector ) const  
PackedInt32Array get_glyph_list ( int cache_index, Vector2i size ) const  
Vector2 get_glyph_offset ( int cache_index, Vector2i size, int glyph ) const  
Vector2 get_glyph_size ( int cache_index, Vector2i size, int glyph ) const  
int get_glyph_texture_idx ( int cache_index, Vector2i size, int glyph ) const  
Rect2 get_glyph_uv_rect ( int cache_index, Vector2i size, int glyph ) const  
Vector2 get_kerning ( int cache_index, int size, Vector2i glyph_pair ) const  
Vector2i[] get_kerning_list ( int cache_index, int size ) const  
bool get_language_support_override ( String language ) const  
PackedStringArray get_language_support_overrides ( ) const  
bool get_script_support_override ( String script ) const  
PackedStringArray get_script_support_overrides ( ) const  
Vector2i[] get_size_cache_list ( int cache_index ) const  
int get_texture_count ( int cache_index, Vector2i size ) const  
Image get_texture_image ( int cache_index, Vector2i size, int texture_index ) const  
PackedInt32Array get_texture_offsets ( int cache_index, Vector2i size, int texture_index ) const  
Transform2D get_transform ( int cache_index ) const  
Dictionary get_variation_coordinates ( int cache_index ) const  
Error load_bitmap_font ( String path )  
Error load_dynamic_font ( String path )  
void remove_cache ( int cache_index )  
void remove_glyph ( int cache_index, Vector2i size, int glyph )  
void remove_kerning ( int cache_index, int size, Vector2i glyph_pair )  
void remove_language_support_override ( String language )  
void remove_script_support_override ( String script )  
void remove_size_cache ( int cache_index, Vector2i size )  
void remove_texture ( int cache_index, Vector2i size, int texture_index )  
void render_glyph ( int cache_index, Vector2i size, int index )  
void render_range ( int cache_index, Vector2i size, int start, int end )  
void set_cache_ascent ( int cache_index, int size, float ascent )  
void set_cache_descent ( int cache_index, int size, float descent )  
void set_cache_scale ( int cache_index, int size, float scale )  
void set_cache_underline_position ( int cache_index, int size, float underline_position )  
void set_cache_underline_thickness ( int cache_index, int size, float underline_thickness )  
void set_embolden ( int cache_index, float strength )  
void set_extra_spacing ( int cache_index, SpacingType spacing, int value )  
void set_face_index ( int cache_index, int face_index )  
void set_glyph_advance ( int cache_index, int size, int glyph, Vector2 advance )  
void set_glyph_offset ( int cache_index, Vector2i size, int glyph, Vector2 offset )  
void set_glyph_size ( int cache_index, Vector2i size, int glyph, Vector2 gl_size )  
void set_glyph_texture_idx ( int cache_index, Vector2i size, int glyph, int texture_idx )  
void set_glyph_uv_rect ( int cache_index, Vector2i size, int glyph, Rect2 uv_rect )  
void set_kerning ( int cache_index, int size, Vector2i glyph_pair, Vector2 kerning )  
void set_language_support_override ( String language, bool supported )  
void set_script_support_override ( String script, bool supported )  
void set_texture_image ( int cache_index, Vector2i size, int texture_index, Image image )  
void set_texture_offsets ( int cache_index, Vector2i size, int texture_index, PackedInt32Array offset )  
void set_transform ( int cache_index, Transform2D transform )  
void set_variation_coordinates ( int cache_index, Dictionary variation_coordinates )     Property Descriptions 
bool allow_system_fallback = true
  void set_allow_system_fallback ( bool value )
 
bool is_allow_system_fallback ( )
  If set to true, system fonts can be automatically used as fallbacks. 
FontAntialiasing antialiasing = 1
  void set_antialiasing ( FontAntialiasing value )
 
FontAntialiasing get_antialiasing ( )
  Font anti-aliasing mode. 
PackedByteArray data = PackedByteArray()
  void set_data ( PackedByteArray value )
 
PackedByteArray get_data ( )
  Contents of the dynamic font source file. 
int fixed_size = 0
  void set_fixed_size ( int value )
 
int get_fixed_size ( )
  Font size, used only for the bitmap fonts. 
FixedSizeScaleMode fixed_size_scale_mode = 0
  void set_fixed_size_scale_mode ( FixedSizeScaleMode value )
 
FixedSizeScaleMode get_fixed_size_scale_mode ( )
  Scaling mode, used only for the bitmap fonts with fixed_size greater than zero. 
String font_name = ""
  void set_font_name ( String value )
 
String get_font_name ( )
  Font family name. 
int font_stretch = 100
  void set_font_stretch ( int value )
 
int get_font_stretch ( )
  Font stretch amount, compared to a normal width. A percentage value between 50% and 200%. 
BitField<FontStyle> font_style = 0
  void set_font_style ( BitField<FontStyle> value )
 
BitField<FontStyle> get_font_style ( )
  Font style flags, see FontStyle. 
int font_weight = 400
  void set_font_weight ( int value )
 
int get_font_weight ( )
  Weight (boldness) of the font. A value in the 100...999 range, normal font weight is 400, bold font weight is 700. 
bool force_autohinter = false
  void set_force_autohinter ( bool value )
 
bool is_force_autohinter ( )
  If set to true, auto-hinting is supported and preferred over font built-in hinting. Used by dynamic fonts only (MSDF fonts don't support hinting). 
bool generate_mipmaps = false
  void set_generate_mipmaps ( bool value )
 
bool get_generate_mipmaps ( )
  If set to true, generate mipmaps for the font textures. 
Hinting hinting = 1
  void set_hinting ( Hinting value )
 
Hinting get_hinting ( )
  Font hinting mode. Used by dynamic fonts only. 
int msdf_pixel_range = 16
  void set_msdf_pixel_range ( int value )
 
int get_msdf_pixel_range ( )
  The width of the range around the shape between the minimum and maximum representable signed distance. If using font outlines, msdf_pixel_range must be set to at least twice the size of the largest font outline. The default msdf_pixel_range value of 16 allows outline sizes up to 8 to look correct. 
int msdf_size = 48
  void set_msdf_size ( int value )
 
int get_msdf_size ( )
  Source font size used to generate MSDF textures. Higher values allow for more precision, but are slower to render and require more memory. Only increase this value if you notice a visible lack of precision in glyph rendering. 
bool multichannel_signed_distance_field = false
  void set_multichannel_signed_distance_field ( bool value )
 
bool is_multichannel_signed_distance_field ( )
  If set to true, glyphs of all sizes are rendered using single multichannel signed distance field (MSDF) generated from the dynamic font vector data. Since this approach does not rely on rasterizing the font every time its size changes, this allows for resizing the font in real-time without any performance penalty. Text will also not look grainy for Controls that are scaled down (or for Label3Ds viewed from a long distance). As a downside, font hinting is not available with MSDF. The lack of font hinting may result in less crisp and less readable fonts at small sizes. Note: If using font outlines, msdf_pixel_range must be set to at least twice the size of the largest font outline. Note: MSDF font rendering does not render glyphs with overlapping shapes correctly. Overlapping shapes are not valid per the OpenType standard, but are still commonly found in many font files, especially those converted by Google Fonts. To avoid issues with overlapping glyphs, consider downloading the font file directly from the type foundry instead of relying on Google Fonts. 
Dictionary opentype_feature_overrides = {}
  void set_opentype_feature_overrides ( Dictionary value )
 
Dictionary get_opentype_feature_overrides ( )
  Font OpenType feature set override. 
float oversampling = 0.0
  void set_oversampling ( float value )
 
float get_oversampling ( )
  Font oversampling factor. If set to 0.0, the global oversampling factor is used instead. Used by dynamic fonts only (MSDF fonts ignore oversampling). 
String style_name = ""
  void set_font_style_name ( String value )
 
String get_font_style_name ( )
  Font style name. 
SubpixelPositioning subpixel_positioning = 1
  void set_subpixel_positioning ( SubpixelPositioning value )
 
SubpixelPositioning get_subpixel_positioning ( )
  Font glyph subpixel positioning mode. Subpixel positioning provides shaper text and better kerning for smaller font sizes, at the cost of higher memory usage and lower font rasterization speed. Use TextServer.SUBPIXEL_POSITIONING_AUTO to automatically enable it based on the font size.   Method Descriptions void clear_cache ( ) Removes all font cache entries. void clear_glyphs ( int cache_index, Vector2i size ) Removes all rendered glyphs information from the cache entry. Note: This function will not remove textures associated with the glyphs, use remove_texture to remove them manually. void clear_kerning_map ( int cache_index, int size ) Removes all kerning overrides. void clear_size_cache ( int cache_index ) Removes all font sizes from the cache entry void clear_textures ( int cache_index, Vector2i size ) Removes all textures from font cache entry. Note: This function will not remove glyphs associated with the texture, use remove_glyph to remove them manually. 
float get_cache_ascent ( int cache_index, int size ) const
 Returns the font ascent (number of pixels above the baseline). 
int get_cache_count ( ) const
 Returns number of the font cache entries. 
float get_cache_descent ( int cache_index, int size ) const
 Returns the font descent (number of pixels below the baseline). 
float get_cache_scale ( int cache_index, int size ) const
 Returns scaling factor of the color bitmap font. 
float get_cache_underline_position ( int cache_index, int size ) const
 Returns pixel offset of the underline below the baseline. 
float get_cache_underline_thickness ( int cache_index, int size ) const
 Returns thickness of the underline in pixels. 
int get_char_from_glyph_index ( int size, int glyph_index ) const
 Returns character code associated with glyph_index, or 0 if glyph_index is invalid. See get_glyph_index. 
float get_embolden ( int cache_index ) const
 Returns embolden strength, if is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness. 
int get_extra_spacing ( int cache_index, SpacingType spacing ) const
 Returns spacing for spacing (see SpacingType) in pixels (not relative to the font size). 
int get_face_index ( int cache_index ) const
 Returns an active face index in the TrueType / OpenType collection. 
Vector2 get_glyph_advance ( int cache_index, int size, int glyph ) const
 Returns glyph advance (offset of the next glyph). Note: Advance for glyphs outlines is the same as the base glyph advance and is not saved. 
int get_glyph_index ( int size, int char, int variation_selector ) const
 Returns the glyph index of a char, optionally modified by the variation_selector. 
PackedInt32Array get_glyph_list ( int cache_index, Vector2i size ) const
 Returns list of rendered glyphs in the cache entry. 
Vector2 get_glyph_offset ( int cache_index, Vector2i size, int glyph ) const
 Returns glyph offset from the baseline. 
Vector2 get_glyph_size ( int cache_index, Vector2i size, int glyph ) const
 Returns glyph size. 
int get_glyph_texture_idx ( int cache_index, Vector2i size, int glyph ) const
 Returns index of the cache texture containing the glyph. 
Rect2 get_glyph_uv_rect ( int cache_index, Vector2i size, int glyph ) const
 Returns rectangle in the cache texture containing the glyph. 
Vector2 get_kerning ( int cache_index, int size, Vector2i glyph_pair ) const
 Returns kerning for the pair of glyphs. 
Vector2i[] get_kerning_list ( int cache_index, int size ) const
 Returns list of the kerning overrides. 
bool get_language_support_override ( String language ) const
 Returns true if support override is enabled for the language. 
PackedStringArray get_language_support_overrides ( ) const
 Returns list of language support overrides. 
bool get_script_support_override ( String script ) const
 Returns true if support override is enabled for the script. 
PackedStringArray get_script_support_overrides ( ) const
 Returns list of script support overrides. 
Vector2i[] get_size_cache_list ( int cache_index ) const
 Returns list of the font sizes in the cache. Each size is Vector2i with font size and outline size. 
int get_texture_count ( int cache_index, Vector2i size ) const
 Returns number of textures used by font cache entry. 
Image get_texture_image ( int cache_index, Vector2i size, int texture_index ) const
 Returns a copy of the font cache texture image. 
PackedInt32Array get_texture_offsets ( int cache_index, Vector2i size, int texture_index ) const
 Returns a copy of the array containing glyph packing data. 
Transform2D get_transform ( int cache_index ) const
 Returns 2D transform, applied to the font outlines, can be used for slanting, flipping and rotating glyphs. 
Dictionary get_variation_coordinates ( int cache_index ) const
 Returns variation coordinates for the specified font cache entry. See Font.get_supported_variation_list for more info. 
Error load_bitmap_font ( String path ) Loads an AngelCode BMFont (.fnt, .font) bitmap font from file path. Warning: This method should only be used in the editor or in cases when you need to load external fonts at run-time, such as fonts located at the user:// directory. 
Error load_dynamic_font ( String path ) Loads a TrueType (.ttf), OpenType (.otf), WOFF (.woff), WOFF2 (.woff2) or Type 1 (.pfb, .pfm) dynamic font from file path. Warning: This method should only be used in the editor or in cases when you need to load external fonts at run-time, such as fonts located at the user:// directory. void remove_cache ( int cache_index ) Removes specified font cache entry. void remove_glyph ( int cache_index, Vector2i size, int glyph ) Removes specified rendered glyph information from the cache entry. Note: This function will not remove textures associated with the glyphs, use remove_texture to remove them manually. void remove_kerning ( int cache_index, int size, Vector2i glyph_pair ) Removes kerning override for the pair of glyphs. void remove_language_support_override ( String language ) Remove language support override. void remove_script_support_override ( String script ) Removes script support override. void remove_size_cache ( int cache_index, Vector2i size ) Removes specified font size from the cache entry. void remove_texture ( int cache_index, Vector2i size, int texture_index ) Removes specified texture from the cache entry. Note: This function will not remove glyphs associated with the texture. Remove them manually using remove_glyph. void render_glyph ( int cache_index, Vector2i size, int index ) Renders specified glyph to the font cache texture. void render_range ( int cache_index, Vector2i size, int start, int end ) Renders the range of characters to the font cache texture. void set_cache_ascent ( int cache_index, int size, float ascent ) Sets the font ascent (number of pixels above the baseline). void set_cache_descent ( int cache_index, int size, float descent ) Sets the font descent (number of pixels below the baseline). void set_cache_scale ( int cache_index, int size, float scale ) Sets scaling factor of the color bitmap font. void set_cache_underline_position ( int cache_index, int size, float underline_position ) Sets pixel offset of the underline below the baseline. void set_cache_underline_thickness ( int cache_index, int size, float underline_thickness ) Sets thickness of the underline in pixels. void set_embolden ( int cache_index, float strength ) Sets embolden strength, if is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness. void set_extra_spacing ( int cache_index, SpacingType spacing, int value ) Sets the spacing for spacing (see SpacingType) to value in pixels (not relative to the font size). void set_face_index ( int cache_index, int face_index ) Sets an active face index in the TrueType / OpenType collection. void set_glyph_advance ( int cache_index, int size, int glyph, Vector2 advance ) Sets glyph advance (offset of the next glyph). Note: Advance for glyphs outlines is the same as the base glyph advance and is not saved. void set_glyph_offset ( int cache_index, Vector2i size, int glyph, Vector2 offset ) Sets glyph offset from the baseline. void set_glyph_size ( int cache_index, Vector2i size, int glyph, Vector2 gl_size ) Sets glyph size. void set_glyph_texture_idx ( int cache_index, Vector2i size, int glyph, int texture_idx ) Sets index of the cache texture containing the glyph. void set_glyph_uv_rect ( int cache_index, Vector2i size, int glyph, Rect2 uv_rect ) Sets rectangle in the cache texture containing the glyph. void set_kerning ( int cache_index, int size, Vector2i glyph_pair, Vector2 kerning ) Sets kerning for the pair of glyphs. void set_language_support_override ( String language, bool supported ) Adds override for Font.is_language_supported. void set_script_support_override ( String script, bool supported ) Adds override for Font.is_script_supported. void set_texture_image ( int cache_index, Vector2i size, int texture_index, Image image ) Sets font cache texture image. void set_texture_offsets ( int cache_index, Vector2i size, int texture_index, PackedInt32Array offset ) Sets array containing glyph packing data. void set_transform ( int cache_index, Transform2D transform ) Sets 2D transform, applied to the font outlines, can be used for slanting, flipping and rotating glyphs. void set_variation_coordinates ( int cache_index, Dictionary variation_coordinates ) Sets variation coordinates for the specified font cache entry. See Font.get_supported_variation_list for more info.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_fontfile.html


classes/class_csgcombiner3d
-----------------------------------------------------------
CSGCombiner3D Inherits: CSGShape3D < GeometryInstance3D < VisualInstance3D < Node3D < Node < Object A CSG node that allows you to combine other CSG modifiers.  Description For complex arrangements of shapes, it is sometimes needed to add structure to your CSG nodes. The CSGCombiner3D node allows you to create this structure. The node encapsulates the result of the CSG operations of its children. In this way, it is possible to do operations on one set of shapes that are children of one CSGCombiner3D node, and a set of separate operations on a second set of shapes that are children of a second CSGCombiner3D node, and then do an operation that takes the two end results as its input to create the final shape. Note: CSG nodes are intended to be used for level prototyping. Creating CSG nodes has a significant CPU cost compared to creating a MeshInstance3D with a PrimitiveMesh. Moving a CSG node within another CSG node also has a significant CPU cost, so it should be avoided during gameplay.   Tutorials  Prototyping levels with CSG   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_csgcombiner3d.html


classes/class_rectangleshape2d
-----------------------------------------------------------
RectangleShape2D Inherits: Shape2D < Resource < RefCounted < Object A 2D rectangle shape used for physics collision.  Description A 2D rectangle shape, intended for use in physics. Usually used to provide a shape for a CollisionShape2D. Performance: RectangleShape2D is fast to check collisions against. It is faster than CapsuleShape2D, but slower than CircleShape2D.   Tutorials  2D Pong Demo 2D Kinematic Character Demo    Properties  
Vector2 size Vector2(20, 20)     Property Descriptions 
Vector2 size = Vector2(20, 20)
  void set_size ( Vector2 value )
 
Vector2 get_size ( )
  The rectangle's width and height.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_rectangleshape2d.html


classes/class_audiostreamoggvorbis
-----------------------------------------------------------
AudioStreamOggVorbis Inherits: AudioStream < Resource < RefCounted < Object A class representing an Ogg Vorbis audio stream.  Description The AudioStreamOggVorbis class is a specialized AudioStream for handling Ogg Vorbis file formats. It offers functionality for loading and playing back Ogg Vorbis files, as well as managing looping and other playback properties. This class is part of the audio stream system, which also supports WAV files through the AudioStreamWAV class.   Tutorials  Runtime file loading and saving    Properties  
int bar_beats 4  
int beat_count 0  
float bpm 0.0  
bool loop false  
float loop_offset 0.0  
OggPacketSequence packet_sequence      Methods  
AudioStreamOggVorbis load_from_buffer ( PackedByteArray buffer ) static  
AudioStreamOggVorbis load_from_file ( String path ) static     Property Descriptions 
int bar_beats = 4
  void set_bar_beats ( int value )
 
int get_bar_beats ( )
   There is currently no description for this property. Please help us by contributing one!  
int beat_count = 0
  void set_beat_count ( int value )
 
int get_beat_count ( )
   There is currently no description for this property. Please help us by contributing one!  
float bpm = 0.0
  void set_bpm ( float value )
 
float get_bpm ( )
   There is currently no description for this property. Please help us by contributing one!  
bool loop = false
  void set_loop ( bool value )
 
bool has_loop ( )
  If true, the audio will play again from the specified loop_offset once it is done playing. Useful for ambient sounds and background music. 
float loop_offset = 0.0
  void set_loop_offset ( float value )
 
float get_loop_offset ( )
  Time in seconds at which the stream starts after being looped. 
OggPacketSequence packet_sequence  void set_packet_sequence ( OggPacketSequence value )
 
OggPacketSequence get_packet_sequence ( )
  Contains the raw Ogg data for this stream.   Method Descriptions 
AudioStreamOggVorbis load_from_buffer ( PackedByteArray buffer ) static
 Creates a new AudioStreamOggVorbis instance from the given buffer. The buffer must contain Ogg Vorbis data. 
AudioStreamOggVorbis load_from_file ( String path ) static
 Creates a new AudioStreamOggVorbis instance from the given file path. The file must be in Ogg Vorbis format.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiostreamoggvorbis.html


classes/class_vehiclebody3d
-----------------------------------------------------------
VehicleBody3D Inherits: RigidBody3D < PhysicsBody3D < CollisionObject3D < Node3D < Node < Object A 3D physics body that simulates the behavior of a car.  Description This physics body implements all the physics logic needed to simulate a car. It is based on the raycast vehicle system commonly found in physics engines. Aside from a CollisionShape3D for the main body of the vehicle, you must also add a VehicleWheel3D node for each wheel. You should also add a MeshInstance3D to this node for the 3D model of the vehicle, but this model should generally not include meshes for the wheels. You can control the vehicle by using the brake, engine_force, and steering properties. The position or orientation of this node shouldn't be changed directly. Note: The origin point of your VehicleBody3D will determine the center of gravity of your vehicle. To make the vehicle more grounded, the origin point is usually kept low, moving the CollisionShape3D and MeshInstance3D upwards. Note: This class has known issues and isn't designed to provide realistic 3D vehicle physics. If you want advanced vehicle physics, you may have to write your own physics integration using CharacterBody3D or RigidBody3D.   Tutorials  3D Truck Town Demo    Properties  
float brake 0.0  
float engine_force 0.0  
float mass 40.0 (overrides RigidBody3D)  
float steering 0.0     Property Descriptions 
float brake = 0.0
  void set_brake ( float value )
 
float get_brake ( )
  Slows down the vehicle by applying a braking force. The vehicle is only slowed down if the wheels are in contact with a surface. The force you need to apply to adequately slow down your vehicle depends on the RigidBody3D.mass of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 30 range for hard braking. 
float engine_force = 0.0
  void set_engine_force ( float value )
 
float get_engine_force ( )
  Accelerates the vehicle by applying an engine force. The vehicle is only sped up if the wheels that have VehicleWheel3D.use_as_traction set to true and are in contact with a surface. The RigidBody3D.mass of the vehicle has an effect on the acceleration of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 50 range for acceleration. Note: The simulation does not take the effect of gears into account, you will need to add logic for this if you wish to simulate gears. A negative value will result in the vehicle reversing. 
float steering = 0.0
  void set_steering ( float value )
 
float get_steering ( )
  The steering angle for the vehicle. Setting this to a non-zero value will result in the vehicle turning when it's moving. Wheels that have VehicleWheel3D.use_as_steering set to true will automatically be rotated. Note: This property is edited in the inspector in degrees. In code the property is set in radians.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_vehiclebody3d.html


classes/class_occluder3d
-----------------------------------------------------------
Occluder3D Inherits: Resource < RefCounted < Object Inherited By: ArrayOccluder3D, BoxOccluder3D, PolygonOccluder3D, QuadOccluder3D, SphereOccluder3D Occluder shape resource for use with occlusion culling in OccluderInstance3D.  Description Occluder3D stores an occluder shape that can be used by the engine's occlusion culling system. See OccluderInstance3D's documentation for instructions on setting up occlusion culling.   Tutorials  Occlusion culling    Methods  
PackedInt32Array get_indices ( ) const  
PackedVector3Array get_vertices ( ) const     Method Descriptions 
PackedInt32Array get_indices ( ) const
 Returns the occluder shape's vertex indices. 
PackedVector3Array get_vertices ( ) const
 Returns the occluder shape's vertex positions.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_occluder3d.html


classes/class_optionbutton
-----------------------------------------------------------
OptionButton Inherits: Button < BaseButton < Control < CanvasItem < Node < Object A button that brings up a dropdown with selectable options when pressed.  Description OptionButton is a type of button that brings up a dropdown with selectable items when pressed. The item selected becomes the "current" item and is displayed as the button text. See also BaseButton which contains common properties and methods associated with this node. Note: The ID values used for items are limited to 32 bits, not full 64 bits of int. This has a range of -2^32 to 2^32 - 1, i.e. -2147483648 to 2147483647. Note: The Button.text and Button.icon properties are set automatically based on the selected item. They shouldn't be changed manually.   Properties  
ActionMode action_mode 0 (overrides BaseButton)  
HorizontalAlignment alignment 0 (overrides Button)  
bool allow_reselect false  
bool fit_to_longest_item true  
int item_count 0  
int selected -1  
bool toggle_mode true (overrides BaseButton)     Methods  
void add_icon_item ( Texture2D texture, String label, int id=-1 )  
void add_item ( String label, int id=-1 )  
void add_separator ( String text="" )  
void clear ( )  
Texture2D get_item_icon ( int idx ) const  
int get_item_id ( int idx ) const  
int get_item_index ( int id ) const  
Variant get_item_metadata ( int idx ) const  
String get_item_text ( int idx ) const  
String get_item_tooltip ( int idx ) const  
PopupMenu get_popup ( ) const  
int get_selectable_item ( bool from_last=false ) const  
int get_selected_id ( ) const  
Variant get_selected_metadata ( ) const  
bool has_selectable_items ( ) const  
bool is_item_disabled ( int idx ) const  
bool is_item_separator ( int idx ) const  
void remove_item ( int idx )  
void select ( int idx )  
void set_disable_shortcuts ( bool disabled )  
void set_item_disabled ( int idx, bool disabled )  
void set_item_icon ( int idx, Texture2D texture )  
void set_item_id ( int idx, int id )  
void set_item_metadata ( int idx, Variant metadata )  
void set_item_text ( int idx, String text )  
void set_item_tooltip ( int idx, String tooltip )  
void show_popup ( )     Theme Properties  
int arrow_margin 4  
int modulate_arrow 0  
Texture2D arrow      Signals item_focused ( int index ) Emitted when the user navigates to an item using the ProjectSettings.input/ui_up or ProjectSettings.input/ui_down input actions. The index of the item selected is passed as argument. item_selected ( int index ) Emitted when the current item has been changed by the user. The index of the item selected is passed as argument. allow_reselect must be enabled to reselect an item.   Property Descriptions 
bool allow_reselect = false
  void set_allow_reselect ( bool value )
 
bool get_allow_reselect ( )
  If true, the currently selected item can be selected again. 
bool fit_to_longest_item = true
  void set_fit_to_longest_item ( bool value )
 
bool is_fit_to_longest_item ( )
  If true, minimum size will be determined by the longest item's text, instead of the currently selected one's. Note: For performance reasons, the minimum size doesn't update immediately when adding, removing or modifying items. 
int item_count = 0
  void set_item_count ( int value )
 
int get_item_count ( )
  The number of items to select from. 
int selected = -1
  
int get_selected ( )
  The index of the currently selected item, or -1 if no item is selected.   Method Descriptions void add_icon_item ( Texture2D texture, String label, int id=-1 ) Adds an item, with a texture icon, text label and (optionally) id. If no id is passed, the item index will be used as the item's ID. New items are appended at the end. void add_item ( String label, int id=-1 ) Adds an item, with text label and (optionally) id. If no id is passed, the item index will be used as the item's ID. New items are appended at the end. void add_separator ( String text="" ) Adds a separator to the list of items. Separators help to group items, and can optionally be given a text header. A separator also gets an index assigned, and is appended at the end of the item list. void clear ( ) Clears all the items in the OptionButton. 
Texture2D get_item_icon ( int idx ) const
 Returns the icon of the item at index idx. 
int get_item_id ( int idx ) const
 Returns the ID of the item at index idx. 
int get_item_index ( int id ) const
 Returns the index of the item with the given id. 
Variant get_item_metadata ( int idx ) const
 Retrieves the metadata of an item. Metadata may be any type and can be used to store extra information about an item, such as an external string ID. 
String get_item_text ( int idx ) const
 Returns the text of the item at index idx. 
String get_item_tooltip ( int idx ) const
 Returns the tooltip of the item at index idx. 
PopupMenu get_popup ( ) const
 Returns the PopupMenu contained in this button. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their Window.visible property. 
int get_selectable_item ( bool from_last=false ) const
 Returns the index of the first item which is not disabled, or marked as a separator. If from_last is true, the items will be searched in reverse order. Returns -1 if no item is found. 
int get_selected_id ( ) const
 Returns the ID of the selected item, or -1 if no item is selected. 
Variant get_selected_metadata ( ) const
 Gets the metadata of the selected item. Metadata for items can be set using set_item_metadata. 
bool has_selectable_items ( ) const
 Returns true if this button contains at least one item which is not disabled, or marked as a separator. 
bool is_item_disabled ( int idx ) const
 Returns true if the item at index idx is disabled. 
bool is_item_separator ( int idx ) const
 Returns true if the item at index idx is marked as a separator. void remove_item ( int idx ) Removes the item at index idx. void select ( int idx ) Selects an item by index and makes it the current item. This will work even if the item is disabled. Passing -1 as the index deselects any currently selected item. void set_disable_shortcuts ( bool disabled ) If true, shortcuts are disabled and cannot be used to trigger the button. void set_item_disabled ( int idx, bool disabled ) Sets whether the item at index idx is disabled. Disabled items are drawn differently in the dropdown and are not selectable by the user. If the current selected item is set as disabled, it will remain selected. void set_item_icon ( int idx, Texture2D texture ) Sets the icon of the item at index idx. void set_item_id ( int idx, int id ) Sets the ID of the item at index idx. void set_item_metadata ( int idx, Variant metadata ) Sets the metadata of an item. Metadata may be of any type and can be used to store extra information about an item, such as an external string ID. void set_item_text ( int idx, String text ) Sets the text of the item at index idx. void set_item_tooltip ( int idx, String tooltip ) Sets the tooltip of the item at index idx. void show_popup ( ) Adjusts popup position and sizing for the OptionButton, then shows the PopupMenu. Prefer this over using get_popup().popup().   Theme Property Descriptions 
int arrow_margin = 4
 The horizontal space between the arrow icon and the right edge of the button. 
int modulate_arrow = 0
 If different than 0, the arrow icon will be modulated to the font color. 
Texture2D arrow The arrow icon to be drawn on the right end of the button.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_optionbutton.html


classes/class_gltfbufferview
-----------------------------------------------------------
GLTFBufferView Inherits: Resource < RefCounted < Object  There is currently no description for this class. Please help us by contributing one!   Tutorials  Runtime file loading and saving    Properties  
int buffer -1  
int byte_length 0  
int byte_offset 0  
int byte_stride -1  
bool indices false     Property Descriptions 
int buffer = -1
  void set_buffer ( int value )
 
int get_buffer ( )
   There is currently no description for this property. Please help us by contributing one!  
int byte_length = 0
  void set_byte_length ( int value )
 
int get_byte_length ( )
   There is currently no description for this property. Please help us by contributing one!  
int byte_offset = 0
  void set_byte_offset ( int value )
 
int get_byte_offset ( )
   There is currently no description for this property. Please help us by contributing one!  
int byte_stride = -1
  void set_byte_stride ( int value )
 
int get_byte_stride ( )
   There is currently no description for this property. Please help us by contributing one!  
bool indices = false
  void set_indices ( bool value )
 
bool get_indices ( )
   There is currently no description for this property. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfbufferview.html


classes/class_texture2drd
-----------------------------------------------------------
Texture2DRD Inherits: Texture2D < Texture < Resource < RefCounted < Object Texture for 2D that is bound to a texture created on the RenderingDevice.  Description This texture class allows you to use a 2D texture created directly on the RenderingDevice as a texture for materials, meshes, etc.   Properties  
bool resource_local_to_scene false (overrides Resource)  
RID texture_rd_rid RID()     Property Descriptions 
RID texture_rd_rid = RID()
  void set_texture_rd_rid ( RID value )
 
RID get_texture_rd_rid ( )
  The RID of the texture object created on the RenderingDevice.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texture2drd.html


classes/class_openxrhand
-----------------------------------------------------------
OpenXRHand Inherits: Node3D < Node < Object Node supporting finger tracking in OpenXR.  Description This node enables OpenXR's hand tracking functionality. The node should be a child node of an XROrigin3D node, tracking will update its position to where the player's actual hand is positioned. This node also updates the skeleton of a properly skinned hand model. The hand mesh should be a child node of this node.   Properties  
Hands hand 0  
NodePath hand_skeleton NodePath("")  
MotionRange motion_range 0     Enumerations enum Hands: 
Hands HAND_LEFT = 0
 Tracking the player's left hand. 
Hands HAND_RIGHT = 1
 Tracking the player's right hand. 
Hands HAND_MAX = 2
 Maximum supported hands. enum MotionRange: 
MotionRange MOTION_RANGE_UNOBSTRUCTED = 0
 When player grips, hand skeleton will form a full fist. 
MotionRange MOTION_RANGE_CONFORM_TO_CONTROLLER = 1
 When player grips, hand skeleton conforms to the controller the player is holding. 
MotionRange MOTION_RANGE_MAX = 2
 Maximum supported motion ranges.   Property Descriptions 
Hands hand = 0
  void set_hand ( Hands value )
 
Hands get_hand ( )
  Specifies whether this node tracks the left or right hand of the player. 
NodePath hand_skeleton = NodePath("")
  void set_hand_skeleton ( NodePath value )
 
NodePath get_hand_skeleton ( )
  Set a Skeleton3D node for which the pose positions will be updated. 
MotionRange motion_range = 0
  void set_motion_range ( MotionRange value )
 
MotionRange get_motion_range ( )
  Set the motion range (if supported) limiting the hand motion.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_openxrhand.html


classes/class_openxractionmap
-----------------------------------------------------------
OpenXRActionMap Inherits: Resource < RefCounted < Object Collection of OpenXRActionSet and OpenXRInteractionProfile resources for the OpenXR module.  Description OpenXR uses an action system similar to Godots Input map system to bind inputs and outputs on various types of XR controllers to named actions. OpenXR specifies more detail on these inputs and outputs than Godot supports. Another important distinction is that OpenXR offers no control over these bindings. The bindings we register are suggestions, it is up to the XR runtime to offer users the ability to change these bindings. This allows the XR runtime to fill in the gaps if new hardware becomes available. The action map therefore needs to be loaded at startup and can't be changed afterwards. This resource is a container for the entire action map.   Properties  
Array action_sets []  
Array interaction_profiles []     Methods  
void add_action_set ( OpenXRActionSet action_set )  
void add_interaction_profile ( OpenXRInteractionProfile interaction_profile )  
void create_default_action_sets ( )  
OpenXRActionSet find_action_set ( String name ) const  
OpenXRInteractionProfile find_interaction_profile ( String name ) const  
OpenXRActionSet get_action_set ( int idx ) const  
int get_action_set_count ( ) const  
OpenXRInteractionProfile get_interaction_profile ( int idx ) const  
int get_interaction_profile_count ( ) const  
void remove_action_set ( OpenXRActionSet action_set )  
void remove_interaction_profile ( OpenXRInteractionProfile interaction_profile )     Property Descriptions 
Array action_sets = []
  void set_action_sets ( Array value )
 
Array get_action_sets ( )
  Collection of OpenXRActionSets that are part of this action map. 
Array interaction_profiles = []
  void set_interaction_profiles ( Array value )
 
Array get_interaction_profiles ( )
  Collection of OpenXRInteractionProfiles that are part of this action map.   Method Descriptions void add_action_set ( OpenXRActionSet action_set ) Add an action set. void add_interaction_profile ( OpenXRInteractionProfile interaction_profile ) Add an interaction profile. void create_default_action_sets ( ) Setup this action set with our default actions. 
OpenXRActionSet find_action_set ( String name ) const
 Retrieve an action set by name. 
OpenXRInteractionProfile find_interaction_profile ( String name ) const
 Find an interaction profile by its name (path). 
OpenXRActionSet get_action_set ( int idx ) const
 Retrieve the action set at this index. 
int get_action_set_count ( ) const
 Retrieve the number of actions sets in our action map. 
OpenXRInteractionProfile get_interaction_profile ( int idx ) const
 Get the interaction profile at this index. 
int get_interaction_profile_count ( ) const
 Retrieve the number of interaction profiles in our action map. void remove_action_set ( OpenXRActionSet action_set ) Remove an action set. void remove_interaction_profile ( OpenXRInteractionProfile interaction_profile ) Remove an interaction profile.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_openxractionmap.html


classes/class_scripteditor
-----------------------------------------------------------
ScriptEditor Inherits: PanelContainer < Container < Control < CanvasItem < Node < Object Godot editor's script editor.  Description Godot editor's script editor. Note: This class shouldn't be instantiated directly. Instead, access the singleton using EditorInterface.get_script_editor.   Methods  
ScriptEditorBase get_current_editor ( ) const  
Script get_current_script ( )  
ScriptEditorBase[] get_open_script_editors ( ) const  
Script[] get_open_scripts ( ) const  
void goto_line ( int line_number )  
void open_script_create_dialog ( String base_name, String base_path )  
void register_syntax_highlighter ( EditorSyntaxHighlighter syntax_highlighter )  
void unregister_syntax_highlighter ( EditorSyntaxHighlighter syntax_highlighter )     Signals editor_script_changed ( Script script ) Emitted when user changed active script. Argument is a freshly activated Script. script_close ( Script script ) Emitted when editor is about to close the active script. Argument is a Script that is going to be closed.   Method Descriptions 
ScriptEditorBase get_current_editor ( ) const
 Returns the ScriptEditorBase object that the user is currently editing. 
Script get_current_script ( ) Returns a Script that is currently active in editor. 
ScriptEditorBase[] get_open_script_editors ( ) const
 Returns an array with all ScriptEditorBase objects which are currently open in editor. 
Script[] get_open_scripts ( ) const
 Returns an array with all Script objects which are currently open in editor. void goto_line ( int line_number ) Goes to the specified line in the current script. void open_script_create_dialog ( String base_name, String base_path ) Opens the script create dialog. The script will extend base_name. The file extension can be omitted from base_path. It will be added based on the selected scripting language. void register_syntax_highlighter ( EditorSyntaxHighlighter syntax_highlighter ) Registers the EditorSyntaxHighlighter to the editor, the EditorSyntaxHighlighter will be available on all open scripts. Note: Does not apply to scripts that are already opened. void unregister_syntax_highlighter ( EditorSyntaxHighlighter syntax_highlighter ) Unregisters the EditorSyntaxHighlighter from the editor. Note: The EditorSyntaxHighlighter will still be applied to scripts that are already opened.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_scripteditor.html


classes/class_audioeffectpitchshift
-----------------------------------------------------------
AudioEffectPitchShift Inherits: AudioEffect < Resource < RefCounted < Object Adds a pitch-shifting audio effect to an audio bus. Raises or lowers the pitch of original sound.  Description Allows modulation of pitch independently of tempo. All frequencies can be increased/decreased with minimal effect on transients.   Tutorials  Audio buses    Properties  
FFTSize fft_size 3  
int oversampling 4  
float pitch_scale 1.0     Enumerations enum FFTSize: 
FFTSize FFT_SIZE_256 = 0
 Use a buffer of 256 samples for the Fast Fourier transform. Lowest latency, but least stable over time. 
FFTSize FFT_SIZE_512 = 1
 Use a buffer of 512 samples for the Fast Fourier transform. Low latency, but less stable over time. 
FFTSize FFT_SIZE_1024 = 2
 Use a buffer of 1024 samples for the Fast Fourier transform. This is a compromise between latency and stability over time. 
FFTSize FFT_SIZE_2048 = 3
 Use a buffer of 2048 samples for the Fast Fourier transform. High latency, but stable over time. 
FFTSize FFT_SIZE_4096 = 4
 Use a buffer of 4096 samples for the Fast Fourier transform. Highest latency, but most stable over time. 
FFTSize FFT_SIZE_MAX = 5
 Represents the size of the FFTSize enum.   Property Descriptions 
FFTSize fft_size = 3
  void set_fft_size ( FFTSize value )
 
FFTSize get_fft_size ( )
  The size of the Fast Fourier transform buffer. Higher values smooth out the effect over time, but have greater latency. The effects of this higher latency are especially noticeable on sounds that have sudden amplitude changes. 
int oversampling = 4
  void set_oversampling ( int value )
 
int get_oversampling ( )
  The oversampling factor to use. Higher values result in better quality, but are more demanding on the CPU and may cause audio cracking if the CPU can't keep up. 
float pitch_scale = 1.0
  void set_pitch_scale ( float value )
 
float get_pitch_scale ( )
  The pitch scale to use. 1.0 is the default pitch and plays sounds unaffected. pitch_scale can range from 0.0 (infinitely low pitch, inaudible) to 16 (16 times higher than the initial pitch).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectpitchshift.html


classes/class_cameraattributesphysical
-----------------------------------------------------------
CameraAttributesPhysical Inherits: CameraAttributes < Resource < RefCounted < Object Physically-based camera settings.  Description CameraAttributesPhysical is used to set rendering settings based on a physically-based camera's settings. It is responsible for exposure, auto-exposure, and depth of field. When used in a WorldEnvironment it provides default settings for exposure, auto-exposure, and depth of field that will be used by all cameras without their own CameraAttributes, including the editor camera. When used in a Camera3D it will override any CameraAttributes set in the WorldEnvironment and will override the Camera3Ds Camera3D.far, Camera3D.near, Camera3D.fov, and Camera3D.keep_aspect properties. When used in VoxelGI or LightmapGI, only the exposure settings will be used. The default settings are intended for use in an outdoor environment, tips for settings for use in an indoor environment can be found in each setting's documentation. Note: Depth of field blur is only supported in the Forward+ and Mobile rendering methods, not Compatibility.   Tutorials  Physical light and camera units    Properties  
float auto_exposure_max_exposure_value 10.0  
float auto_exposure_min_exposure_value -8.0  
float exposure_aperture 16.0  
float exposure_shutter_speed 100.0  
float frustum_far 4000.0  
float frustum_focal_length 35.0  
float frustum_focus_distance 10.0  
float frustum_near 0.05     Methods  
float get_fov ( ) const     Property Descriptions 
float auto_exposure_max_exposure_value = 10.0
  void set_auto_exposure_max_exposure_value ( float value )
 
float get_auto_exposure_max_exposure_value ( )
  The maximum luminance (in EV100) used when calculating auto exposure. When calculating scene average luminance, color values will be clamped to at least this value. This limits the auto-exposure from exposing below a certain brightness, resulting in a cut off point where the scene will remain bright. 
float auto_exposure_min_exposure_value = -8.0
  void set_auto_exposure_min_exposure_value ( float value )
 
float get_auto_exposure_min_exposure_value ( )
  The minimum luminance luminance (in EV100) used when calculating auto exposure. When calculating scene average luminance, color values will be clamped to at least this value. This limits the auto-exposure from exposing above a certain brightness, resulting in a cut off point where the scene will remain dark. 
float exposure_aperture = 16.0
  void set_aperture ( float value )
 
float get_aperture ( )
  Size of the aperture of the camera, measured in f-stops. An f-stop is a unitless ratio between the focal length of the camera and the diameter of the aperture. A high aperture setting will result in a smaller aperture which leads to a dimmer image and sharper focus. A low aperture results in a wide aperture which lets in more light resulting in a brighter, less-focused image. Default is appropriate for outdoors at daytime (i.e. for use with a default DirectionalLight3D), for indoor lighting, a value between 2 and 4 is more appropriate. Only available when ProjectSettings.rendering/lights_and_shadows/use_physical_light_units is enabled. 
float exposure_shutter_speed = 100.0
  void set_shutter_speed ( float value )
 
float get_shutter_speed ( )
  Time for shutter to open and close, evaluated as 1 / shutter_speed seconds. A higher value will allow less light (leading to a darker image), while a lower value will allow more light (leading to a brighter image). Only available when ProjectSettings.rendering/lights_and_shadows/use_physical_light_units is enabled. 
float frustum_far = 4000.0
  void set_far ( float value )
 
float get_far ( )
  Override value for Camera3D.far. Used internally when calculating depth of field. When attached to a Camera3D as its Camera3D.attributes, it will override the Camera3D.far property. 
float frustum_focal_length = 35.0
  void set_focal_length ( float value )
 
float get_focal_length ( )
  Distance between camera lens and camera aperture, measured in millimeters. Controls field of view and depth of field. A larger focal length will result in a smaller field of view and a narrower depth of field meaning fewer objects will be in focus. A smaller focal length will result in a wider field of view and a larger depth of field meaning more objects will be in focus. When attached to a Camera3D as its Camera3D.attributes, it will override the Camera3D.fov property and the Camera3D.keep_aspect property. 
float frustum_focus_distance = 10.0
  void set_focus_distance ( float value )
 
float get_focus_distance ( )
  Distance from camera of object that will be in focus, measured in meters. Internally this will be clamped to be at least 1 millimeter larger than frustum_focal_length. 
float frustum_near = 0.05
  void set_near ( float value )
 
float get_near ( )
  Override value for Camera3D.near. Used internally when calculating depth of field. When attached to a Camera3D as its Camera3D.attributes, it will override the Camera3D.near property.   Method Descriptions 
float get_fov ( ) const
 Returns the vertical field of view that corresponds to the frustum_focal_length. This value is calculated internally whenever frustum_focal_length is changed.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_cameraattributesphysical.html


classes/class_animationnodesync
-----------------------------------------------------------
AnimationNodeSync Inherits: AnimationNode < Resource < RefCounted < Object Inherited By: AnimationNodeAdd2, AnimationNodeAdd3, AnimationNodeBlend2, AnimationNodeBlend3, AnimationNodeOneShot, AnimationNodeSub2, AnimationNodeTransition Base class for AnimationNodes with more than two input ports that must be synchronized.  Description An animation node used to combine, mix, or blend two or more animations together while keeping them synchronized within an AnimationTree.   Tutorials  Using AnimationTree    Properties  
bool sync false     Property Descriptions 
bool sync = false
  void set_use_sync ( bool value )
 
bool is_using_sync ( )
  If false, the blended animations' frame are stopped when the blend value is 0. If true, forcing the blended animations to advance frame.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodesync.html


classes/class_animationtree
-----------------------------------------------------------
AnimationTree Inherits: AnimationMixer < Node < Object A node used for advanced animation transitions in an AnimationPlayer.  Description A node used for advanced animation transitions in an AnimationPlayer. Note: When linked with an AnimationPlayer, several properties and methods of the corresponding AnimationPlayer will not function as expected. Playback and transitions should be handled using only the AnimationTree and its constituent AnimationNode(s). The AnimationPlayer node should be used solely for adding, deleting, and editing animations.   Tutorials  Using AnimationTree Third Person Shooter Demo    Properties  
NodePath advance_expression_base_node NodePath(".")  
NodePath anim_player NodePath("")  
bool deterministic true (overrides AnimationMixer)  
AnimationRootNode tree_root      Methods  
AnimationProcessCallback get_process_callback ( ) const  
void set_process_callback ( AnimationProcessCallback mode )     Signals animation_player_changed ( ) Emitted when the anim_player is changed.   Enumerations enum AnimationProcessCallback: 
AnimationProcessCallback ANIMATION_PROCESS_PHYSICS = 0
 For backward compatibility. See AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS. 
AnimationProcessCallback ANIMATION_PROCESS_IDLE = 1
 For backward compatibility. See AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_IDLE. 
AnimationProcessCallback ANIMATION_PROCESS_MANUAL = 2
 For backward compatibility. See AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_MANUAL.   Property Descriptions 
NodePath advance_expression_base_node = NodePath(".")
  void set_advance_expression_base_node ( NodePath value )
 
NodePath get_advance_expression_base_node ( )
  The path to the Node used to evaluate the AnimationNode Expression if one is not explicitly specified internally. 
NodePath anim_player = NodePath("")
  void set_animation_player ( NodePath value )
 
NodePath get_animation_player ( )
  The path to the AnimationPlayer used for animating. 
AnimationRootNode tree_root  void set_tree_root ( AnimationRootNode value )
 
AnimationRootNode get_tree_root ( )
  The root animation node of this AnimationTree. See AnimationRootNode.   Method Descriptions 
AnimationProcessCallback get_process_callback ( ) const
 For backward compatibility. See AnimationCallbackModeProcess. void set_process_callback ( AnimationProcessCallback mode ) For backward compatibility. See AnimationCallbackModeProcess.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationtree.html


classes/class_inputeventmagnifygesture
-----------------------------------------------------------
InputEventMagnifyGesture Inherits: InputEventGesture < InputEventWithModifiers < InputEventFromWindow < InputEvent < Resource < RefCounted < Object Represents a magnifying touch gesture.  Description Stores the factor of a magnifying touch gesture. This is usually performed when the user pinches the touch screen and used for zooming in/out. Note: On Android, this requires the ProjectSettings.input_devices/pointing/android/enable_pan_and_scale_gestures project setting to be enabled.   Tutorials  Using InputEvent    Properties  
float factor 1.0     Property Descriptions 
float factor = 1.0
  void set_factor ( float value )
 
float get_factor ( )
  The amount (or delta) of the event. This value is closer to 1.0 the slower the gesture is performed.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventmagnifygesture.html


classes/class_characterbody3d
-----------------------------------------------------------
CharacterBody3D Inherits: PhysicsBody3D < CollisionObject3D < Node3D < Node < Object A 3D physics body specialized for characters moved by script.  Description CharacterBody3D is a specialized class for physics bodies that are meant to be user-controlled. They are not affected by physics at all, but they affect other physics bodies in their path. They are mainly used to provide high-level API to move objects with wall and slope detection (move_and_slide method) in addition to the general collision detection provided by PhysicsBody3D.move_and_collide. This makes it useful for highly configurable physics bodies that must move in specific ways and collide with the world, as is often the case with user-controlled characters. For game objects that don't require complex movement or collision detection, such as moving platforms, AnimatableBody3D is simpler to configure.   Tutorials  Kinematic character (2D) 3D Kinematic Character Demo 3D Platformer Demo 3D Voxel Demo Third Person Shooter Demo    Properties  
bool floor_block_on_wall true  
bool floor_constant_speed false  
float floor_max_angle 0.785398  
float floor_snap_length 0.1  
bool floor_stop_on_slope true  
int max_slides 6  
MotionMode motion_mode 0  
int platform_floor_layers 4294967295  
PlatformOnLeave platform_on_leave 0  
int platform_wall_layers 0  
float safe_margin 0.001  
bool slide_on_ceiling true  
Vector3 up_direction Vector3(0, 1, 0)  
Vector3 velocity Vector3(0, 0, 0)  
float wall_min_slide_angle 0.261799     Methods  
void apply_floor_snap ( )  
float get_floor_angle ( Vector3 up_direction=Vector3(0, 1, 0) ) const  
Vector3 get_floor_normal ( ) const  
Vector3 get_last_motion ( ) const  
KinematicCollision3D get_last_slide_collision ( )  
Vector3 get_platform_angular_velocity ( ) const  
Vector3 get_platform_velocity ( ) const  
Vector3 get_position_delta ( ) const  
Vector3 get_real_velocity ( ) const  
KinematicCollision3D get_slide_collision ( int slide_idx )  
int get_slide_collision_count ( ) const  
Vector3 get_wall_normal ( ) const  
bool is_on_ceiling ( ) const  
bool is_on_ceiling_only ( ) const  
bool is_on_floor ( ) const  
bool is_on_floor_only ( ) const  
bool is_on_wall ( ) const  
bool is_on_wall_only ( ) const  
bool move_and_slide ( )     Enumerations enum MotionMode: 
MotionMode MOTION_MODE_GROUNDED = 0
 Apply when notions of walls, ceiling and floor are relevant. In this mode the body motion will react to slopes (acceleration/slowdown). This mode is suitable for grounded games like platformers. 
MotionMode MOTION_MODE_FLOATING = 1
 Apply when there is no notion of floor or ceiling. All collisions will be reported as on_wall. In this mode, when you slide, the speed will always be constant. This mode is suitable for games without ground like space games. enum PlatformOnLeave: 
PlatformOnLeave PLATFORM_ON_LEAVE_ADD_VELOCITY = 0
 Add the last platform velocity to the velocity when you leave a moving platform. 
PlatformOnLeave PLATFORM_ON_LEAVE_ADD_UPWARD_VELOCITY = 1
 Add the last platform velocity to the velocity when you leave a moving platform, but any downward motion is ignored. It's useful to keep full jump height even when the platform is moving down. 
PlatformOnLeave PLATFORM_ON_LEAVE_DO_NOTHING = 2
 Do nothing when leaving a platform.   Property Descriptions 
bool floor_block_on_wall = true
  void set_floor_block_on_wall_enabled ( bool value )
 
bool is_floor_block_on_wall_enabled ( )
  If true, the body will be able to move on the floor only. This option avoids to be able to walk on walls, it will however allow to slide down along them. 
bool floor_constant_speed = false
  void set_floor_constant_speed_enabled ( bool value )
 
bool is_floor_constant_speed_enabled ( )
  If false (by default), the body will move faster on downward slopes and slower on upward slopes. If true, the body will always move at the same speed on the ground no matter the slope. Note that you need to use floor_snap_length to stick along a downward slope at constant speed. 
float floor_max_angle = 0.785398
  void set_floor_max_angle ( float value )
 
float get_floor_max_angle ( )
  Maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall, when calling move_and_slide. The default value equals 45 degrees. 
float floor_snap_length = 0.1
  void set_floor_snap_length ( float value )
 
float get_floor_snap_length ( )
  Sets a snapping distance. When set to a value different from 0.0, the body is kept attached to slopes when calling move_and_slide. The snapping vector is determined by the given distance along the opposite direction of the up_direction. As long as the snapping vector is in contact with the ground and the body moves against up_direction, the body will remain attached to the surface. Snapping is not applied if the body moves along up_direction, meaning it contains vertical rising velocity, so it will be able to detach from the ground when jumping or when the body is pushed up by something. If you want to apply a snap without taking into account the velocity, use apply_floor_snap. 
bool floor_stop_on_slope = true
  void set_floor_stop_on_slope_enabled ( bool value )
 
bool is_floor_stop_on_slope_enabled ( )
  If true, the body will not slide on slopes when calling move_and_slide when the body is standing still. If false, the body will slide on floor's slopes when velocity applies a downward force. 
int max_slides = 6
  void set_max_slides ( int value )
 
int get_max_slides ( )
  Maximum number of times the body can change direction before it stops when calling move_and_slide. 
MotionMode motion_mode = 0
  void set_motion_mode ( MotionMode value )
 
MotionMode get_motion_mode ( )
  Sets the motion mode which defines the behavior of move_and_slide. See MotionMode constants for available modes. 
int platform_floor_layers = 4294967295
  void set_platform_floor_layers ( int value )
 
int get_platform_floor_layers ( )
  Collision layers that will be included for detecting floor bodies that will act as moving platforms to be followed by the CharacterBody3D. By default, all floor bodies are detected and propagate their velocity. 
PlatformOnLeave platform_on_leave = 0
  void set_platform_on_leave ( PlatformOnLeave value )
 
PlatformOnLeave get_platform_on_leave ( )
  Sets the behavior to apply when you leave a moving platform. By default, to be physically accurate, when you leave the last platform velocity is applied. See PlatformOnLeave constants for available behavior. 
int platform_wall_layers = 0
  void set_platform_wall_layers ( int value )
 
int get_platform_wall_layers ( )
  Collision layers that will be included for detecting wall bodies that will act as moving platforms to be followed by the CharacterBody3D. By default, all wall bodies are ignored. 
float safe_margin = 0.001
  void set_safe_margin ( float value )
 
float get_safe_margin ( )
  Extra margin used for collision recovery when calling move_and_slide. If the body is at least this close to another body, it will consider them to be colliding and will be pushed away before performing the actual motion. A higher value means it's more flexible for detecting collision, which helps with consistently detecting walls and floors. A lower value forces the collision algorithm to use more exact detection, so it can be used in cases that specifically require precision, e.g at very low scale to avoid visible jittering, or for stability with a stack of character bodies. 
bool slide_on_ceiling = true
  void set_slide_on_ceiling_enabled ( bool value )
 
bool is_slide_on_ceiling_enabled ( )
  If true, during a jump against the ceiling, the body will slide, if false it will be stopped and will fall vertically. 
Vector3 up_direction = Vector3(0, 1, 0)
  void set_up_direction ( Vector3 value )
 
Vector3 get_up_direction ( )
  Vector pointing upwards, used to determine what is a wall and what is a floor (or a ceiling) when calling move_and_slide. Defaults to Vector3.UP. As the vector will be normalized it can't be equal to Vector3.ZERO, if you want all collisions to be reported as walls, consider using MOTION_MODE_FLOATING as motion_mode. 
Vector3 velocity = Vector3(0, 0, 0)
  void set_velocity ( Vector3 value )
 
Vector3 get_velocity ( )
  Current velocity vector (typically meters per second), used and modified during calls to move_and_slide. 
float wall_min_slide_angle = 0.261799
  void set_wall_min_slide_angle ( float value )
 
float get_wall_min_slide_angle ( )
  Minimum angle (in radians) where the body is allowed to slide when it encounters a slope. The default value equals 15 degrees. When motion_mode is MOTION_MODE_GROUNDED, it only affects movement if floor_block_on_wall is true.   Method Descriptions void apply_floor_snap ( ) Allows to manually apply a snap to the floor regardless of the body's velocity. This function does nothing when is_on_floor returns true. 
float get_floor_angle ( Vector3 up_direction=Vector3(0, 1, 0) ) const
 Returns the floor's collision angle at the last collision point according to up_direction, which is Vector3.UP by default. This value is always positive and only valid after calling move_and_slide and when is_on_floor returns true. 
Vector3 get_floor_normal ( ) const
 Returns the surface normal of the floor at the last collision point. Only valid after calling move_and_slide and when is_on_floor returns true. 
Vector3 get_last_motion ( ) const
 Returns the last motion applied to the CharacterBody3D during the last call to move_and_slide. The movement can be split into multiple motions when sliding occurs, and this method return the last one, which is useful to retrieve the current direction of the movement. 
KinematicCollision3D get_last_slide_collision ( ) Returns a KinematicCollision3D, which contains information about the latest collision that occurred during the last call to move_and_slide. 
Vector3 get_platform_angular_velocity ( ) const
 Returns the angular velocity of the platform at the last collision point. Only valid after calling move_and_slide. 
Vector3 get_platform_velocity ( ) const
 Returns the linear velocity of the platform at the last collision point. Only valid after calling move_and_slide. 
Vector3 get_position_delta ( ) const
 Returns the travel (position delta) that occurred during the last call to move_and_slide. 
Vector3 get_real_velocity ( ) const
 Returns the current real velocity since the last call to move_and_slide. For example, when you climb a slope, you will move diagonally even though the velocity is horizontal. This method returns the diagonal movement, as opposed to velocity which returns the requested velocity. 
KinematicCollision3D get_slide_collision ( int slide_idx ) Returns a KinematicCollision3D, which contains information about a collision that occurred during the last call to move_and_slide. Since the body can collide several times in a single call to move_and_slide, you must specify the index of the collision in the range 0 to (get_slide_collision_count - 1). 
int get_slide_collision_count ( ) const
 Returns the number of times the body collided and changed direction during the last call to move_and_slide. 
Vector3 get_wall_normal ( ) const
 Returns the surface normal of the wall at the last collision point. Only valid after calling move_and_slide and when is_on_wall returns true. 
bool is_on_ceiling ( ) const
 Returns true if the body collided with the ceiling on the last call of move_and_slide. Otherwise, returns false. The up_direction and floor_max_angle are used to determine whether a surface is "ceiling" or not. 
bool is_on_ceiling_only ( ) const
 Returns true if the body collided only with the ceiling on the last call of move_and_slide. Otherwise, returns false. The up_direction and floor_max_angle are used to determine whether a surface is "ceiling" or not. 
bool is_on_floor ( ) const
 Returns true if the body collided with the floor on the last call of move_and_slide. Otherwise, returns false. The up_direction and floor_max_angle are used to determine whether a surface is "floor" or not. 
bool is_on_floor_only ( ) const
 Returns true if the body collided only with the floor on the last call of move_and_slide. Otherwise, returns false. The up_direction and floor_max_angle are used to determine whether a surface is "floor" or not. 
bool is_on_wall ( ) const
 Returns true if the body collided with a wall on the last call of move_and_slide. Otherwise, returns false. The up_direction and floor_max_angle are used to determine whether a surface is "wall" or not. 
bool is_on_wall_only ( ) const
 Returns true if the body collided only with a wall on the last call of move_and_slide. Otherwise, returns false. The up_direction and floor_max_angle are used to determine whether a surface is "wall" or not. 
bool move_and_slide ( ) Moves the body based on velocity. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a CharacterBody3D or RigidBody3D, it will also be affected by the motion of the other body. You can use this to make moving and rotating platforms, or to make nodes push other nodes. Modifies velocity if a slide collision occurred. To get the latest collision call get_last_slide_collision, for more detailed information about collisions that occurred, use get_slide_collision. When the body touches a moving platform, the platform's velocity is automatically added to the body motion. If a collision occurs due to the platform's motion, it will always be first in the slide collisions. Returns true if the body collided, otherwise, returns false.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_characterbody3d.html


classes/class_videostream
-----------------------------------------------------------
VideoStream Inherits: Resource < RefCounted < Object Inherited By: VideoStreamTheora Base resource for video streams.  Description Base resource type for all video streams. Classes that derive from VideoStream can all be used as resource types to play back videos in VideoStreamPlayer.   Tutorials  Playing videos Runtime file loading and saving    Properties  
String file ""     Methods  
VideoStreamPlayback _instantiate_playback ( ) virtual     Property Descriptions 
String file = ""
  void set_file ( String value )
 
String get_file ( )
  The video file path or URI that this VideoStream resource handles. For VideoStreamTheora, this filename should be an Ogg Theora video file with the .ogv extension.   Method Descriptions 
VideoStreamPlayback _instantiate_playback ( ) virtual
 Called when the video starts playing, to initialize and return a subclass of VideoStreamPlayback.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_videostream.html


classes/class_standardmaterial3d
-----------------------------------------------------------
StandardMaterial3D Inherits: BaseMaterial3D < Material < Resource < RefCounted < Object A PBR (Physically Based Rendering) material to be used on 3D objects.  Description StandardMaterial3D's properties are inherited from BaseMaterial3D. StandardMaterial3D uses separate textures for ambient occlusion, roughness and metallic maps. To use a single ORM map for all 3 textures, use an ORMMaterial3D instead.   Tutorials  Standard Material 3D and ORM Material 3D   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_standardmaterial3d.html


classes/class_dampedspringjoint2d
-----------------------------------------------------------
DampedSpringJoint2D Inherits: Joint2D < Node2D < CanvasItem < Node < Object A physics joint that connects two 2D physics bodies with a spring-like force.  Description A physics joint that connects two 2D physics bodies with a spring-like force. This resembles a spring that always wants to stretch to a given length.   Properties  
float damping 1.0  
float length 50.0  
float rest_length 0.0  
float stiffness 20.0     Property Descriptions 
float damping = 1.0
  void set_damping ( float value )
 
float get_damping ( )
  The spring joint's damping ratio. A value between 0 and 1. When the two bodies move into different directions the system tries to align them to the spring axis again. A high damping value forces the attached bodies to align faster. 
float length = 50.0
  void set_length ( float value )
 
float get_length ( )
  The spring joint's maximum length. The two attached bodies cannot stretch it past this value. 
float rest_length = 0.0
  void set_rest_length ( float value )
 
float get_rest_length ( )
  When the bodies attached to the spring joint move they stretch or squash it. The joint always tries to resize towards this length. 
float stiffness = 20.0
  void set_stiffness ( float value )
 
float get_stiffness ( )
  The higher the value, the less the bodies attached to the joint will deform it. The joint applies an opposing force to the bodies, the product of the stiffness multiplied by the size difference from its resting length.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_dampedspringjoint2d.html


classes/class_videostreamtheora
-----------------------------------------------------------
VideoStreamTheora Inherits: VideoStream < Resource < RefCounted < Object VideoStream resource for Ogg Theora videos.  Description VideoStream resource handling the Ogg Theora video format with .ogv extension. The Theora codec is decoded on the CPU. Note: While Ogg Theora videos can also have an .ogg extension, you will have to rename the extension to .ogv to use those videos within Godot.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_videostreamtheora.html


classes/class_camera2d
-----------------------------------------------------------
Camera2D Inherits: Node2D < CanvasItem < Node < Object Camera node for 2D scenes.  Description Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of CanvasItem-based nodes. Cameras register themselves in the nearest Viewport node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport. This node is intended to be a simple helper to get things going quickly, but more functionality may be desired to change how the camera works. To make your own custom camera node, inherit it from Node2D and change the transform of the canvas by setting Viewport.canvas_transform in Viewport (you can obtain the current Viewport by using Node.get_viewport). Note that the Camera2D node's position doesn't represent the actual position of the screen, which may differ due to applied smoothing or limits. You can use get_screen_center_position to get the real position.   Tutorials  2D Platformer Demo 2D Isometric Demo 2D HDR Demo    Properties  
AnchorMode anchor_mode 1  
Node custom_viewport   
float drag_bottom_margin 0.2  
bool drag_horizontal_enabled false  
float drag_horizontal_offset 0.0  
float drag_left_margin 0.2  
float drag_right_margin 0.2  
float drag_top_margin 0.2  
bool drag_vertical_enabled false  
float drag_vertical_offset 0.0  
bool editor_draw_drag_margin false  
bool editor_draw_limits false  
bool editor_draw_screen true  
bool enabled true  
bool ignore_rotation true  
int limit_bottom 10000000  
int limit_left -10000000  
int limit_right 10000000  
bool limit_smoothed false  
int limit_top -10000000  
Vector2 offset Vector2(0, 0)  
bool position_smoothing_enabled false  
float position_smoothing_speed 5.0  
Camera2DProcessCallback process_callback 1  
bool rotation_smoothing_enabled false  
float rotation_smoothing_speed 5.0  
Vector2 zoom Vector2(1, 1)     Methods  
void align ( )  
void force_update_scroll ( )  
float get_drag_margin ( Side margin ) const  
int get_limit ( Side margin ) const  
Vector2 get_screen_center_position ( ) const  
Vector2 get_target_position ( ) const  
bool is_current ( ) const  
void make_current ( )  
void reset_smoothing ( )  
void set_drag_margin ( Side margin, float drag_margin )  
void set_limit ( Side margin, int limit )     Enumerations enum AnchorMode: 
AnchorMode ANCHOR_MODE_FIXED_TOP_LEFT = 0
 The camera's position is fixed so that the top-left corner is always at the origin. 
AnchorMode ANCHOR_MODE_DRAG_CENTER = 1
 The camera's position takes into account vertical/horizontal offsets and the screen size. enum Camera2DProcessCallback: 
Camera2DProcessCallback CAMERA2D_PROCESS_PHYSICS = 0
 The camera updates during physics frames (see Node.NOTIFICATION_INTERNAL_PHYSICS_PROCESS). 
Camera2DProcessCallback CAMERA2D_PROCESS_IDLE = 1
 The camera updates during process frames (see Node.NOTIFICATION_INTERNAL_PROCESS).   Property Descriptions 
AnchorMode anchor_mode = 1
  void set_anchor_mode ( AnchorMode value )
 
AnchorMode get_anchor_mode ( )
  The Camera2D's anchor point. See AnchorMode constants. 
Node custom_viewport  void set_custom_viewport ( Node value )
 
Node get_custom_viewport ( )
  The custom Viewport node attached to the Camera2D. If null or not a Viewport, uses the default viewport instead. 
float drag_bottom_margin = 0.2
  void set_drag_margin ( Side margin, float drag_margin )
 
float get_drag_margin ( Side margin ) const
  Bottom margin needed to drag the camera. A value of 1 makes the camera move only when reaching the bottom edge of the screen. 
bool drag_horizontal_enabled = false
  void set_drag_horizontal_enabled ( bool value )
 
bool is_drag_horizontal_enabled ( )
  If true, the camera only moves when reaching the horizontal (left and right) drag margins. If false, the camera moves horizontally regardless of margins. 
float drag_horizontal_offset = 0.0
  void set_drag_horizontal_offset ( float value )
 
float get_drag_horizontal_offset ( )
  The relative horizontal drag offset of the camera between the right (-1) and left (1) drag margins. Note: Used to set the initial horizontal drag offset; determine the current offset; or force the current offset. It's not automatically updated when drag_horizontal_enabled is true or the drag margins are changed. 
float drag_left_margin = 0.2
  void set_drag_margin ( Side margin, float drag_margin )
 
float get_drag_margin ( Side margin ) const
  Left margin needed to drag the camera. A value of 1 makes the camera move only when reaching the left edge of the screen. 
float drag_right_margin = 0.2
  void set_drag_margin ( Side margin, float drag_margin )
 
float get_drag_margin ( Side margin ) const
  Right margin needed to drag the camera. A value of 1 makes the camera move only when reaching the right edge of the screen. 
float drag_top_margin = 0.2
  void set_drag_margin ( Side margin, float drag_margin )
 
float get_drag_margin ( Side margin ) const
  Top margin needed to drag the camera. A value of 1 makes the camera move only when reaching the top edge of the screen. 
bool drag_vertical_enabled = false
  void set_drag_vertical_enabled ( bool value )
 
bool is_drag_vertical_enabled ( )
  If true, the camera only moves when reaching the vertical (top and bottom) drag margins. If false, the camera moves vertically regardless of the drag margins. 
float drag_vertical_offset = 0.0
  void set_drag_vertical_offset ( float value )
 
float get_drag_vertical_offset ( )
  The relative vertical drag offset of the camera between the bottom (-1) and top (1) drag margins. Note: Used to set the initial vertical drag offset; determine the current offset; or force the current offset. It's not automatically updated when drag_vertical_enabled is true or the drag margins are changed. 
bool editor_draw_drag_margin = false
  void set_margin_drawing_enabled ( bool value )
 
bool is_margin_drawing_enabled ( )
  If true, draws the camera's drag margin rectangle in the editor. 
bool editor_draw_limits = false
  void set_limit_drawing_enabled ( bool value )
 
bool is_limit_drawing_enabled ( )
  If true, draws the camera's limits rectangle in the editor. 
bool editor_draw_screen = true
  void set_screen_drawing_enabled ( bool value )
 
bool is_screen_drawing_enabled ( )
  If true, draws the camera's screen rectangle in the editor. 
bool enabled = true
  void set_enabled ( bool value )
 
bool is_enabled ( )
  Controls whether the camera can be active or not. If true, the Camera2D will become the main camera when it enters the scene tree and there is no active camera currently (see Viewport.get_camera_2d). When the camera is currently active and enabled is set to false, the next enabled Camera2D in the scene tree will become active. 
bool ignore_rotation = true
  void set_ignore_rotation ( bool value )
 
bool is_ignoring_rotation ( )
  If true, the camera's rendered view is not affected by its Node2D.rotation and Node2D.global_rotation. 
int limit_bottom = 10000000
  void set_limit ( Side margin, int limit )
 
int get_limit ( Side margin ) const
  Bottom scroll limit in pixels. The camera stops moving when reaching this value, but offset can push the view past the limit. 
int limit_left = -10000000
  void set_limit ( Side margin, int limit )
 
int get_limit ( Side margin ) const
  Left scroll limit in pixels. The camera stops moving when reaching this value, but offset can push the view past the limit. 
int limit_right = 10000000
  void set_limit ( Side margin, int limit )
 
int get_limit ( Side margin ) const
  Right scroll limit in pixels. The camera stops moving when reaching this value, but offset can push the view past the limit. 
bool limit_smoothed = false
  void set_limit_smoothing_enabled ( bool value )
 
bool is_limit_smoothing_enabled ( )
  If true, the camera smoothly stops when reaches its limits. This property has no effect if position_smoothing_enabled is false. Note: To immediately update the camera's position to be within limits without smoothing, even with this setting enabled, invoke reset_smoothing. 
int limit_top = -10000000
  void set_limit ( Side margin, int limit )
 
int get_limit ( Side margin ) const
  Top scroll limit in pixels. The camera stops moving when reaching this value, but offset can push the view past the limit. 
Vector2 offset = Vector2(0, 0)
  void set_offset ( Vector2 value )
 
Vector2 get_offset ( )
  The camera's relative offset. Useful for looking around or camera shake animations. The offsetted camera can go past the limits defined in limit_top, limit_bottom, limit_left and limit_right. 
bool position_smoothing_enabled = false
  void set_position_smoothing_enabled ( bool value )
 
bool is_position_smoothing_enabled ( )
  If true, the camera's view smoothly moves towards its target position at position_smoothing_speed. 
float position_smoothing_speed = 5.0
  void set_position_smoothing_speed ( float value )
 
float get_position_smoothing_speed ( )
  Speed in pixels per second of the camera's smoothing effect when position_smoothing_enabled is true. 
Camera2DProcessCallback process_callback = 1
  void set_process_callback ( Camera2DProcessCallback value )
 
Camera2DProcessCallback get_process_callback ( )
  The camera's process callback. See Camera2DProcessCallback. 
bool rotation_smoothing_enabled = false
  void set_rotation_smoothing_enabled ( bool value )
 
bool is_rotation_smoothing_enabled ( )
  If true, the camera's view smoothly rotates, via asymptotic smoothing, to align with its target rotation at rotation_smoothing_speed. Note: This property has no effect if ignore_rotation is true. 
float rotation_smoothing_speed = 5.0
  void set_rotation_smoothing_speed ( float value )
 
float get_rotation_smoothing_speed ( )
  The angular, asymptotic speed of the camera's rotation smoothing effect when rotation_smoothing_enabled is true. 
Vector2 zoom = Vector2(1, 1)
  void set_zoom ( Vector2 value )
 
Vector2 get_zoom ( )
  The camera's zoom. A zoom of Vector(2, 2) doubles the size seen in the viewport. A zoom of Vector(0.5, 0.5) halves the size seen in the viewport. Note: FontFile.oversampling does not take Camera2D zoom into account. This means that zooming in/out will cause bitmap fonts and rasterized (non-MSDF) dynamic fonts to appear blurry or pixelated unless the font is part of a CanvasLayer that makes it ignore camera zoom. To ensure text remains crisp regardless of zoom, you can enable MSDF font rendering by enabling ProjectSettings.gui/theme/default_font_multichannel_signed_distance_field (applies to the default project font only), or enabling Multichannel Signed Distance Field in the import options of a DynamicFont for custom fonts. On system fonts, SystemFont.multichannel_signed_distance_field can be enabled in the inspector.   Method Descriptions void align ( ) Aligns the camera to the tracked node. void force_update_scroll ( ) Forces the camera to update scroll immediately. 
float get_drag_margin ( Side margin ) const
 Returns the specified Side's margin. See also drag_bottom_margin, drag_top_margin, drag_left_margin, and drag_right_margin. 
int get_limit ( Side margin ) const
 Returns the camera limit for the specified Side. See also limit_bottom, limit_top, limit_left, and limit_right. 
Vector2 get_screen_center_position ( ) const
 Returns the center of the screen from this camera's point of view, in global coordinates. Note: The exact targeted position of the camera may be different. See get_target_position. 
Vector2 get_target_position ( ) const
 Returns this camera's target position, in global coordinates. Note: The returned value is not the same as Node2D.global_position, as it is affected by the drag properties. It is also not the same as the current position if position_smoothing_enabled is true (see get_screen_center_position). 
bool is_current ( ) const
 Returns true if this Camera2D is the active camera (see Viewport.get_camera_2d). void make_current ( ) Forces this Camera2D to become the current active one. enabled must be true. void reset_smoothing ( ) Sets the camera's position immediately to its current smoothing destination. This method has no effect if position_smoothing_enabled is false. void set_drag_margin ( Side margin, float drag_margin ) Sets the specified Side's margin. See also drag_bottom_margin, drag_top_margin, drag_left_margin, and drag_right_margin. void set_limit ( Side margin, int limit ) Sets the camera limit for the specified Side. See also limit_bottom, limit_top, limit_left, and limit_right.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_camera2d.html


classes/class_pathfollow2d
-----------------------------------------------------------
PathFollow2D Inherits: Node2D < CanvasItem < Node < Object Point sampler for a Path2D.  Description This node takes its parent Path2D, and returns the coordinates of a point within it, given a distance from the first vertex. It is useful for making other nodes follow a path, without coding the movement pattern. For that, the nodes must be children of this node. The descendant nodes will then move accordingly when setting the progress in this node.   Properties  
bool cubic_interp true  
float h_offset 0.0  
bool loop true  
float progress 0.0  
float progress_ratio 0.0  
bool rotates true  
float v_offset 0.0     Property Descriptions 
bool cubic_interp = true
  void set_cubic_interpolation ( bool value )
 
bool get_cubic_interpolation ( )
  If true, the position between two cached points is interpolated cubically, and linearly otherwise. The points along the Curve2D of the Path2D are precomputed before use, for faster calculations. The point at the requested offset is then calculated interpolating between two adjacent cached points. This may present a problem if the curve makes sharp turns, as the cached points may not follow the curve closely enough. There are two answers to this problem: either increase the number of cached points and increase memory consumption, or make a cubic interpolation between two points at the cost of (slightly) slower calculations. 
float h_offset = 0.0
  void set_h_offset ( float value )
 
float get_h_offset ( )
  The node's offset along the curve. 
bool loop = true
  void set_loop ( bool value )
 
bool has_loop ( )
  If true, any offset outside the path's length will wrap around, instead of stopping at the ends. Use it for cyclic paths. 
float progress = 0.0
  void set_progress ( float value )
 
float get_progress ( )
  The distance along the path, in pixels. Changing this value sets this node's position to a point within the path. 
float progress_ratio = 0.0
  void set_progress_ratio ( float value )
 
float get_progress_ratio ( )
  The distance along the path as a number in the range 0.0 (for the first vertex) to 1.0 (for the last). This is just another way of expressing the progress within the path, as the offset supplied is multiplied internally by the path's length. 
bool rotates = true
  void set_rotates ( bool value )
 
bool is_rotating ( )
  If true, this node rotates to follow the path, with the +X direction facing forward on the path. 
float v_offset = 0.0
  void set_v_offset ( float value )
 
float get_v_offset ( )
  The node's offset perpendicular to the curve.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_pathfollow2d.html


classes/class_node3d
-----------------------------------------------------------
Node3D Inherits: Node < Object Inherited By: AudioListener3D, AudioStreamPlayer3D, BoneAttachment3D, Camera3D, CollisionObject3D, CollisionPolygon3D, CollisionShape3D, GridMap, ImporterMeshInstance3D, Joint3D, LightmapProbe, Marker3D, NavigationLink3D, NavigationObstacle3D, NavigationRegion3D, OccluderInstance3D, OpenXRHand, Path3D, PathFollow3D, RayCast3D, RemoteTransform3D, ShapeCast3D, Skeleton3D, SpringArm3D, VehicleWheel3D, VisualInstance3D, XRNode3D, XROrigin3D Most basic 3D game object, parent of all 3D-related nodes.  Description Most basic 3D game object, with a Transform3D and visibility settings. All other 3D game objects inherit from Node3D. Use Node3D as a parent node to move, scale, rotate and show/hide children in a 3D project. Affine operations (rotate, scale, translate) happen in parent's local coordinate system, unless the Node3D object is set as top-level. Affine operations in this coordinate system correspond to direct affine operations on the Node3D's transform. The word local below refers to this coordinate system. The coordinate system that is attached to the Node3D object itself is referred to as object-local coordinate system. Note: Unless otherwise specified, all methods that have angle parameters must have angles specified as radians. To convert degrees to radians, use @GlobalScope.deg_to_rad. Note: Be aware that "Spatial" nodes are now called "Node3D" starting with Godot 4. Any Godot 3.x references to "Spatial" nodes refer to "Node3D" in Godot 4.   Tutorials  Introduction to 3D All 3D Demos    Properties  
Basis basis   
Basis global_basis   
Vector3 global_position   
Vector3 global_rotation   
Vector3 global_rotation_degrees   
Transform3D global_transform   
Vector3 position Vector3(0, 0, 0)  
Quaternion quaternion   
Vector3 rotation Vector3(0, 0, 0)  
Vector3 rotation_degrees   
RotationEditMode rotation_edit_mode 0  
EulerOrder rotation_order 2  
Vector3 scale Vector3(1, 1, 1)  
bool top_level false  
Transform3D transform Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)  
NodePath visibility_parent NodePath("")  
bool visible true     Methods  
void add_gizmo ( Node3DGizmo gizmo )  
void clear_gizmos ( )  
void clear_subgizmo_selection ( )  
void force_update_transform ( )  
Node3DGizmo[] get_gizmos ( ) const  
Node3D get_parent_node_3d ( ) const  
World3D get_world_3d ( ) const  
void global_rotate ( Vector3 axis, float angle )  
void global_scale ( Vector3 scale )  
void global_translate ( Vector3 offset )  
void hide ( )  
bool is_local_transform_notification_enabled ( ) const  
bool is_scale_disabled ( ) const  
bool is_transform_notification_enabled ( ) const  
bool is_visible_in_tree ( ) const  
void look_at ( Vector3 target, Vector3 up=Vector3(0, 1, 0), bool use_model_front=false )  
void look_at_from_position ( Vector3 position, Vector3 target, Vector3 up=Vector3(0, 1, 0), bool use_model_front=false )  
void orthonormalize ( )  
void rotate ( Vector3 axis, float angle )  
void rotate_object_local ( Vector3 axis, float angle )  
void rotate_x ( float angle )  
void rotate_y ( float angle )  
void rotate_z ( float angle )  
void scale_object_local ( Vector3 scale )  
void set_disable_scale ( bool disable )  
void set_identity ( )  
void set_ignore_transform_notification ( bool enabled )  
void set_notify_local_transform ( bool enable )  
void set_notify_transform ( bool enable )  
void set_subgizmo_selection ( Node3DGizmo gizmo, int id, Transform3D transform )  
void show ( )  
Vector3 to_global ( Vector3 local_point ) const  
Vector3 to_local ( Vector3 global_point ) const  
void translate ( Vector3 offset )  
void translate_object_local ( Vector3 offset )  
void update_gizmos ( )     Signals visibility_changed ( ) Emitted when node visibility changes.   Enumerations enum RotationEditMode: 
RotationEditMode ROTATION_EDIT_MODE_EULER = 0
 The rotation is edited using Vector3 Euler angles. 
RotationEditMode ROTATION_EDIT_MODE_QUATERNION = 1
 The rotation is edited using a Quaternion. 
RotationEditMode ROTATION_EDIT_MODE_BASIS = 2
 The rotation is edited using a Basis. In this mode, scale can't be edited separately.   Constants NOTIFICATION_TRANSFORM_CHANGED = 2000
 Node3D nodes receive this notification when their global transform changes. This means that either the current or a parent node changed its transform. In order for NOTIFICATION_TRANSFORM_CHANGED to work, users first need to ask for it, with set_notify_transform. The notification is also sent if the node is in the editor context and it has at least one valid gizmo. NOTIFICATION_ENTER_WORLD = 41
 Node3D nodes receive this notification when they are registered to new World3D resource. NOTIFICATION_EXIT_WORLD = 42
 Node3D nodes receive this notification when they are unregistered from current World3D resource. NOTIFICATION_VISIBILITY_CHANGED = 43
 Node3D nodes receive this notification when their visibility changes. NOTIFICATION_LOCAL_TRANSFORM_CHANGED = 44
 Node3D nodes receive this notification when their local transform changes. This is not received when the transform of a parent node is changed. In order for NOTIFICATION_LOCAL_TRANSFORM_CHANGED to work, users first need to ask for it, with set_notify_local_transform.   Property Descriptions 
Basis basis  void set_basis ( Basis value )
 
Basis get_basis ( )
  Direct access to the 3x3 basis of the transform property. 
Basis global_basis  void set_global_basis ( Basis value )
 
Basis get_global_basis ( )
  Global basis of this node. This is equivalent to global_transform.basis. 
Vector3 global_position  void set_global_position ( Vector3 value )
 
Vector3 get_global_position ( )
  Global position of this node. This is equivalent to global_transform.origin. 
Vector3 global_rotation  void set_global_rotation ( Vector3 value )
 
Vector3 get_global_rotation ( )
  Rotation part of the global transformation in radians, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle). Note: In the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a Vector3 data structure not because the rotation is a vector, but only because Vector3 exists as a convenient data-structure to store 3 floating-point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful. 
Vector3 global_rotation_degrees  void set_global_rotation_degrees ( Vector3 value )
 
Vector3 get_global_rotation_degrees ( )
  Helper property to access global_rotation in degrees instead of radians. 
Transform3D global_transform  void set_global_transform ( Transform3D value )
 
Transform3D get_global_transform ( )
  World3D space (global) Transform3D of this node. 
Vector3 position = Vector3(0, 0, 0)
  void set_position ( Vector3 value )
 
Vector3 get_position ( )
  Local position or translation of this node relative to the parent. This is equivalent to transform.origin. 
Quaternion quaternion  void set_quaternion ( Quaternion value )
 
Quaternion get_quaternion ( )
  Access to the node rotation as a Quaternion. This property is ideal for tweening complex rotations. 
Vector3 rotation = Vector3(0, 0, 0)
  void set_rotation ( Vector3 value )
 
Vector3 get_rotation ( )
  Rotation part of the local transformation in radians, specified in terms of Euler angles. The angles construct a rotation in the order specified by the rotation_order property. Note: In the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a Vector3 data structure not because the rotation is a vector, but only because Vector3 exists as a convenient data-structure to store 3 floating-point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful. Note: This property is edited in the inspector in degrees. If you want to use degrees in a script, use rotation_degrees. 
Vector3 rotation_degrees  void set_rotation_degrees ( Vector3 value )
 
Vector3 get_rotation_degrees ( )
  Helper property to access rotation in degrees instead of radians. 
RotationEditMode rotation_edit_mode = 0
  void set_rotation_edit_mode ( RotationEditMode value )
 
RotationEditMode get_rotation_edit_mode ( )
  Specify how rotation (and scale) will be presented in the editor. 
EulerOrder rotation_order = 2
  void set_rotation_order ( EulerOrder value )
 
EulerOrder get_rotation_order ( )
  Specify the axis rotation order of the rotation property. The final orientation is constructed by rotating the Euler angles in the order specified by this property. 
Vector3 scale = Vector3(1, 1, 1)
  void set_scale ( Vector3 value )
 
Vector3 get_scale ( )
  Scale part of the local transformation. Note: Mixed negative scales in 3D are not decomposable from the transformation matrix. Due to the way scale is represented with transformation matrices in Godot, the scale values will either be all positive or all negative. Note: Not all nodes are visually scaled by the scale property. For example, Light3Ds are not visually affected by scale. 
bool top_level = false
  void set_as_top_level ( bool value )
 
bool is_set_as_top_level ( )
  If true, the node will not inherit its transformations from its parent. Node transformations are only in global space. 
Transform3D transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
  void set_transform ( Transform3D value )
 
Transform3D get_transform ( )
  Local space Transform3D of this node, with respect to the parent node. 
NodePath visibility_parent = NodePath("")
  void set_visibility_parent ( NodePath value )
 
NodePath get_visibility_parent ( )
  Defines the visibility range parent for this node and its subtree. The visibility parent must be a GeometryInstance3D. Any visual instance will only be visible if the visibility parent (and all of its visibility ancestors) is hidden by being closer to the camera than its own GeometryInstance3D.visibility_range_begin. Nodes hidden via the visible property are essentially removed from the visibility dependency tree, so dependent instances will not take the hidden node or its ancestors into account. 
bool visible = true
  void set_visible ( bool value )
 
bool is_visible ( )
  If true, this node is drawn. The node is only visible if all of its ancestors are visible as well (in other words, is_visible_in_tree must return true).   Method Descriptions void add_gizmo ( Node3DGizmo gizmo ) Attach an editor gizmo to this Node3D. Note: The gizmo object would typically be an instance of EditorNode3DGizmo, but the argument type is kept generic to avoid creating a dependency on editor classes in Node3D. void clear_gizmos ( ) Clear all gizmos attached to this Node3D. void clear_subgizmo_selection ( ) Clears subgizmo selection for this node in the editor. Useful when subgizmo IDs become invalid after a property change. void force_update_transform ( ) Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations. 
Node3DGizmo[] get_gizmos ( ) const
 Returns all the gizmos attached to this Node3D. 
Node3D get_parent_node_3d ( ) const
 Returns the parent Node3D, or null if no parent exists, the parent is not of type Node3D, or top_level is true. Note: Calling this method is not equivalent to get_parent() as Node3D, which does not take top_level into account. 
World3D get_world_3d ( ) const
 Returns the current World3D resource this Node3D node is registered to. void global_rotate ( Vector3 axis, float angle ) Rotates the global (world) transformation around axis, a unit Vector3, by specified angle in radians. The rotation axis is in global coordinate system. void global_scale ( Vector3 scale ) Scales the global (world) transformation by the given Vector3 scale factors. void global_translate ( Vector3 offset ) Moves the global (world) transformation by Vector3 offset. The offset is in global coordinate system. void hide ( ) Disables rendering of this node. Changes visible to false. 
bool is_local_transform_notification_enabled ( ) const
 Returns whether node notifies about its local transformation changes. Node3D will not propagate this by default. 
bool is_scale_disabled ( ) const
 Returns whether this node uses a scale of (1, 1, 1) or its local transformation scale. 
bool is_transform_notification_enabled ( ) const
 Returns whether the node notifies about its global and local transformation changes. Node3D will not propagate this by default. 
bool is_visible_in_tree ( ) const
 Returns true if the node is present in the SceneTree, its visible property is true and all its ancestors are also visible. If any ancestor is hidden, this node will not be visible in the scene tree. void look_at ( Vector3 target, Vector3 up=Vector3(0, 1, 0), bool use_model_front=false ) Rotates the node so that the local forward axis (-Z, Vector3.FORWARD) points toward the target position. The local up axis (+Y) points as close to the up vector as possible while staying perpendicular to the local forward axis. The resulting transform is orthogonal, and the scale is preserved. Non-uniform scaling may not work correctly. The target position cannot be the same as the node's position, the up vector cannot be zero, and the direction from the node's position to the target vector cannot be parallel to the up vector. Operations take place in global space, which means that the node must be in the scene tree. If use_model_front is true, the +Z axis (asset front) is treated as forward (implies +X is left) and points toward the target position. By default, the -Z axis (camera forward) is treated as forward (implies +X is right). void look_at_from_position ( Vector3 position, Vector3 target, Vector3 up=Vector3(0, 1, 0), bool use_model_front=false ) Moves the node to the specified position, and then rotates the node to point toward the target as per look_at. Operations take place in global space. void orthonormalize ( ) Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation by performing Gram-Schmidt orthonormalization on this node's Transform3D. void rotate ( Vector3 axis, float angle ) Rotates the local transformation around axis, a unit Vector3, by specified angle in radians. void rotate_object_local ( Vector3 axis, float angle ) Rotates the local transformation around axis, a unit Vector3, by specified angle in radians. The rotation axis is in object-local coordinate system. void rotate_x ( float angle ) Rotates the local transformation around the X axis by angle in radians. void rotate_y ( float angle ) Rotates the local transformation around the Y axis by angle in radians. void rotate_z ( float angle ) Rotates the local transformation around the Z axis by angle in radians. void scale_object_local ( Vector3 scale ) Scales the local transformation by given 3D scale factors in object-local coordinate system. void set_disable_scale ( bool disable ) Sets whether the node uses a scale of (1, 1, 1) or its local transformation scale. Changes to the local transformation scale are preserved. void set_identity ( ) Reset all transformations for this node (sets its Transform3D to the identity matrix). void set_ignore_transform_notification ( bool enabled ) Sets whether the node ignores notification that its transformation (global or local) changed. void set_notify_local_transform ( bool enable ) Sets whether the node notifies about its local transformation changes. Node3D will not propagate this by default. void set_notify_transform ( bool enable ) Sets whether the node notifies about its global and local transformation changes. Node3D will not propagate this by default, unless it is in the editor context and it has a valid gizmo. void set_subgizmo_selection ( Node3DGizmo gizmo, int id, Transform3D transform ) Set subgizmo selection for this node in the editor. Note: The gizmo object would typically be an instance of EditorNode3DGizmo, but the argument type is kept generic to avoid creating a dependency on editor classes in Node3D. void show ( ) Enables rendering of this node. Changes visible to true. 
Vector3 to_global ( Vector3 local_point ) const
 Transforms local_point from this node's local space to world space. 
Vector3 to_local ( Vector3 global_point ) const
 Transforms global_point from world space to this node's local space. void translate ( Vector3 offset ) Changes the node's position by the given offset Vector3. Note that the translation offset is affected by the node's scale, so if scaled by e.g. (10, 1, 1), a translation by an offset of (2, 0, 0) would actually add 20 (2 * 10) to the X coordinate. void translate_object_local ( Vector3 offset ) Changes the node's position by the given offset Vector3 in local space. void update_gizmos ( ) Updates all the Node3D gizmos attached to this node.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_node3d.html


classes/class_visualshader
-----------------------------------------------------------
VisualShader Inherits: Shader < Resource < RefCounted < Object A custom shader program with a visual editor.  Description This class provides a graph-like visual editor for creating a Shader. Although VisualShaders do not require coding, they share the same logic with script shaders. They use VisualShaderNodes that can be connected to each other to control the flow of the shader. The visual shader graph is converted to a script shader behind the scenes.   Tutorials  Using VisualShaders    Properties  
Vector2 graph_offset Vector2(0, 0)     Methods  
void add_node ( Type type, VisualShaderNode node, Vector2 position, int id )  
void add_varying ( String name, VaryingMode mode, VaryingType type )  
bool can_connect_nodes ( Type type, int from_node, int from_port, int to_node, int to_port ) const  
Error connect_nodes ( Type type, int from_node, int from_port, int to_node, int to_port )  
void connect_nodes_forced ( Type type, int from_node, int from_port, int to_node, int to_port )  
void disconnect_nodes ( Type type, int from_node, int from_port, int to_node, int to_port )  
VisualShaderNode get_node ( Type type, int id ) const  
Dictionary[] get_node_connections ( Type type ) const  
PackedInt32Array get_node_list ( Type type ) const  
Vector2 get_node_position ( Type type, int id ) const  
int get_valid_node_id ( Type type ) const  
bool has_varying ( String name ) const  
bool is_node_connection ( Type type, int from_node, int from_port, int to_node, int to_port ) const  
void remove_node ( Type type, int id )  
void remove_varying ( String name )  
void replace_node ( Type type, int id, StringName new_class )  
void set_mode ( Mode mode )  
void set_node_position ( Type type, int id, Vector2 position )     Enumerations enum Type: 
Type TYPE_VERTEX = 0
 A vertex shader, operating on vertices. 
Type TYPE_FRAGMENT = 1
 A fragment shader, operating on fragments (pixels). 
Type TYPE_LIGHT = 2
 A shader for light calculations. 
Type TYPE_START = 3
 A function for the "start" stage of particle shader. 
Type TYPE_PROCESS = 4
 A function for the "process" stage of particle shader. 
Type TYPE_COLLIDE = 5
 A function for the "collide" stage (particle collision handler) of particle shader. 
Type TYPE_START_CUSTOM = 6
 A function for the "start" stage of particle shader, with customized output. 
Type TYPE_PROCESS_CUSTOM = 7
 A function for the "process" stage of particle shader, with customized output. 
Type TYPE_SKY = 8
 A shader for 3D environment's sky. 
Type TYPE_FOG = 9
 A compute shader that runs for each froxel of the volumetric fog map. 
Type TYPE_MAX = 10
 Represents the size of the Type enum. enum VaryingMode: 
VaryingMode VARYING_MODE_VERTEX_TO_FRAG_LIGHT = 0
 Varying is passed from Vertex function to Fragment and Light functions. 
VaryingMode VARYING_MODE_FRAG_TO_LIGHT = 1
 Varying is passed from Fragment function to Light function. 
VaryingMode VARYING_MODE_MAX = 2
 Represents the size of the VaryingMode enum. enum VaryingType: 
VaryingType VARYING_TYPE_FLOAT = 0
 Varying is of type float. 
VaryingType VARYING_TYPE_INT = 1
 Varying is of type int. 
VaryingType VARYING_TYPE_UINT = 2
 Varying is of type unsigned int. 
VaryingType VARYING_TYPE_VECTOR_2D = 3
 Varying is of type Vector2. 
VaryingType VARYING_TYPE_VECTOR_3D = 4
 Varying is of type Vector3. 
VaryingType VARYING_TYPE_VECTOR_4D = 5
 Varying is of type Vector4. 
VaryingType VARYING_TYPE_BOOLEAN = 6
 Varying is of type bool. 
VaryingType VARYING_TYPE_TRANSFORM = 7
 Varying is of type Transform3D. 
VaryingType VARYING_TYPE_MAX = 8
 Represents the size of the VaryingType enum.   Constants NODE_ID_INVALID = -1
 Denotes invalid VisualShader node. NODE_ID_OUTPUT = 0
 Denotes output node of VisualShader.   Property Descriptions 
Vector2 graph_offset = Vector2(0, 0)
  void set_graph_offset ( Vector2 value )
 
Vector2 get_graph_offset ( )
  The offset vector of the whole graph.   Method Descriptions void add_node ( Type type, VisualShaderNode node, Vector2 position, int id ) Adds the specified node to the shader. void add_varying ( String name, VaryingMode mode, VaryingType type ) Adds a new varying value node to the shader. 
bool can_connect_nodes ( Type type, int from_node, int from_port, int to_node, int to_port ) const
 Returns true if the specified nodes and ports can be connected together. 
Error connect_nodes ( Type type, int from_node, int from_port, int to_node, int to_port ) Connects the specified nodes and ports. void connect_nodes_forced ( Type type, int from_node, int from_port, int to_node, int to_port ) Connects the specified nodes and ports, even if they can't be connected. Such connection is invalid and will not function properly. void disconnect_nodes ( Type type, int from_node, int from_port, int to_node, int to_port ) Connects the specified nodes and ports. 
VisualShaderNode get_node ( Type type, int id ) const
 Returns the shader node instance with specified type and id. 
Dictionary[] get_node_connections ( Type type ) const
 Returns the list of connected nodes with the specified type. 
PackedInt32Array get_node_list ( Type type ) const
 Returns the list of all nodes in the shader with the specified type. 
Vector2 get_node_position ( Type type, int id ) const
 Returns the position of the specified node within the shader graph. 
int get_valid_node_id ( Type type ) const
 Returns next valid node ID that can be added to the shader graph. 
bool has_varying ( String name ) const
 Returns true if the shader has a varying with the given name. 
bool is_node_connection ( Type type, int from_node, int from_port, int to_node, int to_port ) const
 Returns true if the specified node and port connection exist. void remove_node ( Type type, int id ) Removes the specified node from the shader. void remove_varying ( String name ) Removes a varying value node with the given name. Prints an error if a node with this name is not found. void replace_node ( Type type, int id, StringName new_class ) Replaces the specified node with a node of new class type. void set_mode ( Mode mode ) Sets the mode of this shader. void set_node_position ( Type type, int id, Vector2 position ) Sets the position of the specified node.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualshader.html


classes/class_animationnodesub2
-----------------------------------------------------------
AnimationNodeSub2 Inherits: AnimationNodeSync < AnimationNode < Resource < RefCounted < Object Blends two animations subtractively inside of an AnimationNodeBlendTree.  Description A resource to add to an AnimationNodeBlendTree. Blends two animations subtractively based on the amount value. This animation node is usually used for pre-calculation to cancel out any extra poses from the animation for the "add" animation source in AnimationNodeAdd2 or AnimationNodeAdd3. In general, the blend value should be in the [0.0, 1.0] range, but values outside of this range can be used for amplified or inverted animations. Note: This calculation is different from using a negative value in AnimationNodeAdd2, since the transformation matrices do not satisfy the commutative law. AnimationNodeSub2 multiplies the transformation matrix of the inverted animation from the left side, while negative AnimationNodeAdd2 multiplies it from the right side.   Tutorials  AnimationTree   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodesub2.html


classes/class_lightoccluder2d
-----------------------------------------------------------
LightOccluder2D Inherits: Node2D < CanvasItem < Node < Object Occludes light cast by a Light2D, casting shadows.  Description Occludes light cast by a Light2D, casting shadows. The LightOccluder2D must be provided with an OccluderPolygon2D in order for the shadow to be computed.   Tutorials  2D lights and shadows    Properties  
OccluderPolygon2D occluder   
int occluder_light_mask 1  
bool sdf_collision true     Property Descriptions 
OccluderPolygon2D occluder  void set_occluder_polygon ( OccluderPolygon2D value )
 
OccluderPolygon2D get_occluder_polygon ( )
  The OccluderPolygon2D used to compute the shadow. 
int occluder_light_mask = 1
  void set_occluder_light_mask ( int value )
 
int get_occluder_light_mask ( )
  The LightOccluder2D's occluder light mask. The LightOccluder2D will cast shadows only from Light2D(s) that have the same light mask(s). 
bool sdf_collision = true
  void set_as_sdf_collision ( bool value )
 
bool is_set_as_sdf_collision ( )
  If enabled, the occluder will be part of a real-time generated signed distance field that can be used in custom shaders.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_lightoccluder2d.html


classes/class_packeddatacontainer
-----------------------------------------------------------
PackedDataContainer Inherits: Resource < RefCounted < Object Efficiently packs and serializes Array or Dictionary.  Description PackedDataContainer can be used to efficiently store data from untyped containers. The data is packed into raw bytes and can be saved to file. Only Array and Dictionary can be stored this way. You can retrieve the data by iterating on the container, which will work as if iterating on the packed data itself. If the packed container is a Dictionary, the data can be retrieved by key names (String/StringName only). var data = { "key": "value", "another_key": 123, "lock": Vector2() }
var packed = PackedDataContainer.new()
packed.pack(data)
ResourceSaver.save(packed, "packed_data.res")
 var container = load("packed_data.res")
for key in container:
    prints(key, container[key])
# Prints:
# key value
# lock (0, 0)
# another_key 123
 Nested containers will be packed recursively. While iterating, they will be returned as PackedDataContainerRef.   Methods  
Error pack ( Variant value )  
int size ( ) const     Method Descriptions 
Error pack ( Variant value ) Packs the given container into a binary representation. The value must be either Array or Dictionary, any other type will result in invalid data error. Note: Subsequent calls to this method will overwrite the existing data. 
int size ( ) const
 Returns the size of the packed container (see Array.size and Dictionary.size).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_packeddatacontainer.html


classes/class_capsuleshape3d
-----------------------------------------------------------
CapsuleShape3D Inherits: Shape3D < Resource < RefCounted < Object A 3D capsule shape used for physics collision.  Description A 3D capsule shape, intended for use in physics. Usually used to provide a shape for a CollisionShape3D. Performance: CapsuleShape3D is fast to check collisions against. It is faster than CylinderShape3D, but slower than SphereShape3D and BoxShape3D.   Tutorials  3D Physics Tests Demo    Properties  
float height 2.0  
float radius 0.5     Property Descriptions 
float height = 2.0
  void set_height ( float value )
 
float get_height ( )
  The capsule's height. 
float radius = 0.5
  void set_radius ( float value )
 
float get_radius ( )
  The capsule's radius.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_capsuleshape3d.html


classes/class_visibleonscreenenabler2d
-----------------------------------------------------------
VisibleOnScreenEnabler2D Inherits: VisibleOnScreenNotifier2D < Node2D < CanvasItem < Node < Object A rectangular region of 2D space that, when visible on screen, enables a target node.  Description VisibleOnScreenEnabler2D contains a rectangular region of 2D space and a target node. The target node will be automatically enabled (via its Node.process_mode property) when any part of this region becomes visible on the screen, and automatically disabled otherwise. This can for example be used to activate enemies only when the player approaches them. See VisibleOnScreenNotifier2D if you only want to be notified when the region is visible on screen. Note: VisibleOnScreenEnabler2D uses the render culling code to determine whether it's visible on screen, so it won't function unless CanvasItem.visible is set to true.   Properties  
EnableMode enable_mode 0  
NodePath enable_node_path NodePath("..")     Enumerations enum EnableMode: 
EnableMode ENABLE_MODE_INHERIT = 0
 Corresponds to Node.PROCESS_MODE_INHERIT. 
EnableMode ENABLE_MODE_ALWAYS = 1
 Corresponds to Node.PROCESS_MODE_ALWAYS. 
EnableMode ENABLE_MODE_WHEN_PAUSED = 2
 Corresponds to Node.PROCESS_MODE_WHEN_PAUSED.   Property Descriptions 
EnableMode enable_mode = 0
  void set_enable_mode ( EnableMode value )
 
EnableMode get_enable_mode ( )
  Determines how the target node is enabled. Corresponds to ProcessMode. When the node is disabled, it always uses Node.PROCESS_MODE_DISABLED. 
NodePath enable_node_path = NodePath("..")
  void set_enable_node_path ( NodePath value )
 
NodePath get_enable_node_path ( )
  The path to the target node, relative to the VisibleOnScreenEnabler2D. The target node is cached; it's only assigned when setting this property (if the VisibleOnScreenEnabler2D is inside the scene tree) and every time the VisibleOnScreenEnabler2D enters the scene tree. If the path is invalid, an error will be printed in the editor and no node will be affected.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visibleonscreenenabler2d.html


classes/class_placeholdermaterial
-----------------------------------------------------------
PlaceholderMaterial Inherits: Material < Resource < RefCounted < Object Placeholder class for a material.  Description This class is used when loading a project that uses a Material subclass in 2 conditions:  When running the project exported in dedicated server mode, only the texture's dimensions are kept (as they may be relied upon for gameplay purposes or positioning of other elements). This allows reducing the exported PCK's size significantly. When this subclass is missing due to using a different engine version or build (e.g. modules disabled).   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_placeholdermaterial.html


classes/class_multimeshinstance2d
-----------------------------------------------------------
MultiMeshInstance2D Inherits: Node2D < CanvasItem < Node < Object Node that instances a MultiMesh in 2D.  Description MultiMeshInstance2D is a specialized node to instance a MultiMesh resource in 2D. Usage is the same as MultiMeshInstance3D.   Properties  
MultiMesh multimesh  
Texture2D texture     Signals texture_changed ( ) Emitted when the texture is changed.   Property Descriptions 
MultiMesh multimesh  void set_multimesh ( MultiMesh value )
 
MultiMesh get_multimesh ( )
  The MultiMesh that will be drawn by the MultiMeshInstance2D. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  The Texture2D that will be used if using the default CanvasItemMaterial. Can be accessed as TEXTURE in CanvasItem shader.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_multimeshinstance2d.html


classes/class_sphereoccluder3d
-----------------------------------------------------------
SphereOccluder3D Inherits: Occluder3D < Resource < RefCounted < Object Spherical shape for use with occlusion culling in OccluderInstance3D.  Description SphereOccluder3D stores a sphere shape that can be used by the engine's occlusion culling system. See OccluderInstance3D's documentation for instructions on setting up occlusion culling.   Tutorials  Occlusion culling    Properties  
float radius 1.0     Property Descriptions 
float radius = 1.0
  void set_radius ( float value )
 
float get_radius ( )
  The sphere's radius in 3D units.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_sphereoccluder3d.html


classes/class_skeleton3d
-----------------------------------------------------------
Skeleton3D Inherits: Node3D < Node < Object A node containing a bone hierarchy, used to create a 3D skeletal animation.  Description Skeleton3D provides an interface for managing a hierarchy of bones, including pose, rest and animation (see Animation). It can also use ragdoll physics. The overall transform of a bone with respect to the skeleton is determined by bone pose. Bone rest defines the initial transform of the bone pose. Note that "global pose" below refers to the overall transform of the bone with respect to skeleton, so it is not the actual global/world transform of the bone.   Tutorials  3D Inverse Kinematics Demo Third Person Shooter Demo    Properties  
bool animate_physical_bones true  
float motion_scale 1.0  
bool show_rest_only false     Methods  
void add_bone ( String name )  
void clear_bones ( )  
void clear_bones_global_pose_override ( )  
Skin create_skin_from_rest_transforms ( )  
int find_bone ( String name ) const  
void force_update_all_bone_transforms ( )  
void force_update_bone_child_transform ( int bone_idx )  
PackedInt32Array get_bone_children ( int bone_idx ) const  
int get_bone_count ( ) const  
Transform3D get_bone_global_pose ( int bone_idx ) const  
Transform3D get_bone_global_pose_no_override ( int bone_idx ) const  
Transform3D get_bone_global_pose_override ( int bone_idx ) const  
Transform3D get_bone_global_rest ( int bone_idx ) const  
String get_bone_name ( int bone_idx ) const  
int get_bone_parent ( int bone_idx ) const  
Transform3D get_bone_pose ( int bone_idx ) const  
Vector3 get_bone_pose_position ( int bone_idx ) const  
Quaternion get_bone_pose_rotation ( int bone_idx ) const  
Vector3 get_bone_pose_scale ( int bone_idx ) const  
Transform3D get_bone_rest ( int bone_idx ) const  
PackedInt32Array get_parentless_bones ( ) const  
int get_version ( ) const  
bool is_bone_enabled ( int bone_idx ) const  
void localize_rests ( )  
void physical_bones_add_collision_exception ( RID exception )  
void physical_bones_remove_collision_exception ( RID exception )  
void physical_bones_start_simulation ( StringName[] bones=[] )  
void physical_bones_stop_simulation ( )  
SkinReference register_skin ( Skin skin )  
void reset_bone_pose ( int bone_idx )  
void reset_bone_poses ( )  
void set_bone_enabled ( int bone_idx, bool enabled=true )  
void set_bone_global_pose_override ( int bone_idx, Transform3D pose, float amount, bool persistent=false )  
void set_bone_name ( int bone_idx, String name )  
void set_bone_parent ( int bone_idx, int parent_idx )  
void set_bone_pose_position ( int bone_idx, Vector3 position )  
void set_bone_pose_rotation ( int bone_idx, Quaternion rotation )  
void set_bone_pose_scale ( int bone_idx, Vector3 scale )  
void set_bone_rest ( int bone_idx, Transform3D rest )  
void unparent_bone_and_rest ( int bone_idx )     Signals bone_enabled_changed ( int bone_idx ) Emitted when the bone at bone_idx is toggled with set_bone_enabled. Use is_bone_enabled to check the new value. bone_pose_changed ( int bone_idx ) This signal is emitted when one of the bones in the Skeleton3D node have changed their pose. This is used to inform nodes that rely on bone positions that one of the bones in the Skeleton3D have changed their transform/pose. pose_updated ( ) Emitted when the pose is updated, after NOTIFICATION_UPDATE_SKELETON is received. show_rest_only_changed ( ) Emitted when the value of show_rest_only changes.   Constants NOTIFICATION_UPDATE_SKELETON = 50
 Notification received when this skeleton's pose needs to be updated. This notification is received before the related pose_updated signal.   Property Descriptions 
bool animate_physical_bones = true
  void set_animate_physical_bones ( bool value )
 
bool get_animate_physical_bones ( )
   There is currently no description for this property. Please help us by contributing one!  
float motion_scale = 1.0
  void set_motion_scale ( float value )
 
float get_motion_scale ( )
  Multiplies the 3D position track animation. Note: Unless this value is 1.0, the key value in animation will not match the actual position value. 
bool show_rest_only = false
  void set_show_rest_only ( bool value )
 
bool is_show_rest_only ( )
  If true, forces the bones in their default rest pose, regardless of their values. In the editor, this also prevents the bones from being edited.   Method Descriptions void add_bone ( String name ) Adds a bone, with name name. get_bone_count will become the bone index. void clear_bones ( ) Clear all the bones in this skeleton. void clear_bones_global_pose_override ( ) Removes the global pose override on all bones in the skeleton. 
Skin create_skin_from_rest_transforms ( )  There is currently no description for this method. Please help us by contributing one!  
int find_bone ( String name ) const
 Returns the bone index that matches name as its name. void force_update_all_bone_transforms ( ) Force updates the bone transforms/poses for all bones in the skeleton. Deprecated. Do not use. void force_update_bone_child_transform ( int bone_idx ) Force updates the bone transform for the bone at bone_idx and all of its children. 
PackedInt32Array get_bone_children ( int bone_idx ) const
 Returns an array containing the bone indexes of all the child node of the passed in bone, bone_idx. 
int get_bone_count ( ) const
 Returns the number of bones in the skeleton. 
Transform3D get_bone_global_pose ( int bone_idx ) const
 Returns the overall transform of the specified bone, with respect to the skeleton. Being relative to the skeleton frame, this is not the actual "global" transform of the bone. 
Transform3D get_bone_global_pose_no_override ( int bone_idx ) const
 Returns the overall transform of the specified bone, with respect to the skeleton, but without any global pose overrides. Being relative to the skeleton frame, this is not the actual "global" transform of the bone. 
Transform3D get_bone_global_pose_override ( int bone_idx ) const
 Returns the global pose override transform for bone_idx. 
Transform3D get_bone_global_rest ( int bone_idx ) const
 Returns the global rest transform for bone_idx. 
String get_bone_name ( int bone_idx ) const
 Returns the name of the bone at index bone_idx. 
int get_bone_parent ( int bone_idx ) const
 Returns the bone index which is the parent of the bone at bone_idx. If -1, then bone has no parent. Note: The parent bone returned will always be less than bone_idx. 
Transform3D get_bone_pose ( int bone_idx ) const
 Returns the pose transform of the specified bone. 
Vector3 get_bone_pose_position ( int bone_idx ) const
 Returns the pose position of the bone at bone_idx. The returned Vector3 is in the local coordinate space of the Skeleton3D node. 
Quaternion get_bone_pose_rotation ( int bone_idx ) const
 Returns the pose rotation of the bone at bone_idx. The returned Quaternion is local to the bone with respect to the rotation of any parent bones. 
Vector3 get_bone_pose_scale ( int bone_idx ) const
 Returns the pose scale of the bone at bone_idx. 
Transform3D get_bone_rest ( int bone_idx ) const
 Returns the rest transform for a bone bone_idx. 
PackedInt32Array get_parentless_bones ( ) const
 Returns an array with all of the bones that are parentless. Another way to look at this is that it returns the indexes of all the bones that are not dependent or modified by other bones in the Skeleton. 
int get_version ( ) const
 Returns the number of times the bone hierarchy has changed within this skeleton, including renames. The Skeleton version is not serialized: only use within a single instance of Skeleton3D. Use for invalidating caches in IK solvers and other nodes which process bones. 
bool is_bone_enabled ( int bone_idx ) const
 Returns whether the bone pose for the bone at bone_idx is enabled. void localize_rests ( ) Returns all bones in the skeleton to their rest poses. void physical_bones_add_collision_exception ( RID exception ) Adds a collision exception to the physical bone. Works just like the RigidBody3D node. void physical_bones_remove_collision_exception ( RID exception ) Removes a collision exception to the physical bone. Works just like the RigidBody3D node. void physical_bones_start_simulation ( StringName[] bones=[] ) Tells the PhysicalBone3D nodes in the Skeleton to start simulating and reacting to the physics world. Optionally, a list of bone names can be passed-in, allowing only the passed-in bones to be simulated. void physical_bones_stop_simulation ( ) Tells the PhysicalBone3D nodes in the Skeleton to stop simulating. 
SkinReference register_skin ( Skin skin ) Binds the given Skin to the Skeleton. void reset_bone_pose ( int bone_idx ) Sets the bone pose to rest for bone_idx. void reset_bone_poses ( ) Sets all bone poses to rests. void set_bone_enabled ( int bone_idx, bool enabled=true ) Disables the pose for the bone at bone_idx if false, enables the bone pose if true. void set_bone_global_pose_override ( int bone_idx, Transform3D pose, float amount, bool persistent=false ) Sets the global pose transform, pose, for the bone at bone_idx. amount is the interpolation strength that will be used when applying the pose, and persistent determines if the applied pose will remain. Note: The pose transform needs to be a global pose! To convert a world transform from a Node3D to a global bone pose, multiply the Transform3D.affine_inverse of the node's Node3D.global_transform by the desired world transform. void set_bone_name ( int bone_idx, String name )  There is currently no description for this method. Please help us by contributing one!  void set_bone_parent ( int bone_idx, int parent_idx ) Sets the bone index parent_idx as the parent of the bone at bone_idx. If -1, then bone has no parent. Note: parent_idx must be less than bone_idx. void set_bone_pose_position ( int bone_idx, Vector3 position ) Sets the pose position of the bone at bone_idx to position. position is a Vector3 describing a position local to the Skeleton3D node. void set_bone_pose_rotation ( int bone_idx, Quaternion rotation ) Sets the pose rotation of the bone at bone_idx to rotation. rotation is a Quaternion describing a rotation in the bone's local coordinate space with respect to the rotation of any parent bones. void set_bone_pose_scale ( int bone_idx, Vector3 scale ) Sets the pose scale of the bone at bone_idx to scale. void set_bone_rest ( int bone_idx, Transform3D rest ) Sets the rest transform for bone bone_idx. void unparent_bone_and_rest ( int bone_idx ) Unparents the bone at bone_idx and sets its rest position to that of its parent prior to being reset.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeleton3d.html


classes/class_animationlibrary
-----------------------------------------------------------
AnimationLibrary Inherits: Resource < RefCounted < Object Container for Animation resources.  Description An animation library stores a set of animations accessible through StringName keys, for use with AnimationPlayer nodes.   Tutorials  Animation tutorial index    Methods  
Error add_animation ( StringName name, Animation animation )  
Animation get_animation ( StringName name ) const  
StringName[] get_animation_list ( ) const  
bool has_animation ( StringName name ) const  
void remove_animation ( StringName name )  
void rename_animation ( StringName name, StringName newname )     Signals animation_added ( StringName name ) Emitted when an Animation is added, under the key name. animation_changed ( StringName name ) Emitted when there's a change in one of the animations, e.g. tracks are added, moved or have changed paths. name is the key of the animation that was changed. See also Resource.changed, which this acts as a relay for. animation_removed ( StringName name ) Emitted when an Animation stored with the key name is removed. animation_renamed ( StringName name, StringName to_name ) Emitted when the key for an Animation is changed, from name to to_name.   Method Descriptions 
Error add_animation ( StringName name, Animation animation ) Adds the animation to the library, accessible by the key name. 
Animation get_animation ( StringName name ) const
 Returns the Animation with the key name. If the animation does not exist, null is returned and an error is logged. 
StringName[] get_animation_list ( ) const
 Returns the keys for the Animations stored in the library. 
bool has_animation ( StringName name ) const
 Returns true if the library stores an Animation with name as the key. void remove_animation ( StringName name ) Removes the Animation with the key name. void rename_animation ( StringName name, StringName newname ) Changes the key of the Animation associated with the key name to newname.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationlibrary.html


classes/class_convexpolygonshape2d
-----------------------------------------------------------
ConvexPolygonShape2D Inherits: Shape2D < Resource < RefCounted < Object A 2D convex polygon shape used for physics collision.  Description A 2D convex polygon shape, intended for use in physics. Used internally in CollisionPolygon2D when it's in CollisionPolygon2D.BUILD_SOLIDS mode. ConvexPolygonShape2D is solid, which means it detects collisions from objects that are fully inside it, unlike ConcavePolygonShape2D which is hollow. This makes it more suitable for both detection and physics. Convex decomposition: A concave polygon can be split up into several convex polygons. This allows dynamic physics bodies to have complex concave collisions (at a performance cost) and can be achieved by using several ConvexPolygonShape2D nodes or by using the CollisionPolygon2D node in CollisionPolygon2D.BUILD_SOLIDS mode. To generate a collision polygon from a sprite, select the Sprite2D node, go to the Sprite2D menu that appears above the viewport, and choose Create Polygon2D Sibling. Performance: ConvexPolygonShape2D is faster to check collisions against compared to ConcavePolygonShape2D, but it is slower than primitive collision shapes such as CircleShape2D and RectangleShape2D. Its use should generally be limited to medium-sized objects that cannot have their collision accurately represented by primitive shapes.   Properties  
PackedVector2Array points PackedVector2Array()     Methods  
void set_point_cloud ( PackedVector2Array point_cloud )     Property Descriptions 
PackedVector2Array points = PackedVector2Array()
  void set_points ( PackedVector2Array value )
 
PackedVector2Array get_points ( )
  The polygon's list of vertices that form a convex hull. Can be in either clockwise or counterclockwise order. Warning: Only set this property to a list of points that actually form a convex hull. Use set_point_cloud to generate the convex hull of an arbitrary set of points.   Method Descriptions void set_point_cloud ( PackedVector2Array point_cloud ) Based on the set of points provided, this assigns the points property using the convex hull algorithm, removing all unneeded points. See Geometry2D.convex_hull for details.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_convexpolygonshape2d.html


classes/class_occluderpolygon2d
-----------------------------------------------------------
OccluderPolygon2D Inherits: Resource < RefCounted < Object Defines a 2D polygon for LightOccluder2D.  Description Editor facility that helps you draw a 2D polygon used as resource for LightOccluder2D.   Properties  
bool closed true  
CullMode cull_mode 0  
PackedVector2Array polygon PackedVector2Array()     Enumerations enum CullMode: 
CullMode CULL_DISABLED = 0
 Culling is disabled. See cull_mode. 
CullMode CULL_CLOCKWISE = 1
 Culling is performed in the clockwise direction. See cull_mode. 
CullMode CULL_COUNTER_CLOCKWISE = 2
 Culling is performed in the counterclockwise direction. See cull_mode.   Property Descriptions 
bool closed = true
  void set_closed ( bool value )
 
bool is_closed ( )
  If true, closes the polygon. A closed OccluderPolygon2D occludes the light coming from any direction. An opened OccluderPolygon2D occludes the light only at its outline's direction. 
CullMode cull_mode = 0
  void set_cull_mode ( CullMode value )
 
CullMode get_cull_mode ( )
  The culling mode to use. 
PackedVector2Array polygon = PackedVector2Array()
  void set_polygon ( PackedVector2Array value )
 
PackedVector2Array get_polygon ( )
  A Vector2 array with the index for polygon's vertices positions. Note: The returned value is a copy of the underlying array, rather than a reference.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_occluderpolygon2d.html


classes/class_curvetexture
-----------------------------------------------------------
CurveTexture Inherits: Texture2D < Texture < Resource < RefCounted < Object A 1D texture where pixel brightness corresponds to points on a curve.  Description A 1D texture where pixel brightness corresponds to points on a Curve resource, either in grayscale or in red. This visual representation simplifies the task of saving curves as image files. If you need to store up to 3 curves within a single texture, use CurveXYZTexture instead. See also GradientTexture1D and GradientTexture2D.   Properties  
Curve curve   
bool resource_local_to_scene false (overrides Resource)  
TextureMode texture_mode 0  
int width 256     Enumerations enum TextureMode: 
TextureMode TEXTURE_MODE_RGB = 0
 Store the curve equally across the red, green and blue channels. This uses more video memory, but is more compatible with shaders that only read the green and blue values. 
TextureMode TEXTURE_MODE_RED = 1
 Store the curve only in the red channel. This saves video memory, but some custom shaders may not be able to work with this.   Property Descriptions 
Curve curve  void set_curve ( Curve value )
 
Curve get_curve ( )
  The Curve that is rendered onto the texture. 
TextureMode texture_mode = 0
  void set_texture_mode ( TextureMode value )
 
TextureMode get_texture_mode ( )
  The format the texture should be generated with. When passing a CurveTexture as an input to a Shader, this may need to be adjusted. 
int width = 256
  void set_width ( int value )
 
int get_width ( )
  The width of the texture (in pixels). Higher values make it possible to represent high-frequency data better (such as sudden direction changes), at the cost of increased generation time and memory usage.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_curvetexture.html


classes/class_confirmationdialog
-----------------------------------------------------------
ConfirmationDialog Inherits: AcceptDialog < Window < Viewport < Node < Object Inherited By: EditorCommandPalette, EditorFileDialog, FileDialog, ScriptCreateDialog A dialog used for confirmation of actions.  Description A dialog used for confirmation of actions. This window is similar to AcceptDialog, but pressing its Cancel button can have a different outcome from pressing the OK button. The order of the two buttons varies depending on the host OS. To get cancel action, you can use:  GDScriptget_cancel_button().pressed.connect(self.canceled)
 C#GetCancelButton().Pressed += Canceled;
    Properties  
String cancel_button_text "Cancel"  
Vector2i min_size Vector2i(200, 70) (overrides Window)  
Vector2i size Vector2i(200, 100) (overrides Window)  
String title "Please Confirm..." (overrides Window)     Methods  
Button get_cancel_button ( )     Property Descriptions 
String cancel_button_text = "Cancel"
  void set_cancel_button_text ( String value )
 
String get_cancel_button_text ( )
  The text displayed by the cancel button (see get_cancel_button).   Method Descriptions 
Button get_cancel_button ( ) Returns the cancel button. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their CanvasItem.visible property.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_confirmationdialog.html


classes/class_separationrayshape3d
-----------------------------------------------------------
SeparationRayShape3D Inherits: Shape3D < Resource < RefCounted < Object A 3D ray shape used for physics collision that tries to separate itself from any collider.  Description A 3D ray shape, intended for use in physics. Usually used to provide a shape for a CollisionShape3D. When a SeparationRayShape3D collides with an object, it tries to separate itself from it by moving its endpoint to the collision point. For example, a SeparationRayShape3D next to a character can allow it to instantly move up when touching stairs.   Properties  
float length 1.0  
bool slide_on_slope false     Property Descriptions 
float length = 1.0
  void set_length ( float value )
 
float get_length ( )
  The ray's length. 
bool slide_on_slope = false
  void set_slide_on_slope ( bool value )
 
bool get_slide_on_slope ( )
  If false (default), the shape always separates and returns a normal along its own direction. If true, the shape can return the correct normal and separate in any direction, allowing sliding motion on slopes.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_separationrayshape3d.html


classes/class_visualshadernodebooleanparameter
-----------------------------------------------------------
VisualShaderNodeBooleanParameter Inherits: VisualShaderNodeParameter < VisualShaderNode < Resource < RefCounted < Object A boolean parameter to be used within the visual shader graph.  Description Translated to uniform bool in the shader language.   Properties  
bool default_value false  
bool default_value_enabled false     Property Descriptions 
bool default_value = false
  void set_default_value ( bool value )
 
bool get_default_value ( )
  A default value to be assigned within the shader. 
bool default_value_enabled = false
  void set_default_value_enabled ( bool value )
 
bool is_default_value_enabled ( )
  Enables usage of the default_value.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualshadernodebooleanparameter.html


classes/class_gltfanimation
-----------------------------------------------------------
GLTFAnimation Inherits: Resource < RefCounted < Object  There is currently no description for this class. Please help us by contributing one!   Tutorials  Runtime file loading and saving    Properties  
bool loop false     Property Descriptions 
bool loop = false
  void set_loop ( bool value )
 
bool get_loop ( )
   There is currently no description for this property. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfanimation.html


classes/class_audioeffectcapture
-----------------------------------------------------------
AudioEffectCapture Inherits: AudioEffect < Resource < RefCounted < Object Captures audio from an audio bus in real-time.  Description AudioEffectCapture is an AudioEffect which copies all audio frames from the attached audio effect bus into its internal ring buffer. Application code should consume these audio frames from this ring buffer using get_buffer and process it as needed, for example to capture data from an AudioStreamMicrophone, implement application-defined effects, or to transmit audio over the network. When capturing audio data from a microphone, the format of the samples will be stereo 32-bit floating point PCM. Note: ProjectSettings.audio/driver/enable_input must be true for audio input to work. See also that setting's description for caveats related to permissions and operating system privacy settings.   Tutorials  Audio buses Audio Mic Record Demo    Properties  
float buffer_length 0.1     Methods  
bool can_get_buffer ( int frames ) const  
void clear_buffer ( )  
PackedVector2Array get_buffer ( int frames )  
int get_buffer_length_frames ( ) const  
int get_discarded_frames ( ) const  
int get_frames_available ( ) const  
int get_pushed_frames ( ) const     Property Descriptions 
float buffer_length = 0.1
  void set_buffer_length ( float value )
 
float get_buffer_length ( )
  Length of the internal ring buffer, in seconds. Setting the buffer length will have no effect if already initialized.   Method Descriptions 
bool can_get_buffer ( int frames ) const
 Returns true if at least frames audio frames are available to read in the internal ring buffer. void clear_buffer ( ) Clears the internal ring buffer. 
PackedVector2Array get_buffer ( int frames ) Gets the next frames audio samples from the internal ring buffer. Returns a PackedVector2Array containing exactly frames audio samples if available, or an empty PackedVector2Array if insufficient data was available. 
int get_buffer_length_frames ( ) const
 Returns the total size of the internal ring buffer in frames. 
int get_discarded_frames ( ) const
 Returns the number of audio frames discarded from the audio bus due to full buffer. 
int get_frames_available ( ) const
 Returns the number of frames available to read using get_buffer. 
int get_pushed_frames ( ) const
 Returns the number of audio frames inserted from the audio bus.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectcapture.html


classes/class_collisionpolygon3d
-----------------------------------------------------------
CollisionPolygon3D Inherits: Node3D < Node < Object A node that provides a thickened polygon shape (a prism) to a CollisionObject3D parent.  Description A node that provides a thickened polygon shape (a prism) to a CollisionObject3D parent and allows to edit it. The polygon can be concave or convex. This can give a detection shape to an Area3D or turn PhysicsBody3D into a solid object. Warning: A non-uniformly scaled CollisionShape3D will likely not behave as expected. Make sure to keep its scale the same on all axes and adjust its shape resource instead.   Properties  
float depth 1.0  
bool disabled false  
float margin 0.04  
PackedVector2Array polygon PackedVector2Array()     Property Descriptions 
float depth = 1.0
  void set_depth ( float value )
 
float get_depth ( )
  Length that the resulting collision extends in either direction perpendicular to its 2D polygon. 
bool disabled = false
  void set_disabled ( bool value )
 
bool is_disabled ( )
  If true, no collision will be produced. 
float margin = 0.04
  void set_margin ( float value )
 
float get_margin ( )
  The collision margin for the generated Shape3D. See Shape3D.margin for more details. 
PackedVector2Array polygon = PackedVector2Array()
  void set_polygon ( PackedVector2Array value )
 
PackedVector2Array get_polygon ( )
  Array of vertices which define the 2D polygon in the local XY plane. Note: The returned value is a copy of the original. Methods which mutate the size or properties of the return value will not impact the original polygon. To change properties of the polygon, assign it to a temporary variable and make changes before reassigning the class property.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_collisionpolygon3d.html


classes/class_noise
-----------------------------------------------------------
Noise Inherits: Resource < RefCounted < Object Inherited By: FastNoiseLite Abstract base class for noise generators.  Description This class defines the interface for noise generation libraries to inherit from. A default get_seamless_image implementation is provided for libraries that do not provide seamless noise. This function requests a larger image from the get_image method, reverses the quadrants of the image, then uses the strips of extra width to blend over the seams. Inheriting noise classes can optionally override this function to provide a more optimal algorithm.   Methods  
Image get_image ( int width, int height, bool invert=false, bool in_3d_space=false, bool normalize=true ) const  
Image[] get_image_3d ( int width, int height, int depth, bool invert=false, bool normalize=true ) const  
float get_noise_1d ( float x ) const  
float get_noise_2d ( float x, float y ) const  
float get_noise_2dv ( Vector2 v ) const  
float get_noise_3d ( float x, float y, float z ) const  
float get_noise_3dv ( Vector3 v ) const  
Image get_seamless_image ( int width, int height, bool invert=false, bool in_3d_space=false, float skirt=0.1, bool normalize=true ) const  
Image[] get_seamless_image_3d ( int width, int height, int depth, bool invert=false, float skirt=0.1, bool normalize=true ) const     Method Descriptions 
Image get_image ( int width, int height, bool invert=false, bool in_3d_space=false, bool normalize=true ) const
 Returns an Image containing 2D noise values. Note: With normalize set to false, the default implementation expects the noise generator to return values in the range -1.0 to 1.0. 
Image[] get_image_3d ( int width, int height, int depth, bool invert=false, bool normalize=true ) const
 Returns an Array of Images containing 3D noise values for use with ImageTexture3D.create. Note: With normalize set to false, the default implementation expects the noise generator to return values in the range -1.0 to 1.0. 
float get_noise_1d ( float x ) const
 Returns the 1D noise value at the given (x) coordinate. 
float get_noise_2d ( float x, float y ) const
 Returns the 2D noise value at the given position. 
float get_noise_2dv ( Vector2 v ) const
 Returns the 2D noise value at the given position. 
float get_noise_3d ( float x, float y, float z ) const
 Returns the 3D noise value at the given position. 
float get_noise_3dv ( Vector3 v ) const
 Returns the 3D noise value at the given position. 
Image get_seamless_image ( int width, int height, bool invert=false, bool in_3d_space=false, float skirt=0.1, bool normalize=true ) const
 Returns an Image containing seamless 2D noise values. Note: With normalize set to false, the default implementation expects the noise generator to return values in the range -1.0 to 1.0. 
Image[] get_seamless_image_3d ( int width, int height, int depth, bool invert=false, float skirt=0.1, bool normalize=true ) const
 Returns an Array of Images containing seamless 3D noise values for use with ImageTexture3D.create. Note: With normalize set to false, the default implementation expects the noise generator to return values in the range -1.0 to 1.0.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_noise.html


classes/class_slider
-----------------------------------------------------------
Slider Inherits: Range < Control < CanvasItem < Node < Object Inherited By: HSlider, VSlider Abstract base class for sliders.  Description Abstract base class for sliders, used to adjust a value by moving a grabber along a horizontal or vertical axis. Sliders are Range-based controls.   Properties  
bool editable true  
FocusMode focus_mode 2 (overrides Control)  
bool scrollable true  
float step 1.0 (overrides Range)  
int tick_count 0  
bool ticks_on_borders false     Theme Properties  
int center_grabber 0  
int grabber_offset 0  
Texture2D grabber   
Texture2D grabber_disabled   
Texture2D grabber_highlight   
Texture2D tick   
StyleBox grabber_area   
StyleBox grabber_area_highlight   
StyleBox slider      Signals drag_ended ( bool value_changed ) Emitted when dragging stops. If value_changed is true, Range.value is different from the value when you started the dragging. drag_started ( ) Emitted when dragging is started.   Property Descriptions 
bool editable = true
  void set_editable ( bool value )
 
bool is_editable ( )
  If true, the slider can be interacted with. If false, the value can be changed only by code. 
bool scrollable = true
  void set_scrollable ( bool value )
 
bool is_scrollable ( )
  If true, the value can be changed using the mouse wheel. 
int tick_count = 0
  void set_ticks ( int value )
 
int get_ticks ( )
  Number of ticks displayed on the slider, including border ticks. Ticks are uniformly-distributed value markers. 
bool ticks_on_borders = false
  void set_ticks_on_borders ( bool value )
 
bool get_ticks_on_borders ( )
  If true, the slider will display ticks for minimum and maximum values.   Theme Property Descriptions 
int center_grabber = 0
 Boolean constant. If 1, the grabber texture size will be ignored and it will fit within slider's bounds based only on its center position. 
int grabber_offset = 0
 Vertical or horizontal offset of the grabber. 
Texture2D grabber The texture for the grabber (the draggable element). 
Texture2D grabber_disabled The texture for the grabber when it's disabled. 
Texture2D grabber_highlight The texture for the grabber when it's focused. 
Texture2D tick The texture for the ticks, visible when tick_count is greater than 0. 
StyleBox grabber_area The background of the area to the left or bottom of the grabber. 
StyleBox grabber_area_highlight The background of the area to the left or bottom of the grabber that displays when it's being hovered or focused. 
StyleBox slider The background for the whole slider. Affects the height or width of the grabber_area.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_slider.html


classes/class_hingejoint3d
-----------------------------------------------------------
HingeJoint3D Inherits: Joint3D < Node3D < Node < Object A physics joint that restricts the rotation of a 3D physics body around an axis relative to another physics body.  Description A physics joint that restricts the rotation of a 3D physics body around an axis relative to another physics body. For example, Body A can be a StaticBody3D representing a door hinge that a RigidBody3D rotates around.   Properties  
float angular_limit/bias 0.3  
bool angular_limit/enable false  
float angular_limit/lower -1.5708  
float angular_limit/relaxation 1.0  
float angular_limit/softness 0.9  
float angular_limit/upper 1.5708  
bool motor/enable false  
float motor/max_impulse 1.0  
float motor/target_velocity 1.0  
float params/bias 0.3     Methods  
bool get_flag ( Flag flag ) const  
float get_param ( Param param ) const  
void set_flag ( Flag flag, bool enabled )  
void set_param ( Param param, float value )     Enumerations enum Param: 
Param PARAM_BIAS = 0
 The speed with which the two bodies get pulled together when they move in different directions. 
Param PARAM_LIMIT_UPPER = 1
 The maximum rotation. Only active if angular_limit/enable is true. 
Param PARAM_LIMIT_LOWER = 2
 The minimum rotation. Only active if angular_limit/enable is true. 
Param PARAM_LIMIT_BIAS = 3
 The speed with which the rotation across the axis perpendicular to the hinge gets corrected. 
Param PARAM_LIMIT_SOFTNESS = 4
 
Param PARAM_LIMIT_RELAXATION = 5
 The lower this value, the more the rotation gets slowed down. 
Param PARAM_MOTOR_TARGET_VELOCITY = 6
 Target speed for the motor. 
Param PARAM_MOTOR_MAX_IMPULSE = 7
 Maximum acceleration for the motor. 
Param PARAM_MAX = 8
 Represents the size of the Param enum. enum Flag: 
Flag FLAG_USE_LIMIT = 0
 If true, the hinges maximum and minimum rotation, defined by angular_limit/lower and angular_limit/upper has effects. 
Flag FLAG_ENABLE_MOTOR = 1
 When activated, a motor turns the hinge. 
Flag FLAG_MAX = 2
 Represents the size of the Flag enum.   Property Descriptions 
float angular_limit/bias = 0.3
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The speed with which the rotation across the axis perpendicular to the hinge gets corrected. 
bool angular_limit/enable = false
  void set_flag ( Flag flag, bool enabled )
 
bool get_flag ( Flag flag ) const
  If true, the hinges maximum and minimum rotation, defined by angular_limit/lower and angular_limit/upper has effects. 
float angular_limit/lower = -1.5708
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The minimum rotation. Only active if angular_limit/enable is true. 
float angular_limit/relaxation = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The lower this value, the more the rotation gets slowed down. 
float angular_limit/softness = 0.9
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!  
float angular_limit/upper = 1.5708
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The maximum rotation. Only active if angular_limit/enable is true. 
bool motor/enable = false
  void set_flag ( Flag flag, bool enabled )
 
bool get_flag ( Flag flag ) const
  When activated, a motor turns the hinge. 
float motor/max_impulse = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  Maximum acceleration for the motor. 
float motor/target_velocity = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  Target speed for the motor. 
float params/bias = 0.3
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The speed with which the two bodies get pulled together when they move in different directions.   Method Descriptions 
bool get_flag ( Flag flag ) const
 Returns the value of the specified flag. 
float get_param ( Param param ) const
 Returns the value of the specified parameter. void set_flag ( Flag flag, bool enabled ) If true, enables the specified flag. void set_param ( Param param, float value ) Sets the value of the specified parameter.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_hingejoint3d.html


classes/class_planemesh
-----------------------------------------------------------
PlaneMesh Inherits: PrimitiveMesh < Mesh < Resource < RefCounted < Object Inherited By: QuadMesh Class representing a planar PrimitiveMesh.  Description Class representing a planar PrimitiveMesh. This flat mesh does not have a thickness. By default, this mesh is aligned on the X and Z axes; this default rotation isn't suited for use with billboarded materials. For billboarded materials, change orientation to FACE_Z. Note: When using a large textured PlaneMesh (e.g. as a floor), you may stumble upon UV jittering issues depending on the camera angle. To solve this, increase subdivide_depth and subdivide_width until you no longer notice UV jittering.   Properties  
Vector3 center_offset Vector3(0, 0, 0)  
Orientation orientation 1  
Vector2 size Vector2(2, 2)  
int subdivide_depth 0  
int subdivide_width 0     Enumerations enum Orientation: 
Orientation FACE_X = 0
 PlaneMesh will face the positive X-axis. 
Orientation FACE_Y = 1
 PlaneMesh will face the positive Y-axis. This matches the behavior of the PlaneMesh in Godot 3.x. 
Orientation FACE_Z = 2
 PlaneMesh will face the positive Z-axis. This matches the behavior of the QuadMesh in Godot 3.x.   Property Descriptions 
Vector3 center_offset = Vector3(0, 0, 0)
  void set_center_offset ( Vector3 value )
 
Vector3 get_center_offset ( )
  Offset of the generated plane. Useful for particles. 
Orientation orientation = 1
  void set_orientation ( Orientation value )
 
Orientation get_orientation ( )
  Direction that the PlaneMesh is facing. See Orientation for options. 
Vector2 size = Vector2(2, 2)
  void set_size ( Vector2 value )
 
Vector2 get_size ( )
  Size of the generated plane. 
int subdivide_depth = 0
  void set_subdivide_depth ( int value )
 
int get_subdivide_depth ( )
  Number of subdivision along the Z axis. 
int subdivide_width = 0
  void set_subdivide_width ( int value )
 
int get_subdivide_width ( )
  Number of subdivision along the X axis.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_planemesh.html


classes/class_panelcontainer
-----------------------------------------------------------
PanelContainer Inherits: Container < Control < CanvasItem < Node < Object Inherited By: ScriptEditor A container that keeps its child controls within the area of a StyleBox.  Description A container that keeps its child controls within the area of a StyleBox. Useful for giving controls an outline.   Tutorials  Using Containers 2D Role Playing Game Demo    Properties  
MouseFilter mouse_filter 0 (overrides Control)     Theme Properties  
StyleBox panel     Theme Property Descriptions 
StyleBox panel The style of PanelContainer's background.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_panelcontainer.html


classes/class_viewporttexture
-----------------------------------------------------------
ViewportTexture Inherits: Texture2D < Texture < Resource < RefCounted < Object Provides the content of a Viewport as a dynamic texture.  Description Provides the content of a Viewport as a dynamic Texture2D. This can be used to mix controls, 2D game objects, and 3D game objects in the same scene. To create a ViewportTexture in code, use the Viewport.get_texture method on the target viewport. Note: A ViewportTexture is always local to its scene (see Resource.resource_local_to_scene). If the scene root is not ready, it may return incorrect data (see Node.ready).   Tutorials  GUI in 3D Demo 3D in 2D Demo 2D in 3D Demo 3D Viewport Scaling Demo    Properties  
NodePath viewport_path NodePath("")     Property Descriptions 
NodePath viewport_path = NodePath("")
  void set_viewport_path_in_scene ( NodePath value )
 
NodePath get_viewport_path_in_scene ( )
  The path to the Viewport node to display. This is relative to the scene root, not to the node that uses the texture. Note: In the editor, this path is automatically updated when the target viewport or one of its ancestors is renamed or moved. At runtime, the path may not be able to automatically update due to the inability to determine the scene root.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_viewporttexture.html


classes/class_hscrollbar
-----------------------------------------------------------
HScrollBar Inherits: ScrollBar < Range < Control < CanvasItem < Node < Object A horizontal scrollbar that goes from left (min) to right (max).  Description A horizontal scrollbar, typically used to navigate through content that extends beyond the visible width of a control. It is a Range-based control and goes from left (min) to right (max).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_hscrollbar.html


classes/class_audioeffectdelay
-----------------------------------------------------------
AudioEffectDelay Inherits: AudioEffect < Resource < RefCounted < Object Adds a delay audio effect to an audio bus. Plays input signal back after a period of time. Two tap delay and feedback options.  Description Plays input signal back after a period of time. The delayed signal may be played back multiple times to create the sound of a repeating, decaying echo. Delay effects range from a subtle echo effect to a pronounced blending of previous sounds with new sounds.   Tutorials  Audio buses    Properties  
float dry 1.0  
bool feedback_active false  
float feedback_delay_ms 340.0  
float feedback_level_db -6.0  
float feedback_lowpass 16000.0  
bool tap1_active true  
float tap1_delay_ms 250.0  
float tap1_level_db -6.0  
float tap1_pan 0.2  
bool tap2_active true  
float tap2_delay_ms 500.0  
float tap2_level_db -12.0  
float tap2_pan -0.4     Property Descriptions 
float dry = 1.0
  void set_dry ( float value )
 
float get_dry ( )
  Output percent of original sound. At 0, only delayed sounds are output. Value can range from 0 to 1. 
bool feedback_active = false
  void set_feedback_active ( bool value )
 
bool is_feedback_active ( )
  If true, feedback is enabled. 
float feedback_delay_ms = 340.0
  void set_feedback_delay_ms ( float value )
 
float get_feedback_delay_ms ( )
  Feedback delay time in milliseconds. 
float feedback_level_db = -6.0
  void set_feedback_level_db ( float value )
 
float get_feedback_level_db ( )
  Sound level for feedback. 
float feedback_lowpass = 16000.0
  void set_feedback_lowpass ( float value )
 
float get_feedback_lowpass ( )
  Low-pass filter for feedback, in Hz. Frequencies below this value are filtered out of the source signal. 
bool tap1_active = true
  void set_tap1_active ( bool value )
 
bool is_tap1_active ( )
  If true, the first tap will be enabled. 
float tap1_delay_ms = 250.0
  void set_tap1_delay_ms ( float value )
 
float get_tap1_delay_ms ( )
  First tap delay time in milliseconds. 
float tap1_level_db = -6.0
  void set_tap1_level_db ( float value )
 
float get_tap1_level_db ( )
  Sound level for the first tap. 
float tap1_pan = 0.2
  void set_tap1_pan ( float value )
 
float get_tap1_pan ( )
  Pan position for the first tap. Value can range from -1 (fully left) to 1 (fully right). 
bool tap2_active = true
  void set_tap2_active ( bool value )
 
bool is_tap2_active ( )
  If true, the second tap will be enabled. 
float tap2_delay_ms = 500.0
  void set_tap2_delay_ms ( float value )
 
float get_tap2_delay_ms ( )
  Second tap delay time in milliseconds. 
float tap2_level_db = -12.0
  void set_tap2_level_db ( float value )
 
float get_tap2_level_db ( )
  Sound level for the second tap. 
float tap2_pan = -0.4
  void set_tap2_pan ( float value )
 
float get_tap2_pan ( )
  Pan position for the second tap. Value can range from -1 (fully left) to 1 (fully right).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectdelay.html


classes/class_spheremesh
-----------------------------------------------------------
SphereMesh Inherits: PrimitiveMesh < Mesh < Resource < RefCounted < Object Class representing a spherical PrimitiveMesh.  Description Class representing a spherical PrimitiveMesh.   Properties  
float height 1.0  
bool is_hemisphere false  
int radial_segments 64  
float radius 0.5  
int rings 32     Property Descriptions 
float height = 1.0
  void set_height ( float value )
 
float get_height ( )
  Full height of the sphere. 
bool is_hemisphere = false
  void set_is_hemisphere ( bool value )
 
bool get_is_hemisphere ( )
  If true, a hemisphere is created rather than a full sphere. Note: To get a regular hemisphere, the height and radius of the sphere must be equal. 
int radial_segments = 64
  void set_radial_segments ( int value )
 
int get_radial_segments ( )
  Number of radial segments on the sphere. 
float radius = 0.5
  void set_radius ( float value )
 
float get_radius ( )
  Radius of sphere. 
int rings = 32
  void set_rings ( int value )
 
int get_rings ( )
  Number of segments along the height of the sphere.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_spheremesh.html


classes/class_immediatemesh
-----------------------------------------------------------
ImmediateMesh Inherits: Mesh < Resource < RefCounted < Object Mesh optimized for creating geometry manually.  Description A mesh type optimized for creating geometry manually, similar to OpenGL 1.x immediate mode. Here's a sample on how to generate a triangular face:  GDScriptvar mesh = ImmediateMesh.new()
mesh.surface_begin(Mesh.PRIMITIVE_TRIANGLES)
mesh.surface_add_vertex(Vector3.LEFT)
mesh.surface_add_vertex(Vector3.FORWARD)
mesh.surface_add_vertex(Vector3.ZERO)
mesh.surface_end()
 C#var mesh = new ImmediateMesh();
mesh.SurfaceBegin(Mesh.PrimitiveType.Triangles);
mesh.SurfaceAddVertex(Vector3.Left);
mesh.SurfaceAddVertex(Vector3.Forward);
mesh.SurfaceAddVertex(Vector3.Zero);
mesh.SurfaceEnd();
  Note: Generating complex geometries with ImmediateMesh is highly inefficient. Instead, it is designed to generate simple geometry that changes often.   Tutorials  Using ImmediateMesh    Methods  
void clear_surfaces ( )  
void surface_add_vertex ( Vector3 vertex )  
void surface_add_vertex_2d ( Vector2 vertex )  
void surface_begin ( PrimitiveType primitive, Material material=null )  
void surface_end ( )  
void surface_set_color ( Color color )  
void surface_set_normal ( Vector3 normal )  
void surface_set_tangent ( Plane tangent )  
void surface_set_uv ( Vector2 uv )  
void surface_set_uv2 ( Vector2 uv2 )     Method Descriptions void clear_surfaces ( ) Clear all surfaces. void surface_add_vertex ( Vector3 vertex ) Add a 3D vertex using the current attributes previously set. void surface_add_vertex_2d ( Vector2 vertex ) Add a 2D vertex using the current attributes previously set. void surface_begin ( PrimitiveType primitive, Material material=null ) Begin a new surface. void surface_end ( ) End and commit current surface. Note that surface being created will not be visible until this function is called. void surface_set_color ( Color color ) Set the color attribute that will be pushed with the next vertex. void surface_set_normal ( Vector3 normal ) Set the normal attribute that will be pushed with the next vertex. void surface_set_tangent ( Plane tangent ) Set the tangent attribute that will be pushed with the next vertex. void surface_set_uv ( Vector2 uv ) Set the UV attribute that will be pushed with the next vertex. void surface_set_uv2 ( Vector2 uv2 ) Set the UV2 attribute that will be pushed with the next vertex.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_immediatemesh.html


classes/class_canvastexture
-----------------------------------------------------------
CanvasTexture Inherits: Texture2D < Texture < Resource < RefCounted < Object Texture with optional normal and specular maps for use in 2D rendering.  Description CanvasTexture is an alternative to ImageTexture for 2D rendering. It allows using normal maps and specular maps in any node that inherits from CanvasItem. CanvasTexture also allows overriding the texture's filter and repeat mode independently of the node's properties (or the project settings). Note: CanvasTexture cannot be used in 3D. It will not display correctly when applied to any VisualInstance3D, such as Sprite3D or Decal. For physically-based materials in 3D, use BaseMaterial3D instead.   Tutorials  2D Lights and Shadows    Properties  
Texture2D diffuse_texture   
Texture2D normal_texture   
bool resource_local_to_scene false (overrides Resource)  
Color specular_color Color(1, 1, 1, 1)  
float specular_shininess 1.0  
Texture2D specular_texture   
TextureFilter texture_filter 0  
TextureRepeat texture_repeat 0     Property Descriptions 
Texture2D diffuse_texture  void set_diffuse_texture ( Texture2D value )
 
Texture2D get_diffuse_texture ( )
  The diffuse (color) texture to use. This is the main texture you want to set in most cases. 
Texture2D normal_texture  void set_normal_texture ( Texture2D value )
 
Texture2D get_normal_texture ( )
  The normal map texture to use. Only has a visible effect if Light2Ds are affecting this CanvasTexture. Note: Godot expects the normal map to use X+, Y+, and Z+ coordinates. See this page for a comparison of normal map coordinates expected by popular engines. 
Color specular_color = Color(1, 1, 1, 1)
  void set_specular_color ( Color value )
 
Color get_specular_color ( )
  The multiplier for specular reflection colors. The Light2D's color is also taken into account when determining the reflection color. Only has a visible effect if Light2Ds are affecting this CanvasTexture. 
float specular_shininess = 1.0
  void set_specular_shininess ( float value )
 
float get_specular_shininess ( )
  The specular exponent for Light2D specular reflections. Higher values result in a more glossy/"wet" look, with reflections becoming more localized and less visible overall. The default value of 1.0 disables specular reflections entirely. Only has a visible effect if Light2Ds are affecting this CanvasTexture. 
Texture2D specular_texture  void set_specular_texture ( Texture2D value )
 
Texture2D get_specular_texture ( )
  The specular map to use for Light2D specular reflections. This should be a grayscale or colored texture, with brighter areas resulting in a higher specular_shininess value. Using a colored specular_texture allows controlling specular shininess on a per-channel basis. Only has a visible effect if Light2Ds are affecting this CanvasTexture. 
TextureFilter texture_filter = 0
  void set_texture_filter ( TextureFilter value )
 
TextureFilter get_texture_filter ( )
  The texture filtering mode to use when drawing this CanvasTexture. 
TextureRepeat texture_repeat = 0
  void set_texture_repeat ( TextureRepeat value )
 
TextureRepeat get_texture_repeat ( )
  The texture repeat mode to use when drawing this CanvasTexture.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_canvastexture.html


classes/class_graphedit
-----------------------------------------------------------
GraphEdit Inherits: Control < CanvasItem < Node < Object An editor for graph-like structures, using GraphNodes.  Description GraphEdit provides tools for creation, manipulation, and display of various graphs. Its main purpose in the engine is to power the visual programming systems, such as visual shaders, but it is also available for use in user projects. GraphEdit by itself is only an empty container, representing an infinite grid where GraphNodes can be placed. Each GraphNode represents a node in the graph, a single unit of data in the connected scheme. GraphEdit, in turn, helps to control various interactions with nodes and between nodes. When the user attempts to connect, disconnect, or delete a GraphNode, a signal is emitted in the GraphEdit, but no action is taken by default. It is the responsibility of the programmer utilizing this control to implement the necessary logic to determine how each request should be handled. Performance: It is greatly advised to enable low-processor usage mode (see OS.low_processor_usage_mode) when using GraphEdits.   Properties  
bool clip_contents true (overrides Control)  
bool connection_lines_antialiased true  
float connection_lines_curvature 0.5  
float connection_lines_thickness 2.0  
FocusMode focus_mode 2 (overrides Control)  
bool minimap_enabled true  
float minimap_opacity 0.65  
Vector2 minimap_size Vector2(240, 160)  
PanningScheme panning_scheme 0  
bool right_disconnects false  
Vector2 scroll_offset Vector2(0, 0)  
bool show_arrange_button true  
bool show_grid true  
bool show_grid_buttons true  
bool show_menu true  
bool show_minimap_button true  
bool show_zoom_buttons true  
bool show_zoom_label false  
int snapping_distance 20  
bool snapping_enabled true  
float zoom 1.0  
float zoom_max 2.0736  
float zoom_min 0.232568  
float zoom_step 1.2     Methods  
PackedVector2Array _get_connection_line ( Vector2 from_position, Vector2 to_position ) virtual const  
bool _is_in_input_hotzone ( Object in_node, int in_port, Vector2 mouse_position ) virtual  
bool _is_in_output_hotzone ( Object in_node, int in_port, Vector2 mouse_position ) virtual  
bool _is_node_hover_valid ( StringName from_node, int from_port, StringName to_node, int to_port ) virtual  
void add_valid_connection_type ( int from_type, int to_type )  
void add_valid_left_disconnect_type ( int type )  
void add_valid_right_disconnect_type ( int type )  
void arrange_nodes ( )  
void clear_connections ( )  
Error connect_node ( StringName from_node, int from_port, StringName to_node, int to_port )  
void disconnect_node ( StringName from_node, int from_port, StringName to_node, int to_port )  
void force_connection_drag_end ( )  
PackedVector2Array get_connection_line ( Vector2 from_node, Vector2 to_node )  
Dictionary[] get_connection_list ( ) const  
HBoxContainer get_menu_hbox ( )  
bool is_node_connected ( StringName from_node, int from_port, StringName to_node, int to_port )  
bool is_valid_connection_type ( int from_type, int to_type ) const  
void remove_valid_connection_type ( int from_type, int to_type )  
void remove_valid_left_disconnect_type ( int type )  
void remove_valid_right_disconnect_type ( int type )  
void set_connection_activity ( StringName from_node, int from_port, StringName to_node, int to_port, float amount )  
void set_selected ( Node node )     Theme Properties  
Color activity Color(1, 1, 1, 1)  
Color grid_major Color(1, 1, 1, 0.2)  
Color grid_minor Color(1, 1, 1, 0.05)  
Color selection_fill Color(1, 1, 1, 0.3)  
Color selection_stroke Color(1, 1, 1, 0.8)  
int port_hotzone_inner_extent 22  
int port_hotzone_outer_extent 26  
Texture2D grid_toggle   
Texture2D layout   
Texture2D minimap_toggle   
Texture2D snapping_toggle   
Texture2D zoom_in   
Texture2D zoom_out   
Texture2D zoom_reset   
StyleBox menu_panel   
StyleBox panel      Signals begin_node_move ( ) Emitted at the beginning of a GraphElement's movement. connection_drag_ended ( ) Emitted at the end of a connection drag. connection_drag_started ( StringName from_node, int from_port, bool is_output ) Emitted at the beginning of a connection drag. connection_from_empty ( StringName to_node, int to_port, Vector2 release_position ) Emitted when user drags a connection from an input port into the empty space of the graph. connection_request ( StringName from_node, int from_port, StringName to_node, int to_port ) Emitted to the GraphEdit when the connection between the from_port of the from_node GraphNode and the to_port of the to_node GraphNode is attempted to be created. connection_to_empty ( StringName from_node, int from_port, Vector2 release_position ) Emitted when user drags a connection from an output port into the empty space of the graph. copy_nodes_request ( ) Emitted when this GraphEdit captures a ui_copy action (Ctrl + C by default). In general, this signal indicates that the selected GraphElements should be copied. delete_nodes_request ( StringName[] nodes ) Emitted when this GraphEdit captures a ui_graph_delete action (Delete by default). nodes is an array of node names that should be removed. These usually include all selected nodes. disconnection_request ( StringName from_node, int from_port, StringName to_node, int to_port ) Emitted to the GraphEdit when the connection between from_port of from_node GraphNode and to_port of to_node GraphNode is attempted to be removed. duplicate_nodes_request ( ) Emitted when this GraphEdit captures a ui_graph_duplicate action (Ctrl + D by default). In general, this signal indicates that the selected GraphElements should be duplicated. end_node_move ( ) Emitted at the end of a GraphElement's movement. node_deselected ( Node node ) Emitted when the given GraphElement node is deselected. node_selected ( Node node ) Emitted when the given GraphElement node is selected. paste_nodes_request ( ) Emitted when this GraphEdit captures a ui_paste action (Ctrl + V by default). In general, this signal indicates that previously copied GraphElements should be pasted. popup_request ( Vector2 position ) Emitted when a popup is requested. Happens on right-clicking in the GraphEdit. position is the position of the mouse pointer when the signal is sent. scroll_offset_changed ( Vector2 offset ) Emitted when the scroll offset is changed by the user. It will not be emitted when changed in code.   Enumerations enum PanningScheme: 
PanningScheme SCROLL_ZOOMS = 0
 Mouse Wheel will zoom, Ctrl + Mouse Wheel will move the view. 
PanningScheme SCROLL_PANS = 1
 Mouse Wheel will move the view, Ctrl + Mouse Wheel will zoom.   Property Descriptions 
bool connection_lines_antialiased = true
  void set_connection_lines_antialiased ( bool value )
 
bool is_connection_lines_antialiased ( )
  If true, the lines between nodes will use antialiasing. 
float connection_lines_curvature = 0.5
  void set_connection_lines_curvature ( float value )
 
float get_connection_lines_curvature ( )
  The curvature of the lines between the nodes. 0 results in straight lines. 
float connection_lines_thickness = 2.0
  void set_connection_lines_thickness ( float value )
 
float get_connection_lines_thickness ( )
  The thickness of the lines between the nodes. 
bool minimap_enabled = true
  void set_minimap_enabled ( bool value )
 
bool is_minimap_enabled ( )
  If true, the minimap is visible. 
float minimap_opacity = 0.65
  void set_minimap_opacity ( float value )
 
float get_minimap_opacity ( )
  The opacity of the minimap rectangle. 
Vector2 minimap_size = Vector2(240, 160)
  void set_minimap_size ( Vector2 value )
 
Vector2 get_minimap_size ( )
  The size of the minimap rectangle. The map itself is based on the size of the grid area and is scaled to fit this rectangle. 
PanningScheme panning_scheme = 0
  void set_panning_scheme ( PanningScheme value )
 
PanningScheme get_panning_scheme ( )
  Defines the control scheme for panning with mouse wheel. 
bool right_disconnects = false
  void set_right_disconnects ( bool value )
 
bool is_right_disconnects_enabled ( )
  If true, enables disconnection of existing connections in the GraphEdit by dragging the right end. 
Vector2 scroll_offset = Vector2(0, 0)
  void set_scroll_offset ( Vector2 value )
 
Vector2 get_scroll_offset ( )
  The scroll offset. 
bool show_arrange_button = true
  void set_show_arrange_button ( bool value )
 
bool is_showing_arrange_button ( )
  If true, the button to automatically arrange graph nodes is visible. 
bool show_grid = true
  void set_show_grid ( bool value )
 
bool is_showing_grid ( )
  If true, the grid is visible. 
bool show_grid_buttons = true
  void set_show_grid_buttons ( bool value )
 
bool is_showing_grid_buttons ( )
  If true, buttons that allow to configure grid and snapping options are visible. 
bool show_menu = true
  void set_show_menu ( bool value )
 
bool is_showing_menu ( )
  If true, the menu toolbar is visible. 
bool show_minimap_button = true
  void set_show_minimap_button ( bool value )
 
bool is_showing_minimap_button ( )
  If true, the button to toggle the minimap is visible. 
bool show_zoom_buttons = true
  void set_show_zoom_buttons ( bool value )
 
bool is_showing_zoom_buttons ( )
  If true, buttons that allow to change and reset the zoom level are visible. 
bool show_zoom_label = false
  void set_show_zoom_label ( bool value )
 
bool is_showing_zoom_label ( )
  If true, the label with the current zoom level is visible. The zoom level is displayed in percents. 
int snapping_distance = 20
  void set_snapping_distance ( int value )
 
int get_snapping_distance ( )
  The snapping distance in pixels, also determines the grid line distance. 
bool snapping_enabled = true
  void set_snapping_enabled ( bool value )
 
bool is_snapping_enabled ( )
  If true, enables snapping. 
float zoom = 1.0
  void set_zoom ( float value )
 
float get_zoom ( )
  The current zoom value. 
float zoom_max = 2.0736
  void set_zoom_max ( float value )
 
float get_zoom_max ( )
  The upper zoom limit. 
float zoom_min = 0.232568
  void set_zoom_min ( float value )
 
float get_zoom_min ( )
  The lower zoom limit. 
float zoom_step = 1.2
  void set_zoom_step ( float value )
 
float get_zoom_step ( )
  The step of each zoom level.   Method Descriptions 
PackedVector2Array _get_connection_line ( Vector2 from_position, Vector2 to_position ) virtual const
 Virtual method which can be overridden to customize how connections are drawn. 
bool _is_in_input_hotzone ( Object in_node, int in_port, Vector2 mouse_position ) virtual
 Returns whether the mouse_position is in the input hot zone. By default, a hot zone is a Rect2 positioned such that its center is at in_node.GraphNode.get_input_port_position(in_port) (For output's case, call GraphNode.get_output_port_position instead). The hot zone's width is twice the Theme Property port_grab_distance_horizontal, and its height is twice the port_grab_distance_vertical. Below is a sample code to help get started: func _is_in_input_hotzone(in_node, in_port, mouse_position):
    var port_size: Vector2 = Vector2(get_theme_constant("port_grab_distance_horizontal"), get_theme_constant("port_grab_distance_vertical"))
    var port_pos: Vector2 = in_node.get_position() + in_node.get_input_port_position(in_port) - port_size / 2
    var rect = Rect2(port_pos, port_size)
    return rect.has_point(mouse_position)
 
bool _is_in_output_hotzone ( Object in_node, int in_port, Vector2 mouse_position ) virtual
 Returns whether the mouse_position is in the output hot zone. For more information on hot zones, see _is_in_input_hotzone. Below is a sample code to help get started: func _is_in_output_hotzone(in_node, in_port, mouse_position):
    var port_size: Vector2 = Vector2(get_theme_constant("port_grab_distance_horizontal"), get_theme_constant("port_grab_distance_vertical"))
    var port_pos: Vector2 = in_node.get_position() + in_node.get_output_port_position(in_port) - port_size / 2
    var rect = Rect2(port_pos, port_size)
    return rect.has_point(mouse_position)
 
bool _is_node_hover_valid ( StringName from_node, int from_port, StringName to_node, int to_port ) virtual
 This virtual method can be used to insert additional error detection while the user is dragging a connection over a valid port. Return true if the connection is indeed valid or return false if the connection is impossible. If the connection is impossible, no snapping to the port and thus no connection request to that port will happen. In this example a connection to same node is suppressed:  GDScriptfunc _is_node_hover_valid(from, from_port, to, to_port):
    return from != to
 C#public override bool _IsNodeHoverValid(StringName fromNode, int fromPort, StringName toNode, int toPort)
{
    return fromNode != toNode;
}
  void add_valid_connection_type ( int from_type, int to_type ) Allows the connection between two different port types. The port type is defined individually for the left and the right port of each slot with the GraphNode.set_slot method. See also is_valid_connection_type and remove_valid_connection_type. void add_valid_left_disconnect_type ( int type ) Allows to disconnect nodes when dragging from the left port of the GraphNode's slot if it has the specified type. See also remove_valid_left_disconnect_type. void add_valid_right_disconnect_type ( int type ) Allows to disconnect nodes when dragging from the right port of the GraphNode's slot if it has the specified type. See also remove_valid_right_disconnect_type. void arrange_nodes ( ) Rearranges selected nodes in a layout with minimum crossings between connections and uniform horizontal and vertical gap between nodes. void clear_connections ( ) Removes all connections between nodes. 
Error connect_node ( StringName from_node, int from_port, StringName to_node, int to_port ) Create a connection between the from_port of the from_node GraphNode and the to_port of the to_node GraphNode. If the connection already exists, no connection is created. void disconnect_node ( StringName from_node, int from_port, StringName to_node, int to_port ) Removes the connection between the from_port of the from_node GraphNode and the to_port of the to_node GraphNode. If the connection does not exist, no connection is removed. void force_connection_drag_end ( ) Ends the creation of the current connection. In other words, if you are dragging a connection you can use this method to abort the process and remove the line that followed your cursor. This is best used together with connection_drag_started and connection_drag_ended to add custom behavior like node addition through shortcuts. Note: This method suppresses any other connection request signals apart from connection_drag_ended. 
PackedVector2Array get_connection_line ( Vector2 from_node, Vector2 to_node ) Returns the points which would make up a connection between from_node and to_node. 
Dictionary[] get_connection_list ( ) const
 Returns an Array containing the list of connections. A connection consists in a structure of the form { from_port: 0, from_node: "GraphNode name 0", to_port: 1, to_node: "GraphNode name 1" }. 
HBoxContainer get_menu_hbox ( ) Gets the HBoxContainer that contains the zooming and grid snap controls in the top left of the graph. You can use this method to reposition the toolbar or to add your own custom controls to it. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their CanvasItem.visible property. 
bool is_node_connected ( StringName from_node, int from_port, StringName to_node, int to_port ) Returns true if the from_port of the from_node GraphNode is connected to the to_port of the to_node GraphNode. 
bool is_valid_connection_type ( int from_type, int to_type ) const
 Returns whether it's possible to make a connection between two different port types. The port type is defined individually for the left and the right port of each slot with the GraphNode.set_slot method. See also add_valid_connection_type and remove_valid_connection_type. void remove_valid_connection_type ( int from_type, int to_type ) Disallows the connection between two different port types previously allowed by add_valid_connection_type. The port type is defined individually for the left and the right port of each slot with the GraphNode.set_slot method. See also is_valid_connection_type. void remove_valid_left_disconnect_type ( int type ) Disallows to disconnect nodes when dragging from the left port of the GraphNode's slot if it has the specified type. Use this to disable disconnection previously allowed with add_valid_left_disconnect_type. void remove_valid_right_disconnect_type ( int type ) Disallows to disconnect nodes when dragging from the right port of the GraphNode's slot if it has the specified type. Use this to disable disconnection previously allowed with add_valid_right_disconnect_type. void set_connection_activity ( StringName from_node, int from_port, StringName to_node, int to_port, float amount ) Sets the coloration of the connection between from_node's from_port and to_node's to_port with the color provided in the activity theme property. The color is linearly interpolated between the connection color and the activity color using amount as weight. void set_selected ( Node node ) Sets the specified node as the one selected.   Theme Property Descriptions 
Color activity = Color(1, 1, 1, 1)
 Color of the connection's activity (see set_connection_activity). 
Color grid_major = Color(1, 1, 1, 0.2)
 Color of major grid lines. 
Color grid_minor = Color(1, 1, 1, 0.05)
 Color of minor grid lines. 
Color selection_fill = Color(1, 1, 1, 0.3)
 The fill color of the selection rectangle. 
Color selection_stroke = Color(1, 1, 1, 0.8)
 The outline color of the selection rectangle. 
int port_hotzone_inner_extent = 22
 The horizontal range within which a port can be grabbed (inner side). 
int port_hotzone_outer_extent = 26
 The horizontal range within which a port can be grabbed (outer side). 
Texture2D grid_toggle The icon for the grid toggle button. 
Texture2D layout The icon for the layout button for auto-arranging the graph. 
Texture2D minimap_toggle The icon for the minimap toggle button. 
Texture2D snapping_toggle The icon for the snapping toggle button. 
Texture2D zoom_in The icon for the zoom in button. 
Texture2D zoom_out The icon for the zoom out button. 
Texture2D zoom_reset The icon for the zoom reset button. 
StyleBox menu_panel  There is currently no description for this theme property. Please help us by contributing one!  
StyleBox panel The background drawn under the grid.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_graphedit.html


classes/class_button
-----------------------------------------------------------
Button Inherits: BaseButton < Control < CanvasItem < Node < Object Inherited By: CheckBox, CheckButton, ColorPickerButton, MenuButton, OptionButton A themed button that can contain text and an icon.  Description Button is the standard themed button. It can contain text and an icon, and it will display them according to the current Theme. Example of creating a button and assigning an action when pressed by code:  GDScriptfunc _ready():
    var button = Button.new()
    button.text = "Click me"
    button.pressed.connect(self._button_pressed)
    add_child(button)
func _button_pressed():
    print("Hello world!")
 C#public override void _Ready()
{
    var button = new Button();
    button.Text = "Click me";
    button.Pressed += ButtonPressed;
    AddChild(button);
}
private void ButtonPressed()
{
    GD.Print("Hello world!");
}
  See also BaseButton which contains common properties and methods associated with this node. Note: Buttons do not interpret touch input and therefore don't support multitouch, since mouse emulation can only press one button at a given time. Use TouchScreenButton for buttons that trigger gameplay movement or actions.   Tutorials  2D Dodge The Creeps Demo OS Test Demo    Properties  
HorizontalAlignment alignment 1  
bool clip_text false  
bool expand_icon false  
bool flat false  
Texture2D icon   
HorizontalAlignment icon_alignment 0  
String language ""  
String text ""  
TextDirection text_direction 0  
OverrunBehavior text_overrun_behavior 0  
VerticalAlignment vertical_icon_alignment 1     Theme Properties  
Color font_color Color(0.875, 0.875, 0.875, 1)  
Color font_disabled_color Color(0.875, 0.875, 0.875, 0.5)  
Color font_focus_color Color(0.95, 0.95, 0.95, 1)  
Color font_hover_color Color(0.95, 0.95, 0.95, 1)  
Color font_hover_pressed_color Color(1, 1, 1, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
Color font_pressed_color Color(1, 1, 1, 1)  
Color icon_disabled_color Color(1, 1, 1, 0.4)  
Color icon_focus_color Color(1, 1, 1, 1)  
Color icon_hover_color Color(1, 1, 1, 1)  
Color icon_hover_pressed_color Color(1, 1, 1, 1)  
Color icon_normal_color Color(1, 1, 1, 1)  
Color icon_pressed_color Color(1, 1, 1, 1)  
int h_separation 4  
int icon_max_width 0  
int outline_size 0  
Font font   
int font_size   
Texture2D icon   
StyleBox disabled   
StyleBox disabled_mirrored   
StyleBox focus   
StyleBox hover   
StyleBox hover_mirrored   
StyleBox hover_pressed   
StyleBox hover_pressed_mirrored   
StyleBox normal   
StyleBox normal_mirrored   
StyleBox pressed   
StyleBox pressed_mirrored      Property Descriptions 
HorizontalAlignment alignment = 1
  void set_text_alignment ( HorizontalAlignment value )
 
HorizontalAlignment get_text_alignment ( )
  Text alignment policy for the button's text, use one of the HorizontalAlignment constants. 
bool clip_text = false
  void set_clip_text ( bool value )
 
bool get_clip_text ( )
  When this property is enabled, text that is too large to fit the button is clipped, when disabled the Button will always be wide enough to hold the text. 
bool expand_icon = false
  void set_expand_icon ( bool value )
 
bool is_expand_icon ( )
  When enabled, the button's icon will expand/shrink to fit the button's size while keeping its aspect. See also icon_max_width. 
bool flat = false
  void set_flat ( bool value )
 
bool is_flat ( )
  Flat buttons don't display decoration. 
Texture2D icon  void set_button_icon ( Texture2D value )
 
Texture2D get_button_icon ( )
  Button's icon, if text is present the icon will be placed before the text. To edit margin and spacing of the icon, use h_separation theme property and content_margin_* properties of the used StyleBoxes. 
HorizontalAlignment icon_alignment = 0
  void set_icon_alignment ( HorizontalAlignment value )
 
HorizontalAlignment get_icon_alignment ( )
  Specifies if the icon should be aligned horizontally to the left, right, or center of a button. Uses the same HorizontalAlignment constants as the text alignment. If centered horizontally and vertically, text will draw on top of the icon. 
String language = ""
  void set_language ( String value )
 
String get_language ( )
  Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead. 
String text = ""
  void set_text ( String value )
 
String get_text ( )
  The button's text that will be displayed inside the button's area. 
TextDirection text_direction = 0
  void set_text_direction ( TextDirection value )
 
TextDirection get_text_direction ( )
  Base text writing direction. 
OverrunBehavior text_overrun_behavior = 0
  void set_text_overrun_behavior ( OverrunBehavior value )
 
OverrunBehavior get_text_overrun_behavior ( )
  Sets the clipping behavior when the text exceeds the node's bounding rectangle. See OverrunBehavior for a description of all modes. 
VerticalAlignment vertical_icon_alignment = 1
  void set_vertical_icon_alignment ( VerticalAlignment value )
 
VerticalAlignment get_vertical_icon_alignment ( )
  Specifies if the icon should be aligned vertically to the top, bottom, or center of a button. Uses the same VerticalAlignment constants as the text alignment. If centered horizontally and vertically, text will draw on top of the icon.   Theme Property Descriptions 
Color font_color = Color(0.875, 0.875, 0.875, 1)
 Default text Color of the Button. 
Color font_disabled_color = Color(0.875, 0.875, 0.875, 0.5)
 Text Color used when the Button is disabled. 
Color font_focus_color = Color(0.95, 0.95, 0.95, 1)
 Text Color used when the Button is focused. Only replaces the normal text color of the button. Disabled, hovered, and pressed states take precedence over this color. 
Color font_hover_color = Color(0.95, 0.95, 0.95, 1)
 Text Color used when the Button is being hovered. 
Color font_hover_pressed_color = Color(1, 1, 1, 1)
 Text Color used when the Button is being hovered and pressed. 
Color font_outline_color = Color(1, 1, 1, 1)
 The tint of text outline of the Button. 
Color font_pressed_color = Color(1, 1, 1, 1)
 Text Color used when the Button is being pressed. 
Color icon_disabled_color = Color(1, 1, 1, 0.4)
 Icon modulate Color used when the Button is disabled. 
Color icon_focus_color = Color(1, 1, 1, 1)
 Icon modulate Color used when the Button is focused. Only replaces the normal modulate color of the button. Disabled, hovered, and pressed states take precedence over this color. 
Color icon_hover_color = Color(1, 1, 1, 1)
 Icon modulate Color used when the Button is being hovered. 
Color icon_hover_pressed_color = Color(1, 1, 1, 1)
 Icon modulate Color used when the Button is being hovered and pressed. 
Color icon_normal_color = Color(1, 1, 1, 1)
 Default icon modulate Color of the Button. 
Color icon_pressed_color = Color(1, 1, 1, 1)
 Icon modulate Color used when the Button is being pressed. 
int h_separation = 4
 The horizontal space between Button's icon and text. Negative values will be treated as 0 when used. 
int icon_max_width = 0
 The maximum allowed width of the Button's icon. This limit is applied on top of the default size of the icon, or its expanded size if expand_icon is true. The height is adjusted according to the icon's ratio. 
int outline_size = 0
 The size of the text outline. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. 
Font font Font of the Button's text. 
int font_size Font size of the Button's text. 
Texture2D icon Default icon for the Button. Appears only if icon is not assigned. 
StyleBox disabled StyleBox used when the Button is disabled. 
StyleBox disabled_mirrored StyleBox used when the Button is disabled (for right-to-left layouts). 
StyleBox focus StyleBox used when the Button is focused. The focus StyleBox is displayed over the base StyleBox, so a partially transparent StyleBox should be used to ensure the base StyleBox remains visible. A StyleBox that represents an outline or an underline works well for this purpose. To disable the focus visual effect, assign a StyleBoxEmpty resource. Note that disabling the focus visual effect will harm keyboard/controller navigation usability, so this is not recommended for accessibility reasons. 
StyleBox hover StyleBox used when the Button is being hovered. 
StyleBox hover_mirrored StyleBox used when the Button is being hovered (for right-to-left layouts). 
StyleBox hover_pressed StyleBox used when the Button is being pressed and hovered at the same time. 
StyleBox hover_pressed_mirrored StyleBox used when the Button is being pressed and hovered at the same time (for right-to-left layouts). 
StyleBox normal Default StyleBox for the Button. 
StyleBox normal_mirrored Default StyleBox for the Button (for right-to-left layouts). 
StyleBox pressed StyleBox used when the Button is being pressed. 
StyleBox pressed_mirrored StyleBox used when the Button is being pressed (for right-to-left layouts).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_button.html


classes/class_videostreamplayback
-----------------------------------------------------------
VideoStreamPlayback Inherits: Resource < RefCounted < Object Internal class used by VideoStream to manage playback state when played from a VideoStreamPlayer.  Description This class is intended to be overridden by video decoder extensions with custom implementations of VideoStream.   Methods  
int _get_channels ( ) virtual const  
float _get_length ( ) virtual const  
int _get_mix_rate ( ) virtual const  
float _get_playback_position ( ) virtual const  
Texture2D _get_texture ( ) virtual const  
bool _is_paused ( ) virtual const  
bool _is_playing ( ) virtual const  
void _play ( ) virtual  
void _seek ( float time ) virtual  
void _set_audio_track ( int idx ) virtual  
void _set_paused ( bool paused ) virtual  
void _stop ( ) virtual  
void _update ( float delta ) virtual  
int mix_audio ( int num_frames, PackedFloat32Array buffer=PackedFloat32Array(), int offset=0 )     Method Descriptions 
int _get_channels ( ) virtual const
 Returns the number of audio channels. 
float _get_length ( ) virtual const
 Returns the video duration in seconds, if known, or 0 if unknown. 
int _get_mix_rate ( ) virtual const
 Returns the audio sample rate used for mixing. 
float _get_playback_position ( ) virtual const
 Return the current playback timestamp. Called in response to the VideoStreamPlayer.stream_position getter. 
Texture2D _get_texture ( ) virtual const
 Allocates a Texture2D in which decoded video frames will be drawn. 
bool _is_paused ( ) virtual const
 Returns the paused status, as set by _set_paused. 
bool _is_playing ( ) virtual const
 Returns the playback state, as determined by calls to _play and _stop. void _play ( ) virtual
 Called in response to VideoStreamPlayer.autoplay or VideoStreamPlayer.play. Note that manual playback may also invoke _stop multiple times before this method is called. _is_playing should return true once playing. void _seek ( float time ) virtual
 Seeks to time seconds. Called in response to the VideoStreamPlayer.stream_position setter. void _set_audio_track ( int idx ) virtual
 Select the audio track idx. Called when playback starts, and in response to the VideoStreamPlayer.audio_track setter. void _set_paused ( bool paused ) virtual
 Set the paused status of video playback. _is_paused must return paused. Called in response to the VideoStreamPlayer.paused setter. void _stop ( ) virtual
 Stops playback. May be called multiple times before _play, or in response to VideoStreamPlayer.stop. _is_playing should return false once stopped. void _update ( float delta ) virtual
 Ticks video playback for delta seconds. Called every frame as long as _is_paused and _is_playing return true. 
int mix_audio ( int num_frames, PackedFloat32Array buffer=PackedFloat32Array(), int offset=0 ) Render num_frames audio frames (of _get_channels floats each) from buffer, starting from index offset in the array. Returns the number of audio frames rendered, or -1 on error.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_videostreamplayback.html


classes/class_shapecast2d
-----------------------------------------------------------
ShapeCast2D Inherits: Node2D < CanvasItem < Node < Object A 2D shape that sweeps a region of space to detect CollisionObject2Ds.  Description Shape casting allows to detect collision objects by sweeping its shape along the cast direction determined by target_position. This is similar to RayCast2D, but it allows for sweeping a region of space, rather than just a straight line. ShapeCast2D can detect multiple collision objects. It is useful for things like wide laser beams or snapping a simple shape to a floor. Immediate collision overlaps can be done with the target_position set to Vector2(0, 0) and by calling force_shapecast_update within the same physics frame. This helps to overcome some limitations of Area2D when used as an instantaneous detection area, as collision information isn't immediately available to it. Note: Shape casting is more computationally expensive than ray casting.   Properties  
bool collide_with_areas false  
bool collide_with_bodies true  
int collision_mask 1  
Array collision_result []  
bool enabled true  
bool exclude_parent true  
float margin 0.0  
int max_results 32  
Shape2D shape   
Vector2 target_position Vector2(0, 50)     Methods  
void add_exception ( CollisionObject2D node )  
void add_exception_rid ( RID rid )  
void clear_exceptions ( )  
void force_shapecast_update ( )  
float get_closest_collision_safe_fraction ( ) const  
float get_closest_collision_unsafe_fraction ( ) const  
Object get_collider ( int index ) const  
RID get_collider_rid ( int index ) const  
int get_collider_shape ( int index ) const  
int get_collision_count ( ) const  
bool get_collision_mask_value ( int layer_number ) const  
Vector2 get_collision_normal ( int index ) const  
Vector2 get_collision_point ( int index ) const  
bool is_colliding ( ) const  
void remove_exception ( CollisionObject2D node )  
void remove_exception_rid ( RID rid )  
void set_collision_mask_value ( int layer_number, bool value )     Property Descriptions 
bool collide_with_areas = false
  void set_collide_with_areas ( bool value )
 
bool is_collide_with_areas_enabled ( )
  If true, collisions with Area2Ds will be reported. 
bool collide_with_bodies = true
  void set_collide_with_bodies ( bool value )
 
bool is_collide_with_bodies_enabled ( )
  If true, collisions with PhysicsBody2Ds will be reported. 
int collision_mask = 1
  void set_collision_mask ( int value )
 
int get_collision_mask ( )
  The shape's collision mask. Only objects in at least one collision layer enabled in the mask will be detected. 
Array collision_result = []
 Returns the complete collision information from the collision sweep. The data returned is the same as in the PhysicsDirectSpaceState2D.get_rest_info method. 
bool enabled = true
  void set_enabled ( bool value )
 
bool is_enabled ( )
  If true, collisions will be reported. 
bool exclude_parent = true
  void set_exclude_parent_body ( bool value )
 
bool get_exclude_parent_body ( )
  If true, the parent node will be excluded from collision detection. 
float margin = 0.0
  void set_margin ( float value )
 
float get_margin ( )
  The collision margin for the shape. A larger margin helps detecting collisions more consistently, at the cost of precision. 
int max_results = 32
  void set_max_results ( int value )
 
int get_max_results ( )
  The number of intersections can be limited with this parameter, to reduce the processing time. 
Shape2D shape  void set_shape ( Shape2D value )
 
Shape2D get_shape ( )
  The Shape2D-derived shape to be used for collision queries. 
Vector2 target_position = Vector2(0, 50)
  void set_target_position ( Vector2 value )
 
Vector2 get_target_position ( )
  The shape's destination point, relative to this node's position.   Method Descriptions void add_exception ( CollisionObject2D node ) Adds a collision exception so the shape does not report collisions with the specified CollisionObject2D node. void add_exception_rid ( RID rid ) Adds a collision exception so the shape does not report collisions with the specified RID. void clear_exceptions ( ) Removes all collision exceptions for this shape. void force_shapecast_update ( ) Updates the collision information for the shape immediately, without waiting for the next _physics_process call. Use this method, for example, when the shape or its parent has changed state. Note: enabled == true is not required for this to work. 
float get_closest_collision_safe_fraction ( ) const
 The fraction from the ShapeCast2D's origin to its target_position (between 0 and 1) of how far the shape can move without triggering a collision. 
float get_closest_collision_unsafe_fraction ( ) const
 The fraction from the ShapeCast2D's origin to its target_position (between 0 and 1) of how far the shape must move to trigger a collision. 
Object get_collider ( int index ) const
 Returns the collided Object of one of the multiple collisions at index, or null if no object is intersecting the shape (i.e. is_colliding returns false). 
RID get_collider_rid ( int index ) const
 Returns the RID of the collided object of one of the multiple collisions at index. 
int get_collider_shape ( int index ) const
 Returns the shape ID of the colliding shape of one of the multiple collisions at index, or 0 if no object is intersecting the shape (i.e. is_colliding returns false). 
int get_collision_count ( ) const
 The number of collisions detected at the point of impact. Use this to iterate over multiple collisions as provided by get_collider, get_collider_shape, get_collision_point, and get_collision_normal methods. 
bool get_collision_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_mask is enabled, given a layer_number between 1 and 32. 
Vector2 get_collision_normal ( int index ) const
 Returns the normal of one of the multiple collisions at index of the intersecting object. 
Vector2 get_collision_point ( int index ) const
 Returns the collision point of one of the multiple collisions at index where the shape intersects the colliding object. Note: this point is in the global coordinate system. 
bool is_colliding ( ) const
 Returns whether any object is intersecting with the shape's vector (considering the vector length). void remove_exception ( CollisionObject2D node ) Removes a collision exception so the shape does report collisions with the specified CollisionObject2D node. void remove_exception_rid ( RID rid ) Removes a collision exception so the shape does report collisions with the specified RID. void set_collision_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_mask, given a layer_number between 1 and 32.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_shapecast2d.html


classes/class_parallaxbackground
-----------------------------------------------------------
ParallaxBackground Inherits: CanvasLayer < Node < Object A node used to create a parallax scrolling background.  Description A ParallaxBackground uses one or more ParallaxLayer child nodes to create a parallax effect. Each ParallaxLayer can move at a different speed using ParallaxLayer.motion_offset. This creates an illusion of depth in a 2D game. If not used with a Camera2D, you must manually calculate the scroll_offset. Note: Each ParallaxBackground is drawn on one specific Viewport and cannot be shared between multiple Viewports, see CanvasLayer.custom_viewport. When using multiple Viewports, for example in a split-screen game, you need create an individual ParallaxBackground for each Viewport you want it to be drawn on.   Properties  
int layer -100 (overrides CanvasLayer)  
Vector2 scroll_base_offset Vector2(0, 0)  
Vector2 scroll_base_scale Vector2(1, 1)  
bool scroll_ignore_camera_zoom false  
Vector2 scroll_limit_begin Vector2(0, 0)  
Vector2 scroll_limit_end Vector2(0, 0)  
Vector2 scroll_offset Vector2(0, 0)     Property Descriptions 
Vector2 scroll_base_offset = Vector2(0, 0)
  void set_scroll_base_offset ( Vector2 value )
 
Vector2 get_scroll_base_offset ( )
  The base position offset for all ParallaxLayer children. 
Vector2 scroll_base_scale = Vector2(1, 1)
  void set_scroll_base_scale ( Vector2 value )
 
Vector2 get_scroll_base_scale ( )
  The base motion scale for all ParallaxLayer children. 
bool scroll_ignore_camera_zoom = false
  void set_ignore_camera_zoom ( bool value )
 
bool is_ignore_camera_zoom ( )
  If true, elements in ParallaxLayer child aren't affected by the zoom level of the camera. 
Vector2 scroll_limit_begin = Vector2(0, 0)
  void set_limit_begin ( Vector2 value )
 
Vector2 get_limit_begin ( )
  Top-left limits for scrolling to begin. If the camera is outside of this limit, the background will stop scrolling. Must be lower than scroll_limit_end to work. 
Vector2 scroll_limit_end = Vector2(0, 0)
  void set_limit_end ( Vector2 value )
 
Vector2 get_limit_end ( )
  Bottom-right limits for scrolling to end. If the camera is outside of this limit, the background will stop scrolling. Must be higher than scroll_limit_begin to work. 
Vector2 scroll_offset = Vector2(0, 0)
  void set_scroll_offset ( Vector2 value )
 
Vector2 get_scroll_offset ( )
  The ParallaxBackground's scroll value. Calculated automatically when using a Camera2D, but can be used to manually manage scrolling when no camera is present.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_parallaxbackground.html


classes/class_placeholdertexture3d
-----------------------------------------------------------
PlaceholderTexture3D Inherits: Texture3D < Texture < Resource < RefCounted < Object Placeholder class for a 3-dimensional texture.  Description This class is used when loading a project that uses a Texture3D subclass in 2 conditions:  When running the project exported in dedicated server mode, only the texture's dimensions are kept (as they may be relied upon for gameplay purposes or positioning of other elements). This allows reducing the exported PCK's size significantly. When this subclass is missing due to using a different engine version or build (e.g. modules disabled).  Note: This is not intended to be used as an actual texture for rendering. It is not guaranteed to work like one in shaders or materials (for example when calculating UV).   Properties  
Vector3i size Vector3i(1, 1, 1)     Property Descriptions 
Vector3i size = Vector3i(1, 1, 1)
  void set_size ( Vector3i value )
 
Vector3i get_size ( )
  The texture's size (in pixels).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_placeholdertexture3d.html


classes/class_light3d
-----------------------------------------------------------
Light3D Inherits: VisualInstance3D < Node3D < Node < Object Inherited By: DirectionalLight3D, OmniLight3D, SpotLight3D Provides a base class for different kinds of light nodes.  Description Light3D is the abstract base class for light nodes. As it can't be instantiated, it shouldn't be used directly. Other types of light nodes inherit from it. Light3D contains the common variables and parameters used for lighting.   Tutorials  3D lights and shadows Faking global illumination Third Person Shooter Demo    Properties  
float distance_fade_begin 40.0  
bool distance_fade_enabled false  
float distance_fade_length 10.0  
float distance_fade_shadow 50.0  
bool editor_only false  
float light_angular_distance 0.0  
BakeMode light_bake_mode 2  
Color light_color Color(1, 1, 1, 1)  
int light_cull_mask 4294967295  
float light_energy 1.0  
float light_indirect_energy 1.0  
float light_intensity_lumens   
float light_intensity_lux   
bool light_negative false  
Texture2D light_projector   
float light_size 0.0  
float light_specular 0.5  
float light_temperature   
float light_volumetric_fog_energy 1.0  
float shadow_bias 0.1  
float shadow_blur 1.0  
bool shadow_enabled false  
float shadow_normal_bias 2.0  
float shadow_opacity 1.0  
bool shadow_reverse_cull_face false  
float shadow_transmittance_bias 0.05     Methods  
Color get_correlated_color ( ) const  
float get_param ( Param param ) const  
void set_param ( Param param, float value )     Enumerations enum Param: 
Param PARAM_ENERGY = 0
 Constant for accessing light_energy. 
Param PARAM_INDIRECT_ENERGY = 1
 Constant for accessing light_indirect_energy. 
Param PARAM_VOLUMETRIC_FOG_ENERGY = 2
 Constant for accessing light_volumetric_fog_energy. 
Param PARAM_SPECULAR = 3
 Constant for accessing light_specular. 
Param PARAM_RANGE = 4
 Constant for accessing OmniLight3D.omni_range or SpotLight3D.spot_range. 
Param PARAM_SIZE = 5
 Constant for accessing light_size. 
Param PARAM_ATTENUATION = 6
 Constant for accessing OmniLight3D.omni_attenuation or SpotLight3D.spot_attenuation. 
Param PARAM_SPOT_ANGLE = 7
 Constant for accessing SpotLight3D.spot_angle. 
Param PARAM_SPOT_ATTENUATION = 8
 Constant for accessing SpotLight3D.spot_angle_attenuation. 
Param PARAM_SHADOW_MAX_DISTANCE = 9
 Constant for accessing DirectionalLight3D.directional_shadow_max_distance. 
Param PARAM_SHADOW_SPLIT_1_OFFSET = 10
 Constant for accessing DirectionalLight3D.directional_shadow_split_1. 
Param PARAM_SHADOW_SPLIT_2_OFFSET = 11
 Constant for accessing DirectionalLight3D.directional_shadow_split_2. 
Param PARAM_SHADOW_SPLIT_3_OFFSET = 12
 Constant for accessing DirectionalLight3D.directional_shadow_split_3. 
Param PARAM_SHADOW_FADE_START = 13
 Constant for accessing DirectionalLight3D.directional_shadow_fade_start. 
Param PARAM_SHADOW_NORMAL_BIAS = 14
 Constant for accessing shadow_normal_bias. 
Param PARAM_SHADOW_BIAS = 15
 Constant for accessing shadow_bias. 
Param PARAM_SHADOW_PANCAKE_SIZE = 16
 Constant for accessing DirectionalLight3D.directional_shadow_pancake_size. 
Param PARAM_SHADOW_OPACITY = 17
 Constant for accessing shadow_opacity. 
Param PARAM_SHADOW_BLUR = 18
 Constant for accessing shadow_blur. 
Param PARAM_TRANSMITTANCE_BIAS = 19
 Constant for accessing shadow_transmittance_bias. 
Param PARAM_INTENSITY = 20
 Constant for accessing light_intensity_lumens and light_intensity_lux. Only used when ProjectSettings.rendering/lights_and_shadows/use_physical_light_units is true. 
Param PARAM_MAX = 21
 Represents the size of the Param enum. enum BakeMode: 
BakeMode BAKE_DISABLED = 0
 Light is ignored when baking. This is the fastest mode, but the light will be taken into account when baking global illumination. This mode should generally be used for dynamic lights that change quickly, as the effect of global illumination is less noticeable on those lights. Note: Hiding a light does not affect baking LightmapGI. Hiding a light will still affect baking VoxelGI and SDFGI (see [member Environment.sdfgi_enabled). 
BakeMode BAKE_STATIC = 1
 Light is taken into account in static baking (VoxelGI, LightmapGI, SDFGI (Environment.sdfgi_enabled)). The light can be moved around or modified, but its global illumination will not update in real-time. This is suitable for subtle changes (such as flickering torches), but generally not large changes such as toggling a light on and off. Note: The light is not baked in LightmapGI if editor_only is true. 
BakeMode BAKE_DYNAMIC = 2
 Light is taken into account in dynamic baking (VoxelGI and SDFGI (Environment.sdfgi_enabled) only). The light can be moved around or modified with global illumination updating in real-time. The light's global illumination appearance will be slightly different compared to BAKE_STATIC. This has a greater performance cost compared to BAKE_STATIC. When using SDFGI, the update speed of dynamic lights is affected by ProjectSettings.rendering/global_illumination/sdfgi/frames_to_update_lights.   Property Descriptions 
float distance_fade_begin = 40.0
  void set_distance_fade_begin ( float value )
 
float get_distance_fade_begin ( )
  The distance from the camera at which the light begins to fade away (in 3D units). Note: Only effective for OmniLight3D and SpotLight3D. 
bool distance_fade_enabled = false
  void set_enable_distance_fade ( bool value )
 
bool is_distance_fade_enabled ( )
  If true, the light will smoothly fade away when far from the active Camera3D starting at distance_fade_begin. This acts as a form of level of detail (LOD). The light will fade out over distance_fade_begin + distance_fade_length, after which it will be culled and not sent to the shader at all. Use this to reduce the number of active lights in a scene and thus improve performance. Note: Only effective for OmniLight3D and SpotLight3D. 
float distance_fade_length = 10.0
  void set_distance_fade_length ( float value )
 
float get_distance_fade_length ( )
  Distance over which the light and its shadow fades. The light's energy and shadow's opacity is progressively reduced over this distance and is completely invisible at the end. Note: Only effective for OmniLight3D and SpotLight3D. 
float distance_fade_shadow = 50.0
  void set_distance_fade_shadow ( float value )
 
float get_distance_fade_shadow ( )
  The distance from the camera at which the light's shadow cuts off (in 3D units). Set this to a value lower than distance_fade_begin + distance_fade_length to further improve performance, as shadow rendering is often more expensive than light rendering itself. Note: Only effective for OmniLight3D and SpotLight3D, and only when shadow_enabled is true. 
bool editor_only = false
  void set_editor_only ( bool value )
 
bool is_editor_only ( )
  If true, the light only appears in the editor and will not be visible at runtime. If true, the light will never be baked in LightmapGI regardless of its light_bake_mode. 
float light_angular_distance = 0.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The light's angular size in degrees. Increasing this will make shadows softer at greater distances (also called percentage-closer soft shadows, or PCSS). Only available for DirectionalLight3Ds. For reference, the Sun from the Earth is approximately 0.5. Increasing this value above 0.0 for lights with shadows enabled will have a noticeable performance cost due to PCSS. Note: light_angular_distance is not affected by Node3D.scale (the light's scale or its parent's scale). Note: PCSS for directional lights is only supported in the Forward+ rendering method, not Mobile or Compatibility. 
BakeMode light_bake_mode = 2
  void set_bake_mode ( BakeMode value )
 
BakeMode get_bake_mode ( )
  The light's bake mode. This will affect the global illumination techniques that have an effect on the light's rendering. See BakeMode. Note: Meshes' global illumination mode will also affect the global illumination rendering. See GeometryInstance3D.gi_mode. 
Color light_color = Color(1, 1, 1, 1)
  void set_color ( Color value )
 
Color get_color ( )
  The light's color. An overbright color can be used to achieve a result equivalent to increasing the light's light_energy. 
int light_cull_mask = 4294967295
  void set_cull_mask ( int value )
 
int get_cull_mask ( )
  The light will affect objects in the selected layers. 
float light_energy = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The light's strength multiplier (this is not a physical unit). For OmniLight3D and SpotLight3D, changing this value will only change the light color's intensity, not the light's radius. 
float light_indirect_energy = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  Secondary multiplier used with indirect light (light bounces). Used with VoxelGI and SDFGI (see Environment.sdfgi_enabled). Note: This property is ignored if light_energy is equal to 0.0, as the light won't be present at all in the GI shader. 
float light_intensity_lumens  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  Used by positional lights (OmniLight3D and SpotLight3D) when ProjectSettings.rendering/lights_and_shadows/use_physical_light_units is true. Sets the intensity of the light source measured in Lumens. Lumens are a measure of luminous flux, which is the total amount of visible light emitted by a light source per unit of time. For SpotLight3Ds, we assume that the area outside the visible cone is surrounded by a perfect light absorbing material. Accordingly, the apparent brightness of the cone area does not change as the cone increases and decreases in size. A typical household lightbulb can range from around 600 lumens to 1,200 lumens, a candle is about 13 lumens, while a streetlight can be approximately 60,000 lumens. 
float light_intensity_lux  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  Used by DirectionalLight3Ds when ProjectSettings.rendering/lights_and_shadows/use_physical_light_units is true. Sets the intensity of the light source measured in Lux. Lux is a measure of luminous flux per unit area, it is equal to one lumen per square meter. Lux is the measure of how much light hits a surface at a given time. On a clear sunny day a surface in direct sunlight may be approximately 100,000 lux, a typical room in a home may be approximately 50 lux, while the moonlit ground may be approximately 0.1 lux. 
bool light_negative = false
  void set_negative ( bool value )
 
bool is_negative ( )
  If true, the light's effect is reversed, darkening areas and casting bright shadows. 
Texture2D light_projector  void set_projector ( Texture2D value )
 
Texture2D get_projector ( )
  Texture2D projected by light. shadow_enabled must be on for the projector to work. Light projectors make the light appear as if it is shining through a colored but transparent object, almost like light shining through stained-glass. Note: Unlike BaseMaterial3D whose filter mode can be adjusted on a per-material basis, the filter mode for light projector textures is set globally with ProjectSettings.rendering/textures/light_projectors/filter. Note: Light projector textures are only supported in the Forward+ and Mobile rendering methods, not Compatibility. 
float light_size = 0.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The size of the light in Godot units. Only available for OmniLight3Ds and SpotLight3Ds. Increasing this value will make the light fade out slower and shadows appear blurrier (also called percentage-closer soft shadows, or PCSS). This can be used to simulate area lights to an extent. Increasing this value above 0.0 for lights with shadows enabled will have a noticeable performance cost due to PCSS. Note: light_size is not affected by Node3D.scale (the light's scale or its parent's scale). Note: PCSS for positional lights is only supported in the Forward+ and Mobile rendering methods, not Compatibility. 
float light_specular = 0.5
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The intensity of the specular blob in objects affected by the light. At 0, the light becomes a pure diffuse light. When not baking emission, this can be used to avoid unrealistic reflections when placing lights above an emissive surface. 
float light_temperature  void set_temperature ( float value )
 
float get_temperature ( )
  Sets the color temperature of the light source, measured in Kelvin. This is used to calculate a correlated color temperature which tints the light_color. The sun on a cloudy day is approximately 6500 Kelvin, on a clear day it is between 5500 to 6000 Kelvin, and on a clear day at sunrise or sunset it ranges to around 1850 Kelvin. 
float light_volumetric_fog_energy = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  Secondary multiplier multiplied with light_energy then used with the Environment's volumetric fog (if enabled). If set to 0.0, computing volumetric fog will be skipped for this light, which can improve performance for large amounts of lights when volumetric fog is enabled. Note: To prevent short-lived dynamic light effects from poorly interacting with volumetric fog, lights used in those effects should have light_volumetric_fog_energy set to 0.0 unless Environment.volumetric_fog_temporal_reprojection_enabled is disabled (or unless the reprojection amount is significantly lowered). 
float shadow_bias = 0.1
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  Used to adjust shadow appearance. Too small a value results in self-shadowing ("shadow acne"), while too large a value causes shadows to separate from casters ("peter-panning"). Adjust as needed. 
float shadow_blur = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  Blurs the edges of the shadow. Can be used to hide pixel artifacts in low-resolution shadow maps. A high value can impact performance, make shadows appear grainy and can cause other unwanted artifacts. Try to keep as near default as possible. 
bool shadow_enabled = false
  void set_shadow ( bool value )
 
bool has_shadow ( )
  If true, the light will cast real-time shadows. This has a significant performance cost. Only enable shadow rendering when it makes a noticeable difference in the scene's appearance, and consider using distance_fade_enabled to hide the light when far away from the Camera3D. 
float shadow_normal_bias = 2.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  Offsets the lookup into the shadow map by the object's normal. This can be used to reduce self-shadowing artifacts without using shadow_bias. In practice, this value should be tweaked along with shadow_bias to reduce artifacts as much as possible. 
float shadow_opacity = 1.0
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
  The opacity to use when rendering the light's shadow map. Values lower than 1.0 make the light appear through shadows. This can be used to fake global illumination at a low performance cost. 
bool shadow_reverse_cull_face = false
  void set_shadow_reverse_cull_face ( bool value )
 
bool get_shadow_reverse_cull_face ( )
  If true, reverses the backface culling of the mesh. This can be useful when you have a flat mesh that has a light behind it. If you need to cast a shadow on both sides of the mesh, set the mesh to use double-sided shadows with GeometryInstance3D.SHADOW_CASTING_SETTING_DOUBLE_SIDED. 
float shadow_transmittance_bias = 0.05
  void set_param ( Param param, float value )
 
float get_param ( Param param ) const
   There is currently no description for this property. Please help us by contributing one!    Method Descriptions 
Color get_correlated_color ( ) const
 Returns the Color of an idealized blackbody at the given light_temperature. This value is calculated internally based on the light_temperature. This Color is multiplied by light_color before being sent to the RenderingServer. 
float get_param ( Param param ) const
 Returns the value of the specified Param parameter. void set_param ( Param param, float value ) Sets the value of the specified Param parameter.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_light3d.html


classes/class_subviewportcontainer
-----------------------------------------------------------
SubViewportContainer Inherits: Container < Control < CanvasItem < Node < Object A container used for displaying the contents of a SubViewport.  Description A container that displays the contents of underlying SubViewport child nodes. It uses the combined size of the SubViewports as minimum size, unless stretch is enabled. Note: Changing a SubViewportContainer's Control.scale will cause its contents to appear distorted. To change its visual size without causing distortion, adjust the node's margins instead (if it's not already in a container). Note: The SubViewportContainer forwards mouse-enter and mouse-exit notifications to its sub-viewports.   Properties  
FocusMode focus_mode 1 (overrides Control)  
bool stretch false  
int stretch_shrink 1     Methods  
bool _propagate_input_event ( InputEvent event ) virtual const     Property Descriptions 
bool stretch = false
  void set_stretch ( bool value )
 
bool is_stretch_enabled ( )
  If true, the sub-viewport will be automatically resized to the control's size. Note: If true, this will prohibit changing SubViewport.size of its children manually. 
int stretch_shrink = 1
  void set_stretch_shrink ( int value )
 
int get_stretch_shrink ( )
  Divides the sub-viewport's effective resolution by this value while preserving its scale. This can be used to speed up rendering. For example, a 1280Ã—720 sub-viewport with stretch_shrink set to 2 will be rendered at 640Ã—360 while occupying the same size in the container. Note: stretch must be true for this property to work.   Method Descriptions 
bool _propagate_input_event ( InputEvent event ) virtual const
 Virtual method to be implemented by the user. If it returns true, the event is propagated to SubViewport children. Propagation doesn't happen if it returns false. If the function is not implemented, all events are propagated to SubViewports.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_subviewportcontainer.html


classes/class_buttongroup
-----------------------------------------------------------
ButtonGroup Inherits: Resource < RefCounted < Object A group of buttons that doesn't allow more than one button to be pressed at a time.  Description A group of BaseButton-derived buttons. The buttons in a ButtonGroup are treated like radio buttons: No more than one button can be pressed at a time. Some types of buttons (such as CheckBox) may have a special appearance in this state. Every member of a ButtonGroup should have BaseButton.toggle_mode set to true.   Properties  
bool allow_unpress false  
bool resource_local_to_scene true (overrides Resource)     Methods  
BaseButton[] get_buttons ( )  
BaseButton get_pressed_button ( )     Signals pressed ( BaseButton button ) Emitted when one of the buttons of the group is pressed.   Property Descriptions 
bool allow_unpress = false
  void set_allow_unpress ( bool value )
 
bool is_allow_unpress ( )
  If true, it is possible to unpress all buttons in this ButtonGroup.   Method Descriptions 
BaseButton[] get_buttons ( ) Returns an Array of Buttons who have this as their ButtonGroup (see BaseButton.button_group). 
BaseButton get_pressed_button ( ) Returns the current pressed button.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_buttongroup.html


classes/class_gpuparticlesattractorbox3d
-----------------------------------------------------------
GPUParticlesAttractorBox3D Inherits: GPUParticlesAttractor3D < VisualInstance3D < Node3D < Node < Object A box-shaped attractor that influences particles from GPUParticles3D nodes.  Description A box-shaped attractor that influences particles from GPUParticles3D nodes. Can be used to attract particles towards its origin, or to push them away from its origin. Particle attractors work in real-time and can be moved, rotated and scaled during gameplay. Unlike collision shapes, non-uniform scaling of attractors is also supported. Note: Particle attractors only affect GPUParticles3D, not CPUParticles3D.   Properties  
Vector3 size Vector3(2, 2, 2)     Property Descriptions 
Vector3 size = Vector3(2, 2, 2)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The attractor box's size in 3D units.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gpuparticlesattractorbox3d.html


classes/class_atlastexture
-----------------------------------------------------------
AtlasTexture Inherits: Texture2D < Texture < Resource < RefCounted < Object A texture that crops out part of another Texture2D.  Description Texture2D resource that draws only part of its atlas texture, as defined by the region. An additional margin can also be set, which is useful for small adjustments. Multiple AtlasTexture resources can be cropped from the same atlas. Packing many smaller textures into a singular large texture helps to optimize video memory costs and render calls. Note: AtlasTexture cannot be used in an AnimatedTexture, and may not tile properly in nodes such as TextureRect, when inside other AtlasTexture resources.   Properties  
Texture2D atlas   
bool filter_clip false  
Rect2 margin Rect2(0, 0, 0, 0)  
Rect2 region Rect2(0, 0, 0, 0)  
bool resource_local_to_scene false (overrides Resource)     Property Descriptions 
Texture2D atlas  void set_atlas ( Texture2D value )
 
Texture2D get_atlas ( )
  The texture that contains the atlas. Can be any type inheriting from Texture2D, including another AtlasTexture. 
bool filter_clip = false
  void set_filter_clip ( bool value )
 
bool has_filter_clip ( )
  If true, the area outside of the region is clipped to avoid bleeding of the surrounding texture pixels. 
Rect2 margin = Rect2(0, 0, 0, 0)
  void set_margin ( Rect2 value )
 
Rect2 get_margin ( )
  The margin around the region. Useful for small adjustments. If the Rect2.size of this property ("w" and "h" in the editor) is set, the drawn texture is resized to fit within the margin. 
Rect2 region = Rect2(0, 0, 0, 0)
  void set_region ( Rect2 value )
 
Rect2 get_region ( )
  The region used to draw the atlas.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_atlastexture.html


classes/class_texturecubemaprd
-----------------------------------------------------------
TextureCubemapRD Inherits: TextureLayeredRD < TextureLayered < Texture < Resource < RefCounted < Object Texture for Cubemap that is bound to a texture created on the RenderingDevice.  Description This texture class allows you to use a cubemap texture created directly on the RenderingDevice as a texture for materials, meshes, etc.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_texturecubemaprd.html


classes/class_gradienttexture1d
-----------------------------------------------------------
GradientTexture1D Inherits: Texture2D < Texture < Resource < RefCounted < Object A 1D texture that uses colors obtained from a Gradient.  Description A 1D texture that obtains colors from a Gradient to fill the texture data. The texture is filled by sampling the gradient for each pixel. Therefore, the texture does not necessarily represent an exact copy of the gradient, as it may miss some colors if there are not enough pixels. See also GradientTexture2D, CurveTexture and CurveXYZTexture.   Properties  
Gradient gradient   
bool resource_local_to_scene false (overrides Resource)  
bool use_hdr false  
int width 256     Property Descriptions 
Gradient gradient  void set_gradient ( Gradient value )
 
Gradient get_gradient ( )
  The Gradient used to fill the texture. 
bool use_hdr = false
  void set_use_hdr ( bool value )
 
bool is_using_hdr ( )
  If true, the generated texture will support high dynamic range (Image.FORMAT_RGBAF format). This allows for glow effects to work if Environment.glow_enabled is true. If false, the generated texture will use low dynamic range; overbright colors will be clamped (Image.FORMAT_RGBA8 format). 
int width = 256
  void set_width ( int value )
 
int get_width ( )
  The number of color samples that will be obtained from the Gradient.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gradienttexture1d.html


classes/class_groovejoint2d
-----------------------------------------------------------
GrooveJoint2D Inherits: Joint2D < Node2D < CanvasItem < Node < Object A physics joint that restricts the movement of two 2D physics bodies to a fixed axis.  Description A physics joint that restricts the movement of two 2D physics bodies to a fixed axis. For example, a StaticBody2D representing a piston base can be attached to a RigidBody2D representing the piston head, moving up and down.   Properties  
float initial_offset 25.0  
float length 50.0     Property Descriptions 
float initial_offset = 25.0
  void set_initial_offset ( float value )
 
float get_initial_offset ( )
  The body B's initial anchor position defined by the joint's origin and a local offset initial_offset along the joint's Y axis (along the groove). 
float length = 50.0
  void set_length ( float value )
 
float get_length ( )
  The groove's length. The groove is from the joint's origin towards length along the joint's local Y axis.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_groovejoint2d.html


classes/class_area3d
-----------------------------------------------------------
Area3D Inherits: CollisionObject3D < Node3D < Node < Object A region of 3D space that detects other CollisionObject3Ds entering or exiting it.  Description Area3D is a region of 3D space defined by one or multiple CollisionShape3D or CollisionPolygon3D child nodes. It detects when other CollisionObject3Ds enter or exit it, and it also keeps track of which collision objects haven't exited it yet (i.e. which one are overlapping it). This node can also locally alter or override physics parameters (gravity, damping) and route audio to custom audio buses. Warning: Using a ConcavePolygonShape3D inside a CollisionShape3D child of this node (created e.g. by using the Create Trimesh Collision Sibling option in the Mesh menu that appears when selecting a MeshInstance3D node) may give unexpected results, since this collision shape is hollow. If this is not desired, it has to be split into multiple ConvexPolygonShape3Ds or primitive shapes like BoxShape3D, or in some cases it may be replaceable by a CollisionPolygon3D.   Tutorials  Using Area2D 3D Platformer Demo GUI in 3D Demo    Properties  
float angular_damp 0.1  
SpaceOverride angular_damp_space_override 0  
StringName audio_bus_name &"Master"  
bool audio_bus_override false  
float gravity 9.8  
Vector3 gravity_direction Vector3(0, -1, 0)  
bool gravity_point false  
Vector3 gravity_point_center Vector3(0, -1, 0)  
float gravity_point_unit_distance 0.0  
SpaceOverride gravity_space_override 0  
float linear_damp 0.1  
SpaceOverride linear_damp_space_override 0  
bool monitorable true  
bool monitoring true  
int priority 0  
float reverb_bus_amount 0.0  
bool reverb_bus_enabled false  
StringName reverb_bus_name &"Master"  
float reverb_bus_uniformity 0.0  
float wind_attenuation_factor 0.0  
float wind_force_magnitude 0.0  
NodePath wind_source_path NodePath("")     Methods  
Area3D[] get_overlapping_areas ( ) const  
Node3D[] get_overlapping_bodies ( ) const  
bool has_overlapping_areas ( ) const  
bool has_overlapping_bodies ( ) const  
bool overlaps_area ( Node area ) const  
bool overlaps_body ( Node body ) const     Signals area_entered ( Area3D area ) Emitted when the received area enters this area. Requires monitoring to be set to true. area_exited ( Area3D area ) Emitted when the received area exits this area. Requires monitoring to be set to true. area_shape_entered ( RID area_rid, Area3D area, int area_shape_index, int local_shape_index ) Emitted when a Shape3D of the received area enters a shape of this area. Requires monitoring to be set to true. local_shape_index and area_shape_index contain indices of the interacting shapes from this area and the other area, respectively. area_rid contains the RID of the other area. These values can be used with the PhysicsServer3D. Example of getting the CollisionShape3D node from the shape index:  GDScriptvar other_shape_owner = area.shape_find_owner(area_shape_index)
var other_shape_node = area.shape_owner_get_owner(other_shape_owner)
var local_shape_owner = shape_find_owner(local_shape_index)
var local_shape_node = shape_owner_get_owner(local_shape_owner)
  area_shape_exited ( RID area_rid, Area3D area, int area_shape_index, int local_shape_index ) Emitted when a Shape3D of the received area exits a shape of this area. Requires monitoring to be set to true. See also area_shape_entered. body_entered ( Node3D body ) Emitted when the received body enters this area. body can be a PhysicsBody3D or a GridMap. GridMaps are detected if their MeshLibrary has collision shapes configured. Requires monitoring to be set to true. body_exited ( Node3D body ) Emitted when the received body exits this area. body can be a PhysicsBody3D or a GridMap. GridMaps are detected if their MeshLibrary has collision shapes configured. Requires monitoring to be set to true. body_shape_entered ( RID body_rid, Node3D body, int body_shape_index, int local_shape_index ) Emitted when a Shape3D of the received body enters a shape of this area. body can be a PhysicsBody3D or a GridMap. GridMaps are detected if their MeshLibrary has collision shapes configured. Requires monitoring to be set to true. local_shape_index and body_shape_index contain indices of the interacting shapes from this area and the interacting body, respectively. body_rid contains the RID of the body. These values can be used with the PhysicsServer3D. Example of getting the CollisionShape3D node from the shape index:  GDScriptvar body_shape_owner = body.shape_find_owner(body_shape_index)
var body_shape_node = body.shape_owner_get_owner(body_shape_owner)
var local_shape_owner = shape_find_owner(local_shape_index)
var local_shape_node = shape_owner_get_owner(local_shape_owner)
  body_shape_exited ( RID body_rid, Node3D body, int body_shape_index, int local_shape_index ) Emitted when a Shape3D of the received body exits a shape of this area. body can be a PhysicsBody3D or a GridMap. GridMaps are detected if their MeshLibrary has collision shapes configured. Requires monitoring to be set to true. See also body_shape_entered.   Enumerations enum SpaceOverride: 
SpaceOverride SPACE_OVERRIDE_DISABLED = 0
 This area does not affect gravity/damping. 
SpaceOverride SPACE_OVERRIDE_COMBINE = 1
 This area adds its gravity/damping values to whatever has been calculated so far (in priority order). 
SpaceOverride SPACE_OVERRIDE_COMBINE_REPLACE = 2
 This area adds its gravity/damping values to whatever has been calculated so far (in priority order), ignoring any lower priority areas. 
SpaceOverride SPACE_OVERRIDE_REPLACE = 3
 This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas. 
SpaceOverride SPACE_OVERRIDE_REPLACE_COMBINE = 4
 This area replaces any gravity/damping calculated so far (in priority order), but keeps calculating the rest of the areas.   Property Descriptions 
float angular_damp = 0.1
  void set_angular_damp ( float value )
 
float get_angular_damp ( )
  The rate at which objects stop spinning in this area. Represents the angular velocity lost per second. See ProjectSettings.physics/3d/default_angular_damp for more details about damping. 
SpaceOverride angular_damp_space_override = 0
  void set_angular_damp_space_override_mode ( SpaceOverride value )
 
SpaceOverride get_angular_damp_space_override_mode ( )
  Override mode for angular damping calculations within this area. See SpaceOverride for possible values. 
StringName audio_bus_name = &"Master"
  void set_audio_bus_name ( StringName value )
 
StringName get_audio_bus_name ( )
  The name of the area's audio bus. 
bool audio_bus_override = false
  void set_audio_bus_override ( bool value )
 
bool is_overriding_audio_bus ( )
  If true, the area's audio bus overrides the default audio bus. 
float gravity = 9.8
  void set_gravity ( float value )
 
float get_gravity ( )
  The area's gravity intensity (in meters per second squared). This value multiplies the gravity direction. This is useful to alter the force of gravity without altering its direction. 
Vector3 gravity_direction = Vector3(0, -1, 0)
  void set_gravity_direction ( Vector3 value )
 
Vector3 get_gravity_direction ( )
  The area's gravity vector (not normalized). 
bool gravity_point = false
  void set_gravity_is_point ( bool value )
 
bool is_gravity_a_point ( )
  If true, gravity is calculated from a point (set via gravity_point_center). See also gravity_space_override. 
Vector3 gravity_point_center = Vector3(0, -1, 0)
  void set_gravity_point_center ( Vector3 value )
 
Vector3 get_gravity_point_center ( )
  If gravity is a point (see gravity_point), this will be the point of attraction. 
float gravity_point_unit_distance = 0.0
  void set_gravity_point_unit_distance ( float value )
 
float get_gravity_point_unit_distance ( )
  The distance at which the gravity strength is equal to gravity. For example, on a planet 100 meters in radius with a surface gravity of 4.0 m/sÂ², set the gravity to 4.0 and the unit distance to 100.0. The gravity will have falloff according to the inverse square law, so in the example, at 200 meters from the center the gravity will be 1.0 m/sÂ² (twice the distance, 1/4th the gravity), at 50 meters it will be 16.0 m/sÂ² (half the distance, 4x the gravity), and so on. The above is true only when the unit distance is a positive number. When this is set to 0.0, the gravity will be constant regardless of distance. 
SpaceOverride gravity_space_override = 0
  void set_gravity_space_override_mode ( SpaceOverride value )
 
SpaceOverride get_gravity_space_override_mode ( )
  Override mode for gravity calculations within this area. See SpaceOverride for possible values. 
float linear_damp = 0.1
  void set_linear_damp ( float value )
 
float get_linear_damp ( )
  The rate at which objects stop moving in this area. Represents the linear velocity lost per second. See ProjectSettings.physics/3d/default_linear_damp for more details about damping. 
SpaceOverride linear_damp_space_override = 0
  void set_linear_damp_space_override_mode ( SpaceOverride value )
 
SpaceOverride get_linear_damp_space_override_mode ( )
  Override mode for linear damping calculations within this area. See SpaceOverride for possible values. 
bool monitorable = true
  void set_monitorable ( bool value )
 
bool is_monitorable ( )
  If true, other monitoring areas can detect this area. 
bool monitoring = true
  void set_monitoring ( bool value )
 
bool is_monitoring ( )
  If true, the area detects bodies or areas entering and exiting it. 
int priority = 0
  void set_priority ( int value )
 
int get_priority ( )
  The area's priority. Higher priority areas are processed first. The World3D's physics is always processed last, after all areas. 
float reverb_bus_amount = 0.0
  void set_reverb_amount ( float value )
 
float get_reverb_amount ( )
  The degree to which this area applies reverb to its associated audio. Ranges from 0 to 1 with 0.1 precision. 
bool reverb_bus_enabled = false
  void set_use_reverb_bus ( bool value )
 
bool is_using_reverb_bus ( )
  If true, the area applies reverb to its associated audio. 
StringName reverb_bus_name = &"Master"
  void set_reverb_bus_name ( StringName value )
 
StringName get_reverb_bus_name ( )
  The name of the reverb bus to use for this area's associated audio. 
float reverb_bus_uniformity = 0.0
  void set_reverb_uniformity ( float value )
 
float get_reverb_uniformity ( )
  The degree to which this area's reverb is a uniform effect. Ranges from 0 to 1 with 0.1 precision. 
float wind_attenuation_factor = 0.0
  void set_wind_attenuation_factor ( float value )
 
float get_wind_attenuation_factor ( )
  The exponential rate at which wind force decreases with distance from its origin. 
float wind_force_magnitude = 0.0
  void set_wind_force_magnitude ( float value )
 
float get_wind_force_magnitude ( )
  The magnitude of area-specific wind force. 
NodePath wind_source_path = NodePath("")
  void set_wind_source_path ( NodePath value )
 
NodePath get_wind_source_path ( )
  The Node3D which is used to specify the direction and origin of an area-specific wind force. The direction is opposite to the z-axis of the Node3D's local transform, and its origin is the origin of the Node3D's local transform.   Method Descriptions 
Area3D[] get_overlapping_areas ( ) const
 Returns a list of intersecting Area3Ds. The overlapping area's CollisionObject3D.collision_layer must be part of this area's CollisionObject3D.collision_mask in order to be detected. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead. 
Node3D[] get_overlapping_bodies ( ) const
 Returns a list of intersecting PhysicsBody3Ds and GridMaps. The overlapping body's CollisionObject3D.collision_layer must be part of this area's CollisionObject3D.collision_mask in order to be detected. For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead. 
bool has_overlapping_areas ( ) const
 Returns true if intersecting any Area3Ds, otherwise returns false. The overlapping area's CollisionObject3D.collision_layer must be part of this area's CollisionObject3D.collision_mask in order to be detected. For performance reasons (collisions are all processed at the same time) the list of overlapping areas is modified once during the physics step, not immediately after objects are moved. Consider using signals instead. 
bool has_overlapping_bodies ( ) const
 Returns true if intersecting any PhysicsBody3Ds or GridMaps, otherwise returns false. The overlapping body's CollisionObject3D.collision_layer must be part of this area's CollisionObject3D.collision_mask in order to be detected. For performance reasons (collisions are all processed at the same time) the list of overlapping bodies is modified once during the physics step, not immediately after objects are moved. Consider using signals instead. 
bool overlaps_area ( Node area ) const
 Returns true if the given Area3D intersects or overlaps this Area3D, false otherwise. Note: The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead. 
bool overlaps_body ( Node body ) const
 Returns true if the given physics body intersects or overlaps this Area3D, false otherwise. Note: The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead. The body argument can either be a PhysicsBody3D or a GridMap instance. While GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_area3d.html


classes/class_skeletonmodification2dphysicalbones
-----------------------------------------------------------
SkeletonModification2DPhysicalBones Inherits: SkeletonModification2D < Resource < RefCounted < Object A modification that applies the transforms of PhysicalBone2D nodes to Bone2D nodes.  Description This modification takes the transforms of PhysicalBone2D nodes and applies them to Bone2D nodes. This allows the Bone2D nodes to react to physics thanks to the linked PhysicalBone2D nodes. Experimental. Physical bones may be changed in the future to perform the position update of Bone2D on their own.   Properties  
int physical_bone_chain_length 0     Methods  
void fetch_physical_bones ( )  
NodePath get_physical_bone_node ( int joint_idx ) const  
void set_physical_bone_node ( int joint_idx, NodePath physicalbone2d_node )  
void start_simulation ( StringName[] bones=[] )  
void stop_simulation ( StringName[] bones=[] )     Property Descriptions 
int physical_bone_chain_length = 0
  void set_physical_bone_chain_length ( int value )
 
int get_physical_bone_chain_length ( )
  The number of PhysicalBone2D nodes linked in this modification.   Method Descriptions void fetch_physical_bones ( ) Empties the list of PhysicalBone2D nodes and populates it with all PhysicalBone2D nodes that are children of the Skeleton2D. 
NodePath get_physical_bone_node ( int joint_idx ) const
 Returns the PhysicalBone2D node at joint_idx. void set_physical_bone_node ( int joint_idx, NodePath physicalbone2d_node ) Sets the PhysicalBone2D node at joint_idx. Note: This is just the index used for this modification, not the bone index used in the Skeleton2D. void start_simulation ( StringName[] bones=[] ) Tell the PhysicalBone2D nodes to start simulating and interacting with the physics world. Optionally, an array of bone names can be passed to this function, and that will cause only PhysicalBone2D nodes with those names to start simulating. void stop_simulation ( StringName[] bones=[] ) Tell the PhysicalBone2D nodes to stop simulating and interacting with the physics world. Optionally, an array of bone names can be passed to this function, and that will cause only PhysicalBone2D nodes with those names to stop simulating.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeletonmodification2dphysicalbones.html


classes/class_remotetransform2d
-----------------------------------------------------------
RemoteTransform2D Inherits: Node2D < CanvasItem < Node < Object RemoteTransform2D pushes its own Transform2D to another Node2D derived node in the scene.  Description RemoteTransform2D pushes its own Transform2D to another Node2D derived node (called the remote node) in the scene. It can be set to update another node's position, rotation and/or scale. It can use either global or local coordinates.   Properties  
NodePath remote_path NodePath("")  
bool update_position true  
bool update_rotation true  
bool update_scale true  
bool use_global_coordinates true     Methods  
void force_update_cache ( )     Property Descriptions 
NodePath remote_path = NodePath("")
  void set_remote_node ( NodePath value )
 
NodePath get_remote_node ( )
  The NodePath to the remote node, relative to the RemoteTransform2D's position in the scene. 
bool update_position = true
  void set_update_position ( bool value )
 
bool get_update_position ( )
  If true, the remote node's position is updated. 
bool update_rotation = true
  void set_update_rotation ( bool value )
 
bool get_update_rotation ( )
  If true, the remote node's rotation is updated. 
bool update_scale = true
  void set_update_scale ( bool value )
 
bool get_update_scale ( )
  If true, the remote node's scale is updated. 
bool use_global_coordinates = true
  void set_use_global_coordinates ( bool value )
 
bool get_use_global_coordinates ( )
  If true, global coordinates are used. If false, local coordinates are used.   Method Descriptions void force_update_cache ( ) RemoteTransform2D caches the remote node. It may not notice if the remote node disappears; force_update_cache forces it to update the cache again.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_remotetransform2d.html


classes/class_node2d
-----------------------------------------------------------
Node2D Inherits: CanvasItem < Node < Object Inherited By: AnimatedSprite2D, AudioListener2D, AudioStreamPlayer2D, BackBufferCopy, Bone2D, Camera2D, CanvasGroup, CanvasModulate, CollisionObject2D, CollisionPolygon2D, CollisionShape2D, CPUParticles2D, GPUParticles2D, Joint2D, Light2D, LightOccluder2D, Line2D, Marker2D, MeshInstance2D, MultiMeshInstance2D, NavigationLink2D, NavigationObstacle2D, NavigationRegion2D, ParallaxLayer, Path2D, PathFollow2D, Polygon2D, RayCast2D, RemoteTransform2D, ShapeCast2D, Skeleton2D, Sprite2D, TileMap, TouchScreenButton, VisibleOnScreenNotifier2D A 2D game object, inherited by all 2D-related nodes. Has a position, rotation, scale, and Z index.  Description A 2D game object, with a transform (position, rotation, and scale). All 2D nodes, including physics objects and sprites, inherit from Node2D. Use Node2D as a parent node to move, scale and rotate children in a 2D project. Also gives control of the node's render order.   Tutorials  Custom drawing in 2D All 2D Demos    Properties  
Vector2 global_position   
float global_rotation   
float global_rotation_degrees   
Vector2 global_scale   
float global_skew   
Transform2D global_transform   
Vector2 position Vector2(0, 0)  
float rotation 0.0  
float rotation_degrees   
Vector2 scale Vector2(1, 1)  
float skew 0.0  
Transform2D transform      Methods  
void apply_scale ( Vector2 ratio )  
float get_angle_to ( Vector2 point ) const  
Transform2D get_relative_transform_to_parent ( Node parent ) const  
void global_translate ( Vector2 offset )  
void look_at ( Vector2 point )  
void move_local_x ( float delta, bool scaled=false )  
void move_local_y ( float delta, bool scaled=false )  
void rotate ( float radians )  
Vector2 to_global ( Vector2 local_point ) const  
Vector2 to_local ( Vector2 global_point ) const  
void translate ( Vector2 offset )     Property Descriptions 
Vector2 global_position  void set_global_position ( Vector2 value )
 
Vector2 get_global_position ( )
  Global position. 
float global_rotation  void set_global_rotation ( float value )
 
float get_global_rotation ( )
  Global rotation in radians. 
float global_rotation_degrees  void set_global_rotation_degrees ( float value )
 
float get_global_rotation_degrees ( )
  Helper property to access global_rotation in degrees instead of radians. 
Vector2 global_scale  void set_global_scale ( Vector2 value )
 
Vector2 get_global_scale ( )
  Global scale. 
float global_skew  void set_global_skew ( float value )
 
float get_global_skew ( )
  Global skew in radians. 
Transform2D global_transform  void set_global_transform ( Transform2D value )
 
Transform2D get_global_transform ( )
  Global Transform2D. 
Vector2 position = Vector2(0, 0)
  void set_position ( Vector2 value )
 
Vector2 get_position ( )
  Position, relative to the node's parent. 
float rotation = 0.0
  void set_rotation ( float value )
 
float get_rotation ( )
  Rotation in radians, relative to the node's parent. Note: This property is edited in the inspector in degrees. If you want to use degrees in a script, use rotation_degrees. 
float rotation_degrees  void set_rotation_degrees ( float value )
 
float get_rotation_degrees ( )
  Helper property to access rotation in degrees instead of radians. 
Vector2 scale = Vector2(1, 1)
  void set_scale ( Vector2 value )
 
Vector2 get_scale ( )
  The node's scale. Unscaled value: (1, 1). Note: Negative X scales in 2D are not decomposable from the transformation matrix. Due to the way scale is represented with transformation matrices in Godot, negative scales on the X axis will be changed to negative scales on the Y axis and a rotation of 180 degrees when decomposed. 
float skew = 0.0
  void set_skew ( float value )
 
float get_skew ( )
  Slants the node. Note: Skew is X axis only. 
Transform2D transform  void set_transform ( Transform2D value )
 
Transform2D get_transform ( )
  Local Transform2D.   Method Descriptions void apply_scale ( Vector2 ratio ) Multiplies the current scale by the ratio vector. 
float get_angle_to ( Vector2 point ) const
 Returns the angle between the node and the point in radians. Illustration of the returned angle. 
Transform2D get_relative_transform_to_parent ( Node parent ) const
 Returns the Transform2D relative to this node's parent. void global_translate ( Vector2 offset ) Adds the offset vector to the node's global position. void look_at ( Vector2 point ) Rotates the node so it points towards the point, which is expected to use global coordinates. void move_local_x ( float delta, bool scaled=false ) Applies a local translation on the node's X axis based on the Node._process's delta. If scaled is false, normalizes the movement. void move_local_y ( float delta, bool scaled=false ) Applies a local translation on the node's Y axis based on the Node._process's delta. If scaled is false, normalizes the movement. void rotate ( float radians ) Applies a rotation to the node, in radians, starting from its current rotation. 
Vector2 to_global ( Vector2 local_point ) const
 Transforms the provided local position into a position in global coordinate space. The input is expected to be local relative to the Node2D it is called on. e.g. Applying this method to the positions of child nodes will correctly transform their positions into the global coordinate space, but applying it to a node's own position will give an incorrect result, as it will incorporate the node's own transformation into its global position. 
Vector2 to_local ( Vector2 global_point ) const
 Transforms the provided global position into a position in local coordinate space. The output will be local relative to the Node2D it is called on. e.g. It is appropriate for determining the positions of child nodes, but it is not appropriate for determining its own position relative to its parent. void translate ( Vector2 offset ) Translates the node by the given offset in local coordinates.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_node2d.html


classes/class_animatablebody2d
-----------------------------------------------------------
AnimatableBody2D Inherits: StaticBody2D < PhysicsBody2D < CollisionObject2D < Node2D < CanvasItem < Node < Object A 2D physics body that can't be moved by external forces. When moved manually, it affects other bodies in its path.  Description An animatable 2D physics body. It can't be moved by external forces or contacts, but can be moved manually by other means such as code, AnimationMixers (with AnimationMixer.callback_mode_process set to AnimationMixer.ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS), and RemoteTransform2D. When AnimatableBody2D is moved, its linear and angular velocity are estimated and used to affect other physics bodies in its path. This makes it useful for moving platforms, doors, and other moving objects.   Properties  
bool sync_to_physics true     Property Descriptions 
bool sync_to_physics = true
  void set_sync_to_physics ( bool value )
 
bool is_sync_to_physics_enabled ( )
  If true, the body's movement will be synchronized to the physics frame. This is useful when animating movement via AnimationPlayer, for example on moving platforms. Do not use together with PhysicsBody2D.move_and_collide.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animatablebody2d.html


classes/class_boneattachment3d
-----------------------------------------------------------
BoneAttachment3D Inherits: Node3D < Node < Object Ð node that dynamically copies or overrides the 3D transform of a bone in its parent Skeleton3D.  Description This node selects a bone in a Skeleton3D and attaches to it. This means that the BoneAttachment3D node will either dynamically copy or override the 3D transform of the selected bone.   Properties  
int bone_idx -1  
String bone_name ""  
bool override_pose false     Methods  
NodePath get_external_skeleton ( ) const  
bool get_use_external_skeleton ( ) const  
void on_bone_pose_update ( int bone_index )  
void set_external_skeleton ( NodePath external_skeleton )  
void set_use_external_skeleton ( bool use_external_skeleton )     Property Descriptions 
int bone_idx = -1
  void set_bone_idx ( int value )
 
int get_bone_idx ( )
  The index of the attached bone. 
String bone_name = ""
  void set_bone_name ( String value )
 
String get_bone_name ( )
  The name of the attached bone. 
bool override_pose = false
  void set_override_pose ( bool value )
 
bool get_override_pose ( )
  Whether the BoneAttachment3D node will override the bone pose of the bone it is attached to. When set to true, the BoneAttachment3D node can change the pose of the bone. When set to false, the BoneAttachment3D will always be set to the bone's transform.   Method Descriptions 
NodePath get_external_skeleton ( ) const
 Returns the NodePath to the external Skeleton3D node, if one has been set. 
bool get_use_external_skeleton ( ) const
 Returns whether the BoneAttachment3D node is using an external Skeleton3D rather than attempting to use its parent node as the Skeleton3D. void on_bone_pose_update ( int bone_index ) A function that is called automatically when the Skeleton3D the BoneAttachment3D node is using has a bone that has changed its pose. This function is where the BoneAttachment3D node updates its position so it is correctly bound when it is not set to override the bone pose. void set_external_skeleton ( NodePath external_skeleton ) Sets the NodePath to the external skeleton that the BoneAttachment3D node should use. See set_use_external_skeleton to enable the external Skeleton3D node. void set_use_external_skeleton ( bool use_external_skeleton ) Sets whether the BoneAttachment3D node will use an external Skeleton3D node rather than attempting to use its parent node as the Skeleton3D. When set to true, the BoneAttachment3D node will use the external Skeleton3D node set in set_external_skeleton.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_boneattachment3d.html


classes/class_importermeshinstance3d
-----------------------------------------------------------
ImporterMeshInstance3D Inherits: Node3D < Node < Object  There is currently no description for this class. Please help us by contributing one!   Properties  
ShadowCastingSetting cast_shadow 1  
int layer_mask 1  
ImporterMesh mesh   
NodePath skeleton_path NodePath("")  
Skin skin   
float visibility_range_begin 0.0  
float visibility_range_begin_margin 0.0  
float visibility_range_end 0.0  
float visibility_range_end_margin 0.0  
VisibilityRangeFadeMode visibility_range_fade_mode 0     Property Descriptions 
ShadowCastingSetting cast_shadow = 1
  void set_cast_shadows_setting ( ShadowCastingSetting value )
 
ShadowCastingSetting get_cast_shadows_setting ( )
   There is currently no description for this property. Please help us by contributing one!  
int layer_mask = 1
  void set_layer_mask ( int value )
 
int get_layer_mask ( )
   There is currently no description for this property. Please help us by contributing one!  
ImporterMesh mesh  void set_mesh ( ImporterMesh value )
 
ImporterMesh get_mesh ( )
   There is currently no description for this property. Please help us by contributing one!  
NodePath skeleton_path = NodePath("")
  void set_skeleton_path ( NodePath value )
 
NodePath get_skeleton_path ( )
   There is currently no description for this property. Please help us by contributing one!  
Skin skin  void set_skin ( Skin value )
 
Skin get_skin ( )
   There is currently no description for this property. Please help us by contributing one!  
float visibility_range_begin = 0.0
  void set_visibility_range_begin ( float value )
 
float get_visibility_range_begin ( )
   There is currently no description for this property. Please help us by contributing one!  
float visibility_range_begin_margin = 0.0
  void set_visibility_range_begin_margin ( float value )
 
float get_visibility_range_begin_margin ( )
   There is currently no description for this property. Please help us by contributing one!  
float visibility_range_end = 0.0
  void set_visibility_range_end ( float value )
 
float get_visibility_range_end ( )
   There is currently no description for this property. Please help us by contributing one!  
float visibility_range_end_margin = 0.0
  void set_visibility_range_end_margin ( float value )
 
float get_visibility_range_end_margin ( )
   There is currently no description for this property. Please help us by contributing one!  
VisibilityRangeFadeMode visibility_range_fade_mode = 0
  void set_visibility_range_fade_mode ( VisibilityRangeFadeMode value )
 
VisibilityRangeFadeMode get_visibility_range_fade_mode ( )
   There is currently no description for this property. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_importermeshinstance3d.html


classes/class_xrcontroller3d
-----------------------------------------------------------
XRController3D Inherits: XRNode3D < Node3D < Node < Object A spatial node representing a spatially-tracked controller.  Description This is a helper spatial node that is linked to the tracking of controllers. It also offers several handy passthroughs to the state of buttons and such on the controllers. Controllers are linked by their ID. You can create controller nodes before the controllers are available. If your game always uses two controllers (one for each hand), you can predefine the controllers with ID 1 and 2; they will become active as soon as the controllers are identified. If you expect additional controllers to be used, you should react to the signals and add XRController3D nodes to your scene. The position of the controller node is automatically updated by the XRServer. This makes this node ideal to add child nodes to visualize the controller. As many XR runtimes now use a configurable action map all inputs are named.   Tutorials  XR documentation index    Methods  
float get_float ( StringName name ) const  
Variant get_input ( StringName name ) const  
TrackerHand get_tracker_hand ( ) const  
Vector2 get_vector2 ( StringName name ) const  
bool is_button_pressed ( StringName name ) const     Signals button_pressed ( String name ) Emitted when a button on this controller is pressed. button_released ( String name ) Emitted when a button on this controller is released. input_float_changed ( String name, float value ) Emitted when a trigger or similar input on this controller changes value. input_vector2_changed ( String name, Vector2 value ) Emitted when a thumbstick or thumbpad on this controller is moved.   Method Descriptions 
float get_float ( StringName name ) const
 Returns a numeric value for the input with the given name. This is used for triggers and grip sensors. 
Variant get_input ( StringName name ) const
 Returns a Variant for the input with the given name. This works for any input type, the variant will be typed according to the actions configuration. 
TrackerHand get_tracker_hand ( ) const
 Returns the hand holding this controller, if known. See TrackerHand. 
Vector2 get_vector2 ( StringName name ) const
 Returns a Vector2 for the input with the given name. This is used for thumbsticks and thumbpads found on many controllers. 
bool is_button_pressed ( StringName name ) const
 Returns true if the button with the given name is pressed.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_xrcontroller3d.html


classes/class_node
-----------------------------------------------------------
Node Inherits: Object Inherited By: AnimationMixer, AudioStreamPlayer, CanvasItem, CanvasLayer, EditorFileSystem, EditorPlugin, EditorResourcePreview, HTTPRequest, InstancePlaceholder, MissingNode, MultiplayerSpawner, MultiplayerSynchronizer, NavigationAgent2D, NavigationAgent3D, Node3D, ResourcePreloader, ShaderGlobalsOverride, SkeletonIK3D, Timer, Viewport, WorldEnvironment Base class for all scene objects.  Description Nodes are Godot's building blocks. They can be assigned as the child of another node, resulting in a tree arrangement. A given node can contain any number of nodes as children with the requirement that all siblings (direct children of a node) should have unique names. A tree of nodes is called a scene. Scenes can be saved to the disk and then instantiated into other scenes. This allows for very high flexibility in the architecture and data model of Godot projects. Scene tree: The SceneTree contains the active tree of nodes. When a node is added to the scene tree, it receives the NOTIFICATION_ENTER_TREE notification and its _enter_tree callback is triggered. Child nodes are always added after their parent node, i.e. the _enter_tree callback of a parent node will be triggered before its child's. Once all nodes have been added in the scene tree, they receive the NOTIFICATION_READY notification and their respective _ready callbacks are triggered. For groups of nodes, the _ready callback is called in reverse order, starting with the children and moving up to the parent nodes. This means that when adding a node to the scene tree, the following order will be used for the callbacks: _enter_tree of the parent, _enter_tree of the children, _ready of the children and finally _ready of the parent (recursively for the entire scene tree). Processing: Nodes can override the "process" state, so that they receive a callback on each frame requesting them to process (do something). Normal processing (callback _process, toggled with set_process) happens as fast as possible and is dependent on the frame rate, so the processing time delta (in seconds) is passed as an argument. Physics processing (callback _physics_process, toggled with set_physics_process) happens a fixed number of times per second (60 by default) and is useful for code related to the physics engine. Nodes can also process input events. When present, the _input function will be called for each input that the program receives. In many cases, this can be overkill (unless used for simple projects), and the _unhandled_input function might be preferred; it is called when the input event was not handled by anyone else (typically, GUI Control nodes), ensuring that the node only receives the events that were meant for it. To keep track of the scene hierarchy (especially when instantiating scenes into other scenes), an "owner" can be set for the node with the owner property. This keeps track of who instantiated what. This is mostly useful when writing editors and tools, though. Finally, when a node is freed with Object.free or queue_free, it will also free all its children. Groups: Nodes can be added to as many groups as you want to be easy to manage, you could create groups like "enemies" or "collectables" for example, depending on your game. See add_to_group, is_in_group and remove_from_group. You can then retrieve all nodes in these groups, iterate them and even call methods on groups via the methods on SceneTree. Networking with nodes: After connecting to a server (or making one, see ENetMultiplayerPeer), it is possible to use the built-in RPC (remote procedure call) system to communicate over the network. By calling rpc with a method name, it will be called locally and in all connected peers (peers = clients and the server that accepts connections). To identify which node receives the RPC call, Godot will use its NodePath (make sure node names are the same on all peers). Also, take a look at the high-level networking tutorial and corresponding demos. Note: The script property is part of the Object class, not Node. It isn't exposed like most properties but does have a setter and getter (see Object.set_script and Object.get_script).   Tutorials  Nodes and scenes All Demos    Properties  
String editor_description ""  
MultiplayerAPI multiplayer   
StringName name   
Node owner   
ProcessMode process_mode 0  
int process_physics_priority 0  
int process_priority 0  
ProcessThreadGroup process_thread_group 0  
int process_thread_group_order   
BitField<ProcessThreadMessages> process_thread_messages   
String scene_file_path   
bool unique_name_in_owner false     Methods  
void _enter_tree ( ) virtual  
void _exit_tree ( ) virtual  
PackedStringArray _get_configuration_warnings ( ) virtual const  
void _input ( InputEvent event ) virtual  
void _physics_process ( float delta ) virtual  
void _process ( float delta ) virtual  
void _ready ( ) virtual  
void _shortcut_input ( InputEvent event ) virtual  
void _unhandled_input ( InputEvent event ) virtual  
void _unhandled_key_input ( InputEvent event ) virtual  
void add_child ( Node node, bool force_readable_name=false, InternalMode internal=0 )  
void add_sibling ( Node sibling, bool force_readable_name=false )  
void add_to_group ( StringName group, bool persistent=false )  
Variant call_deferred_thread_group ( StringName method, ... ) vararg  
Variant call_thread_safe ( StringName method, ... ) vararg  
bool can_process ( ) const  
Tween create_tween ( )  
Node duplicate ( int flags=15 ) const  
Node find_child ( String pattern, bool recursive=true, bool owned=true ) const  
Node[] find_children ( String pattern, String type="", bool recursive=true, bool owned=true ) const  
Node find_parent ( String pattern ) const  
Node get_child ( int idx, bool include_internal=false ) const  
int get_child_count ( bool include_internal=false ) const  
Node[] get_children ( bool include_internal=false ) const  
StringName[] get_groups ( ) const  
int get_index ( bool include_internal=false ) const  
Window get_last_exclusive_window ( ) const  
int get_multiplayer_authority ( ) const  
Node get_node ( NodePath path ) const  
Array get_node_and_resource ( NodePath path )  
Node get_node_or_null ( NodePath path ) const  
Node get_parent ( ) const  
NodePath get_path ( ) const  
NodePath get_path_to ( Node node, bool use_unique_path=false ) const  
float get_physics_process_delta_time ( ) const  
float get_process_delta_time ( ) const  
bool get_scene_instance_load_placeholder ( ) const  
SceneTree get_tree ( ) const  
String get_tree_string ( )  
String get_tree_string_pretty ( )  
Viewport get_viewport ( ) const  
Window get_window ( ) const  
bool has_node ( NodePath path ) const  
bool has_node_and_resource ( NodePath path ) const  
bool is_ancestor_of ( Node node ) const  
bool is_displayed_folded ( ) const  
bool is_editable_instance ( Node node ) const  
bool is_greater_than ( Node node ) const  
bool is_in_group ( StringName group ) const  
bool is_inside_tree ( ) const  
bool is_multiplayer_authority ( ) const  
bool is_node_ready ( ) const  
bool is_physics_processing ( ) const  
bool is_physics_processing_internal ( ) const  
bool is_processing ( ) const  
bool is_processing_input ( ) const  
bool is_processing_internal ( ) const  
bool is_processing_shortcut_input ( ) const  
bool is_processing_unhandled_input ( ) const  
bool is_processing_unhandled_key_input ( ) const  
void move_child ( Node child_node, int to_index )  
void notify_deferred_thread_group ( int what )  
void notify_thread_safe ( int what )  
void print_orphan_nodes ( ) static  
void print_tree ( )  
void print_tree_pretty ( )  
void propagate_call ( StringName method, Array args=[], bool parent_first=false )  
void propagate_notification ( int what )  
void queue_free ( )  
void remove_child ( Node node )  
void remove_from_group ( StringName group )  
void reparent ( Node new_parent, bool keep_global_transform=true )  
void replace_by ( Node node, bool keep_groups=false )  
void request_ready ( )  
Error rpc ( StringName method, ... ) vararg  
void rpc_config ( StringName method, Variant config )  
Error rpc_id ( int peer_id, StringName method, ... ) vararg  
void set_deferred_thread_group ( StringName property, Variant value )  
void set_display_folded ( bool fold )  
void set_editable_instance ( Node node, bool is_editable )  
void set_multiplayer_authority ( int id, bool recursive=true )  
void set_physics_process ( bool enable )  
void set_physics_process_internal ( bool enable )  
void set_process ( bool enable )  
void set_process_input ( bool enable )  
void set_process_internal ( bool enable )  
void set_process_shortcut_input ( bool enable )  
void set_process_unhandled_input ( bool enable )  
void set_process_unhandled_key_input ( bool enable )  
void set_scene_instance_load_placeholder ( bool load_placeholder )  
void set_thread_safe ( StringName property, Variant value )  
void update_configuration_warnings ( )     Signals child_entered_tree ( Node node ) Emitted when the child node enters the SceneTree, usually because this node entered the tree (see tree_entered), or add_child has been called. This signal is emitted after the child node's own NOTIFICATION_ENTER_TREE and tree_entered. child_exiting_tree ( Node node ) Emitted when the child node is about to exit the SceneTree, usually because this node is exiting the tree (see tree_exiting), or because the child node is being removed or freed. When this signal is received, the child node is still accessible inside the tree. This signal is emitted after the child node's own tree_exiting and NOTIFICATION_EXIT_TREE. child_order_changed ( ) Emitted when the list of children is changed. This happens when child nodes are added, moved or removed. ready ( ) Emitted when the node is considered ready, after _ready is called. renamed ( ) Emitted when the node's name is changed, if the node is inside the tree. replacing_by ( Node node ) Emitted when this node is being replaced by the node, see replace_by. This signal is emitted after node has been added as a child of the original parent node, but before all original child nodes have been reparented to node. tree_entered ( ) Emitted when the node enters the tree. This signal is emitted after the related NOTIFICATION_ENTER_TREE notification. tree_exited ( ) Emitted after the node exits the tree and is no longer active. This signal is emitted after the related NOTIFICATION_EXIT_TREE notification. tree_exiting ( ) Emitted when the node is just about to exit the tree. The node is still valid. As such, this is the right place for de-initialization (or a "destructor", if you will). This signal is emitted after the node's _exit_tree, and before the related NOTIFICATION_EXIT_TREE.   Enumerations enum ProcessMode: 
ProcessMode PROCESS_MODE_INHERIT = 0
 Inherits process_mode from the node's parent. For the root node, it is equivalent to PROCESS_MODE_PAUSABLE. This is the default for any newly created node. 
ProcessMode PROCESS_MODE_PAUSABLE = 1
 Stops processing when SceneTree.paused is true. This is the inverse of PROCESS_MODE_WHEN_PAUSED. 
ProcessMode PROCESS_MODE_WHEN_PAUSED = 2
 Process only when SceneTree.paused is true. This is the inverse of PROCESS_MODE_PAUSABLE. 
ProcessMode PROCESS_MODE_ALWAYS = 3
 Always process. Keeps processing, ignoring SceneTree.paused. This is the inverse of PROCESS_MODE_DISABLED. 
ProcessMode PROCESS_MODE_DISABLED = 4
 Never process. Completely disables processing, ignoring SceneTree.paused. This is the inverse of PROCESS_MODE_ALWAYS. enum ProcessThreadGroup: 
ProcessThreadGroup PROCESS_THREAD_GROUP_INHERIT = 0
 Process this node based on the thread group mode of the first parent (or grandparent) node that has a thread group mode that is not inherit. See process_thread_group for more information. 
ProcessThreadGroup PROCESS_THREAD_GROUP_MAIN_THREAD = 1
 Process this node (and child nodes set to inherit) on the main thread. See process_thread_group for more information. 
ProcessThreadGroup PROCESS_THREAD_GROUP_SUB_THREAD = 2
 Process this node (and child nodes set to inherit) on a sub-thread. See process_thread_group for more information. flags ProcessThreadMessages: 
ProcessThreadMessages FLAG_PROCESS_THREAD_MESSAGES = 1
 
ProcessThreadMessages FLAG_PROCESS_THREAD_MESSAGES_PHYSICS = 2
 
ProcessThreadMessages FLAG_PROCESS_THREAD_MESSAGES_ALL = 3
 enum DuplicateFlags: 
DuplicateFlags DUPLICATE_SIGNALS = 1
 Duplicate the node's signal connections. 
DuplicateFlags DUPLICATE_GROUPS = 2
 Duplicate the node's groups. 
DuplicateFlags DUPLICATE_SCRIPTS = 4
 Duplicate the node's script (including the ancestor's script, if combined with DUPLICATE_USE_INSTANTIATION). 
DuplicateFlags DUPLICATE_USE_INSTANTIATION = 8
 Duplicate using PackedScene.instantiate. If the node comes from a scene saved on disk, re-uses PackedScene.instantiate as the base for the duplicated node and its children. enum InternalMode: 
InternalMode INTERNAL_MODE_DISABLED = 0
 The node will not be internal. 
InternalMode INTERNAL_MODE_FRONT = 1
 The node will be placed at the beginning of the parent's children, before any non-internal sibling. 
InternalMode INTERNAL_MODE_BACK = 2
 The node will be placed at the end of the parent's children, after any non-internal sibling.   Constants NOTIFICATION_ENTER_TREE = 10
 Notification received when the node enters a SceneTree. See _enter_tree. This notification is received before the related tree_entered signal. NOTIFICATION_EXIT_TREE = 11
 Notification received when the node is about to exit a SceneTree. See _exit_tree. This notification is received after the related tree_exiting signal. NOTIFICATION_MOVED_IN_PARENT = 12
 Deprecated. This notification is no longer emitted. Use NOTIFICATION_CHILD_ORDER_CHANGED instead. NOTIFICATION_READY = 13
 Notification received when the node is ready. See _ready. NOTIFICATION_PAUSED = 14
 Notification received when the node is paused. See process_mode. NOTIFICATION_UNPAUSED = 15
 Notification received when the node is unpaused. See process_mode. NOTIFICATION_PHYSICS_PROCESS = 16
 Notification received from the tree every physics frame when is_physics_processing returns true. See _physics_process. NOTIFICATION_PROCESS = 17
 Notification received from the tree every rendered frame when is_processing returns true. See _process. NOTIFICATION_PARENTED = 18
 Notification received when the node is set as a child of another node (see add_child and add_sibling). Note: This does not mean that the node entered the SceneTree. NOTIFICATION_UNPARENTED = 19
 Notification received when the parent node calls remove_child on this node. Note: This does not mean that the node exited the SceneTree. NOTIFICATION_SCENE_INSTANTIATED = 20
 Notification received only by the newly instantiated scene root node, when PackedScene.instantiate is completed. NOTIFICATION_DRAG_BEGIN = 21
 Notification received when a drag operation begins. All nodes receive this notification, not only the dragged one. Can be triggered either by dragging a Control that provides drag data (see Control._get_drag_data) or using Control.force_drag. Use Viewport.gui_get_drag_data to get the dragged data. NOTIFICATION_DRAG_END = 22
 Notification received when a drag operation ends. Use Viewport.gui_is_drag_successful to check if the drag succeeded. NOTIFICATION_PATH_RENAMED = 23
 Notification received when the node's name or one of its ancestors' name is changed. This notification is not received when the node is removed from the SceneTree. NOTIFICATION_CHILD_ORDER_CHANGED = 24
 Notification received when the list of children is changed. This happens when child nodes are added, moved or removed. NOTIFICATION_INTERNAL_PROCESS = 25
 Notification received from the tree every rendered frame when is_processing_internal returns true. NOTIFICATION_INTERNAL_PHYSICS_PROCESS = 26
 Notification received from the tree every physics frame when is_physics_processing_internal returns true. NOTIFICATION_POST_ENTER_TREE = 27
 Notification received when the node enters the tree, just before NOTIFICATION_READY may be received. Unlike the latter, it is sent every time the node enters tree, not just once. NOTIFICATION_DISABLED = 28
 Notification received when the node is disabled. See PROCESS_MODE_DISABLED. NOTIFICATION_ENABLED = 29
 Notification received when the node is enabled again after being disabled. See PROCESS_MODE_DISABLED. NOTIFICATION_EDITOR_PRE_SAVE = 9001
 Notification received right before the scene with the node is saved in the editor. This notification is only sent in the Godot editor and will not occur in exported projects. NOTIFICATION_EDITOR_POST_SAVE = 9002
 Notification received right after the scene with the node is saved in the editor. This notification is only sent in the Godot editor and will not occur in exported projects. NOTIFICATION_WM_MOUSE_ENTER = 1002
 Notification received when the mouse enters the window. Implemented for embedded windows and on desktop and web platforms. NOTIFICATION_WM_MOUSE_EXIT = 1003
 Notification received when the mouse leaves the window. Implemented for embedded windows and on desktop and web platforms. NOTIFICATION_WM_WINDOW_FOCUS_IN = 1004
 Notification received from the OS when the node's Window ancestor is focused. This may be a change of focus between two windows of the same engine instance, or from the OS desktop or a third-party application to a window of the game (in which case NOTIFICATION_APPLICATION_FOCUS_IN is also received). A Window node receives this notification when it is focused. NOTIFICATION_WM_WINDOW_FOCUS_OUT = 1005
 Notification received from the OS when the node's Window ancestor is defocused. This may be a change of focus between two windows of the same engine instance, or from a window of the game to the OS desktop or a third-party application (in which case NOTIFICATION_APPLICATION_FOCUS_OUT is also received). A Window node receives this notification when it is defocused. NOTIFICATION_WM_CLOSE_REQUEST = 1006
 Notification received from the OS when a close request is sent (e.g. closing the window with a "Close" button or Alt + F4). Implemented on desktop platforms. NOTIFICATION_WM_GO_BACK_REQUEST = 1007
 Notification received from the OS when a go back request is sent (e.g. pressing the "Back" button on Android). Implemented only on iOS. NOTIFICATION_WM_SIZE_CHANGED = 1008
 Notification received when the window is resized. Note: Only the resized Window node receives this notification, and it's not propagated to the child nodes. NOTIFICATION_WM_DPI_CHANGE = 1009
 Notification received from the OS when the screen's dots per inch (DPI) scale is changed. Only implemented on macOS. NOTIFICATION_VP_MOUSE_ENTER = 1010
 Notification received when the mouse cursor enters the Viewport's visible area, that is not occluded behind other Controls or Windows, provided its Viewport.gui_disable_input is false and regardless if it's currently focused or not. NOTIFICATION_VP_MOUSE_EXIT = 1011
 Notification received when the mouse cursor leaves the Viewport's visible area, that is not occluded behind other Controls or Windows, provided its Viewport.gui_disable_input is false and regardless if it's currently focused or not. NOTIFICATION_OS_MEMORY_WARNING = 2009
 Notification received from the OS when the application is exceeding its allocated memory. Implemented only on iOS. NOTIFICATION_TRANSLATION_CHANGED = 2010
 Notification received when translations may have changed. Can be triggered by the user changing the locale. Can be used to respond to language changes, for example to change the UI strings on the fly. Useful when working with the built-in translation support, like Object.tr. NOTIFICATION_WM_ABOUT = 2011
 Notification received from the OS when a request for "About" information is sent. Implemented only on macOS. NOTIFICATION_CRASH = 2012
 Notification received from Godot's crash handler when the engine is about to crash. Implemented on desktop platforms, if the crash handler is enabled. NOTIFICATION_OS_IME_UPDATE = 2013
 Notification received from the OS when an update of the Input Method Engine occurs (e.g. change of IME cursor position or composition string). Implemented only on macOS. NOTIFICATION_APPLICATION_RESUMED = 2014
 Notification received from the OS when the application is resumed. Implemented only on Android. NOTIFICATION_APPLICATION_PAUSED = 2015
 Notification received from the OS when the application is paused. Implemented only on Android. NOTIFICATION_APPLICATION_FOCUS_IN = 2016
 Notification received from the OS when the application is focused, i.e. when changing the focus from the OS desktop or a third-party application to any open window of the Godot instance. Implemented on desktop platforms. NOTIFICATION_APPLICATION_FOCUS_OUT = 2017
 Notification received from the OS when the application is defocused, i.e. when changing the focus from any open window of the Godot instance to the OS desktop or a third-party application. Implemented on desktop platforms. NOTIFICATION_TEXT_SERVER_CHANGED = 2018
 Notification received when the TextServer is changed.   Property Descriptions 
String editor_description = ""
  void set_editor_description ( String value )
 
String get_editor_description ( )
  An optional description to the node. It will be displayed as a tooltip when hovering over the node in the editor's Scene dock. 
MultiplayerAPI multiplayer  
MultiplayerAPI get_multiplayer ( )
  The MultiplayerAPI instance associated with this node. See SceneTree.get_multiplayer. Note: Renaming the node, or moving it in the tree, will not move the MultiplayerAPI to the new path, you will have to update this manually. 
StringName name  void set_name ( StringName value )
 
StringName get_name ( )
  The name of the node. This name must be unique among the siblings (other child nodes from the same parent). When set to an existing sibling's name, the node is automatically renamed. Note: When changing the name, the following characters will be removed: (. : @ / " %). In particular, the @ character is reserved for auto-generated names. See also String.validate_node_name. 
Node owner  void set_owner ( Node value )
 
Node get_owner ( )
  The owner of this node. The owner must be an ancestor of this node. When packing the owner node in a PackedScene, all the nodes it owns are also saved with it. Note: In the editor, nodes not owned by the scene root are usually not displayed in the Scene dock, and will not be saved. To prevent this, remember to set the owner after calling add_child. See also (see unique_name_in_owner) 
ProcessMode process_mode = 0
  void set_process_mode ( ProcessMode value )
 
ProcessMode get_process_mode ( )
  The node's processing behavior (see ProcessMode). To check if the node is able to process, with the current mode and SceneTree.paused, use can_process. 
int process_physics_priority = 0
  void set_physics_process_priority ( int value )
 
int get_physics_process_priority ( )
  Similar to process_priority but for NOTIFICATION_PHYSICS_PROCESS, _physics_process or the internal version. 
int process_priority = 0
  void set_process_priority ( int value )
 
int get_process_priority ( )
  The node's execution order of the process callbacks (_process, _physics_process, and internal processing). Nodes whose priority value is lower call their process callbacks first, regardless of tree order. 
ProcessThreadGroup process_thread_group = 0
  void set_process_thread_group ( ProcessThreadGroup value )
 
ProcessThreadGroup get_process_thread_group ( )
  Set the process thread group for this node (basically, whether it receives NOTIFICATION_PROCESS, NOTIFICATION_PHYSICS_PROCESS, _process or _physics_process (and the internal versions) on the main thread or in a sub-thread. By default, the thread group is PROCESS_THREAD_GROUP_INHERIT, which means that this node belongs to the same thread group as the parent node. The thread groups means that nodes in a specific thread group will process together, separate to other thread groups (depending on process_thread_group_order). If the value is set is PROCESS_THREAD_GROUP_SUB_THREAD, this thread group will occur on a sub thread (not the main thread), otherwise if set to PROCESS_THREAD_GROUP_MAIN_THREAD it will process on the main thread. If there is not a parent or grandparent node set to something other than inherit, the node will belong to the default thread group. This default group will process on the main thread and its group order is 0. During processing in a sub-thread, accessing most functions in nodes outside the thread group is forbidden (and it will result in an error in debug mode). Use Object.call_deferred, call_thread_safe, call_deferred_thread_group and the likes in order to communicate from the thread groups to the main thread (or to other thread groups). To better understand process thread groups, the idea is that any node set to any other value than PROCESS_THREAD_GROUP_INHERIT will include any child (and grandchild) nodes set to inherit into its process thread group. This means that the processing of all the nodes in the group will happen together, at the same time as the node including them. 
int process_thread_group_order  void set_process_thread_group_order ( int value )
 
int get_process_thread_group_order ( )
  Change the process thread group order. Groups with a lesser order will process before groups with a greater order. This is useful when a large amount of nodes process in sub thread and, afterwards, another group wants to collect their result in the main thread, as an example. 
BitField<ProcessThreadMessages> process_thread_messages  void set_process_thread_messages ( BitField<ProcessThreadMessages> value )
 
BitField<ProcessThreadMessages> get_process_thread_messages ( )
  Set whether the current thread group will process messages (calls to call_deferred_thread_group on threads, and whether it wants to receive them during regular process or physics process callbacks. 
String scene_file_path  void set_scene_file_path ( String value )
 
String get_scene_file_path ( )
  The original scene's file path, if the node has been instantiated from a PackedScene file. Only scene root nodes contains this. 
bool unique_name_in_owner = false
  void set_unique_name_in_owner ( bool value )
 
bool is_unique_name_in_owner ( )
  If true, the node can be accessed from any node sharing the same owner or from the owner itself, with special %Name syntax in get_node. Note: If another node with the same owner shares the same name as this node, the other node will no longer be accessible as unique.   Method Descriptions void _enter_tree ( ) virtual
 Called when the node enters the SceneTree (e.g. upon instantiating, scene changing, or after calling add_child in a script). If the node has children, its _enter_tree callback will be called first, and then that of the children. Corresponds to the NOTIFICATION_ENTER_TREE notification in Object._notification. void _exit_tree ( ) virtual
 Called when the node is about to leave the SceneTree (e.g. upon freeing, scene changing, or after calling remove_child in a script). If the node has children, its _exit_tree callback will be called last, after all its children have left the tree. Corresponds to the NOTIFICATION_EXIT_TREE notification in Object._notification and signal tree_exiting. To get notified when the node has already left the active tree, connect to the tree_exited. 
PackedStringArray _get_configuration_warnings ( ) virtual const
 The elements in the array returned from this method are displayed as warnings in the Scene dock if the script that overrides it is a tool script. Returning an empty array produces no warnings. Call update_configuration_warnings when the warnings need to be updated for this node. @export var energy = 0:
    set(value):
        energy = value
        update_configuration_warnings()
func _get_configuration_warnings():
    if energy < 0:
        return ["Energy must be 0 or greater."]
    else:
        return []
 void _input ( InputEvent event ) virtual
 Called when there is an input event. The input event propagates up through the node tree until a node consumes it. It is only called if input processing is enabled, which is done automatically if this method is overridden, and can be toggled with set_process_input. To consume the input event and stop it propagating further to other nodes, Viewport.set_input_as_handled can be called. For gameplay input, _unhandled_input and _unhandled_key_input are usually a better fit as they allow the GUI to intercept the events first. Note: This method is only called if the node is present in the scene tree (i.e. if it's not an orphan). void _physics_process ( float delta ) virtual
 Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the delta variable should be constant. delta is in seconds. It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with set_physics_process. Corresponds to the NOTIFICATION_PHYSICS_PROCESS notification in Object._notification. Note: This method is only called if the node is present in the scene tree (i.e. if it's not an orphan). void _process ( float delta ) virtual
 Called during the processing step of the main loop. Processing happens at every frame and as fast as possible, so the delta time since the previous frame is not constant. delta is in seconds. It is only called if processing is enabled, which is done automatically if this method is overridden, and can be toggled with set_process. Corresponds to the NOTIFICATION_PROCESS notification in Object._notification. Note: This method is only called if the node is present in the scene tree (i.e. if it's not an orphan). void _ready ( ) virtual
 Called when the node is "ready", i.e. when both the node and its children have entered the scene tree. If the node has children, their _ready callbacks get triggered first, and the parent node will receive the ready notification afterwards. Corresponds to the NOTIFICATION_READY notification in Object._notification. See also the @onready annotation for variables. Usually used for initialization. For even earlier initialization, Object._init may be used. See also _enter_tree. Note: This method may be called only once for each node. After removing a node from the scene tree and adding it again, _ready will not be called a second time. This can be bypassed by requesting another call with request_ready, which may be called anywhere before adding the node again. void _shortcut_input ( InputEvent event ) virtual
 Called when an InputEventKey, InputEventShortcut, or InputEventJoypadButton hasn't been consumed by _input or any GUI Control item. It is called before _unhandled_key_input and _unhandled_input. The input event propagates up through the node tree until a node consumes it. It is only called if shortcut processing is enabled, which is done automatically if this method is overridden, and can be toggled with set_process_shortcut_input. To consume the input event and stop it propagating further to other nodes, Viewport.set_input_as_handled can be called. This method can be used to handle shortcuts. For generic GUI events, use _input instead. Gameplay events should usually be handled with either _unhandled_input or _unhandled_key_input. Note: This method is only called if the node is present in the scene tree (i.e. if it's not orphan). void _unhandled_input ( InputEvent event ) virtual
 Called when an InputEvent hasn't been consumed by _input or any GUI Control item. It is called after _shortcut_input and after _unhandled_key_input. The input event propagates up through the node tree until a node consumes it. It is only called if unhandled input processing is enabled, which is done automatically if this method is overridden, and can be toggled with set_process_unhandled_input. To consume the input event and stop it propagating further to other nodes, Viewport.set_input_as_handled can be called. For gameplay input, this method is usually a better fit than _input, as GUI events need a higher priority. For keyboard shortcuts, consider using _shortcut_input instead, as it is called before this method. Finally, to handle keyboard events, consider using _unhandled_key_input for performance reasons. Note: This method is only called if the node is present in the scene tree (i.e. if it's not an orphan). void _unhandled_key_input ( InputEvent event ) virtual
 Called when an InputEventKey hasn't been consumed by _input or any GUI Control item. It is called after _shortcut_input but before _unhandled_input. The input event propagates up through the node tree until a node consumes it. It is only called if unhandled key input processing is enabled, which is done automatically if this method is overridden, and can be toggled with set_process_unhandled_key_input. To consume the input event and stop it propagating further to other nodes, Viewport.set_input_as_handled can be called. This method can be used to handle Unicode character input with Alt, Alt + Ctrl, and Alt + Shift modifiers, after shortcuts were handled. For gameplay input, this and _unhandled_input are usually a better fit than _input, as GUI events should be handled first. This method also performs better than _unhandled_input, since unrelated events such as InputEventMouseMotion are automatically filtered. For shortcuts, consider using _shortcut_input instead. Note: This method is only called if the node is present in the scene tree (i.e. if it's not an orphan). void add_child ( Node node, bool force_readable_name=false, InternalMode internal=0 ) Adds a child node. Nodes can have any number of children, but every child must have a unique name. Child nodes are automatically deleted when the parent node is deleted, so an entire scene can be removed by deleting its topmost node. If force_readable_name is true, improves the readability of the added node. If not named, the node is renamed to its type, and if it shares name with a sibling, a number is suffixed more appropriately. This operation is very slow. As such, it is recommended leaving this to false, which assigns a dummy name featuring @ in both situations. If internal is different than INTERNAL_MODE_DISABLED, the child will be added as internal node. These nodes are ignored by methods like get_children, unless their parameter include_internal is true. The intended usage is to hide the internal nodes from the user, so the user won't accidentally delete or modify them. Used by some GUI nodes, e.g. ColorPicker. See InternalMode for available modes. Note: If node already has a parent, this method will fail. Use remove_child first to remove node from its current parent. For example:  GDScriptvar child_node = get_child(0)
if child_node.get_parent():
    child_node.get_parent().remove_child(child_node)
add_child(child_node)
 C#Node childNode = GetChild(0);
if (childNode.GetParent() != null)
{
    childNode.GetParent().RemoveChild(childNode);
}
AddChild(childNode);
  If you need the child node to be added below a specific node in the list of children, use add_sibling instead of this method. Note: If you want a child to be persisted to a PackedScene, you must set owner in addition to calling add_child. This is typically relevant for tool scripts and editor plugins. If add_child is called without setting owner, the newly added Node will not be visible in the scene tree, though it will be visible in the 2D/3D view. void add_sibling ( Node sibling, bool force_readable_name=false ) Adds a sibling node to this node's parent, and moves the added sibling right below this node. If force_readable_name is true, improves the readability of the added sibling. If not named, the sibling is renamed to its type, and if it shares name with a sibling, a number is suffixed more appropriately. This operation is very slow. As such, it is recommended leaving this to false, which assigns a dummy name featuring @ in both situations. Use add_child instead of this method if you don't need the child node to be added below a specific node in the list of children. Note: If this node is internal, the added sibling will be internal too (see add_child's internal parameter). void add_to_group ( StringName group, bool persistent=false ) Adds the node to the group. Groups can be helpful to organize a subset of nodes, for example "enemies" or "collectables". See notes in the description, and the group methods in SceneTree. If persistent is true, the group will be stored when saved inside a PackedScene. All groups created and displayed in the Node dock are persistent. Note: To improve performance, the order of group names is not guaranteed and may vary between project runs. Therefore, do not rely on the group order. Note: SceneTree's group methods will not work on this node if not inside the tree (see is_inside_tree). 
Variant call_deferred_thread_group ( StringName method, ... ) vararg
 This function is similar to Object.call_deferred except that the call will take place when the node thread group is processed. If the node thread group processes in sub-threads, then the call will be done on that thread, right before NOTIFICATION_PROCESS or NOTIFICATION_PHYSICS_PROCESS, the _process or _physics_process or their internal versions are called. 
Variant call_thread_safe ( StringName method, ... ) vararg
 This function ensures that the calling of this function will succeed, no matter whether it's being done from a thread or not. If called from a thread that is not allowed to call the function, the call will become deferred. Otherwise, the call will go through directly. 
bool can_process ( ) const
 Returns true if the node can receive processing notifications and input callbacks (NOTIFICATION_PROCESS, _input, etc) from the SceneTree and Viewport. The value depends on both the current process_mode and SceneTree.paused. Returns false if the node is not inside the tree. 
Tween create_tween ( ) Creates a new Tween and binds it to this node. Fails if the node is not inside the tree. This is the equivalent of doing:  GDScriptget_tree().create_tween().bind_node(self)
 C#GetTree().CreateTween().BindNode(this);
  The Tween will start automatically on the next process frame or physics frame (depending on TweenProcessMode). 
Node duplicate ( int flags=15 ) const
 Duplicates the node, returning a new node with all of its properties, signals and groups copied from the original. The behavior can be tweaked through the flags (see DuplicateFlags). Note: For nodes with a Script attached, if Object._init has been defined with required parameters, the duplicated node will not have a Script. 
Node find_child ( String pattern, bool recursive=true, bool owned=true ) const
 Finds the first descendant of this node whose name matches pattern, returning null if no match is found. The matching is done against node names, not their paths, through String.match. As such, it is case-sensitive, "*" matches zero or more characters, and "?" matches any single character. If recursive is false, only this node's direct children are checked. Nodes are checked in tree order, so this node's first direct child is checked first, then its own direct children, etc., before moving to the second direct child, and so on. Internal children are also included in the search (see internal parameter in add_child). If owned is true, only descendants with a valid owner node are checked. Note: This method can be very slow. Consider storing a reference to the found node in a variable. Alternatively, use get_node with unique names (see unique_name_in_owner). Note: To find all descendant nodes matching a pattern or a class type, see find_children. 
Node[] find_children ( String pattern, String type="", bool recursive=true, bool owned=true ) const
 Finds all descendants of this node whose names match pattern, returning an empty Array if no match is found. The matching is done against node names, not their paths, through String.match. As such, it is case-sensitive, "*" matches zero or more characters, and "?" matches any single character. If type is not empty, only ancestors inheriting from type are included (see Object.is_class). If recursive is false, only this node's direct children are checked. Nodes are checked in tree order, so this node's first direct child is checked first, then its own direct children, etc., before moving to the second direct child, and so on. Internal children are also included in the search (see internal parameter in add_child). If owned is true, only descendants with a valid owner node are checked. Note: This method can be very slow. Consider storing references to the found nodes in a variable. Note: To find a single descendant node matching a pattern, see find_child. 
Node find_parent ( String pattern ) const
 Finds the first ancestor of this node whose name matches pattern, returning null if no match is found. The matching is done through String.match. As such, it is case-sensitive, "*" matches zero or more characters, and "?" matches any single character. See also find_child and find_children. Note: As this method walks upwards in the scene tree, it can be slow in large, deeply nested nodes. Consider storing a reference to the found node in a variable. Alternatively, use get_node with unique names (see unique_name_in_owner). 
Node get_child ( int idx, bool include_internal=false ) const
 Fetches a child node by its index. Each child node has an index relative its siblings (see get_index). The first child is at index 0. Negative values can also be used to start from the end of the list. This method can be used in combination with get_child_count to iterate over this node's children. If no child exists at the given index, this method returns null and an error is generated. If include_internal is false, internal children are ignored (see add_child's internal parameter). # Assuming the following are children of this node, in order:
# First, Middle, Last.
var a = get_child(0).name  # a is "First"
var b = get_child(1).name  # b is "Middle"
var b = get_child(2).name  # b is "Last"
var c = get_child(-1).name # c is "Last"
 Note: To fetch a node by NodePath, use get_node. 
int get_child_count ( bool include_internal=false ) const
 Returns the number of children of this node. If include_internal is false, internal children are not counted (see add_child's internal parameter). 
Node[] get_children ( bool include_internal=false ) const
 Returns all children of this node inside an Array. If include_internal is false, excludes internal children from the returned array (see add_child's internal parameter). 
StringName[] get_groups ( ) const
 Returns an Array of group names that the node has been added to. Note: To improve performance, the order of group names is not guaranteed and may vary between project runs. Therefore, do not rely on the group order. Note: This method may also return some group names starting with an underscore (_). These are internally used by the engine. To avoid conflicts, do not use custom groups starting with underscores. To exclude internal groups, see the following code snippet:  GDScript# Stores the node's non-internal groups only (as an array of StringNames).
var non_internal_groups = []
for group in get_groups():
    if not str(group).begins_with("_"):
        non_internal_groups.push_back(group)
 C#// Stores the node's non-internal groups only (as a List of StringNames).
List<string> nonInternalGroups = new List<string>();
foreach (string group in GetGroups())
{
    if (!group.BeginsWith("_"))
        nonInternalGroups.Add(group);
}
  
int get_index ( bool include_internal=false ) const
 Returns this node's order among its siblings. The first node's index is 0. See also get_child. If include_internal is false, returns the index ignoring internal children. The first, non-internal child will have an index of 0 (see add_child's internal parameter). 
Window get_last_exclusive_window ( ) const
 Returns the Window that contains this node, or the last exclusive child in a chain of windows starting with the one that contains this node. 
int get_multiplayer_authority ( ) const
 Returns the peer ID of the multiplayer authority for this node. See set_multiplayer_authority. 
Node get_node ( NodePath path ) const
 Fetches a node. The NodePath can either be a relative path (from this node), or an absolute path (from the SceneTree.root) to a node. If path does not point to a valid node, generates an error and returns null. Attempts to access methods on the return value will result in an "Attempt to call <method> on a null instance." error. Note: Fetching by absolute path only works when the node is inside the scene tree (see is_inside_tree). Example: Assume this method is called from the Character node, inside the following tree: â”–â•´root
   â” â•´Character (you are here!)
   â”ƒ  â” â•´Sword
   â”ƒ  â”–â•´Backpack
   â”ƒ     â”–â•´Dagger
   â” â•´MyGame
   â”–â•´Swamp
      â” â•´Alligator
      â” â•´Mosquito
      â”–â•´Goblin
 The following calls will return a valid node:  GDScriptget_node("Sword")
get_node("Backpack/Dagger")
get_node("../Swamp/Alligator")
get_node("/root/MyGame")
 C#GetNode("Sword");
GetNode("Backpack/Dagger");
GetNode("../Swamp/Alligator");
GetNode("/root/MyGame");
  
Array get_node_and_resource ( NodePath path ) Fetches a node and its most nested resource as specified by the NodePath's subname. Returns an Array of size 3 where:  Element 0 is the Node, or null if not found; Element 1 is the subname's last nested Resource, or null if not found; Element 2 is the remaining NodePath, referring to an existing, non-Resource property (see Object.get_indexed).  Example: Assume that the child's Sprite2D.texture has been assigned a AtlasTexture:  GDScriptvar a = get_node_and_resource("Area2D/Sprite2D")
print(a[0].name) # Prints Sprite2D
print(a[1])      # Prints <null>
print(a[2])      # Prints ^""
var b = get_node_and_resource("Area2D/Sprite2D:texture:atlas")
print(b[0].name)        # Prints Sprite2D
print(b[1].get_class()) # Prints AtlasTexture
print(b[2])             # Prints ^""
var c = get_node_and_resource("Area2D/Sprite2D:texture:atlas:region")
print(c[0].name)        # Prints Sprite2D
print(c[1].get_class()) # Prints AtlasTexture
print(c[2])             # Prints ^":region"
 C#var a = GetNodeAndResource(NodePath("Area2D/Sprite2D"));
GD.Print(a[0].Name); // Prints Sprite2D
GD.Print(a[1]);      // Prints <null>
GD.Print(a[2]);      // Prints ^"
var b = GetNodeAndResource(NodePath("Area2D/Sprite2D:texture:atlas"));
GD.Print(b[0].name);        // Prints Sprite2D
GD.Print(b[1].get_class()); // Prints AtlasTexture
GD.Print(b[2]);             // Prints ^""
var c = GetNodeAndResource(NodePath("Area2D/Sprite2D:texture:atlas:region"));
GD.Print(c[0].name);        // Prints Sprite2D
GD.Print(c[1].get_class()); // Prints AtlasTexture
GD.Print(c[2]);             // Prints ^":region"
  
Node get_node_or_null ( NodePath path ) const
 Fetches a node by NodePath. Similar to get_node, but does not generate an error if path does not point to a valid node. 
Node get_parent ( ) const
 Returns this node's parent node, or null if the node doesn't have a parent. 
NodePath get_path ( ) const
 Returns the node's absolute path, relative to the SceneTree.root. If the node is not inside the scene tree, this method fails and returns an empty NodePath. 
NodePath get_path_to ( Node node, bool use_unique_path=false ) const
 Returns the relative NodePath from this node to the specified node. Both nodes must be in the same SceneTree, otherwise this method fails and returns an empty NodePath. If use_unique_path is true, returns the shortest path accounting for this node's unique name (see unique_name_in_owner). Note: If you get a relative path which starts from a unique node, the path may be longer than a normal relative path, due to the addition of the unique node's name. 
float get_physics_process_delta_time ( ) const
 Returns the time elapsed (in seconds) since the last physics callback. This value is identical to _physics_process's delta parameter, and is often consistent at run-time, unless Engine.physics_ticks_per_second is changed. See also NOTIFICATION_PHYSICS_PROCESS. 
float get_process_delta_time ( ) const
 Returns the time elapsed (in seconds) since the last process callback. This value is identical to _process's delta parameter, and may vary from frame to frame. See also NOTIFICATION_PROCESS. 
bool get_scene_instance_load_placeholder ( ) const
 Returns true if this node is an instance load placeholder. See InstancePlaceholder and set_scene_instance_load_placeholder. 
SceneTree get_tree ( ) const
 Returns the SceneTree that contains this node. If this node is not inside the tree, generates an error and returns null. See also is_inside_tree. 
String get_tree_string ( ) Returns the tree as a String. Used mainly for debugging purposes. This version displays the path relative to the current node, and is good for copy/pasting into the get_node function. It also can be used in game UI/UX. Example output: TheGame
TheGame/Menu
TheGame/Menu/Label
TheGame/Menu/Camera2D
TheGame/SplashScreen
TheGame/SplashScreen/Camera2D
 
String get_tree_string_pretty ( ) Similar to get_tree_string, this returns the tree as a String. This version displays a more graphical representation similar to what is displayed in the Scene Dock. It is useful for inspecting larger trees. Example output: â”–â•´TheGame
   â” â•´Menu
   â”ƒ  â” â•´Label
   â”ƒ  â”–â•´Camera2D
   â”–â•´SplashScreen
      â”–â•´Camera2D
 
Viewport get_viewport ( ) const
 Returns the node's closest Viewport ancestor, if the node is inside the tree. Otherwise, returns null. 
Window get_window ( ) const
 Returns the Window that contains this node. If the node is in the main window, this is equivalent to getting the root node (get_tree().get_root()). 
bool has_node ( NodePath path ) const
 Returns true if the path points to a valid node. See also get_node. 
bool has_node_and_resource ( NodePath path ) const
 Returns true if path points to a valid node and its subnames point to a valid Resource, e.g. Area2D/CollisionShape2D:shape. Properties that are not Resource types (such as nodes or other Variant types) are not considered. See also get_node_and_resource. 
bool is_ancestor_of ( Node node ) const
 Returns true if the given node is a direct or indirect child of this node. 
bool is_displayed_folded ( ) const
 Returns true if the node is folded (collapsed) in the Scene dock. This method is intended to be used in editor plugins and tools. See also set_display_folded. 
bool is_editable_instance ( Node node ) const
 Returns true if node has editable children enabled relative to this node. This method is intended to be used in editor plugins and tools. See also set_editable_instance. 
bool is_greater_than ( Node node ) const
 Returns true if the given node occurs later in the scene hierarchy than this node. A node occurring later is usually processed last. 
bool is_in_group ( StringName group ) const
 Returns true if this node has been added to the given group. See add_to_group and remove_from_group. See also notes in the description, and the SceneTree's group methods. 
bool is_inside_tree ( ) const
 Returns true if this node is currently inside a SceneTree. See also get_tree. 
bool is_multiplayer_authority ( ) const
 Returns true if the local system is the multiplayer authority of this node. 
bool is_node_ready ( ) const
 Returns true if the node is ready, i.e. it's inside scene tree and all its children are initialized. request_ready resets it back to false. 
bool is_physics_processing ( ) const
 Returns true if physics processing is enabled (see set_physics_process). 
bool is_physics_processing_internal ( ) const
 Returns true if internal physics processing is enabled (see set_physics_process_internal). 
bool is_processing ( ) const
 Returns true if processing is enabled (see set_process). 
bool is_processing_input ( ) const
 Returns true if the node is processing input (see set_process_input). 
bool is_processing_internal ( ) const
 Returns true if internal processing is enabled (see set_process_internal). 
bool is_processing_shortcut_input ( ) const
 Returns true if the node is processing shortcuts (see set_process_shortcut_input). 
bool is_processing_unhandled_input ( ) const
 Returns true if the node is processing unhandled input (see set_process_unhandled_input). 
bool is_processing_unhandled_key_input ( ) const
 Returns true if the node is processing unhandled key input (see set_process_unhandled_key_input). void move_child ( Node child_node, int to_index ) Moves child_node to the given index. A node's index is the order among its siblings. If to_index is negative, the index is counted from the end of the list. See also get_child and get_index. Note: The processing order of several engine callbacks (_ready, _process, etc.) and notifications sent through propagate_notification is affected by tree order. CanvasItem nodes are also rendered in tree order. See also process_priority. void notify_deferred_thread_group ( int what ) Similar to call_deferred_thread_group, but for notifications. void notify_thread_safe ( int what ) Similar to call_thread_safe, but for notifications. void print_orphan_nodes ( ) static
 Prints all orphan nodes (nodes outside the SceneTree). Useful for debugging. Note: This method only works in debug builds. Does nothing in a project exported in release mode. void print_tree ( ) Prints the node and its children to the console, recursively. The node does not have to be inside the tree. This method outputs NodePaths relative to this node, and is good for copy/pasting into get_node. See also print_tree_pretty. Example output: .
Menu
Menu/Label
Menu/Camera2D
SplashScreen
SplashScreen/Camera2D
 void print_tree_pretty ( ) Prints the node and its children to the console, recursively. The node does not have to be inside the tree. Similar to print_tree, but the graphical representation looks like what is displayed in the editor's Scene dock. It is useful for inspecting larger trees. Example output: â”–â•´TheGame
   â” â•´Menu
   â”ƒ  â” â•´Label
   â”ƒ  â”–â•´Camera2D
   â”–â•´SplashScreen
      â”–â•´Camera2D
 void propagate_call ( StringName method, Array args=[], bool parent_first=false ) Calls the given method name, passing args as arguments, on this node and all of its children, recursively. If parent_first is true, the method is called on this node first, then on all of its children. If false, the children's methods are called first. void propagate_notification ( int what ) Calls Object.notification with what on this node and all of its children, recursively. void queue_free ( ) Queues this node to be deleted at the end of the current frame. When deleted, all of its children are deleted as well, and all references to the node and its children become invalid. Unlike with Object.free, the node is not deleted instantly, and it can still be accessed before deletion. It is also safe to call queue_free multiple times. Use Object.is_queued_for_deletion to check if the node will be deleted at the end of the frame. Note: The node will only be freed after all other deferred calls are finished. Using this method is not always the same as calling Object.free through Object.call_deferred. void remove_child ( Node node ) Removes a child node. The node, along with its children, are not deleted. To delete a node, see queue_free. Note: When this node is inside the tree, this method sets the owner of the removed node (or its descendants) to null, if their owner is no longer an ancestor (see is_ancestor_of). void remove_from_group ( StringName group ) Removes the node from the given group. Does nothing if the node is not in the group. See also notes in the description, and the SceneTree's group methods. void reparent ( Node new_parent, bool keep_global_transform=true ) Changes the parent of this Node to the new_parent. The node needs to already have a parent. If keep_global_transform is true, the node's global transform will be preserved if supported. Node2D, Node3D and Control support this argument (but Control keeps only position). void replace_by ( Node node, bool keep_groups=false ) Replaces this node by the given node. All children of this node are moved to node. If keep_groups is true, the node is added to the same groups that the replaced node is in (see add_to_group). Warning: The replaced node is removed from the tree, but it is not deleted. To prevent memory leaks, store a reference to the node in a variable, or use Object.free. void request_ready ( ) Requests _ready to be called again the next time the node enters the tree. Does not immediately call _ready. Note: This method only affects the current node. If the node's children also need to request ready, this method needs to be called for each one of them. When the node and its children enter the tree again, the order of _ready callbacks will be the same as normal. 
Error rpc ( StringName method, ... ) vararg
 Sends a remote procedure call request for the given method to peers on the network (and locally), sending additional arguments to the method called by the RPC. The call request will only be received by nodes with the same NodePath, including the exact same name. Behavior depends on the RPC configuration for the given method (see rpc_config and @GDScript.@rpc). By default, methods are not exposed to RPCs. May return @GlobalScope.OK if the call is successful, @GlobalScope.ERR_INVALID_PARAMETER if the arguments passed in the method do not match, @GlobalScope.ERR_UNCONFIGURED if the node's multiplayer cannot be fetched (such as when the node is not inside the tree), @GlobalScope.ERR_CONNECTION_ERROR if multiplayer's connection is not available. Note: You can only safely use RPCs on clients after you received the MultiplayerAPI.connected_to_server signal from the MultiplayerAPI. You also need to keep track of the connection state, either by the MultiplayerAPI signals like MultiplayerAPI.server_disconnected or by checking (get_multiplayer().peer.get_connection_status() == CONNECTION_CONNECTED). void rpc_config ( StringName method, Variant config ) Changes the RPC configuration for the given method. config should either be null to disable the feature (as by default), or a Dictionary containing the following entries:  
rpc_mode: see RPCMode; 
transfer_mode: see TransferMode; 
call_local: if true, the method will also be called locally; 
channel: an int representing the channel to send the RPC on.  Note: In GDScript, this method corresponds to the @GDScript.@rpc annotation, with various parameters passed (@rpc(any), @rpc(authority)...). See also the high-level multiplayer tutorial. 
Error rpc_id ( int peer_id, StringName method, ... ) vararg
 Sends a rpc to a specific peer identified by peer_id (see MultiplayerPeer.set_target_peer). May return @GlobalScope.OK if the call is successful, @GlobalScope.ERR_INVALID_PARAMETER if the arguments passed in the method do not match, @GlobalScope.ERR_UNCONFIGURED if the node's multiplayer cannot be fetched (such as when the node is not inside the tree), @GlobalScope.ERR_CONNECTION_ERROR if multiplayer's connection is not available. void set_deferred_thread_group ( StringName property, Variant value ) Similar to call_deferred_thread_group, but for setting properties. void set_display_folded ( bool fold ) If set to true, the node appears folded in the Scene dock. As a result, all of its children are hidden. This method is intended to be used in editor plugins and tools, but it also works in release builds. See also is_displayed_folded. void set_editable_instance ( Node node, bool is_editable ) Set to true to allow all nodes owned by node to be available, and editable, in the Scene dock, even if their owner is not the scene root. This method is intended to be used in editor plugins and tools, but it also works in release builds. See also is_editable_instance. void set_multiplayer_authority ( int id, bool recursive=true ) Sets the node's multiplayer authority to the peer with the given peer id. The multiplayer authority is the peer that has authority over the node on the network. Defaults to peer ID 1 (the server). Useful in conjunction with rpc_config and the MultiplayerAPI. If recursive is true, the given peer is recursively set as the authority for all children of this node. Warning: This does not automatically replicate the new authority to other peers. It is the developer's responsibility to do so. You may replicate the new authority's information using MultiplayerSpawner.spawn_function, an RPC, or a MultiplayerSynchronizer. Furthermore, the parent's authority does not propagate to newly added children. void set_physics_process ( bool enable ) If set to true, enables physics (fixed framerate) processing. When a node is being processed, it will receive a NOTIFICATION_PHYSICS_PROCESS at a fixed (usually 60 FPS, see Engine.physics_ticks_per_second to change) interval (and the _physics_process callback will be called if exists). Enabled automatically if _physics_process is overridden. void set_physics_process_internal ( bool enable ) If set to true, enables internal physics for this node. Internal physics processing happens in isolation from the normal _physics_process calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or physics processing is disabled for scripting (set_physics_process). Warning: Built-in nodes rely on internal processing for their internal logic. Disabling it is unsafe and may lead to unexpected behavior. Use this method if you know what you are doing. void set_process ( bool enable ) If set to true, enables processing. When a node is being processed, it will receive a NOTIFICATION_PROCESS on every drawn frame (and the _process callback will be called if exists). Enabled automatically if _process is overridden. void set_process_input ( bool enable ) If set to true, enables input processing. This is not required for GUI controls! Enabled automatically if _input is overridden. void set_process_internal ( bool enable ) If set to true, enables internal processing for this node. Internal processing happens in isolation from the normal _process calls and is used by some nodes internally to guarantee proper functioning even if the node is paused or processing is disabled for scripting (set_process). Warning: Built-in nodes rely on internal processing for their internal logic. Disabling it is unsafe and may lead to unexpected behavior. Use this method if you know what you are doing. void set_process_shortcut_input ( bool enable ) If set to true, enables shortcut processing for this node. Enabled automatically if _shortcut_input is overridden. void set_process_unhandled_input ( bool enable ) If set to true, enables unhandled input processing. This is not required for GUI controls! It enables the node to receive all input that was not previously handled (usually by a Control). Enabled automatically if _unhandled_input is overridden. void set_process_unhandled_key_input ( bool enable ) If set to true, enables unhandled key input processing. Enabled automatically if _unhandled_key_input is overridden. void set_scene_instance_load_placeholder ( bool load_placeholder ) If set to true, the node becomes a InstancePlaceholder when packed and instantiated from a PackedScene. See also get_scene_instance_load_placeholder. void set_thread_safe ( StringName property, Variant value ) Similar to call_thread_safe, but for setting properties. void update_configuration_warnings ( ) Refreshes the warnings displayed for this node in the Scene dock. Use _get_configuration_warnings to customize the warning messages to display.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_node.html


classes/class_visualshadernodecolorop
-----------------------------------------------------------
VisualShaderNodeColorOp Inherits: VisualShaderNode < Resource < RefCounted < Object A Color operator to be used within the visual shader graph.  Description Applies operator to two color inputs.   Properties  
Operator operator 0     Enumerations enum Operator: 
Operator OP_SCREEN = 0
 Produce a screen effect with the following formula: result = vec3(1.0) - (vec3(1.0) - a) * (vec3(1.0) - b);
 
Operator OP_DIFFERENCE = 1
 Produce a difference effect with the following formula: result = abs(a - b);
 
Operator OP_DARKEN = 2
 Produce a darken effect with the following formula: result = min(a, b);
 
Operator OP_LIGHTEN = 3
 Produce a lighten effect with the following formula: result = max(a, b);
 
Operator OP_OVERLAY = 4
 Produce an overlay effect with the following formula: for (int i = 0; i < 3; i++) {
    float base = a[i];
    float blend = b[i];
    if (base < 0.5) {
        result[i] = 2.0 * base * blend;
    } else {
        result[i] = 1.0 - 2.0 * (1.0 - blend) * (1.0 - base);
    }
}
 
Operator OP_DODGE = 5
 Produce a dodge effect with the following formula: result = a / (vec3(1.0) - b);
 
Operator OP_BURN = 6
 Produce a burn effect with the following formula: result = vec3(1.0) - (vec3(1.0) - a) / b;
 
Operator OP_SOFT_LIGHT = 7
 Produce a soft light effect with the following formula: for (int i = 0; i < 3; i++) {
    float base = a[i];
    float blend = b[i];
    if (base < 0.5) {
        result[i] = base * (blend + 0.5);
    } else {
        result[i] = 1.0 - (1.0 - base) * (1.0 - (blend - 0.5));
    }
}
 
Operator OP_HARD_LIGHT = 8
 Produce a hard light effect with the following formula: for (int i = 0; i < 3; i++) {
    float base = a[i];
    float blend = b[i];
    if (base < 0.5) {
        result[i] = base * (2.0 * blend);
    } else {
        result[i] = 1.0 - (1.0 - base) * (1.0 - 2.0 * (blend - 0.5));
    }
}
 
Operator OP_MAX = 9
 Represents the size of the Operator enum.   Property Descriptions 
Operator operator = 0
  void set_operator ( Operator value )
 
Operator get_operator ( )
  An operator to be applied to the inputs. See Operator for options.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualshadernodecolorop.html


classes/class_gltftexturesampler
-----------------------------------------------------------
GLTFTextureSampler Inherits: Resource < RefCounted < Object Represents a GLTF texture sampler  Description Represents a texture sampler as defined by the base GLTF spec. Texture samplers in GLTF specify how to sample data from the texture's base image, when rendering the texture on an object.   Tutorials  Runtime file loading and saving    Properties  
int mag_filter 9729  
int min_filter 9987  
int wrap_s 10497  
int wrap_t 10497     Property Descriptions 
int mag_filter = 9729
  void set_mag_filter ( int value )
 
int get_mag_filter ( )
  Texture's magnification filter, used when texture appears larger on screen than the source image. 
int min_filter = 9987
  void set_min_filter ( int value )
 
int get_min_filter ( )
  Texture's minification filter, used when the texture appears smaller on screen than the source image. 
int wrap_s = 10497
  void set_wrap_s ( int value )
 
int get_wrap_s ( )
  Wrapping mode to use for S-axis (horizontal) texture coordinates. 
int wrap_t = 10497
  void set_wrap_t ( int value )
 
int get_wrap_t ( )
  Wrapping mode to use for T-axis (vertical) texture coordinates.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltftexturesampler.html


classes/class_gltfskin
-----------------------------------------------------------
GLTFSkin Inherits: Resource < RefCounted < Object  There is currently no description for this class. Please help us by contributing one!   Tutorials  Runtime file loading and saving    Properties  
Skin godot_skin   
PackedInt32Array joints PackedInt32Array()  
PackedInt32Array joints_original PackedInt32Array()  
PackedInt32Array non_joints PackedInt32Array()  
PackedInt32Array roots PackedInt32Array()  
int skeleton -1  
int skin_root -1     Methods  
Transform3D[] get_inverse_binds ( )  
Dictionary get_joint_i_to_bone_i ( )  
Dictionary get_joint_i_to_name ( )  
void set_inverse_binds ( Transform3D[] inverse_binds )  
void set_joint_i_to_bone_i ( Dictionary joint_i_to_bone_i )  
void set_joint_i_to_name ( Dictionary joint_i_to_name )     Property Descriptions 
Skin godot_skin  void set_godot_skin ( Skin value )
 
Skin get_godot_skin ( )
   There is currently no description for this property. Please help us by contributing one!  
PackedInt32Array joints = PackedInt32Array()
  void set_joints ( PackedInt32Array value )
 
PackedInt32Array get_joints ( )
   There is currently no description for this property. Please help us by contributing one!  
PackedInt32Array joints_original = PackedInt32Array()
  void set_joints_original ( PackedInt32Array value )
 
PackedInt32Array get_joints_original ( )
   There is currently no description for this property. Please help us by contributing one!  
PackedInt32Array non_joints = PackedInt32Array()
  void set_non_joints ( PackedInt32Array value )
 
PackedInt32Array get_non_joints ( )
   There is currently no description for this property. Please help us by contributing one!  
PackedInt32Array roots = PackedInt32Array()
  void set_roots ( PackedInt32Array value )
 
PackedInt32Array get_roots ( )
   There is currently no description for this property. Please help us by contributing one!  
int skeleton = -1
  void set_skeleton ( int value )
 
int get_skeleton ( )
   There is currently no description for this property. Please help us by contributing one!  
int skin_root = -1
  void set_skin_root ( int value )
 
int get_skin_root ( )
   There is currently no description for this property. Please help us by contributing one!    Method Descriptions 
Transform3D[] get_inverse_binds ( )  There is currently no description for this method. Please help us by contributing one!  
Dictionary get_joint_i_to_bone_i ( )  There is currently no description for this method. Please help us by contributing one!  
Dictionary get_joint_i_to_name ( )  There is currently no description for this method. Please help us by contributing one!  void set_inverse_binds ( Transform3D[] inverse_binds )  There is currently no description for this method. Please help us by contributing one!  void set_joint_i_to_bone_i ( Dictionary joint_i_to_bone_i )  There is currently no description for this method. Please help us by contributing one!  void set_joint_i_to_name ( Dictionary joint_i_to_name )  There is currently no description for this method. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gltfskin.html


classes/class_richtexteffect
-----------------------------------------------------------
RichTextEffect Inherits: Resource < RefCounted < Object A custom effect for a RichTextLabel.  Description A custom effect for a RichTextLabel, which can be loaded in the RichTextLabel inspector or using RichTextLabel.install_effect. Note: For a RichTextEffect to be usable, a BBCode tag must be defined as a member variable called bbcode in the script.  GDScript# The RichTextEffect will be usable like this: `[example]Some text[/example]`
var bbcode = "example"
 C#// The RichTextEffect will be usable like this: `[example]Some text[/example]`
string bbcode = "example";
  Note: As soon as a RichTextLabel contains at least one RichTextEffect, it will continuously process the effect unless the project is paused. This may impact battery life negatively.   Tutorials  BBCode in RichTextLabel RichTextEffect test project (third-party)    Methods  
bool _process_custom_fx ( CharFXTransform char_fx ) virtual const     Method Descriptions 
bool _process_custom_fx ( CharFXTransform char_fx ) virtual const
 Override this method to modify properties in char_fx. The method must return true if the character could be transformed successfully. If the method returns false, it will skip transformation to avoid displaying broken text.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_richtexteffect.html


classes/class_audiolistener3d
-----------------------------------------------------------
AudioListener3D Inherits: Node3D < Node < Object Overrides the location sounds are heard from.  Description Once added to the scene tree and enabled using make_current, this node will override the location sounds are heard from. This can be used to listen from a location different from the Camera3D.   Methods  
void clear_current ( )  
Transform3D get_listener_transform ( ) const  
bool is_current ( ) const  
void make_current ( )     Method Descriptions void clear_current ( ) Disables the listener to use the current camera's listener instead. 
Transform3D get_listener_transform ( ) const
 Returns the listener's global orthonormalized Transform3D. 
bool is_current ( ) const
 Returns true if the listener was made current using make_current, false otherwise. Note: There may be more than one AudioListener3D marked as "current" in the scene tree, but only the one that was made current last will be used. void make_current ( ) Enables the listener. This will override the current camera's listener.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiolistener3d.html


classes/class_codeedit
-----------------------------------------------------------
CodeEdit Inherits: TextEdit < Control < CanvasItem < Node < Object A multiline text editor designed for editing code.  Description CodeEdit is a specialized TextEdit designed for editing plain text code files. It has many features commonly found in code editors such as line numbers, line folding, code completion, indent management, and string/comment management. Note: Regardless of locale, CodeEdit will by default always use left-to-right text direction to correctly display source code.   Properties  
bool auto_brace_completion_enabled false  
bool auto_brace_completion_highlight_matching false  
Dictionary auto_brace_completion_pairs { "\"": "\"", "'": "'", "(": ")", "[": "]", "{": "}" }  
bool code_completion_enabled false  
String[] code_completion_prefixes []  
String[] delimiter_comments []  
String[] delimiter_strings ["' '", "\" \""]  
bool gutters_draw_bookmarks false  
bool gutters_draw_breakpoints_gutter false  
bool gutters_draw_executing_lines false  
bool gutters_draw_fold_gutter false  
bool gutters_draw_line_numbers false  
bool gutters_zero_pad_line_numbers false  
bool indent_automatic false  
String[] indent_automatic_prefixes [":", "{", "[", "("]  
int indent_size 4  
bool indent_use_spaces false  
LayoutDirection layout_direction 2 (overrides Control)  
bool line_folding false  
int[] line_length_guidelines []  
bool symbol_lookup_on_click false  
TextDirection text_direction 1 (overrides TextEdit)     Methods  
void _confirm_code_completion ( bool replace ) virtual  
Dictionary[] _filter_code_completion_candidates ( Dictionary[] candidates ) virtual const  
void _request_code_completion ( bool force ) virtual  
void add_auto_brace_completion_pair ( String start_key, String end_key )  
void add_code_completion_option ( CodeCompletionKind type, String display_text, String insert_text, Color text_color=Color(1, 1, 1, 1), Resource icon=null, Variant value=0, int location=1024 )  
void add_comment_delimiter ( String start_key, String end_key, bool line_only=false )  
void add_string_delimiter ( String start_key, String end_key, bool line_only=false )  
bool can_fold_line ( int line ) const  
void cancel_code_completion ( )  
void clear_bookmarked_lines ( )  
void clear_breakpointed_lines ( )  
void clear_comment_delimiters ( )  
void clear_executing_lines ( )  
void clear_string_delimiters ( )  
void confirm_code_completion ( bool replace=false )  
void convert_indent ( int from_line=-1, int to_line=-1 )  
void create_code_region ( )  
void do_indent ( )  
void duplicate_lines ( )  
void fold_all_lines ( )  
void fold_line ( int line )  
String get_auto_brace_completion_close_key ( String open_key ) const  
PackedInt32Array get_bookmarked_lines ( ) const  
PackedInt32Array get_breakpointed_lines ( ) const  
Dictionary get_code_completion_option ( int index ) const  
Dictionary[] get_code_completion_options ( ) const  
int get_code_completion_selected_index ( ) const  
String get_code_region_end_tag ( ) const  
String get_code_region_start_tag ( ) const  
String get_delimiter_end_key ( int delimiter_index ) const  
Vector2 get_delimiter_end_position ( int line, int column ) const  
String get_delimiter_start_key ( int delimiter_index ) const  
Vector2 get_delimiter_start_position ( int line, int column ) const  
PackedInt32Array get_executing_lines ( ) const  
int[] get_folded_lines ( ) const  
String get_text_for_code_completion ( ) const  
String get_text_for_symbol_lookup ( ) const  
String get_text_with_cursor_char ( int line, int column ) const  
bool has_auto_brace_completion_close_key ( String close_key ) const  
bool has_auto_brace_completion_open_key ( String open_key ) const  
bool has_comment_delimiter ( String start_key ) const  
bool has_string_delimiter ( String start_key ) const  
void indent_lines ( )  
int is_in_comment ( int line, int column=-1 ) const  
int is_in_string ( int line, int column=-1 ) const  
bool is_line_bookmarked ( int line ) const  
bool is_line_breakpointed ( int line ) const  
bool is_line_code_region_end ( int line ) const  
bool is_line_code_region_start ( int line ) const  
bool is_line_executing ( int line ) const  
bool is_line_folded ( int line ) const  
void remove_comment_delimiter ( String start_key )  
void remove_string_delimiter ( String start_key )  
void request_code_completion ( bool force=false )  
void set_code_completion_selected_index ( int index )  
void set_code_hint ( String code_hint )  
void set_code_hint_draw_below ( bool draw_below )  
void set_code_region_tags ( String start="region", String end="endregion" )  
void set_line_as_bookmarked ( int line, bool bookmarked )  
void set_line_as_breakpoint ( int line, bool breakpointed )  
void set_line_as_executing ( int line, bool executing )  
void set_symbol_lookup_word_as_valid ( bool valid )  
void toggle_foldable_line ( int line )  
void unfold_all_lines ( )  
void unfold_line ( int line )  
void unindent_lines ( )  
void update_code_completion_options ( bool force )     Theme Properties  
Color bookmark_color Color(0.5, 0.64, 1, 0.8)  
Color brace_mismatch_color Color(1, 0.2, 0.2, 1)  
Color breakpoint_color Color(0.9, 0.29, 0.3, 1)  
Color code_folding_color Color(0.8, 0.8, 0.8, 0.8)  
Color completion_background_color Color(0.17, 0.16, 0.2, 1)  
Color completion_existing_color Color(0.87, 0.87, 0.87, 0.13)  
Color completion_scroll_color Color(1, 1, 1, 0.29)  
Color completion_scroll_hovered_color Color(1, 1, 1, 0.4)  
Color completion_selected_color Color(0.26, 0.26, 0.27, 1)  
Color executing_line_color Color(0.98, 0.89, 0.27, 1)  
Color folded_code_region_color Color(0.68, 0.46, 0.77, 0.2)  
Color line_length_guideline_color Color(0.3, 0.5, 0.8, 0.1)  
Color line_number_color Color(0.67, 0.67, 0.67, 0.4)  
int completion_lines 7  
int completion_max_width 50  
int completion_scroll_width 6  
Texture2D bookmark   
Texture2D breakpoint   
Texture2D can_fold   
Texture2D can_fold_code_region   
Texture2D executing_line   
Texture2D folded   
Texture2D folded_code_region   
Texture2D folded_eol_icon   
StyleBox completion      Signals breakpoint_toggled ( int line ) Emitted when a breakpoint is added or removed from a line. If the line is moved via backspace a removed is emitted at the old line. code_completion_requested ( ) Emitted when the user requests code completion. symbol_lookup ( String symbol, int line, int column ) Emitted when the user has clicked on a valid symbol. symbol_validate ( String symbol ) Emitted when the user hovers over a symbol. The symbol should be validated and responded to, by calling set_symbol_lookup_word_as_valid.   Enumerations enum CodeCompletionKind: 
CodeCompletionKind KIND_CLASS = 0
 Marks the option as a class. 
CodeCompletionKind KIND_FUNCTION = 1
 Marks the option as a function. 
CodeCompletionKind KIND_SIGNAL = 2
 Marks the option as a Godot signal. 
CodeCompletionKind KIND_VARIABLE = 3
 Marks the option as a variable. 
CodeCompletionKind KIND_MEMBER = 4
 Marks the option as a member. 
CodeCompletionKind KIND_ENUM = 5
 Marks the option as an enum entry. 
CodeCompletionKind KIND_CONSTANT = 6
 Marks the option as a constant. 
CodeCompletionKind KIND_NODE_PATH = 7
 Marks the option as a Godot node path. 
CodeCompletionKind KIND_FILE_PATH = 8
 Marks the option as a file path. 
CodeCompletionKind KIND_PLAIN_TEXT = 9
 Marks the option as unclassified or plain text. enum CodeCompletionLocation: 
CodeCompletionLocation LOCATION_LOCAL = 0
 The option is local to the location of the code completion query - e.g. a local variable. Subsequent value of location represent options from the outer class, the exact value represent how far they are (in terms of inner classes). 
CodeCompletionLocation LOCATION_PARENT_MASK = 256
 The option is from the containing class or a parent class, relative to the location of the code completion query. Perform a bitwise OR with the class depth (e.g. 0 for the local class, 1 for the parent, 2 for the grandparent, etc) to store the depth of an option in the class or a parent class. 
CodeCompletionLocation LOCATION_OTHER_USER_CODE = 512
 The option is from user code which is not local and not in a derived class (e.g. Autoload Singletons). 
CodeCompletionLocation LOCATION_OTHER = 1024
 The option is from other engine code, not covered by the other enum constants - e.g. built-in classes.   Property Descriptions 
bool auto_brace_completion_enabled = false
  void set_auto_brace_completion_enabled ( bool value )
 
bool is_auto_brace_completion_enabled ( )
  Sets whether brace pairs should be autocompleted. 
bool auto_brace_completion_highlight_matching = false
  void set_highlight_matching_braces_enabled ( bool value )
 
bool is_highlight_matching_braces_enabled ( )
  Highlight mismatching brace pairs. 
Dictionary auto_brace_completion_pairs = { "\"": "\"", "'": "'", "(": ")", "[": "]", "{": "}" }
  void set_auto_brace_completion_pairs ( Dictionary value )
 
Dictionary get_auto_brace_completion_pairs ( )
  Sets the brace pairs to be autocompleted. 
bool code_completion_enabled = false
  void set_code_completion_enabled ( bool value )
 
bool is_code_completion_enabled ( )
  Sets whether code completion is allowed. 
String[] code_completion_prefixes = []
  void set_code_completion_prefixes ( String[] value )
 
String[] get_code_completion_prefixes ( )
  Sets prefixes that will trigger code completion. 
String[] delimiter_comments = []
  void set_comment_delimiters ( String[] value )
 
String[] get_comment_delimiters ( )
  Sets the comment delimiters. All existing comment delimiters will be removed. 
String[] delimiter_strings = ["' '", "\" \""]
  void set_string_delimiters ( String[] value )
 
String[] get_string_delimiters ( )
  Sets the string delimiters. All existing string delimiters will be removed. 
bool gutters_draw_bookmarks = false
  void set_draw_bookmarks_gutter ( bool value )
 
bool is_drawing_bookmarks_gutter ( )
  Sets if bookmarked should be drawn in the gutter. This gutter is shared with breakpoints and executing lines. 
bool gutters_draw_breakpoints_gutter = false
  void set_draw_breakpoints_gutter ( bool value )
 
bool is_drawing_breakpoints_gutter ( )
  Sets if breakpoints should be drawn in the gutter. This gutter is shared with bookmarks and executing lines. 
bool gutters_draw_executing_lines = false
  void set_draw_executing_lines_gutter ( bool value )
 
bool is_drawing_executing_lines_gutter ( )
  Sets if executing lines should be marked in the gutter. This gutter is shared with breakpoints and bookmarks lines. 
bool gutters_draw_fold_gutter = false
  void set_draw_fold_gutter ( bool value )
 
bool is_drawing_fold_gutter ( )
  Sets if foldable lines icons should be drawn in the gutter. 
bool gutters_draw_line_numbers = false
  void set_draw_line_numbers ( bool value )
 
bool is_draw_line_numbers_enabled ( )
  Sets if line numbers should be drawn in the gutter. 
bool gutters_zero_pad_line_numbers = false
  void set_line_numbers_zero_padded ( bool value )
 
bool is_line_numbers_zero_padded ( )
  Sets if line numbers drawn in the gutter are zero padded. 
bool indent_automatic = false
  void set_auto_indent_enabled ( bool value )
 
bool is_auto_indent_enabled ( )
  Sets whether automatic indent are enabled, this will add an extra indent if a prefix or brace is found. 
String[] indent_automatic_prefixes = [":", "{", "[", "("]
  void set_auto_indent_prefixes ( String[] value )
 
String[] get_auto_indent_prefixes ( )
  Prefixes to trigger an automatic indent. 
int indent_size = 4
  void set_indent_size ( int value )
 
int get_indent_size ( )
  Size of the tabulation indent (one Tab press) in characters. If indent_use_spaces is enabled the number of spaces to use. 
bool indent_use_spaces = false
  void set_indent_using_spaces ( bool value )
 
bool is_indent_using_spaces ( )
  Use spaces instead of tabs for indentation. 
bool line_folding = false
  void set_line_folding_enabled ( bool value )
 
bool is_line_folding_enabled ( )
  Sets whether line folding is allowed. 
int[] line_length_guidelines = []
  void set_line_length_guidelines ( int[] value )
 
int[] get_line_length_guidelines ( )
  Draws vertical lines at the provided columns. The first entry is considered a main hard guideline and is draw more prominently. 
bool symbol_lookup_on_click = false
  void set_symbol_lookup_on_click_enabled ( bool value )
 
bool is_symbol_lookup_on_click_enabled ( )
  Set when a validated word from symbol_validate is clicked, the symbol_lookup should be emitted.   Method Descriptions void _confirm_code_completion ( bool replace ) virtual
 Override this method to define how the selected entry should be inserted. If replace is true, any existing text should be replaced. 
Dictionary[] _filter_code_completion_candidates ( Dictionary[] candidates ) virtual const
 Override this method to define what items in candidates should be displayed. Both candidates and the return is a Array of Dictionary, see get_code_completion_option for Dictionary content. void _request_code_completion ( bool force ) virtual
 Override this method to define what happens when the user requests code completion. If force is true, any checks should be bypassed. void add_auto_brace_completion_pair ( String start_key, String end_key ) Adds a brace pair. Both the start and end keys must be symbols. Only the start key has to be unique. void add_code_completion_option ( CodeCompletionKind type, String display_text, String insert_text, Color text_color=Color(1, 1, 1, 1), Resource icon=null, Variant value=0, int location=1024 ) Submits an item to the queue of potential candidates for the autocomplete menu. Call update_code_completion_options to update the list. location indicates location of the option relative to the location of the code completion query. See CodeCompletionLocation for how to set this value. Note: This list will replace all current candidates. void add_comment_delimiter ( String start_key, String end_key, bool line_only=false ) Adds a comment delimiter. Both the start and end keys must be symbols. Only the start key has to be unique. line_only denotes if the region should continue until the end of the line or carry over on to the next line. If the end key is blank this is automatically set to true. void add_string_delimiter ( String start_key, String end_key, bool line_only=false ) Adds a string delimiter. Both the start and end keys must be symbols. Only the start key has to be unique. line_only denotes if the region should continue until the end of the line or carry over on to the next line. If the end key is blank this is automatically set to true. 
bool can_fold_line ( int line ) const
 Returns if the given line is foldable, that is, it has indented lines right below it or a comment / string block. void cancel_code_completion ( ) Cancels the autocomplete menu. void clear_bookmarked_lines ( ) Clears all bookmarked lines. void clear_breakpointed_lines ( ) Clears all breakpointed lines. void clear_comment_delimiters ( ) Removes all comment delimiters. void clear_executing_lines ( ) Clears all executed lines. void clear_string_delimiters ( ) Removes all string delimiters. void confirm_code_completion ( bool replace=false ) Inserts the selected entry into the text. If replace is true, any existing text is replaced rather than merged. void convert_indent ( int from_line=-1, int to_line=-1 ) Converts the indents of lines between from_line and to_line to tabs or spaces as set by indent_use_spaces. Values of -1 convert the entire text. void create_code_region ( ) Creates a new code region with the selection. At least one single line comment delimiter have to be defined (see add_comment_delimiter). A code region is a part of code that is highlighted when folded and can help organize your script. Code region start and end tags can be customized (see set_code_region_tags). Code regions are delimited using start and end tags (respectively region and endregion by default) preceded by one line comment delimiter. (eg. #region and #endregion) void do_indent ( ) Perform an indent as if the user activated the "ui_text_indent" action. void duplicate_lines ( ) Duplicates all lines currently selected with any caret. Duplicates the entire line beneath the current one no matter where the caret is within the line. void fold_all_lines ( ) Folds all lines that are possible to be folded (see can_fold_line). void fold_line ( int line ) Folds the given line, if possible (see can_fold_line). 
String get_auto_brace_completion_close_key ( String open_key ) const
 Gets the matching auto brace close key for open_key. 
PackedInt32Array get_bookmarked_lines ( ) const
 Gets all bookmarked lines. 
PackedInt32Array get_breakpointed_lines ( ) const
 Gets all breakpointed lines. 
Dictionary get_code_completion_option ( int index ) const
 Gets the completion option at index. The return Dictionary has the following key-values: kind: CodeCompletionKind display_text: Text that is shown on the autocomplete menu. insert_text: Text that is to be inserted when this item is selected. font_color: Color of the text on the autocomplete menu. icon: Icon to draw on the autocomplete menu. default_value: Value of the symbol. 
Dictionary[] get_code_completion_options ( ) const
 Gets all completion options, see get_code_completion_option for return content. 
int get_code_completion_selected_index ( ) const
 Gets the index of the current selected completion option. 
String get_code_region_end_tag ( ) const
 Returns the code region end tag (without comment delimiter). 
String get_code_region_start_tag ( ) const
 Returns the code region start tag (without comment delimiter). 
String get_delimiter_end_key ( int delimiter_index ) const
 Gets the end key for a string or comment region index. 
Vector2 get_delimiter_end_position ( int line, int column ) const
 If line column is in a string or comment, returns the end position of the region. If not or no end could be found, both Vector2 values will be -1. 
String get_delimiter_start_key ( int delimiter_index ) const
 Gets the start key for a string or comment region index. 
Vector2 get_delimiter_start_position ( int line, int column ) const
 If line column is in a string or comment, returns the start position of the region. If not or no start could be found, both Vector2 values will be -1. 
PackedInt32Array get_executing_lines ( ) const
 Gets all executing lines. 
int[] get_folded_lines ( ) const
 Returns all lines that are current folded. 
String get_text_for_code_completion ( ) const
 Returns the full text with char 0xFFFF at the caret location. 
String get_text_for_symbol_lookup ( ) const
 Returns the full text with char 0xFFFF at the cursor location. 
String get_text_with_cursor_char ( int line, int column ) const
 Returns the full text with char 0xFFFF at the specified location. 
bool has_auto_brace_completion_close_key ( String close_key ) const
 Returns true if close key close_key exists. 
bool has_auto_brace_completion_open_key ( String open_key ) const
 Returns true if open key open_key exists. 
bool has_comment_delimiter ( String start_key ) const
 Returns true if comment start_key exists. 
bool has_string_delimiter ( String start_key ) const
 Returns true if string start_key exists. void indent_lines ( ) Indents selected lines, or in the case of no selection the caret line by one. 
int is_in_comment ( int line, int column=-1 ) const
 Returns delimiter index if line column is in a comment. If column is not provided, will return delimiter index if the entire line is a comment. Otherwise -1. 
int is_in_string ( int line, int column=-1 ) const
 Returns the delimiter index if line column is in a string. If column is not provided, will return the delimiter index if the entire line is a string. Otherwise -1. 
bool is_line_bookmarked ( int line ) const
 Returns whether the line at the specified index is bookmarked or not. 
bool is_line_breakpointed ( int line ) const
 Returns whether the line at the specified index is breakpointed or not. 
bool is_line_code_region_end ( int line ) const
 Returns whether the line at the specified index is a code region end. 
bool is_line_code_region_start ( int line ) const
 Returns whether the line at the specified index is a code region start. 
bool is_line_executing ( int line ) const
 Returns whether the line at the specified index is marked as executing or not. 
bool is_line_folded ( int line ) const
 Returns whether the line at the specified index is folded or not. void remove_comment_delimiter ( String start_key ) Removes the comment delimiter with start_key. void remove_string_delimiter ( String start_key ) Removes the string delimiter with start_key. void request_code_completion ( bool force=false ) Emits code_completion_requested, if force is true will bypass all checks. Otherwise will check that the caret is in a word or in front of a prefix. Will ignore the request if all current options are of type file path, node path or signal. void set_code_completion_selected_index ( int index ) Sets the current selected completion option. void set_code_hint ( String code_hint ) Sets the code hint text. Pass an empty string to clear. void set_code_hint_draw_below ( bool draw_below ) Sets if the code hint should draw below the text. void set_code_region_tags ( String start="region", String end="endregion" ) Sets the code region start and end tags (without comment delimiter). void set_line_as_bookmarked ( int line, bool bookmarked ) Sets the line as bookmarked. void set_line_as_breakpoint ( int line, bool breakpointed ) Sets the line as breakpointed. void set_line_as_executing ( int line, bool executing ) Sets the line as executing. void set_symbol_lookup_word_as_valid ( bool valid ) Sets the symbol emitted by symbol_validate as a valid lookup. void toggle_foldable_line ( int line ) Toggle the folding of the code block at the given line. void unfold_all_lines ( ) Unfolds all lines, folded or not. void unfold_line ( int line ) Unfolds all lines that were previously folded. void unindent_lines ( ) Unindents selected lines, or in the case of no selection the caret line by one. Same as performing "ui_text_unindent" action. void update_code_completion_options ( bool force ) Submits all completion options added with add_code_completion_option. Will try to force the autocomplete menu to popup, if force is true. Note: This will replace all current candidates.   Theme Property Descriptions 
Color bookmark_color = Color(0.5, 0.64, 1, 0.8)
 Color of the bookmark icon for bookmarked lines. 
Color brace_mismatch_color = Color(1, 0.2, 0.2, 1)
 Color of the text to highlight mismatched braces. 
Color breakpoint_color = Color(0.9, 0.29, 0.3, 1)
 Color of the breakpoint icon for bookmarked lines. 
Color code_folding_color = Color(0.8, 0.8, 0.8, 0.8)
 Color for all icons related to line folding. 
Color completion_background_color = Color(0.17, 0.16, 0.2, 1)
 Sets the background Color for the code completion popup. 
Color completion_existing_color = Color(0.87, 0.87, 0.87, 0.13)
 Background highlight Color for matching text in code completion options. 
Color completion_scroll_color = Color(1, 1, 1, 0.29)
 Color of the scrollbar in the code completion popup. 
Color completion_scroll_hovered_color = Color(1, 1, 1, 0.4)
 Color of the scrollbar in the code completion popup when hovered. 
Color completion_selected_color = Color(0.26, 0.26, 0.27, 1)
 Background highlight Color for the current selected option item in the code completion popup. 
Color executing_line_color = Color(0.98, 0.89, 0.27, 1)
 Color of the executing icon for executing lines. 
Color folded_code_region_color = Color(0.68, 0.46, 0.77, 0.2)
 Color of background line highlight for folded code region. 
Color line_length_guideline_color = Color(0.3, 0.5, 0.8, 0.1)
 Color of the main line length guideline, secondary guidelines will have 50% alpha applied. 
Color line_number_color = Color(0.67, 0.67, 0.67, 0.4)
 Sets the Color of line numbers. 
int completion_lines = 7
 Max number of options to display in the code completion popup at any one time. 
int completion_max_width = 50
 Max width of options in the code completion popup. Options longer than this will be cut off. 
int completion_scroll_width = 6
 Width of the scrollbar in the code completion popup. 
Texture2D bookmark Sets a custom Texture2D to draw in the bookmark gutter for bookmarked lines. 
Texture2D breakpoint Sets a custom Texture2D to draw in the breakpoint gutter for breakpointed lines. 
Texture2D can_fold Sets a custom Texture2D to draw in the line folding gutter when a line can be folded. 
Texture2D can_fold_code_region Sets a custom Texture2D to draw in the line folding gutter when a code region can be folded. 
Texture2D executing_line Icon to draw in the executing gutter for executing lines. 
Texture2D folded Sets a custom Texture2D to draw in the line folding gutter when a line is folded and can be unfolded. 
Texture2D folded_code_region Sets a custom Texture2D to draw in the line folding gutter when a code region is folded and can be unfolded. 
Texture2D folded_eol_icon Sets a custom Texture2D to draw at the end of a folded line. 
StyleBox completion StyleBox for the code completion popup.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_codeedit.html


classes/class_progressbar
-----------------------------------------------------------
ProgressBar Inherits: Range < Control < CanvasItem < Node < Object A control used for visual representation of a percentage.  Description A control used for visual representation of a percentage. Shows fill percentage from right to left.   Properties  
int fill_mode 0  
bool show_percentage true     Theme Properties  
Color font_color Color(0.95, 0.95, 0.95, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
int outline_size 0  
Font font   
int font_size   
StyleBox background   
StyleBox fill      Enumerations enum FillMode: 
FillMode FILL_BEGIN_TO_END = 0
 The progress bar fills from begin to end horizontally, according to the language direction. If Control.is_layout_rtl returns false, it fills from left to right, and if it returns true, it fills from right to left. 
FillMode FILL_END_TO_BEGIN = 1
 The progress bar fills from end to begin horizontally, according to the language direction. If Control.is_layout_rtl returns false, it fills from right to left, and if it returns true, it fills from left to right. 
FillMode FILL_TOP_TO_BOTTOM = 2
 The progress fills from top to bottom. 
FillMode FILL_BOTTOM_TO_TOP = 3
 The progress fills from bottom to top.   Property Descriptions 
int fill_mode = 0
  void set_fill_mode ( int value )
 
int get_fill_mode ( )
  The fill direction. See FillMode for possible values. 
bool show_percentage = true
  void set_show_percentage ( bool value )
 
bool is_percentage_shown ( )
  If true, the fill percentage is displayed on the bar.   Theme Property Descriptions 
Color font_color = Color(0.95, 0.95, 0.95, 1)
 The color of the text. 
Color font_outline_color = Color(1, 1, 1, 1)
 The tint of text outline of the ProgressBar. 
int outline_size = 0
 The size of the text outline. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. 
Font font Font used to draw the fill percentage if show_percentage is true. 
int font_size Font size used to draw the fill percentage if show_percentage is true. 
StyleBox background The style of the background. 
StyleBox fill The style of the progress (i.e. the part that fills the bar).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_progressbar.html


classes/class_optimizedtranslation
-----------------------------------------------------------
OptimizedTranslation Inherits: Translation < Resource < RefCounted < Object An optimized translation, used by default for CSV Translations.  Description An optimized translation, used by default for CSV Translations. Uses real-time compressed translations, which results in very small dictionaries.   Methods  
void generate ( Translation from )     Method Descriptions void generate ( Translation from ) Generates and sets an optimized translation from the given Translation resource.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_optimizedtranslation.html


classes/class_placeholdertexturelayered
-----------------------------------------------------------
PlaceholderTextureLayered Inherits: TextureLayered < Texture < Resource < RefCounted < Object Inherited By: PlaceholderCubemap, PlaceholderCubemapArray, PlaceholderTexture2DArray Placeholder class for a 2-dimensional texture array.  Description This class is used when loading a project that uses a TextureLayered subclass in 2 conditions:  When running the project exported in dedicated server mode, only the texture's dimensions are kept (as they may be relied upon for gameplay purposes or positioning of other elements). This allows reducing the exported PCK's size significantly. When this subclass is missing due to using a different engine version or build (e.g. modules disabled).  Note: This is not intended to be used as an actual texture for rendering. It is not guaranteed to work like one in shaders or materials (for example when calculating UV).   Properties  
int layers 1  
Vector2i size Vector2i(1, 1)     Property Descriptions 
int layers = 1
  void set_layers ( int value )
 
int get_layers ( )
  The number of layers in the texture array. 
Vector2i size = Vector2i(1, 1)
  void set_size ( Vector2i value )
 
Vector2i get_size ( )
  The size of each texture layer (in pixels).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_placeholdertexturelayered.html


classes/class_pointmesh
-----------------------------------------------------------
PointMesh Inherits: PrimitiveMesh < Mesh < Resource < RefCounted < Object Mesh with a single Point primitive.  Description The PointMesh is made from a single point. Instead of relying on triangles, points are rendered as a single rectangle on the screen with a constant size. They are intended to be used with Particle systems, but can be used as a cheap way to render constant size billboarded sprites (for example in a point cloud). PointMeshes, must be used with a material that has a point size. Point size can be accessed in a shader with POINT_SIZE, or in a BaseMaterial3D by setting BaseMaterial3D.use_point_size and the variable BaseMaterial3D.point_size. When using PointMeshes, properties that normally alter vertices will be ignored, including billboard mode, grow, and cull face.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_pointmesh.html


classes/class_audiostreammp3
-----------------------------------------------------------
AudioStreamMP3 Inherits: AudioStream < Resource < RefCounted < Object MP3 audio stream driver.  Description MP3 audio stream driver. See data if you want to load an MP3 file at run-time.   Properties  
int bar_beats 4  
int beat_count 0  
float bpm 0.0  
PackedByteArray data PackedByteArray()  
bool loop false  
float loop_offset 0.0     Property Descriptions 
int bar_beats = 4
  void set_bar_beats ( int value )
 
int get_bar_beats ( )
   There is currently no description for this property. Please help us by contributing one!  
int beat_count = 0
  void set_beat_count ( int value )
 
int get_beat_count ( )
   There is currently no description for this property. Please help us by contributing one!  
float bpm = 0.0
  void set_bpm ( float value )
 
float get_bpm ( )
   There is currently no description for this property. Please help us by contributing one!  
PackedByteArray data = PackedByteArray()
  void set_data ( PackedByteArray value )
 
PackedByteArray get_data ( )
  Contains the audio data in bytes. You can load a file without having to import it beforehand using the code snippet below. Keep in mind that this snippet loads the whole file into memory and may not be ideal for huge files (hundreds of megabytes or more).  GDScriptfunc load_mp3(path):
    var file = FileAccess.open(path, FileAccess.READ)
    var sound = AudioStreamMP3.new()
    sound.data = file.get_buffer(file.get_length())
    return sound
 C#public AudioStreamMP3 LoadMP3(string path)
{
    using var file = FileAccess.Open(path, FileAccess.ModeFlags.Read);
    var sound = new AudioStreamMP3();
    sound.Data = file.GetBuffer(file.GetLength());
    return sound;
}
  
bool loop = false
  void set_loop ( bool value )
 
bool has_loop ( )
  If true, the stream will automatically loop when it reaches the end. 
float loop_offset = 0.0
  void set_loop_offset ( float value )
 
float get_loop_offset ( )
  Time in seconds at which the stream starts after being looped.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiostreammp3.html


classes/class_joint3d
-----------------------------------------------------------
Joint3D Inherits: Node3D < Node < Object Inherited By: ConeTwistJoint3D, Generic6DOFJoint3D, HingeJoint3D, PinJoint3D, SliderJoint3D Abstract base class for all 3D physics joints.  Description Abstract base class for all joints in 3D physics. 3D joints bind together two physics bodies and apply a constraint.   Tutorials  3D Truck Town Demo    Properties  
bool exclude_nodes_from_collision true  
NodePath node_a NodePath("")  
NodePath node_b NodePath("")  
int solver_priority 1     Methods  
RID get_rid ( ) const     Property Descriptions 
bool exclude_nodes_from_collision = true
  void set_exclude_nodes_from_collision ( bool value )
 
bool get_exclude_nodes_from_collision ( )
  If true, the two bodies of the nodes are not able to collide with each other. 
NodePath node_a = NodePath("")
  void set_node_a ( NodePath value )
 
NodePath get_node_a ( )
  The node attached to the first side (A) of the joint. 
NodePath node_b = NodePath("")
  void set_node_b ( NodePath value )
 
NodePath get_node_b ( )
  The node attached to the second side (B) of the joint. 
int solver_priority = 1
  void set_solver_priority ( int value )
 
int get_solver_priority ( )
  The priority used to define which solver is executed first for multiple joints. The lower the value, the higher the priority.   Method Descriptions 
RID get_rid ( ) const
 Returns the joint's RID.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_joint3d.html


classes/class_imagetexture3d
-----------------------------------------------------------
ImageTexture3D Inherits: Texture3D < Texture < Resource < RefCounted < Object Texture with 3 dimensions.  Description ImageTexture3D is a 3-dimensional ImageTexture that has a width, height, and depth. See also ImageTextureLayered. 3D textures are typically used to store density maps for FogMaterial, color correction LUTs for Environment, vector fields for GPUParticlesAttractorVectorField3D and collision maps for GPUParticlesCollisionSDF3D. 3D textures can also be used in custom shaders.   Methods  
Error create ( Format format, int width, int height, int depth, bool use_mipmaps, Image[] data )  
void update ( Image[] data )     Method Descriptions 
Error create ( Format format, int width, int height, int depth, bool use_mipmaps, Image[] data ) Creates the ImageTexture3D with specified width, height, and depth. See Format for format options. If use_mipmaps is true, then generate mipmaps for the ImageTexture3D. void update ( Image[] data ) Replaces the texture's existing data with the layers specified in data. The size of data must match the parameters that were used for create. In other words, the texture cannot be resized or have its format changed by calling update.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_imagetexture3d.html


classes/class_visualshadernodebillboard
-----------------------------------------------------------
VisualShaderNodeBillboard Inherits: VisualShaderNode < Resource < RefCounted < Object A node that controls how the object faces the camera to be used within the visual shader graph.  Description The output port of this node needs to be connected to Model View Matrix port of VisualShaderNodeOutput.   Properties  
BillboardType billboard_type 1  
bool keep_scale false     Enumerations enum BillboardType: 
BillboardType BILLBOARD_TYPE_DISABLED = 0
 Billboarding is disabled and the node does nothing. 
BillboardType BILLBOARD_TYPE_ENABLED = 1
 A standard billboarding algorithm is enabled. 
BillboardType BILLBOARD_TYPE_FIXED_Y = 2
 A billboarding algorithm to rotate around Y-axis is enabled. 
BillboardType BILLBOARD_TYPE_PARTICLES = 3
 A billboarding algorithm designed to use on particles is enabled. 
BillboardType BILLBOARD_TYPE_MAX = 4
 Represents the size of the BillboardType enum.   Property Descriptions 
BillboardType billboard_type = 1
  void set_billboard_type ( BillboardType value )
 
BillboardType get_billboard_type ( )
  Controls how the object faces the camera. See BillboardType. 
bool keep_scale = false
  void set_keep_scale_enabled ( bool value )
 
bool is_keep_scale_enabled ( )
  If true, the shader will keep the scale set for the mesh. Otherwise, the scale is lost when billboarding.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualshadernodebillboard.html


classes/class_skeletonmodification2dtwoboneik
-----------------------------------------------------------
SkeletonModification2DTwoBoneIK Inherits: SkeletonModification2D < Resource < RefCounted < Object A modification that rotates two bones using the law of cosines to reach the target.  Description This SkeletonModification2D uses an algorithm typically called TwoBoneIK. This algorithm works by leveraging the law of cosines and the lengths of the bones to figure out what rotation the bones currently have, and what rotation they need to make a complete triangle, where the first bone, the second bone, and the target form the three vertices of the triangle. Because the algorithm works by making a triangle, it can only operate on two bones. TwoBoneIK is great for arms, legs, and really any joints that can be represented by just two bones that bend to reach a target. This solver is more lightweight than SkeletonModification2DFABRIK, but gives similar, natural looking results.   Properties  
bool flip_bend_direction false  
float target_maximum_distance 0.0  
float target_minimum_distance 0.0  
NodePath target_nodepath NodePath("")     Methods  
NodePath get_joint_one_bone2d_node ( ) const  
int get_joint_one_bone_idx ( ) const  
NodePath get_joint_two_bone2d_node ( ) const  
int get_joint_two_bone_idx ( ) const  
void set_joint_one_bone2d_node ( NodePath bone2d_node )  
void set_joint_one_bone_idx ( int bone_idx )  
void set_joint_two_bone2d_node ( NodePath bone2d_node )  
void set_joint_two_bone_idx ( int bone_idx )     Property Descriptions 
bool flip_bend_direction = false
  void set_flip_bend_direction ( bool value )
 
bool get_flip_bend_direction ( )
  If true, the bones in the modification will blend outward as opposed to inwards when contracting. If false, the bones will bend inwards when contracting. 
float target_maximum_distance = 0.0
  void set_target_maximum_distance ( float value )
 
float get_target_maximum_distance ( )
  The maximum distance the target can be at. If the target is farther than this distance, the modification will solve as if it's at this maximum distance. When set to 0, the modification will solve without distance constraints. 
float target_minimum_distance = 0.0
  void set_target_minimum_distance ( float value )
 
float get_target_minimum_distance ( )
  The minimum distance the target can be at. If the target is closer than this distance, the modification will solve as if it's at this minimum distance. When set to 0, the modification will solve without distance constraints. 
NodePath target_nodepath = NodePath("")
  void set_target_node ( NodePath value )
 
NodePath get_target_node ( )
  The NodePath to the node that is the target for the TwoBoneIK modification. This node is what the modification will use when bending the Bone2D nodes.   Method Descriptions 
NodePath get_joint_one_bone2d_node ( ) const
 Returns the Bone2D node that is being used as the first bone in the TwoBoneIK modification. 
int get_joint_one_bone_idx ( ) const
 Returns the index of the Bone2D node that is being used as the first bone in the TwoBoneIK modification. 
NodePath get_joint_two_bone2d_node ( ) const
 Returns the Bone2D node that is being used as the second bone in the TwoBoneIK modification. 
int get_joint_two_bone_idx ( ) const
 Returns the index of the Bone2D node that is being used as the second bone in the TwoBoneIK modification. void set_joint_one_bone2d_node ( NodePath bone2d_node ) Sets the Bone2D node that is being used as the first bone in the TwoBoneIK modification. void set_joint_one_bone_idx ( int bone_idx ) Sets the index of the Bone2D node that is being used as the first bone in the TwoBoneIK modification. void set_joint_two_bone2d_node ( NodePath bone2d_node ) Sets the Bone2D node that is being used as the second bone in the TwoBoneIK modification. void set_joint_two_bone_idx ( int bone_idx ) Sets the index of the Bone2D node that is being used as the second bone in the TwoBoneIK modification.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeletonmodification2dtwoboneik.html


classes/class_audiostreamplayer3d
-----------------------------------------------------------
AudioStreamPlayer3D Inherits: Node3D < Node < Object Plays positional sound in 3D space.  Description Plays audio with positional sound effects, based on the relative position of the audio listener. Positional effects include distance attenuation, directionality, and the Doppler effect. For greater realism, a low-pass filter is applied to distant sounds. This can be disabled by setting attenuation_filter_cutoff_hz to 20500. By default, audio is heard from the camera position. This can be changed by adding an AudioListener3D node to the scene and enabling it by calling AudioListener3D.make_current on it. See also AudioStreamPlayer to play a sound non-positionally. Note: Hiding an AudioStreamPlayer3D node does not disable its audio output. To temporarily disable an AudioStreamPlayer3D's audio output, set volume_db to a very low value like -100 (which isn't audible to human hearing).   Tutorials  Audio streams    Properties  
int area_mask 1  
float attenuation_filter_cutoff_hz 5000.0  
float attenuation_filter_db -24.0  
AttenuationModel attenuation_model 0  
bool autoplay false  
StringName bus &"Master"  
DopplerTracking doppler_tracking 0  
float emission_angle_degrees 45.0  
bool emission_angle_enabled false  
float emission_angle_filter_attenuation_db -12.0  
float max_db 3.0  
float max_distance 0.0  
int max_polyphony 1  
float panning_strength 1.0  
float pitch_scale 1.0  
bool playing false  
AudioStream stream   
bool stream_paused false  
float unit_size 10.0  
float volume_db 0.0     Methods  
float get_playback_position ( )  
AudioStreamPlayback get_stream_playback ( )  
bool has_stream_playback ( )  
void play ( float from_position=0.0 )  
void seek ( float to_position )  
void stop ( )     Signals finished ( ) Emitted when the audio stops playing.   Enumerations enum AttenuationModel: 
AttenuationModel ATTENUATION_INVERSE_DISTANCE = 0
 Attenuation of loudness according to linear distance. 
AttenuationModel ATTENUATION_INVERSE_SQUARE_DISTANCE = 1
 Attenuation of loudness according to squared distance. 
AttenuationModel ATTENUATION_LOGARITHMIC = 2
 Attenuation of loudness according to logarithmic distance. 
AttenuationModel ATTENUATION_DISABLED = 3
 No attenuation of loudness according to distance. The sound will still be heard positionally, unlike an AudioStreamPlayer. ATTENUATION_DISABLED can be combined with a max_distance value greater than 0.0 to achieve linear attenuation clamped to a sphere of a defined size. enum DopplerTracking: 
DopplerTracking DOPPLER_TRACKING_DISABLED = 0
 Disables doppler tracking. 
DopplerTracking DOPPLER_TRACKING_IDLE_STEP = 1
 Executes doppler tracking during process frames (see Node.NOTIFICATION_INTERNAL_PROCESS). 
DopplerTracking DOPPLER_TRACKING_PHYSICS_STEP = 2
 Executes doppler tracking during physics frames (see Node.NOTIFICATION_INTERNAL_PHYSICS_PROCESS).   Property Descriptions 
int area_mask = 1
  void set_area_mask ( int value )
 
int get_area_mask ( )
  Determines which Area3D layers affect the sound for reverb and audio bus effects. Areas can be used to redirect AudioStreams so that they play in a certain audio bus. An example of how you might use this is making a "water" area so that sounds played in the water are redirected through an audio bus to make them sound like they are being played underwater. 
float attenuation_filter_cutoff_hz = 5000.0
  void set_attenuation_filter_cutoff_hz ( float value )
 
float get_attenuation_filter_cutoff_hz ( )
  The cutoff frequency of the attenuation low-pass filter, in Hz. A sound above this frequency is attenuated more than a sound below this frequency. To disable this effect, set this to 20500 as this frequency is above the human hearing limit. 
float attenuation_filter_db = -24.0
  void set_attenuation_filter_db ( float value )
 
float get_attenuation_filter_db ( )
  Amount how much the filter affects the loudness, in decibels. 
AttenuationModel attenuation_model = 0
  void set_attenuation_model ( AttenuationModel value )
 
AttenuationModel get_attenuation_model ( )
  Decides if audio should get quieter with distance linearly, quadratically, logarithmically, or not be affected by distance, effectively disabling attenuation. 
bool autoplay = false
  void set_autoplay ( bool value )
 
bool is_autoplay_enabled ( )
  If true, audio plays when the AudioStreamPlayer3D node is added to scene tree. 
StringName bus = &"Master"
  void set_bus ( StringName value )
 
StringName get_bus ( )
  The bus on which this audio is playing. Note: When setting this property, keep in mind that no validation is performed to see if the given name matches an existing bus. This is because audio bus layouts might be loaded after this property is set. If this given name can't be resolved at runtime, it will fall back to "Master". 
DopplerTracking doppler_tracking = 0
  void set_doppler_tracking ( DopplerTracking value )
 
DopplerTracking get_doppler_tracking ( )
  Decides in which step the Doppler effect should be calculated. 
float emission_angle_degrees = 45.0
  void set_emission_angle ( float value )
 
float get_emission_angle ( )
  The angle in which the audio reaches a listener unattenuated. 
bool emission_angle_enabled = false
  void set_emission_angle_enabled ( bool value )
 
bool is_emission_angle_enabled ( )
  If true, the audio should be attenuated according to the direction of the sound. 
float emission_angle_filter_attenuation_db = -12.0
  void set_emission_angle_filter_attenuation_db ( float value )
 
float get_emission_angle_filter_attenuation_db ( )
  Attenuation factor used if listener is outside of emission_angle_degrees and emission_angle_enabled is set, in decibels. 
float max_db = 3.0
  void set_max_db ( float value )
 
float get_max_db ( )
  Sets the absolute maximum of the sound level, in decibels. 
float max_distance = 0.0
  void set_max_distance ( float value )
 
float get_max_distance ( )
  The distance past which the sound can no longer be heard at all. Only has an effect if set to a value greater than 0.0. max_distance works in tandem with unit_size. However, unlike unit_size whose behavior depends on the attenuation_model, max_distance always works in a linear fashion. This can be used to prevent the AudioStreamPlayer3D from requiring audio mixing when the listener is far away, which saves CPU resources. 
int max_polyphony = 1
  void set_max_polyphony ( int value )
 
int get_max_polyphony ( )
  The maximum number of sounds this node can play at the same time. Playing additional sounds after this value is reached will cut off the oldest sounds. 
float panning_strength = 1.0
  void set_panning_strength ( float value )
 
float get_panning_strength ( )
  Scales the panning strength for this node by multiplying the base ProjectSettings.audio/general/3d_panning_strength with this factor. Higher values will pan audio from left to right more dramatically than lower values. 
float pitch_scale = 1.0
  void set_pitch_scale ( float value )
 
float get_pitch_scale ( )
  The pitch and the tempo of the audio, as a multiplier of the audio sample's sample rate. 
bool playing = false
  
bool is_playing ( )
  If true, audio is playing or is queued to be played (see play). 
AudioStream stream  void set_stream ( AudioStream value )
 
AudioStream get_stream ( )
  The AudioStream resource to be played. 
bool stream_paused = false
  void set_stream_paused ( bool value )
 
bool get_stream_paused ( )
  If true, the playback is paused. You can resume it by setting stream_paused to false. 
float unit_size = 10.0
  void set_unit_size ( float value )
 
float get_unit_size ( )
  The factor for the attenuation effect. Higher values make the sound audible over a larger distance. 
float volume_db = 0.0
  void set_volume_db ( float value )
 
float get_volume_db ( )
  The base sound level before attenuation, in decibels.   Method Descriptions 
float get_playback_position ( ) Returns the position in the AudioStream. 
AudioStreamPlayback get_stream_playback ( ) Returns the AudioStreamPlayback object associated with this AudioStreamPlayer3D. 
bool has_stream_playback ( ) Returns whether the AudioStreamPlayer can return the AudioStreamPlayback object or not. void play ( float from_position=0.0 ) Queues the audio to play on the next physics frame, from the given position from_position, in seconds. void seek ( float to_position ) Sets the position from which audio will be played, in seconds. void stop ( ) Stops the audio.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audiostreamplayer3d.html


classes/class_decal
-----------------------------------------------------------
Decal Inherits: VisualInstance3D < Node3D < Node < Object Node that projects a texture onto a MeshInstance3D.  Description Decals are used to project a texture onto a Mesh in the scene. Use Decals to add detail to a scene without affecting the underlying Mesh. They are often used to add weathering to building, add dirt or mud to the ground, or add variety to props. Decals can be moved at any time, making them suitable for things like blob shadows or laser sight dots. They are made of an AABB and a group of Texture2Ds specifying Color, normal, ORM (ambient occlusion, roughness, metallic), and emission. Decals are projected within their AABB so altering the orientation of the Decal affects the direction in which they are projected. By default, Decals are projected down (i.e. from positive Y to negative Y). The Texture2Ds associated with the Decal are automatically stored in a texture atlas which is used for drawing the decals so all decals can be drawn at once. Godot uses clustered decals, meaning they are stored in cluster data and drawn when the mesh is drawn, they are not drawn as a post-processing effect after. Note: Decals cannot affect an underlying material's transparency, regardless of its transparency mode (alpha blend, alpha scissor, alpha hash, opaque pre-pass). This means translucent or transparent areas of a material will remain translucent or transparent even if an opaque decal is applied on them. Note: Decals are only supported in the Forward+ and Mobile rendering methods, not Compatibility. When using the Mobile rendering method, only 8 decals can be displayed on each mesh resource. Attempting to display more than 8 decals on a single mesh resource will result in decals flickering in and out as the camera moves. Note: When using the Mobile rendering method, decals will only correctly affect meshes whose visibility AABB intersects with the decal's AABB. If using a shader to deform the mesh in a way that makes it go outside its AABB, GeometryInstance3D.extra_cull_margin must be increased on the mesh. Otherwise, the decal may not be visible on the mesh.   Properties  
float albedo_mix 1.0  
int cull_mask 1048575  
float distance_fade_begin 40.0  
bool distance_fade_enabled false  
float distance_fade_length 10.0  
float emission_energy 1.0  
float lower_fade 0.3  
Color modulate Color(1, 1, 1, 1)  
float normal_fade 0.0  
Vector3 size Vector3(2, 2, 2)  
Texture2D texture_albedo   
Texture2D texture_emission   
Texture2D texture_normal   
Texture2D texture_orm   
float upper_fade 0.3     Methods  
Texture2D get_texture ( DecalTexture type ) const  
void set_texture ( DecalTexture type, Texture2D texture )     Enumerations enum DecalTexture: 
DecalTexture TEXTURE_ALBEDO = 0
 Texture2D corresponding to texture_albedo. 
DecalTexture TEXTURE_NORMAL = 1
 Texture2D corresponding to texture_normal. 
DecalTexture TEXTURE_ORM = 2
 Texture2D corresponding to texture_orm. 
DecalTexture TEXTURE_EMISSION = 3
 Texture2D corresponding to texture_emission. 
DecalTexture TEXTURE_MAX = 4
 Max size of DecalTexture enum.   Property Descriptions 
float albedo_mix = 1.0
  void set_albedo_mix ( float value )
 
float get_albedo_mix ( )
  Blends the albedo Color of the decal with albedo Color of the underlying mesh. This can be set to 0.0 to create a decal that only affects normal or ORM. In this case, an albedo texture is still required as its alpha channel will determine where the normal and ORM will be overridden. See also modulate. 
int cull_mask = 1048575
  void set_cull_mask ( int value )
 
int get_cull_mask ( )
  Specifies which VisualInstance3D.layers this decal will project on. By default, Decals affect all layers. This is used so you can specify which types of objects receive the Decal and which do not. This is especially useful so you can ensure that dynamic objects don't accidentally receive a Decal intended for the terrain under them. 
float distance_fade_begin = 40.0
  void set_distance_fade_begin ( float value )
 
float get_distance_fade_begin ( )
  The distance from the camera at which the Decal begins to fade away (in 3D units). 
bool distance_fade_enabled = false
  void set_enable_distance_fade ( bool value )
 
bool is_distance_fade_enabled ( )
  If true, decals will smoothly fade away when far from the active Camera3D starting at distance_fade_begin. The Decal will fade out over distance_fade_begin + distance_fade_length, after which it will be culled and not sent to the shader at all. Use this to reduce the number of active Decals in a scene and thus improve performance. 
float distance_fade_length = 10.0
  void set_distance_fade_length ( float value )
 
float get_distance_fade_length ( )
  The distance over which the Decal fades (in 3D units). The Decal becomes slowly more transparent over this distance and is completely invisible at the end. Higher values result in a smoother fade-out transition, which is more suited when the camera moves fast. 
float emission_energy = 1.0
  void set_emission_energy ( float value )
 
float get_emission_energy ( )
  Energy multiplier for the emission texture. This will make the decal emit light at a higher or lower intensity, independently of the albedo color. See also modulate. 
float lower_fade = 0.3
  void set_lower_fade ( float value )
 
float get_lower_fade ( )
  Sets the curve over which the decal will fade as the surface gets further from the center of the AABB. Only positive values are valid (negative values will be clamped to 0.0). See also upper_fade. 
Color modulate = Color(1, 1, 1, 1)
  void set_modulate ( Color value )
 
Color get_modulate ( )
  Changes the Color of the Decal by multiplying the albedo and emission colors with this value. The alpha component is only taken into account when multiplying the albedo color, not the emission color. See also emission_energy and albedo_mix to change the emission and albedo intensity independently of each other. 
float normal_fade = 0.0
  void set_normal_fade ( float value )
 
float get_normal_fade ( )
  Fades the Decal if the angle between the Decal's AABB and the target surface becomes too large. A value of 0 projects the Decal regardless of angle, a value of 1 limits the Decal to surfaces that are nearly perpendicular. Note: Setting normal_fade to a value greater than 0.0 has a small performance cost due to the added normal angle computations. 
Vector3 size = Vector3(2, 2, 2)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  Sets the size of the AABB used by the decal. All dimensions must be set to a value greater than zero (they will be clamped to 0.001 if this is not the case). The AABB goes from -size/2 to size/2. Note: To improve culling efficiency of "hard surface" decals, set their upper_fade and lower_fade to 0.0 and set the Y component of the size as low as possible. This will reduce the decals' AABB size without affecting their appearance. 
Texture2D texture_albedo  void set_texture ( DecalTexture type, Texture2D texture )
 
Texture2D get_texture ( DecalTexture type ) const
  Texture2D with the base Color of the Decal. Either this or the texture_emission must be set for the Decal to be visible. Use the alpha channel like a mask to smoothly blend the edges of the decal with the underlying object. Note: Unlike BaseMaterial3D whose filter mode can be adjusted on a per-material basis, the filter mode for Decal textures is set globally with ProjectSettings.rendering/textures/decals/filter. 
Texture2D texture_emission  void set_texture ( DecalTexture type, Texture2D texture )
 
Texture2D get_texture ( DecalTexture type ) const
  Texture2D with the emission Color of the Decal. Either this or the texture_albedo must be set for the Decal to be visible. Use the alpha channel like a mask to smoothly blend the edges of the decal with the underlying object. Note: Unlike BaseMaterial3D whose filter mode can be adjusted on a per-material basis, the filter mode for Decal textures is set globally with ProjectSettings.rendering/textures/decals/filter. 
Texture2D texture_normal  void set_texture ( DecalTexture type, Texture2D texture )
 
Texture2D get_texture ( DecalTexture type ) const
  Texture2D with the per-pixel normal map for the decal. Use this to add extra detail to decals. Note: Unlike BaseMaterial3D whose filter mode can be adjusted on a per-material basis, the filter mode for Decal textures is set globally with ProjectSettings.rendering/textures/decals/filter. Note: Setting this texture alone will not result in a visible decal, as texture_albedo must also be set. To create a normal-only decal, load an albedo texture into texture_albedo and set albedo_mix to 0.0. The albedo texture's alpha channel will be used to determine where the underlying surface's normal map should be overridden (and its intensity). 
Texture2D texture_orm  void set_texture ( DecalTexture type, Texture2D texture )
 
Texture2D get_texture ( DecalTexture type ) const
  Texture2D storing ambient occlusion, roughness, and metallic for the decal. Use this to add extra detail to decals. Note: Unlike BaseMaterial3D whose filter mode can be adjusted on a per-material basis, the filter mode for Decal textures is set globally with ProjectSettings.rendering/textures/decals/filter. Note: Setting this texture alone will not result in a visible decal, as texture_albedo must also be set. To create an ORM-only decal, load an albedo texture into texture_albedo and set albedo_mix to 0.0. The albedo texture's alpha channel will be used to determine where the underlying surface's ORM map should be overridden (and its intensity). 
float upper_fade = 0.3
  void set_upper_fade ( float value )
 
float get_upper_fade ( )
  Sets the curve over which the decal will fade as the surface gets further from the center of the AABB. Only positive values are valid (negative values will be clamped to 0.0). See also lower_fade.   Method Descriptions 
Texture2D get_texture ( DecalTexture type ) const
 Returns the Texture2D associated with the specified DecalTexture. This is a convenience method, in most cases you should access the texture directly. For example, instead of albedo_tex = $Decal.get_texture(Decal.TEXTURE_ALBEDO), use albedo_tex = $Decal.texture_albedo. One case where this is better than accessing the texture directly is when you want to copy one Decal's textures to another. For example:  GDScriptfor i in Decal.TEXTURE_MAX:
    $NewDecal.set_texture(i, $OldDecal.get_texture(i))
 C#for (int i = 0; i < (int)Decal.DecalTexture.Max; i++)
{
    GetNode<Decal>("NewDecal").SetTexture(i, GetNode<Decal>("OldDecal").GetTexture(i));
}
  void set_texture ( DecalTexture type, Texture2D texture ) Sets the Texture2D associated with the specified DecalTexture. This is a convenience method, in most cases you should access the texture directly. For example, instead of $Decal.set_texture(Decal.TEXTURE_ALBEDO, albedo_tex), use $Decal.texture_albedo = albedo_tex. One case where this is better than accessing the texture directly is when you want to copy one Decal's textures to another. For example:  GDScriptfor i in Decal.TEXTURE_MAX:
    $NewDecal.set_texture(i, $OldDecal.get_texture(i))
 C#for (int i = 0; i < (int)Decal.DecalTexture.Max; i++)
{
    GetNode<Decal>("NewDecal").SetTexture(i, GetNode<Decal>("OldDecal").GetTexture(i));
}
   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_decal.html


classes/class_arrayoccluder3d
-----------------------------------------------------------
ArrayOccluder3D Inherits: Occluder3D < Resource < RefCounted < Object 3D polygon shape for use with occlusion culling in OccluderInstance3D.  Description ArrayOccluder3D stores an arbitrary 3D polygon shape that can be used by the engine's occlusion culling system. This is analogous to ArrayMesh, but for occluders. See OccluderInstance3D's documentation for instructions on setting up occlusion culling.   Tutorials  Occlusion culling    Properties  
PackedInt32Array indices PackedInt32Array()  
PackedVector3Array vertices PackedVector3Array()     Methods  
void set_arrays ( PackedVector3Array vertices, PackedInt32Array indices )     Property Descriptions 
PackedInt32Array indices = PackedInt32Array()
  void set_indices ( PackedInt32Array value )
 
PackedInt32Array get_indices ( )
  The occluder's index position. Indices determine which points from the vertices array should be drawn, and in which order. Note: The occluder is always updated after setting this value. If creating occluders procedurally, consider using set_arrays instead to avoid updating the occluder twice when it's created. 
PackedVector3Array vertices = PackedVector3Array()
  void set_vertices ( PackedVector3Array value )
 
PackedVector3Array get_vertices ( )
  The occluder's vertex positions in local 3D coordinates. Note: The occluder is always updated after setting this value. If creating occluders procedurally, consider using set_arrays instead to avoid updating the occluder twice when it's created.   Method Descriptions void set_arrays ( PackedVector3Array vertices, PackedInt32Array indices ) Sets indices and vertices, while updating the final occluder only once after both values are set.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_arrayoccluder3d.html


classes/class_convexpolygonshape3d
-----------------------------------------------------------
ConvexPolygonShape3D Inherits: Shape3D < Resource < RefCounted < Object A 3D convex polyhedron shape used for physics collision.  Description A 3D convex polyhedron shape, intended for use in physics. Usually used to provide a shape for a CollisionShape3D. ConvexPolygonShape3D is solid, which means it detects collisions from objects that are fully inside it, unlike ConcavePolygonShape3D which is hollow. This makes it more suitable for both detection and physics. Convex decomposition: A concave polyhedron can be split up into several convex polyhedra. This allows dynamic physics bodies to have complex concave collisions (at a performance cost) and can be achieved by using several ConvexPolygonShape3D nodes. To generate a convex decomposition from a mesh, select the MeshInstance3D node, go to the Mesh menu that appears above the viewport, and choose Create Multiple Convex Collision Siblings. Alternatively, MeshInstance3D.create_multiple_convex_collisions can be called in a script to perform this decomposition at run-time. Performance: ConvexPolygonShape3D is faster to check collisions against compared to ConcavePolygonShape3D, but it is slower than primitive collision shapes such as SphereShape3D and BoxShape3D. Its use should generally be limited to medium-sized objects that cannot have their collision accurately represented by primitive shapes.   Tutorials  3D Physics Tests Demo    Properties  
PackedVector3Array points PackedVector3Array()     Property Descriptions 
PackedVector3Array points = PackedVector3Array()
  void set_points ( PackedVector3Array value )
 
PackedVector3Array get_points ( )
  The list of 3D points forming the convex polygon shape.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_convexpolygonshape3d.html


classes/class_collisionobject2d
-----------------------------------------------------------
CollisionObject2D Inherits: Node2D < CanvasItem < Node < Object Inherited By: Area2D, PhysicsBody2D Abstract base class for 2D physics objects.  Description Abstract base class for 2D physics objects. CollisionObject2D can hold any number of Shape2Ds for collision. Each shape must be assigned to a shape owner. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the shape_owner_* methods. Note: Only collisions between objects within the same canvas (Viewport canvas or CanvasLayer) are supported. The behavior of collisions between objects in different canvases is undefined.   Properties  
int collision_layer 1  
int collision_mask 1  
float collision_priority 1.0  
DisableMode disable_mode 0  
bool input_pickable true     Methods  
void _input_event ( Viewport viewport, InputEvent event, int shape_idx ) virtual  
void _mouse_enter ( ) virtual  
void _mouse_exit ( ) virtual  
void _mouse_shape_enter ( int shape_idx ) virtual  
void _mouse_shape_exit ( int shape_idx ) virtual  
int create_shape_owner ( Object owner )  
bool get_collision_layer_value ( int layer_number ) const  
bool get_collision_mask_value ( int layer_number ) const  
RID get_rid ( ) const  
float get_shape_owner_one_way_collision_margin ( int owner_id ) const  
PackedInt32Array get_shape_owners ( )  
bool is_shape_owner_disabled ( int owner_id ) const  
bool is_shape_owner_one_way_collision_enabled ( int owner_id ) const  
void remove_shape_owner ( int owner_id )  
void set_collision_layer_value ( int layer_number, bool value )  
void set_collision_mask_value ( int layer_number, bool value )  
int shape_find_owner ( int shape_index ) const  
void shape_owner_add_shape ( int owner_id, Shape2D shape )  
void shape_owner_clear_shapes ( int owner_id )  
Object shape_owner_get_owner ( int owner_id ) const  
Shape2D shape_owner_get_shape ( int owner_id, int shape_id ) const  
int shape_owner_get_shape_count ( int owner_id ) const  
int shape_owner_get_shape_index ( int owner_id, int shape_id ) const  
Transform2D shape_owner_get_transform ( int owner_id ) const  
void shape_owner_remove_shape ( int owner_id, int shape_id )  
void shape_owner_set_disabled ( int owner_id, bool disabled )  
void shape_owner_set_one_way_collision ( int owner_id, bool enable )  
void shape_owner_set_one_way_collision_margin ( int owner_id, float margin )  
void shape_owner_set_transform ( int owner_id, Transform2D transform )     Signals input_event ( Node viewport, InputEvent event, int shape_idx ) Emitted when an input event occurs. Requires input_pickable to be true and at least one collision_layer bit to be set. See _input_event for details. mouse_entered ( ) Emitted when the mouse pointer enters any of this object's shapes. Requires input_pickable to be true and at least one collision_layer bit to be set. Note that moving between different shapes within a single CollisionObject2D won't cause this signal to be emitted. Note: Due to the lack of continuous collision detection, this signal may not be emitted in the expected order if the mouse moves fast enough and the CollisionObject2D's area is small. This signal may also not be emitted if another CollisionObject2D is overlapping the CollisionObject2D in question. mouse_exited ( ) Emitted when the mouse pointer exits all this object's shapes. Requires input_pickable to be true and at least one collision_layer bit to be set. Note that moving between different shapes within a single CollisionObject2D won't cause this signal to be emitted. Note: Due to the lack of continuous collision detection, this signal may not be emitted in the expected order if the mouse moves fast enough and the CollisionObject2D's area is small. This signal may also not be emitted if another CollisionObject2D is overlapping the CollisionObject2D in question. mouse_shape_entered ( int shape_idx ) Emitted when the mouse pointer enters any of this object's shapes or moves from one shape to another. shape_idx is the child index of the newly entered Shape2D. Requires input_pickable to be true and at least one collision_layer bit to be set. mouse_shape_exited ( int shape_idx ) Emitted when the mouse pointer exits any of this object's shapes. shape_idx is the child index of the exited Shape2D. Requires input_pickable to be true and at least one collision_layer bit to be set.   Enumerations enum DisableMode: 
DisableMode DISABLE_MODE_REMOVE = 0
 When Node.process_mode is set to Node.PROCESS_MODE_DISABLED, remove from the physics simulation to stop all physics interactions with this CollisionObject2D. Automatically re-added to the physics simulation when the Node is processed again. 
DisableMode DISABLE_MODE_MAKE_STATIC = 1
 When Node.process_mode is set to Node.PROCESS_MODE_DISABLED, make the body static. Doesn't affect Area2D. PhysicsBody2D can't be affected by forces or other bodies while static. Automatically set PhysicsBody2D back to its original mode when the Node is processed again. 
DisableMode DISABLE_MODE_KEEP_ACTIVE = 2
 When Node.process_mode is set to Node.PROCESS_MODE_DISABLED, do not affect the physics simulation.   Property Descriptions 
int collision_layer = 1
  void set_collision_layer ( int value )
 
int get_collision_layer ( )
  The physics layers this CollisionObject2D is in. Collision objects can exist in one or more of 32 different layers. See also collision_mask. Note: Object A can detect a contact with object B only if object B is in any of the layers that object A scans. See Collision layers and masks in the documentation for more information. 
int collision_mask = 1
  void set_collision_mask ( int value )
 
int get_collision_mask ( )
  The physics layers this CollisionObject2D scans. Collision objects can scan one or more of 32 different layers. See also collision_layer. Note: Object A can detect a contact with object B only if object B is in any of the layers that object A scans. See Collision layers and masks in the documentation for more information. 
float collision_priority = 1.0
  void set_collision_priority ( float value )
 
float get_collision_priority ( )
  The priority used to solve colliding when occurring penetration. The higher the priority is, the lower the penetration into the object will be. This can for example be used to prevent the player from breaking through the boundaries of a level. 
DisableMode disable_mode = 0
  void set_disable_mode ( DisableMode value )
 
DisableMode get_disable_mode ( )
  Defines the behavior in physics when Node.process_mode is set to Node.PROCESS_MODE_DISABLED. See DisableMode for more details about the different modes. 
bool input_pickable = true
  void set_pickable ( bool value )
 
bool is_pickable ( )
  If true, this object is pickable. A pickable object can detect the mouse pointer entering/leaving, and if the mouse is inside it, report input events. Requires at least one collision_layer bit to be set.   Method Descriptions void _input_event ( Viewport viewport, InputEvent event, int shape_idx ) virtual
 Accepts unhandled InputEvents. shape_idx is the child index of the clicked Shape2D. Connect to input_event to easily pick up these events. Note: _input_event requires input_pickable to be true and at least one collision_layer bit to be set. void _mouse_enter ( ) virtual
 Called when the mouse pointer enters any of this object's shapes. Requires input_pickable to be true and at least one collision_layer bit to be set. Note that moving between different shapes within a single CollisionObject2D won't cause this function to be called. void _mouse_exit ( ) virtual
 Called when the mouse pointer exits all this object's shapes. Requires input_pickable to be true and at least one collision_layer bit to be set. Note that moving between different shapes within a single CollisionObject2D won't cause this function to be called. void _mouse_shape_enter ( int shape_idx ) virtual
 Called when the mouse pointer enters any of this object's shapes or moves from one shape to another. shape_idx is the child index of the newly entered Shape2D. Requires input_pickable to be true and at least one collision_layer bit to be called. void _mouse_shape_exit ( int shape_idx ) virtual
 Called when the mouse pointer exits any of this object's shapes. shape_idx is the child index of the exited Shape2D. Requires input_pickable to be true and at least one collision_layer bit to be called. 
int create_shape_owner ( Object owner ) Creates a new shape owner for the given object. Returns owner_id of the new owner for future reference. 
bool get_collision_layer_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_layer is enabled, given a layer_number between 1 and 32. 
bool get_collision_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_mask is enabled, given a layer_number between 1 and 32. 
RID get_rid ( ) const
 Returns the object's RID. 
float get_shape_owner_one_way_collision_margin ( int owner_id ) const
 Returns the one_way_collision_margin of the shape owner identified by given owner_id. 
PackedInt32Array get_shape_owners ( ) Returns an Array of owner_id identifiers. You can use these ids in other methods that take owner_id as an argument. 
bool is_shape_owner_disabled ( int owner_id ) const
 If true, the shape owner and its shapes are disabled. 
bool is_shape_owner_one_way_collision_enabled ( int owner_id ) const
 Returns true if collisions for the shape owner originating from this CollisionObject2D will not be reported to collided with CollisionObject2Ds. void remove_shape_owner ( int owner_id ) Removes the given shape owner. void set_collision_layer_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_layer, given a layer_number between 1 and 32. void set_collision_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_mask, given a layer_number between 1 and 32. 
int shape_find_owner ( int shape_index ) const
 Returns the owner_id of the given shape. void shape_owner_add_shape ( int owner_id, Shape2D shape ) Adds a Shape2D to the shape owner. void shape_owner_clear_shapes ( int owner_id ) Removes all shapes from the shape owner. 
Object shape_owner_get_owner ( int owner_id ) const
 Returns the parent object of the given shape owner. 
Shape2D shape_owner_get_shape ( int owner_id, int shape_id ) const
 Returns the Shape2D with the given ID from the given shape owner. 
int shape_owner_get_shape_count ( int owner_id ) const
 Returns the number of shapes the given shape owner contains. 
int shape_owner_get_shape_index ( int owner_id, int shape_id ) const
 Returns the child index of the Shape2D with the given ID from the given shape owner. 
Transform2D shape_owner_get_transform ( int owner_id ) const
 Returns the shape owner's Transform2D. void shape_owner_remove_shape ( int owner_id, int shape_id ) Removes a shape from the given shape owner. void shape_owner_set_disabled ( int owner_id, bool disabled ) If true, disables the given shape owner. void shape_owner_set_one_way_collision ( int owner_id, bool enable ) If enable is true, collisions for the shape owner originating from this CollisionObject2D will not be reported to collided with CollisionObject2Ds. void shape_owner_set_one_way_collision_margin ( int owner_id, float margin ) Sets the one_way_collision_margin of the shape owner identified by given owner_id to margin pixels. void shape_owner_set_transform ( int owner_id, Transform2D transform ) Sets the Transform2D of the given shape owner.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_collisionobject2d.html


classes/class_raycast3d
-----------------------------------------------------------
RayCast3D Inherits: Node3D < Node < Object A ray in 3D space, used to find the first CollisionObject3D it intersects.  Description A raycast represents a ray from its origin to its target_position that finds the closest CollisionObject3D along its path, if it intersects any. This is useful for a lot of things, such as RayCast3D can ignore some objects by adding them to an exception list, by making its detection reporting ignore Area3Ds (collide_with_areas) or PhysicsBody3Ds (collide_with_bodies), or by configuring physics layers. RayCast3D calculates intersection every physics frame, and it holds the result until the next physics frame. For an immediate raycast, or if you want to configure a RayCast3D multiple times within the same physics frame, use force_raycast_update. To sweep over a region of 3D space, you can approximate the region with multiple RayCast3Ds or use ShapeCast3D.   Tutorials  Ray-casting 3D Voxel Demo    Properties  
bool collide_with_areas false  
bool collide_with_bodies true  
int collision_mask 1  
Color debug_shape_custom_color Color(0, 0, 0, 1)  
int debug_shape_thickness 2  
bool enabled true  
bool exclude_parent true  
bool hit_back_faces true  
bool hit_from_inside false  
Vector3 target_position Vector3(0, -1, 0)     Methods  
void add_exception ( CollisionObject3D node )  
void add_exception_rid ( RID rid )  
void clear_exceptions ( )  
void force_raycast_update ( )  
Object get_collider ( ) const  
RID get_collider_rid ( ) const  
int get_collider_shape ( ) const  
int get_collision_face_index ( ) const  
bool get_collision_mask_value ( int layer_number ) const  
Vector3 get_collision_normal ( ) const  
Vector3 get_collision_point ( ) const  
bool is_colliding ( ) const  
void remove_exception ( CollisionObject3D node )  
void remove_exception_rid ( RID rid )  
void set_collision_mask_value ( int layer_number, bool value )     Property Descriptions 
bool collide_with_areas = false
  void set_collide_with_areas ( bool value )
 
bool is_collide_with_areas_enabled ( )
  If true, collisions with Area3Ds will be reported. 
bool collide_with_bodies = true
  void set_collide_with_bodies ( bool value )
 
bool is_collide_with_bodies_enabled ( )
  If true, collisions with PhysicsBody3Ds will be reported. 
int collision_mask = 1
  void set_collision_mask ( int value )
 
int get_collision_mask ( )
  The ray's collision mask. Only objects in at least one collision layer enabled in the mask will be detected. See Collision layers and masks in the documentation for more information. 
Color debug_shape_custom_color = Color(0, 0, 0, 1)
  void set_debug_shape_custom_color ( Color value )
 
Color get_debug_shape_custom_color ( )
  The custom color to use to draw the shape in the editor and at run-time if Visible Collision Shapes is enabled in the Debug menu. This color will be highlighted at run-time if the RayCast3D is colliding with something. If set to Color(0.0, 0.0, 0.0) (by default), the color set in ProjectSettings.debug/shapes/collision/shape_color is used. 
int debug_shape_thickness = 2
  void set_debug_shape_thickness ( int value )
 
int get_debug_shape_thickness ( )
  If set to 1, a line is used as the debug shape. Otherwise, a truncated pyramid is drawn to represent the RayCast3D. Requires Visible Collision Shapes to be enabled in the Debug menu for the debug shape to be visible at run-time. 
bool enabled = true
  void set_enabled ( bool value )
 
bool is_enabled ( )
  If true, collisions will be reported. 
bool exclude_parent = true
  void set_exclude_parent_body ( bool value )
 
bool get_exclude_parent_body ( )
  If true, collisions will be ignored for this RayCast3D's immediate parent. 
bool hit_back_faces = true
  void set_hit_back_faces ( bool value )
 
bool is_hit_back_faces_enabled ( )
  If true, the ray will hit back faces with concave polygon shapes with back face enabled or heightmap shapes. 
bool hit_from_inside = false
  void set_hit_from_inside ( bool value )
 
bool is_hit_from_inside_enabled ( )
  If true, the ray will detect a hit when starting inside shapes. In this case the collision normal will be Vector3(0, 0, 0). Does not affect shapes with no volume like concave polygon or heightmap. 
Vector3 target_position = Vector3(0, -1, 0)
  void set_target_position ( Vector3 value )
 
Vector3 get_target_position ( )
  The ray's destination point, relative to the RayCast's position.   Method Descriptions void add_exception ( CollisionObject3D node ) Adds a collision exception so the ray does not report collisions with the specified CollisionObject3D node. void add_exception_rid ( RID rid ) Adds a collision exception so the ray does not report collisions with the specified RID. void clear_exceptions ( ) Removes all collision exceptions for this ray. void force_raycast_update ( ) Updates the collision information for the ray immediately, without waiting for the next _physics_process call. Use this method, for example, when the ray or its parent has changed state. Note: enabled does not need to be true for this to work. 
Object get_collider ( ) const
 Returns the first object that the ray intersects, or null if no object is intersecting the ray (i.e. is_colliding returns false). 
RID get_collider_rid ( ) const
 Returns the RID of the first object that the ray intersects, or an empty RID if no object is intersecting the ray (i.e. is_colliding returns false). 
int get_collider_shape ( ) const
 Returns the shape ID of the first object that the ray intersects, or 0 if no object is intersecting the ray (i.e. is_colliding returns false). To get the intersected shape node, for a CollisionObject3D target, use:  GDScriptvar target = get_collider() # A CollisionObject3D.
var shape_id = get_collider_shape() # The shape index in the collider.
var owner_id = target.shape_find_owner(shape_id) # The owner ID in the collider.
var shape = target.shape_owner_get_owner(owner_id)
 C#var target = (CollisionObject3D)GetCollider(); // A CollisionObject3D.
var shapeId = GetColliderShape(); // The shape index in the collider.
var ownerId = target.ShapeFindOwner(shapeId); // The owner ID in the collider.
var shape = target.ShapeOwnerGetOwner(ownerId);
  
int get_collision_face_index ( ) const
 Returns the collision object's face index at the collision point, or -1 if the shape intersecting the ray is not a ConcavePolygonShape3D. 
bool get_collision_mask_value ( int layer_number ) const
 Returns whether or not the specified layer of the collision_mask is enabled, given a layer_number between 1 and 32. 
Vector3 get_collision_normal ( ) const
 Returns the normal of the intersecting object's shape at the collision point, or Vector3(0, 0, 0) if the ray starts inside the shape and hit_from_inside is true. 
Vector3 get_collision_point ( ) const
 Returns the collision point at which the ray intersects the closest object. If hit_from_inside is true and the ray starts inside of a collision shape, this function will return the origin point of the ray. Note: This point is in the global coordinate system. 
bool is_colliding ( ) const
 Returns whether any object is intersecting with the ray's vector (considering the vector length). void remove_exception ( CollisionObject3D node ) Removes a collision exception so the ray does report collisions with the specified CollisionObject3D node. void remove_exception_rid ( RID rid ) Removes a collision exception so the ray does report collisions with the specified RID. void set_collision_mask_value ( int layer_number, bool value ) Based on value, enables or disables the specified layer in the collision_mask, given a layer_number between 1 and 32.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_raycast3d.html


classes/class_vslider
-----------------------------------------------------------
VSlider Inherits: Slider < Range < Control < CanvasItem < Node < Object A vertical slider that goes from bottom (min) to top (max).  Description A vertical slider, used to adjust a value by moving a grabber along a vertical axis. It is a Range-based control and goes from bottom (min) to top (max). Note that this direction is the opposite of VScrollBar's.   Properties  
BitField<SizeFlags> size_flags_horizontal 0 (overrides Control)  
BitField<SizeFlags> size_flags_vertical 1 (overrides Control)    
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_vslider.html


classes/class_menubar
-----------------------------------------------------------
MenuBar Inherits: Control < CanvasItem < Node < Object A horizontal menu bar that creates a MenuButton for each PopupMenu child.  Description A horizontal menu bar that creates a MenuButton for each PopupMenu child. New items are created by adding PopupMenus to this node.   Properties  
bool flat false  
String language ""  
bool prefer_global_menu true  
int start_index -1  
bool switch_on_hover true  
TextDirection text_direction 0     Methods  
int get_menu_count ( ) const  
PopupMenu get_menu_popup ( int menu ) const  
String get_menu_title ( int menu ) const  
String get_menu_tooltip ( int menu ) const  
bool is_menu_disabled ( int menu ) const  
bool is_menu_hidden ( int menu ) const  
bool is_native_menu ( ) const  
void set_disable_shortcuts ( bool disabled )  
void set_menu_disabled ( int menu, bool disabled )  
void set_menu_hidden ( int menu, bool hidden )  
void set_menu_title ( int menu, String title )  
void set_menu_tooltip ( int menu, String tooltip )     Theme Properties  
Color font_color Color(0.875, 0.875, 0.875, 1)  
Color font_disabled_color Color(0.875, 0.875, 0.875, 0.5)  
Color font_focus_color Color(0.95, 0.95, 0.95, 1)  
Color font_hover_color Color(0.95, 0.95, 0.95, 1)  
Color font_hover_pressed_color Color(1, 1, 1, 1)  
Color font_outline_color Color(1, 1, 1, 1)  
Color font_pressed_color Color(1, 1, 1, 1)  
int h_separation 4  
int outline_size 0  
Font font   
int font_size   
StyleBox disabled   
StyleBox disabled_mirrored   
StyleBox hover   
StyleBox hover_mirrored   
StyleBox hover_pressed   
StyleBox hover_pressed_mirrored   
StyleBox normal   
StyleBox normal_mirrored   
StyleBox pressed   
StyleBox pressed_mirrored      Property Descriptions 
bool flat = false
  void set_flat ( bool value )
 
bool is_flat ( )
  Flat MenuBar don't display item decoration. 
String language = ""
  void set_language ( String value )
 
String get_language ( )
  Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead. 
bool prefer_global_menu = true
  void set_prefer_global_menu ( bool value )
 
bool is_prefer_global_menu ( )
  If true, MenuBar will use system global menu when supported. 
int start_index = -1
  void set_start_index ( int value )
 
int get_start_index ( )
  Position in the global menu to insert first MenuBar item at. 
bool switch_on_hover = true
  void set_switch_on_hover ( bool value )
 
bool is_switch_on_hover ( )
  If true, when the cursor hovers above menu item, it will close the current PopupMenu and open the other one. 
TextDirection text_direction = 0
  void set_text_direction ( TextDirection value )
 
TextDirection get_text_direction ( )
  Base text writing direction.   Method Descriptions 
int get_menu_count ( ) const
 Returns number of menu items. 
PopupMenu get_menu_popup ( int menu ) const
 Returns PopupMenu associated with menu item. 
String get_menu_title ( int menu ) const
 Returns menu item title. 
String get_menu_tooltip ( int menu ) const
 Returns menu item tooltip. 
bool is_menu_disabled ( int menu ) const
 Returns true, if menu item is disabled. 
bool is_menu_hidden ( int menu ) const
 Returns true, if menu item is hidden. 
bool is_native_menu ( ) const
 Returns true, if system global menu is supported and used by this MenuBar. void set_disable_shortcuts ( bool disabled ) If true, shortcuts are disabled and cannot be used to trigger the button. void set_menu_disabled ( int menu, bool disabled ) If true, menu item is disabled. void set_menu_hidden ( int menu, bool hidden ) If true, menu item is hidden. void set_menu_title ( int menu, String title ) Sets menu item title. void set_menu_tooltip ( int menu, String tooltip ) Sets menu item tooltip.   Theme Property Descriptions 
Color font_color = Color(0.875, 0.875, 0.875, 1)
 Default text Color of the menu item. 
Color font_disabled_color = Color(0.875, 0.875, 0.875, 0.5)
 Text Color used when the menu item is disabled. 
Color font_focus_color = Color(0.95, 0.95, 0.95, 1)
 Text Color used when the menu item is focused. Only replaces the normal text color of the menu item. Disabled, hovered, and pressed states take precedence over this color. 
Color font_hover_color = Color(0.95, 0.95, 0.95, 1)
 Text Color used when the menu item is being hovered. 
Color font_hover_pressed_color = Color(1, 1, 1, 1)
 Text Color used when the menu item is being hovered and pressed. 
Color font_outline_color = Color(1, 1, 1, 1)
 The tint of text outline of the menu item. 
Color font_pressed_color = Color(1, 1, 1, 1)
 Text Color used when the menu item is being pressed. 
int h_separation = 4
 The horizontal space between menu items. 
int outline_size = 0
 The size of the text outline. Note: If using a font with FontFile.multichannel_signed_distance_field enabled, its FontFile.msdf_pixel_range must be set to at least twice the value of outline_size for outline rendering to look correct. Otherwise, the outline may appear to be cut off earlier than intended. 
Font font Font of the menu item's text. 
int font_size Font size of the menu item's text. 
StyleBox disabled StyleBox used when the menu item is disabled. 
StyleBox disabled_mirrored StyleBox used when the menu item is disabled (for right-to-left layouts). 
StyleBox hover StyleBox used when the menu item is being hovered. 
StyleBox hover_mirrored StyleBox used when the menu item is being hovered (for right-to-left layouts). 
StyleBox hover_pressed StyleBox used when the menu item is being pressed and hovered at the same time. 
StyleBox hover_pressed_mirrored StyleBox used when the menu item is being pressed and hovered at the same time (for right-to-left layouts). 
StyleBox normal Default StyleBox for the menu item. 
StyleBox normal_mirrored Default StyleBox for the menu item (for right-to-left layouts). 
StyleBox pressed StyleBox used when the menu item is being pressed. 
StyleBox pressed_mirrored StyleBox used when the menu item is being pressed (for right-to-left layouts).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_menubar.html


classes/class_hseparator
-----------------------------------------------------------
HSeparator Inherits: Separator < Control < CanvasItem < Node < Object A horizontal line used for separating other controls.  Description A horizontal separator used for separating other controls that are arranged vertically. HSeparator is purely visual and normally drawn as a StyleBoxLine.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_hseparator.html


classes/class_audioeffectlimiter
-----------------------------------------------------------
AudioEffectLimiter Inherits: AudioEffect < Resource < RefCounted < Object Adds a soft-clip limiter audio effect to an Audio bus.  Description A limiter is similar to a compressor, but it's less flexible and designed to disallow sound going over a given dB threshold. Adding one in the Master bus is always recommended to reduce the effects of clipping. Soft clipping starts to reduce the peaks a little below the threshold level and progressively increases its effect as the input level increases such that the threshold is never exceeded.   Tutorials  Audio buses    Properties  
float ceiling_db -0.1  
float soft_clip_db 2.0  
float soft_clip_ratio 10.0  
float threshold_db 0.0     Property Descriptions 
float ceiling_db = -0.1
  void set_ceiling_db ( float value )
 
float get_ceiling_db ( )
  The waveform's maximum allowed value, in decibels. Value can range from -20 to -0.1. 
float soft_clip_db = 2.0
  void set_soft_clip_db ( float value )
 
float get_soft_clip_db ( )
  Applies a gain to the limited waves, in decibels. Value can range from 0 to 6. 
float soft_clip_ratio = 10.0
  void set_soft_clip_ratio ( float value )
 
float get_soft_clip_ratio ( )
   There is currently no description for this property. Please help us by contributing one!  
float threshold_db = 0.0
  void set_threshold_db ( float value )
 
float get_threshold_db ( )
  Threshold from which the limiter begins to be active, in decibels. Value can range from -30 to 0.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectlimiter.html


classes/class_inputeventmousebutton
-----------------------------------------------------------
InputEventMouseButton Inherits: InputEventMouse < InputEventWithModifiers < InputEventFromWindow < InputEvent < Resource < RefCounted < Object Represents a mouse button being pressed or released.  Description Stores information about mouse click events. See Node._input.   Tutorials  Using InputEvent Mouse and input coordinates    Properties  
MouseButton button_index 0  
bool canceled false  
bool double_click false  
float factor 1.0  
bool pressed false     Property Descriptions 
MouseButton button_index = 0
  void set_button_index ( MouseButton value )
 
MouseButton get_button_index ( )
  The mouse button identifier, one of the MouseButton button or button wheel constants. 
bool canceled = false
  void set_canceled ( bool value )
 
bool is_canceled ( )
  If true, the mouse button event has been canceled. 
bool double_click = false
  void set_double_click ( bool value )
 
bool is_double_click ( )
  If true, the mouse button's state is a double-click. 
float factor = 1.0
  void set_factor ( float value )
 
float get_factor ( )
  The amount (or delta) of the event. When used for high-precision scroll events, this indicates the scroll amount (vertical or horizontal). This is only supported on some platforms; the reported sensitivity varies depending on the platform. May be 0 if not supported. 
bool pressed = false
  void set_pressed ( bool value )
 
bool is_pressed ( )
  If true, the mouse button's state is pressed. If false, the mouse button's state is released.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_inputeventmousebutton.html


classes/class_gpuparticlescollision3d
-----------------------------------------------------------
GPUParticlesCollision3D Inherits: VisualInstance3D < Node3D < Node < Object Inherited By: GPUParticlesCollisionBox3D, GPUParticlesCollisionHeightField3D, GPUParticlesCollisionSDF3D, GPUParticlesCollisionSphere3D Abstract base class for 3D particle collision shapes affecting GPUParticles3D nodes.  Description Particle collision shapes can be used to make particles stop or bounce against them. Particle collision shapes work in real-time and can be moved, rotated and scaled during gameplay. Unlike attractors, non-uniform scaling of collision shapes is not supported. Particle collision shapes can be temporarily disabled by hiding them. Note: ParticleProcessMaterial.collision_mode must be ParticleProcessMaterial.COLLISION_RIGID or ParticleProcessMaterial.COLLISION_HIDE_ON_CONTACT on the GPUParticles3D's process material for collision to work. Note: Particle collision only affects GPUParticles3D, not CPUParticles3D. Note: Particles pushed by a collider that is being moved will not be interpolated, which can result in visible stuttering. This can be alleviated by setting GPUParticles3D.fixed_fps to 0 or a value that matches or exceeds the target framerate.   Properties  
int cull_mask 4294967295     Property Descriptions 
int cull_mask = 4294967295
  void set_cull_mask ( int value )
 
int get_cull_mask ( )
  The particle rendering layers (VisualInstance3D.layers) that will be affected by the collision shape. By default, all particles that have ParticleProcessMaterial.collision_mode set to ParticleProcessMaterial.COLLISION_RIGID or ParticleProcessMaterial.COLLISION_HIDE_ON_CONTACT will be affected by a collision shape. After configuring particle nodes accordingly, specific layers can be unchecked to prevent certain particles from being affected by attractors. For example, this can be used if you're using an attractor as part of a spell effect but don't want the attractor to affect unrelated weather particles at the same position. Particle attraction can also be disabled on a per-process material basis by setting ParticleProcessMaterial.attractor_interaction_enabled on the GPUParticles3D node.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gpuparticlescollision3d.html


classes/class_vehiclewheel3d
-----------------------------------------------------------
VehicleWheel3D Inherits: Node3D < Node < Object A 3D physics body for a VehicleBody3D that simulates the behavior of a wheel.  Description A node used as a child of a VehicleBody3D parent to simulate the behavior of one of its wheels. This node also acts as a collider to detect if the wheel is touching a surface. Note: This class has known issues and isn't designed to provide realistic 3D vehicle physics. If you want advanced vehicle physics, you may need to write your own physics integration using another PhysicsBody3D class.   Tutorials  3D Truck Town Demo    Properties  
float brake 0.0  
float damping_compression 0.83  
float damping_relaxation 0.88  
float engine_force 0.0  
float steering 0.0  
float suspension_max_force 6000.0  
float suspension_stiffness 5.88  
float suspension_travel 0.2  
bool use_as_steering false  
bool use_as_traction false  
float wheel_friction_slip 10.5  
float wheel_radius 0.5  
float wheel_rest_length 0.15  
float wheel_roll_influence 0.1     Methods  
Node3D get_contact_body ( ) const  
float get_rpm ( ) const  
float get_skidinfo ( ) const  
bool is_in_contact ( ) const     Property Descriptions 
float brake = 0.0
  void set_brake ( float value )
 
float get_brake ( )
  Slows down the wheel by applying a braking force. The wheel is only slowed down if it is in contact with a surface. The force you need to apply to adequately slow down your vehicle depends on the RigidBody3D.mass of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 30 range for hard braking. 
float damping_compression = 0.83
  void set_damping_compression ( float value )
 
float get_damping_compression ( )
  The damping applied to the spring when the spring is being compressed. This value should be between 0.0 (no damping) and 1.0. A value of 0.0 means the car will keep bouncing as the spring keeps its energy. A good value for this is around 0.3 for a normal car, 0.5 for a race car. 
float damping_relaxation = 0.88
  void set_damping_relaxation ( float value )
 
float get_damping_relaxation ( )
  The damping applied to the spring when relaxing. This value should be between 0.0 (no damping) and 1.0. This value should always be slightly higher than the damping_compression property. For a damping_compression value of 0.3, try a relaxation value of 0.5. 
float engine_force = 0.0
  void set_engine_force ( float value )
 
float get_engine_force ( )
  Accelerates the wheel by applying an engine force. The wheel is only sped up if it is in contact with a surface. The RigidBody3D.mass of the vehicle has an effect on the acceleration of the vehicle. For a vehicle with a mass set to 1000, try a value in the 25 - 50 range for acceleration. Note: The simulation does not take the effect of gears into account, you will need to add logic for this if you wish to simulate gears. A negative value will result in the wheel reversing. 
float steering = 0.0
  void set_steering ( float value )
 
float get_steering ( )
  The steering angle for the wheel, in radians. Setting this to a non-zero value will result in the vehicle turning when it's moving. 
float suspension_max_force = 6000.0
  void set_suspension_max_force ( float value )
 
float get_suspension_max_force ( )
  The maximum force the spring can resist. This value should be higher than a quarter of the RigidBody3D.mass of the VehicleBody3D or the spring will not carry the weight of the vehicle. Good results are often obtained by a value that is about 3Ã— to 4Ã— this number. 
float suspension_stiffness = 5.88
  void set_suspension_stiffness ( float value )
 
float get_suspension_stiffness ( )
  This value defines the stiffness of the suspension. Use a value lower than 50 for an off-road car, a value between 50 and 100 for a race car and try something around 200 for something like a Formula 1 car. 
float suspension_travel = 0.2
  void set_suspension_travel ( float value )
 
float get_suspension_travel ( )
  This is the distance the suspension can travel. As Godot units are equivalent to meters, keep this setting relatively low. Try a value between 0.1 and 0.3 depending on the type of car. 
bool use_as_steering = false
  void set_use_as_steering ( bool value )
 
bool is_used_as_steering ( )
  If true, this wheel will be turned when the car steers. This value is used in conjunction with VehicleBody3D.steering and ignored if you are using the per-wheel steering value instead. 
bool use_as_traction = false
  void set_use_as_traction ( bool value )
 
bool is_used_as_traction ( )
  If true, this wheel transfers engine force to the ground to propel the vehicle forward. This value is used in conjunction with VehicleBody3D.engine_force and ignored if you are using the per-wheel engine_force value instead. 
float wheel_friction_slip = 10.5
  void set_friction_slip ( float value )
 
float get_friction_slip ( )
  This determines how much grip this wheel has. It is combined with the friction setting of the surface the wheel is in contact with. 0.0 means no grip, 1.0 is normal grip. For a drift car setup, try setting the grip of the rear wheels slightly lower than the front wheels, or use a lower value to simulate tire wear. It's best to set this to 1.0 when starting out. 
float wheel_radius = 0.5
  void set_radius ( float value )
 
float get_radius ( )
  The radius of the wheel in meters. 
float wheel_rest_length = 0.15
  void set_suspension_rest_length ( float value )
 
float get_suspension_rest_length ( )
  This is the distance in meters the wheel is lowered from its origin point. Don't set this to 0.0 and move the wheel into position, instead move the origin point of your wheel (the gizmo in Godot) to the position the wheel will take when bottoming out, then use the rest length to move the wheel down to the position it should be in when the car is in rest. 
float wheel_roll_influence = 0.1
  void set_roll_influence ( float value )
 
float get_roll_influence ( )
  This value affects the roll of your vehicle. If set to 1.0 for all wheels, your vehicle will resist body roll, while a value of 0.0 will be prone to rolling over.   Method Descriptions 
Node3D get_contact_body ( ) const
 Returns the contacting body node if valid in the tree, as Node3D. At the moment, GridMap is not supported so the node will be always of type PhysicsBody3D. Returns null if the wheel is not in contact with a surface, or the contact body is not a PhysicsBody3D. 
float get_rpm ( ) const
 Returns the rotational speed of the wheel in revolutions per minute. 
float get_skidinfo ( ) const
 Returns a value between 0.0 and 1.0 that indicates whether this wheel is skidding. 0.0 is skidding (the wheel has lost grip, e.g. icy terrain), 1.0 means not skidding (the wheel has full grip, e.g. dry asphalt road). 
bool is_in_contact ( ) const
 Returns true if this wheel is in contact with a surface.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_vehiclewheel3d.html


classes/class_audioeffectamplify
-----------------------------------------------------------
AudioEffectAmplify Inherits: AudioEffect < Resource < RefCounted < Object Adds an amplifying audio effect to an audio bus.  Description Increases or decreases the volume being routed through the audio bus.   Tutorials  Audio buses    Properties  
float volume_db 0.0     Property Descriptions 
float volume_db = 0.0
  void set_volume_db ( float value )
 
float get_volume_db ( )
  Amount of amplification in decibels. Positive values make the sound louder, negative values make it quieter. Value can range from -80 to 24.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectamplify.html


classes/class_panoramaskymaterial
-----------------------------------------------------------
PanoramaSkyMaterial Inherits: Material < Resource < RefCounted < Object A material that provides a special texture to a Sky, usually an HDR panorama.  Description A resource referenced in a Sky that is used to draw a background. PanoramaSkyMaterial functions similar to skyboxes in other engines, except it uses an equirectangular sky map instead of a Cubemap. Using an HDR panorama is strongly recommended for accurate, high-quality reflections. Godot supports the Radiance HDR (.hdr) and OpenEXR (.exr) image formats for this purpose. You can use this tool to convert a cubemap to an equirectangular sky map.   Properties  
bool filter true  
Texture2D panorama      Property Descriptions 
bool filter = true
  void set_filtering_enabled ( bool value )
 
bool is_filtering_enabled ( )
  A boolean value to determine if the background texture should be filtered or not. 
Texture2D panorama  void set_panorama ( Texture2D value )
 
Texture2D get_panorama ( )
  Texture2D to be applied to the PanoramaSkyMaterial.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_panoramaskymaterial.html


classes/class_rigidbody3d
-----------------------------------------------------------
RigidBody3D Inherits: PhysicsBody3D < CollisionObject3D < Node3D < Node < Object Inherited By: VehicleBody3D A 3D physics body that is moved by a physics simulation.  Description RigidBody3D implements full 3D physics. It cannot be controlled directly, instead, you must apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, rotation, react to collisions, and affect other physics bodies in its path. The body's behavior can be adjusted via lock_rotation, freeze, and freeze_mode. By changing various properties of the object, such as mass, you can control how the physics simulation acts on it. A rigid body will always maintain its shape and size, even when forces are applied to it. It is useful for objects that can be interacted with in an environment, such as a tree that can be knocked over or a stack of crates that can be pushed around. If you need to override the default physics behavior, you can write a custom force integration function. See custom_integrator. Note: Changing the 3D transform or linear_velocity of a RigidBody3D very often may lead to some unpredictable behaviors. If you need to directly affect the body, prefer _integrate_forces as it allows you to directly access the physics state.   Tutorials  Physics introduction 3D Truck Town Demo 3D Physics Tests Demo    Properties  
float angular_damp 0.0  
DampMode angular_damp_mode 0  
Vector3 angular_velocity Vector3(0, 0, 0)  
bool can_sleep true  
Vector3 center_of_mass Vector3(0, 0, 0)  
CenterOfMassMode center_of_mass_mode 0  
Vector3 constant_force Vector3(0, 0, 0)  
Vector3 constant_torque Vector3(0, 0, 0)  
bool contact_monitor false  
bool continuous_cd false  
bool custom_integrator false  
bool freeze false  
FreezeMode freeze_mode 0  
float gravity_scale 1.0  
Vector3 inertia Vector3(0, 0, 0)  
float linear_damp 0.0  
DampMode linear_damp_mode 0  
Vector3 linear_velocity Vector3(0, 0, 0)  
bool lock_rotation false  
float mass 1.0  
int max_contacts_reported 0  
PhysicsMaterial physics_material_override   
bool sleeping false     Methods  
void _integrate_forces ( PhysicsDirectBodyState3D state ) virtual  
void add_constant_central_force ( Vector3 force )  
void add_constant_force ( Vector3 force, Vector3 position=Vector3(0, 0, 0) )  
void add_constant_torque ( Vector3 torque )  
void apply_central_force ( Vector3 force )  
void apply_central_impulse ( Vector3 impulse )  
void apply_force ( Vector3 force, Vector3 position=Vector3(0, 0, 0) )  
void apply_impulse ( Vector3 impulse, Vector3 position=Vector3(0, 0, 0) )  
void apply_torque ( Vector3 torque )  
void apply_torque_impulse ( Vector3 impulse )  
Node3D[] get_colliding_bodies ( ) const  
int get_contact_count ( ) const  
Basis get_inverse_inertia_tensor ( ) const  
void set_axis_velocity ( Vector3 axis_velocity )     Signals body_entered ( Node body ) Emitted when a collision with another PhysicsBody3D or GridMap occurs. Requires contact_monitor to be set to true and max_contacts_reported to be set high enough to detect all the collisions. GridMaps are detected if the MeshLibrary has Collision Shape3Ds. body the Node, if it exists in the tree, of the other PhysicsBody3D or GridMap. body_exited ( Node body ) Emitted when the collision with another PhysicsBody3D or GridMap ends. Requires contact_monitor to be set to true and max_contacts_reported to be set high enough to detect all the collisions. GridMaps are detected if the MeshLibrary has Collision Shape3Ds. body the Node, if it exists in the tree, of the other PhysicsBody3D or GridMap. body_shape_entered ( RID body_rid, Node body, int body_shape_index, int local_shape_index ) Emitted when one of this RigidBody3D's Shape3Ds collides with another PhysicsBody3D or GridMap's Shape3Ds. Requires contact_monitor to be set to true and max_contacts_reported to be set high enough to detect all the collisions. GridMaps are detected if the MeshLibrary has Collision Shape3Ds. body_rid the RID of the other PhysicsBody3D or MeshLibrary's CollisionObject3D used by the PhysicsServer3D. body the Node, if it exists in the tree, of the other PhysicsBody3D or GridMap. body_shape_index the index of the Shape3D of the other PhysicsBody3D or GridMap used by the PhysicsServer3D. Get the CollisionShape3D node with body.shape_owner_get_owner(body.shape_find_owner(body_shape_index)). local_shape_index the index of the Shape3D of this RigidBody3D used by the PhysicsServer3D. Get the CollisionShape3D node with self.shape_owner_get_owner(self.shape_find_owner(local_shape_index)). body_shape_exited ( RID body_rid, Node body, int body_shape_index, int local_shape_index ) Emitted when the collision between one of this RigidBody3D's Shape3Ds and another PhysicsBody3D or GridMap's Shape3Ds ends. Requires contact_monitor to be set to true and max_contacts_reported to be set high enough to detect all the collisions. GridMaps are detected if the MeshLibrary has Collision Shape3Ds. body_rid the RID of the other PhysicsBody3D or MeshLibrary's CollisionObject3D used by the PhysicsServer3D. GridMaps are detected if the Meshes have Shape3Ds. body the Node, if it exists in the tree, of the other PhysicsBody3D or GridMap. body_shape_index the index of the Shape3D of the other PhysicsBody3D or GridMap used by the PhysicsServer3D. Get the CollisionShape3D node with body.shape_owner_get_owner(body.shape_find_owner(body_shape_index)). local_shape_index the index of the Shape3D of this RigidBody3D used by the PhysicsServer3D. Get the CollisionShape3D node with self.shape_owner_get_owner(self.shape_find_owner(local_shape_index)). sleeping_state_changed ( ) Emitted when the physics engine changes the body's sleeping state. Note: Changing the value sleeping will not trigger this signal. It is only emitted if the sleeping state is changed by the physics engine or emit_signal("sleeping_state_changed") is used.   Enumerations enum FreezeMode: 
FreezeMode FREEZE_MODE_STATIC = 0
 Static body freeze mode (default). The body is not affected by gravity and forces. It can be only moved by user code and doesn't collide with other bodies along its path. 
FreezeMode FREEZE_MODE_KINEMATIC = 1
 Kinematic body freeze mode. Similar to FREEZE_MODE_STATIC, but collides with other bodies along its path when moved. Useful for a frozen body that needs to be animated. enum CenterOfMassMode: 
CenterOfMassMode CENTER_OF_MASS_MODE_AUTO = 0
 In this mode, the body's center of mass is calculated automatically based on its shapes. This assumes that the shapes' origins are also their center of mass. 
CenterOfMassMode CENTER_OF_MASS_MODE_CUSTOM = 1
 In this mode, the body's center of mass is set through center_of_mass. Defaults to the body's origin position. enum DampMode: 
DampMode DAMP_MODE_COMBINE = 0
 In this mode, the body's damping value is added to any value set in areas or the default value. 
DampMode DAMP_MODE_REPLACE = 1
 In this mode, the body's damping value replaces any value set in areas or the default value.   Property Descriptions 
float angular_damp = 0.0
  void set_angular_damp ( float value )
 
float get_angular_damp ( )
  Damps the body's rotation. By default, the body will use the Default Angular Damp in Project > Project Settings > Physics > 3d or any value override set by an Area3D the body is in. Depending on angular_damp_mode, you can set angular_damp to be added to or to replace the body's damping value. See ProjectSettings.physics/3d/default_angular_damp for more details about damping. 
DampMode angular_damp_mode = 0
  void set_angular_damp_mode ( DampMode value )
 
DampMode get_angular_damp_mode ( )
  Defines how angular_damp is applied. See DampMode for possible values. 
Vector3 angular_velocity = Vector3(0, 0, 0)
  void set_angular_velocity ( Vector3 value )
 
Vector3 get_angular_velocity ( )
  The RigidBody3D's rotational velocity in radians per second. 
bool can_sleep = true
  void set_can_sleep ( bool value )
 
bool is_able_to_sleep ( )
  If true, the body can enter sleep mode when there is no movement. See sleeping. 
Vector3 center_of_mass = Vector3(0, 0, 0)
  void set_center_of_mass ( Vector3 value )
 
Vector3 get_center_of_mass ( )
  The body's custom center of mass, relative to the body's origin position, when center_of_mass_mode is set to CENTER_OF_MASS_MODE_CUSTOM. This is the balanced point of the body, where applied forces only cause linear acceleration. Applying forces outside of the center of mass causes angular acceleration. When center_of_mass_mode is set to CENTER_OF_MASS_MODE_AUTO (default value), the center of mass is automatically computed. 
CenterOfMassMode center_of_mass_mode = 0
  void set_center_of_mass_mode ( CenterOfMassMode value )
 
CenterOfMassMode get_center_of_mass_mode ( )
  Defines the way the body's center of mass is set. See CenterOfMassMode for possible values. 
Vector3 constant_force = Vector3(0, 0, 0)
  void set_constant_force ( Vector3 value )
 
Vector3 get_constant_force ( )
  The body's total constant positional forces applied during each physics update. See add_constant_force and add_constant_central_force. 
Vector3 constant_torque = Vector3(0, 0, 0)
  void set_constant_torque ( Vector3 value )
 
Vector3 get_constant_torque ( )
  The body's total constant rotational forces applied during each physics update. See add_constant_torque. 
bool contact_monitor = false
  void set_contact_monitor ( bool value )
 
bool is_contact_monitor_enabled ( )
  If true, the RigidBody3D will emit signals when it collides with another body. Note: By default the maximum contacts reported is set to 0, meaning nothing will be recorded, see max_contacts_reported. 
bool continuous_cd = false
  void set_use_continuous_collision_detection ( bool value )
 
bool is_using_continuous_collision_detection ( )
  If true, continuous collision detection is used. Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided. Continuous collision detection is more precise, and misses fewer impacts by small, fast-moving objects. Not using continuous collision detection is faster to compute, but can miss small, fast-moving objects. 
bool custom_integrator = false
  void set_use_custom_integrator ( bool value )
 
bool is_using_custom_integrator ( )
  If true, internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the _integrate_forces function, if defined. 
bool freeze = false
  void set_freeze_enabled ( bool value )
 
bool is_freeze_enabled ( )
  If true, the body is frozen. Gravity and forces are not applied anymore. See freeze_mode to set the body's behavior when frozen. For a body that is always frozen, use StaticBody3D or AnimatableBody3D instead. 
FreezeMode freeze_mode = 0
  void set_freeze_mode ( FreezeMode value )
 
FreezeMode get_freeze_mode ( )
  The body's freeze mode. Can be used to set the body's behavior when freeze is enabled. See FreezeMode for possible values. For a body that is always frozen, use StaticBody3D or AnimatableBody3D instead. 
float gravity_scale = 1.0
  void set_gravity_scale ( float value )
 
float get_gravity_scale ( )
  This is multiplied by the global 3D gravity setting found in Project > Project Settings > Physics > 3d to produce RigidBody3D's gravity. For example, a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object. 
Vector3 inertia = Vector3(0, 0, 0)
  void set_inertia ( Vector3 value )
 
Vector3 get_inertia ( )
  The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body on each axis. The moment of inertia is usually computed automatically from the mass and the shapes, but this property allows you to set a custom value. If set to Vector3.ZERO, inertia is automatically computed (default value). Note: This value does not change when inertia is automatically computed. Use PhysicsServer3D to get the computed inertia.  GDScript@onready var ball = $Ball
func get_ball_inertia():
    return PhysicsServer3D.body_get_direct_state(ball.get_rid()).inverse_inertia.inverse()
 C#private RigidBody3D _ball;
public override void _Ready()
{
    _ball = GetNode<RigidBody3D>("Ball");
}
private Vector3 GetBallInertia()
{
    return PhysicsServer3D.BodyGetDirectState(_ball.GetRid()).InverseInertia.Inverse();
}
  
float linear_damp = 0.0
  void set_linear_damp ( float value )
 
float get_linear_damp ( )
  Damps the body's movement. By default, the body will use the Default Linear Damp in Project > Project Settings > Physics > 3d or any value override set by an Area3D the body is in. Depending on linear_damp_mode, you can set linear_damp to be added to or to replace the body's damping value. See ProjectSettings.physics/3d/default_linear_damp for more details about damping. 
DampMode linear_damp_mode = 0
  void set_linear_damp_mode ( DampMode value )
 
DampMode get_linear_damp_mode ( )
  Defines how linear_damp is applied. See DampMode for possible values. 
Vector3 linear_velocity = Vector3(0, 0, 0)
  void set_linear_velocity ( Vector3 value )
 
Vector3 get_linear_velocity ( )
  The body's linear velocity in units per second. Can be used sporadically, but don't set this every frame, because physics may run in another thread and runs at a different granularity. Use _integrate_forces as your process loop for precise control of the body state. 
bool lock_rotation = false
  void set_lock_rotation_enabled ( bool value )
 
bool is_lock_rotation_enabled ( )
  If true, the body cannot rotate. Gravity and forces only apply linear movement. 
float mass = 1.0
  void set_mass ( float value )
 
float get_mass ( )
  The body's mass. 
int max_contacts_reported = 0
  void set_max_contacts_reported ( int value )
 
int get_max_contacts_reported ( )
  The maximum number of contacts that will be recorded. Requires a value greater than 0 and contact_monitor to be set to true to start to register contacts. Use get_contact_count to retrieve the count or get_colliding_bodies to retrieve bodies that have been collided with. Note: The number of contacts is different from the number of collisions. Collisions between parallel edges will result in two contacts (one at each end), and collisions between parallel faces will result in four contacts (one at each corner). 
PhysicsMaterial physics_material_override  void set_physics_material_override ( PhysicsMaterial value )
 
PhysicsMaterial get_physics_material_override ( )
  The physics material override for the body. If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one. 
bool sleeping = false
  void set_sleeping ( bool value )
 
bool is_sleeping ( )
  If true, the body will not move and will not calculate forces until woken up by another body through, for example, a collision, or by using the apply_impulse or apply_force methods.   Method Descriptions void _integrate_forces ( PhysicsDirectBodyState3D state ) virtual
 Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it works in addition to the usual physics behavior, but the custom_integrator property allows you to disable the default behavior and do fully custom force integration for a body. void add_constant_central_force ( Vector3 force ) Adds a constant directional force without affecting rotation that keeps being applied over time until cleared with constant_force = Vector3(0, 0, 0). This is equivalent to using add_constant_force at the body's center of mass. void add_constant_force ( Vector3 force, Vector3 position=Vector3(0, 0, 0) ) Adds a constant positioned force to the body that keeps being applied over time until cleared with constant_force = Vector3(0, 0, 0). position is the offset from the body origin in global coordinates. void add_constant_torque ( Vector3 torque ) Adds a constant rotational force without affecting position that keeps being applied over time until cleared with constant_torque = Vector3(0, 0, 0). void apply_central_force ( Vector3 force ) Applies a directional force without affecting rotation. A force is time dependent and meant to be applied every physics update. This is equivalent to using apply_force at the body's center of mass. void apply_central_impulse ( Vector3 impulse ) Applies a directional impulse without affecting rotation. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise). This is equivalent to using apply_impulse at the body's center of mass. void apply_force ( Vector3 force, Vector3 position=Vector3(0, 0, 0) ) Applies a positioned force to the body. A force is time dependent and meant to be applied every physics update. position is the offset from the body origin in global coordinates. void apply_impulse ( Vector3 impulse, Vector3 position=Vector3(0, 0, 0) ) Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise). position is the offset from the body origin in global coordinates. void apply_torque ( Vector3 torque ) Applies a rotational force without affecting position. A force is time dependent and meant to be applied every physics update. Note: inertia is required for this to work. To have inertia, an active CollisionShape3D must be a child of the node, or you can manually set inertia. void apply_torque_impulse ( Vector3 impulse ) Applies a rotational impulse to the body without affecting the position. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise). Note: inertia is required for this to work. To have inertia, an active CollisionShape3D must be a child of the node, or you can manually set inertia. 
Node3D[] get_colliding_bodies ( ) const
 Returns a list of the bodies colliding with this one. Requires contact_monitor to be set to true and max_contacts_reported to be set high enough to detect all the collisions. Note: The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead. 
int get_contact_count ( ) const
 Returns the number of contacts this body has with other bodies. By default, this returns 0 unless bodies are configured to monitor contacts (see contact_monitor). Note: To retrieve the colliding bodies, use get_colliding_bodies. 
Basis get_inverse_inertia_tensor ( ) const
 Returns the inverse inertia tensor basis. This is used to calculate the angular acceleration resulting from a torque applied to the RigidBody3D. void set_axis_velocity ( Vector3 axis_velocity ) Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_rigidbody3d.html


classes/class_editorcommandpalette
-----------------------------------------------------------
EditorCommandPalette Inherits: ConfirmationDialog < AcceptDialog < Window < Viewport < Node < Object Godot editor's command palette.  Description Object that holds all the available Commands and their shortcuts text. These Commands can be accessed through Editor > Command Palette menu. Command key names use slash delimiters to distinguish sections, for example: "example/command1" then example will be the section name.  GDScriptvar command_palette = EditorInterface.get_command_palette()
# external_command is a function that will be called with the command is executed.
var command_callable = Callable(self, "external_command").bind(arguments)
command_palette.add_command("command", "test/command",command_callable)
 C#EditorCommandPalette commandPalette = EditorInterface.Singleton.GetCommandPalette();
// ExternalCommand is a function that will be called with the command is executed.
Callable commandCallable = new Callable(this, MethodName.ExternalCommand);
commandPalette.AddCommand("command", "test/command", commandCallable)
  Note: This class shouldn't be instantiated directly. Instead, access the singleton using EditorInterface.get_command_palette.   Properties  
bool dialog_hide_on_ok false (overrides AcceptDialog)     Methods  
void add_command ( String command_name, String key_name, Callable binded_callable, String shortcut_text="None" )  
void remove_command ( String key_name )     Method Descriptions void add_command ( String command_name, String key_name, Callable binded_callable, String shortcut_text="None" ) Adds a custom command to EditorCommandPalette.  
command_name: String (Name of the Command. This is displayed to the user.) 
key_name: String (Name of the key for a particular Command. This is used to uniquely identify the Command.) 
binded_callable: Callable (Callable of the Command. This will be executed when the Command is selected.) 
shortcut_text: String (Shortcut text of the Command if available.)  void remove_command ( String key_name ) Removes the custom command from EditorCommandPalette.  
key_name: String (Name of the key for a particular Command.)   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_editorcommandpalette.html


classes/class_cubemaparray
-----------------------------------------------------------
CubemapArray Inherits: ImageTextureLayered < TextureLayered < Texture < Resource < RefCounted < Object An array of Cubemaps, stored together and with a single reference.  Description CubemapArrays are made of an array of Cubemaps. Like Cubemaps, they are made of multiple textures, the amount of which must be divisible by 6 (one for each face of the cube). The primary benefit of CubemapArrays is that they can be accessed in shader code using a single texture reference. In other words, you can pass multiple Cubemaps into a shader using a single CubemapArray. Moreover, Cubemaps are allocated in adjacent cache regions on the GPU. This makes CubemapArrays the most efficient way to store multiple Cubemaps. Internally, Godot uses CubemapArrays for many effects, including the Sky if you set ProjectSettings.rendering/reflections/sky_reflections/texture_array_reflections to true. To create such a texture file yourself, reimport your image files using the import presets of the File System dock. Note: CubemapArray is not supported in the OpenGL 3 rendering backend.   Methods  
Resource create_placeholder ( ) const     Method Descriptions 
Resource create_placeholder ( ) const
 Creates a placeholder version of this resource (PlaceholderCubemapArray).  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_cubemaparray.html


classes/class_cylindermesh
-----------------------------------------------------------
CylinderMesh Inherits: PrimitiveMesh < Mesh < Resource < RefCounted < Object Class representing a cylindrical PrimitiveMesh.  Description Class representing a cylindrical PrimitiveMesh. This class can be used to create cones by setting either the top_radius or bottom_radius properties to 0.0.   Properties  
float bottom_radius 0.5  
bool cap_bottom true  
bool cap_top true  
float height 2.0  
int radial_segments 64  
int rings 4  
float top_radius 0.5     Property Descriptions 
float bottom_radius = 0.5
  void set_bottom_radius ( float value )
 
float get_bottom_radius ( )
  Bottom radius of the cylinder. If set to 0.0, the bottom faces will not be generated, resulting in a conic shape. See also cap_bottom. 
bool cap_bottom = true
  void set_cap_bottom ( bool value )
 
bool is_cap_bottom ( )
  If true, generates a cap at the bottom of the cylinder. This can be set to false to speed up generation and rendering when the cap is never seen by the camera. See also bottom_radius. Note: If bottom_radius is 0.0, cap generation is always skipped even if cap_bottom is true. 
bool cap_top = true
  void set_cap_top ( bool value )
 
bool is_cap_top ( )
  If true, generates a cap at the top of the cylinder. This can be set to false to speed up generation and rendering when the cap is never seen by the camera. See also top_radius. Note: If top_radius is 0.0, cap generation is always skipped even if cap_top is true. 
float height = 2.0
  void set_height ( float value )
 
float get_height ( )
  Full height of the cylinder. 
int radial_segments = 64
  void set_radial_segments ( int value )
 
int get_radial_segments ( )
  Number of radial segments on the cylinder. Higher values result in a more detailed cylinder/cone at the cost of performance. 
int rings = 4
  void set_rings ( int value )
 
int get_rings ( )
  Number of edge rings along the height of the cylinder. Changing rings does not have any visual impact unless a shader or procedural mesh tool is used to alter the vertex data. Higher values result in more subdivisions, which can be used to create smoother-looking effects with shaders or procedural mesh tools (at the cost of performance). When not altering the vertex data using a shader or procedural mesh tool, rings should be kept to its default value. 
float top_radius = 0.5
  void set_top_radius ( float value )
 
float get_top_radius ( )
  Top radius of the cylinder. If set to 0.0, the top faces will not be generated, resulting in a conic shape. See also cap_top.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_cylindermesh.html


classes/class_animationmixer
-----------------------------------------------------------
AnimationMixer Inherits: Node < Object Inherited By: AnimationPlayer, AnimationTree Base class for AnimationPlayer and AnimationTree.  Description Base class for AnimationPlayer and AnimationTree to manage animation lists. It also has general properties and methods for playback and blending. After instantiating the playback information data within the extended class, the blending is processed by the AnimationMixer.   Properties  
bool active true  
int audio_max_polyphony 32  
AnimationCallbackModeMethod callback_mode_method 0  
AnimationCallbackModeProcess callback_mode_process 1  
bool deterministic false  
bool reset_on_save true  
NodePath root_motion_track NodePath("")  
NodePath root_node NodePath("..")     Methods  
Variant _post_process_key_value ( Animation animation, int track, Variant value, Object object, int object_idx ) virtual const  
Error add_animation_library ( StringName name, AnimationLibrary library )  
void advance ( float delta )  
void clear_caches ( )  
StringName find_animation ( Animation animation ) const  
StringName find_animation_library ( Animation animation ) const  
Animation get_animation ( StringName name ) const  
AnimationLibrary get_animation_library ( StringName name ) const  
StringName[] get_animation_library_list ( ) const  
PackedStringArray get_animation_list ( ) const  
Vector3 get_root_motion_position ( ) const  
Vector3 get_root_motion_position_accumulator ( ) const  
Quaternion get_root_motion_rotation ( ) const  
Quaternion get_root_motion_rotation_accumulator ( ) const  
Vector3 get_root_motion_scale ( ) const  
Vector3 get_root_motion_scale_accumulator ( ) const  
bool has_animation ( StringName name ) const  
bool has_animation_library ( StringName name ) const  
void remove_animation_library ( StringName name )  
void rename_animation_library ( StringName name, StringName newname )     Signals animation_finished ( StringName anim_name ) Notifies when an animation finished playing. Note: This signal is not emitted if an animation is looping. animation_libraries_updated ( ) Notifies when the animation libraries have changed. animation_list_changed ( ) Notifies when an animation list is changed. animation_started ( StringName anim_name ) Notifies when an animation starts playing. caches_cleared ( ) Notifies when the caches have been cleared, either automatically, or manually via clear_caches. mixer_updated ( ) Editor only. Notifies when the property have been updated to update dummy AnimationPlayer in animation player editor.   Enumerations enum AnimationCallbackModeProcess: 
AnimationCallbackModeProcess ANIMATION_CALLBACK_MODE_PROCESS_PHYSICS = 0
 Process animation during physics frames (see Node.NOTIFICATION_INTERNAL_PHYSICS_PROCESS). This is especially useful when animating physics bodies. 
AnimationCallbackModeProcess ANIMATION_CALLBACK_MODE_PROCESS_IDLE = 1
 Process animation during process frames (see Node.NOTIFICATION_INTERNAL_PROCESS). 
AnimationCallbackModeProcess ANIMATION_CALLBACK_MODE_PROCESS_MANUAL = 2
 Do not process animation. Use advance to process the animation manually. enum AnimationCallbackModeMethod: 
AnimationCallbackModeMethod ANIMATION_CALLBACK_MODE_METHOD_DEFERRED = 0
 Batch method calls during the animation process, then do the calls after events are processed. This avoids bugs involving deleting nodes or modifying the AnimationPlayer while playing. 
AnimationCallbackModeMethod ANIMATION_CALLBACK_MODE_METHOD_IMMEDIATE = 1
 Make method calls immediately when reached in the animation.   Property Descriptions 
bool active = true
  void set_active ( bool value )
 
bool is_active ( )
  If true, the AnimationMixer will be processing. 
int audio_max_polyphony = 32
  void set_audio_max_polyphony ( int value )
 
int get_audio_max_polyphony ( )
  The number of possible simultaneous sounds for each of the assigned AudioStreamPlayers. For example, if this value is 32 and the animation has two audio tracks, the two AudioStreamPlayers assigned can play simultaneously up to 32 voices each. 
AnimationCallbackModeMethod callback_mode_method = 0
  void set_callback_mode_method ( AnimationCallbackModeMethod value )
 
AnimationCallbackModeMethod get_callback_mode_method ( )
  The call mode to use for Call Method tracks. 
AnimationCallbackModeProcess callback_mode_process = 1
  void set_callback_mode_process ( AnimationCallbackModeProcess value )
 
AnimationCallbackModeProcess get_callback_mode_process ( )
  The process notification in which to update animations. 
bool deterministic = false
  void set_deterministic ( bool value )
 
bool is_deterministic ( )
  If true, the blending uses the deterministic algorithm. The total weight is not normalized and the result is accumulated with an initial value (0 or a "RESET" animation if present). This means that if the total amount of blending is 0.0, the result is equal to the "RESET" animation. If the number of tracks between the blended animations is different, the animation with the missing track is treated as if it had the initial value. If false, The blend does not use the deterministic algorithm. The total weight is normalized and always 1.0. If the number of tracks between the blended animations is different, nothing is done about the animation that is missing a track. Note: In AnimationTree, the blending with AnimationNodeAdd2, AnimationNodeAdd3, AnimationNodeSub2 or the weight greater than 1.0 may produce unexpected results. For example, if AnimationNodeAdd2 blends two nodes with the amount 1.0, then total weight is 2.0 but it will be normalized to make the total amount 1.0 and the result will be equal to AnimationNodeBlend2 with the amount 0.5. 
bool reset_on_save = true
  void set_reset_on_save_enabled ( bool value )
 
bool is_reset_on_save_enabled ( )
  This is used by the editor. If set to true, the scene will be saved with the effects of the reset animation (the animation with the key "RESET") applied as if it had been seeked to time 0, with the editor keeping the values that the scene had before saving. This makes it more convenient to preview and edit animations in the editor, as changes to the scene will not be saved as long as they are set in the reset animation. 
NodePath root_motion_track = NodePath("")
  void set_root_motion_track ( NodePath value )
 
NodePath get_root_motion_track ( )
  The path to the Animation track used for root motion. Paths must be valid scene-tree paths to a node, and must be specified starting from the parent node of the node that will reproduce the animation. To specify a track that controls properties or bones, append its name after the path, separated by ":". For example, "character/skeleton:ankle" or "character/mesh:transform/local". If the track has type Animation.TYPE_POSITION_3D, Animation.TYPE_ROTATION_3D or Animation.TYPE_SCALE_3D the transformation will be canceled visually, and the animation will appear to stay in place. See also get_root_motion_position, get_root_motion_rotation, get_root_motion_scale and RootMotionView. 
NodePath root_node = NodePath("..")
  void set_root_node ( NodePath value )
 
NodePath get_root_node ( )
  The node from which node path references will travel.   Method Descriptions 
Variant _post_process_key_value ( Animation animation, int track, Variant value, Object object, int object_idx ) virtual const
 A virtual function for processing after key getting during playback. 
Error add_animation_library ( StringName name, AnimationLibrary library ) Adds library to the animation player, under the key name. void advance ( float delta ) Manually advance the animations by the specified time (in seconds). void clear_caches ( ) AnimationMixer caches animated nodes. It may not notice if a node disappears; clear_caches forces it to update the cache again. 
StringName find_animation ( Animation animation ) const
 Returns the key of animation or an empty StringName if not found. 
StringName find_animation_library ( Animation animation ) const
 Returns the key for the AnimationLibrary that contains animation or an empty StringName if not found. 
Animation get_animation ( StringName name ) const
 Returns the Animation with the key name. If the animation does not exist, null is returned and an error is logged. 
AnimationLibrary get_animation_library ( StringName name ) const
 Returns the first AnimationLibrary with key name or null if not found. To get the AnimationPlayer's global animation library, use get_animation_library(""). 
StringName[] get_animation_library_list ( ) const
 Returns the list of stored library keys. 
PackedStringArray get_animation_list ( ) const
 Returns the list of stored animation keys. 
Vector3 get_root_motion_position ( ) const
 Retrieve the motion delta of position with the root_motion_track as a Vector3 that can be used elsewhere. If root_motion_track is not a path to a track of type Animation.TYPE_POSITION_3D, returns Vector3(0, 0, 0). See also root_motion_track and RootMotionView. The most basic example is applying position to CharacterBody3D:  GDScriptvar current_rotation: Quaternion
func _process(delta):
    if Input.is_action_just_pressed("animate"):
        current_rotation = get_quaternion()
        state_machine.travel("Animate")
    var velocity: Vector3 = current_rotation * animation_tree.get_root_motion_position() / delta
    set_velocity(velocity)
    move_and_slide()
  By using this in combination with get_root_motion_position_accumulator, you can apply the root motion position more correctly to account for the rotation of the node.  GDScriptfunc _process(delta):
    if Input.is_action_just_pressed("animate"):
        state_machine.travel("Animate")
    set_quaternion(get_quaternion() * animation_tree.get_root_motion_rotation())
    var velocity: Vector3 = (animation_tree.get_root_motion_rotation_accumulator().inverse() * get_quaternion()) * animation_tree.get_root_motion_position() / delta
    set_velocity(velocity)
    move_and_slide()
  
Vector3 get_root_motion_position_accumulator ( ) const
 Retrieve the blended value of the position tracks with the root_motion_track as a Vector3 that can be used elsewhere. This is useful in cases where you want to respect the initial key values of the animation. For example, if an animation with only one key Vector3(0, 0, 0) is played in the previous frame and then an animation with only one key Vector3(1, 0, 1) is played in the next frame, the difference can be calculated as follows:  GDScriptvar prev_root_motion_position_accumulator: Vector3
func _process(delta):
    if Input.is_action_just_pressed("animate"):
        state_machine.travel("Animate")
    var current_root_motion_position_accumulator: Vector3 = animation_tree.get_root_motion_position_accumulator()
    var difference: Vector3 = current_root_motion_position_accumulator - prev_root_motion_position_accumulator
    prev_root_motion_position_accumulator = current_root_motion_position_accumulator
    transform.origin += difference
  However, if the animation loops, an unintended discrete change may occur, so this is only useful for some simple use cases. 
Quaternion get_root_motion_rotation ( ) const
 Retrieve the motion delta of rotation with the root_motion_track as a Quaternion that can be used elsewhere. If root_motion_track is not a path to a track of type Animation.TYPE_ROTATION_3D, returns Quaternion(0, 0, 0, 1). See also root_motion_track and RootMotionView. The most basic example is applying rotation to CharacterBody3D:  GDScriptfunc _process(delta):
    if Input.is_action_just_pressed("animate"):
        state_machine.travel("Animate")
    set_quaternion(get_quaternion() * animation_tree.get_root_motion_rotation())
  
Quaternion get_root_motion_rotation_accumulator ( ) const
 Retrieve the blended value of the rotation tracks with the root_motion_track as a Quaternion that can be used elsewhere. This is necessary to apply the root motion position correctly, taking rotation into account. See also get_root_motion_position. Also, this is useful in cases where you want to respect the initial key values of the animation. For example, if an animation with only one key Quaternion(0, 0, 0, 1) is played in the previous frame and then an animation with only one key Quaternion(0, 0.707, 0, 0.707) is played in the next frame, the difference can be calculated as follows:  GDScriptvar prev_root_motion_rotation_accumulator: Quaternion
func _process(delta):
    if Input.is_action_just_pressed("animate"):
        state_machine.travel("Animate")
    var current_root_motion_rotation_accumulator: Quaternion = animation_tree.get_root_motion_Quaternion_accumulator()
    var difference: Quaternion = prev_root_motion_rotation_accumulator.inverse() * current_root_motion_rotation_accumulator
    prev_root_motion_rotation_accumulator = current_root_motion_rotation_accumulator
    transform.basis *= difference
  However, if the animation loops, an unintended discrete change may occur, so this is only useful for some simple use cases. 
Vector3 get_root_motion_scale ( ) const
 Retrieve the motion delta of scale with the root_motion_track as a Vector3 that can be used elsewhere. If root_motion_track is not a path to a track of type Animation.TYPE_SCALE_3D, returns Vector3(0, 0, 0). See also root_motion_track and RootMotionView. The most basic example is applying scale to CharacterBody3D:  GDScriptvar current_scale: Vector3 = Vector3(1, 1, 1)
var scale_accum: Vector3 = Vector3(1, 1, 1)
func _process(delta):
    if Input.is_action_just_pressed("animate"):
        current_scale = get_scale()
        scale_accum = Vector3(1, 1, 1)
        state_machine.travel("Animate")
    scale_accum += animation_tree.get_root_motion_scale()
    set_scale(current_scale * scale_accum)
  
Vector3 get_root_motion_scale_accumulator ( ) const
 Retrieve the blended value of the scale tracks with the root_motion_track as a Vector3 that can be used elsewhere. For example, if an animation with only one key Vector3(1, 1, 1) is played in the previous frame and then an animation with only one key Vector3(2, 2, 2) is played in the next frame, the difference can be calculated as follows:  GDScriptvar prev_root_motion_scale_accumulator: Vector3
func _process(delta):
    if Input.is_action_just_pressed("animate"):
        state_machine.travel("Animate")
    var current_root_motion_scale_accumulator: Vector3 = animation_tree.get_root_motion_scale_accumulator()
    var difference: Vector3 = current_root_motion_scale_accumulator - prev_root_motion_scale_accumulator
    prev_root_motion_scale_accumulator = current_root_motion_scale_accumulator
    transform.basis = transform.basis.scaled(difference)
  However, if the animation loops, an unintended discrete change may occur, so this is only useful for some simple use cases. 
bool has_animation ( StringName name ) const
 Returns true if the AnimationPlayer stores an Animation with key name. 
bool has_animation_library ( StringName name ) const
 Returns true if the AnimationPlayer stores an AnimationLibrary with key name. void remove_animation_library ( StringName name ) Removes the AnimationLibrary associated with the key name. void rename_animation_library ( StringName name, StringName newname ) Moves the AnimationLibrary associated with the key name to the key newname.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationmixer.html


classes/class_missingresource
-----------------------------------------------------------
MissingResource Inherits: Resource < RefCounted < Object An internal editor class intended for keeping the data of unrecognized resources.  Description This is an internal editor class intended for keeping data of resources of unknown type (most likely this type was supplied by an extension that is no longer loaded). It can't be manually instantiated or placed in the scene. Ignore it if you don't know what it is.   Properties  
String original_class  
bool recording_properties     Property Descriptions 
String original_class  void set_original_class ( String value )
 
String get_original_class ( )
  Returns the name of the class this resource was originally. 
bool recording_properties  void set_recording_properties ( bool value )
 
bool is_recording_properties ( )
   There is currently no description for this property. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_missingresource.html


classes/class_audioeffecteq6
-----------------------------------------------------------
AudioEffectEQ6 Inherits: AudioEffectEQ < AudioEffect < Resource < RefCounted < Object Adds a 6-band equalizer audio effect to an audio bus. Gives you control over frequencies from 32 Hz to 10000 Hz. Each frequency can be modulated between -60/+24 dB.  Description Frequency bands: Band 1: 32 Hz Band 2: 100 Hz Band 3: 320 Hz Band 4: 1000 Hz Band 5: 3200 Hz Band 6: 10000 Hz See also AudioEffectEQ, AudioEffectEQ10, AudioEffectEQ21.   Tutorials  Audio buses   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffecteq6.html


classes/class_menubutton
-----------------------------------------------------------
MenuButton Inherits: Button < BaseButton < Control < CanvasItem < Node < Object A button that brings up a PopupMenu when clicked.  Description A button that brings up a PopupMenu when clicked. To create new items inside this PopupMenu, use get_popup().add_item("My Item Name"). You can also create them directly from Godot editor's inspector. See also BaseButton which contains common properties and methods associated with this node.   Properties  
ActionMode action_mode 0 (overrides BaseButton)  
bool flat true (overrides Button)  
FocusMode focus_mode 0 (overrides Control)  
int item_count 0  
bool switch_on_hover false  
bool toggle_mode true (overrides BaseButton)     Methods  
PopupMenu get_popup ( ) const  
void set_disable_shortcuts ( bool disabled )  
void show_popup ( )     Signals about_to_popup ( ) Emitted when the PopupMenu of this MenuButton is about to show.   Property Descriptions 
int item_count = 0
  void set_item_count ( int value )
 
int get_item_count ( )
  The number of items currently in the list. 
bool switch_on_hover = false
  void set_switch_on_hover ( bool value )
 
bool is_switch_on_hover ( )
  If true, when the cursor hovers above another MenuButton within the same parent which also has switch_on_hover enabled, it will close the current MenuButton and open the other one.   Method Descriptions 
PopupMenu get_popup ( ) const
 Returns the PopupMenu contained in this button. Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their Window.visible property. void set_disable_shortcuts ( bool disabled ) If true, shortcuts are disabled and cannot be used to trigger the button. void show_popup ( ) Adjusts popup position and sizing for the MenuButton, then shows the PopupMenu. Prefer this over using get_popup().popup().  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_menubutton.html


classes/class_audioeffectchorus
-----------------------------------------------------------
AudioEffectChorus Inherits: AudioEffect < Resource < RefCounted < Object Adds a chorus audio effect.  Description Adds a chorus audio effect. The effect applies a filter with voices to duplicate the audio source and manipulate it through the filter.   Tutorials  Audio buses    Properties  
float dry 1.0  
float voice/1/cutoff_hz 8000.0  
float voice/1/delay_ms 15.0  
float voice/1/depth_ms 2.0  
float voice/1/level_db 0.0  
float voice/1/pan -0.5  
float voice/1/rate_hz 0.8  
float voice/2/cutoff_hz 8000.0  
float voice/2/delay_ms 20.0  
float voice/2/depth_ms 3.0  
float voice/2/level_db 0.0  
float voice/2/pan 0.5  
float voice/2/rate_hz 1.2  
float voice/3/cutoff_hz   
float voice/3/delay_ms   
float voice/3/depth_ms   
float voice/3/level_db   
float voice/3/pan   
float voice/3/rate_hz   
float voice/4/cutoff_hz   
float voice/4/delay_ms   
float voice/4/depth_ms   
float voice/4/level_db   
float voice/4/pan   
float voice/4/rate_hz   
int voice_count 2  
float wet 0.5     Methods  
float get_voice_cutoff_hz ( int voice_idx ) const  
float get_voice_delay_ms ( int voice_idx ) const  
float get_voice_depth_ms ( int voice_idx ) const  
float get_voice_level_db ( int voice_idx ) const  
float get_voice_pan ( int voice_idx ) const  
float get_voice_rate_hz ( int voice_idx ) const  
void set_voice_cutoff_hz ( int voice_idx, float cutoff_hz )  
void set_voice_delay_ms ( int voice_idx, float delay_ms )  
void set_voice_depth_ms ( int voice_idx, float depth_ms )  
void set_voice_level_db ( int voice_idx, float level_db )  
void set_voice_pan ( int voice_idx, float pan )  
void set_voice_rate_hz ( int voice_idx, float rate_hz )     Property Descriptions 
float dry = 1.0
  void set_dry ( float value )
 
float get_dry ( )
  The effect's raw signal. 
float voice/1/cutoff_hz = 8000.0
  void set_voice_cutoff_hz ( int voice_idx, float cutoff_hz )
 
float get_voice_cutoff_hz ( int voice_idx ) const
  The voice's cutoff frequency. 
float voice/1/delay_ms = 15.0
  void set_voice_delay_ms ( int voice_idx, float delay_ms )
 
float get_voice_delay_ms ( int voice_idx ) const
  The voice's signal delay. 
float voice/1/depth_ms = 2.0
  void set_voice_depth_ms ( int voice_idx, float depth_ms )
 
float get_voice_depth_ms ( int voice_idx ) const
  The voice filter's depth. 
float voice/1/level_db = 0.0
  void set_voice_level_db ( int voice_idx, float level_db )
 
float get_voice_level_db ( int voice_idx ) const
  The voice's volume. 
float voice/1/pan = -0.5
  void set_voice_pan ( int voice_idx, float pan )
 
float get_voice_pan ( int voice_idx ) const
  The voice's pan level. 
float voice/1/rate_hz = 0.8
  void set_voice_rate_hz ( int voice_idx, float rate_hz )
 
float get_voice_rate_hz ( int voice_idx ) const
  The voice's filter rate. 
float voice/2/cutoff_hz = 8000.0
  void set_voice_cutoff_hz ( int voice_idx, float cutoff_hz )
 
float get_voice_cutoff_hz ( int voice_idx ) const
  The voice's cutoff frequency. 
float voice/2/delay_ms = 20.0
  void set_voice_delay_ms ( int voice_idx, float delay_ms )
 
float get_voice_delay_ms ( int voice_idx ) const
  The voice's signal delay. 
float voice/2/depth_ms = 3.0
  void set_voice_depth_ms ( int voice_idx, float depth_ms )
 
float get_voice_depth_ms ( int voice_idx ) const
  The voice filter's depth. 
float voice/2/level_db = 0.0
  void set_voice_level_db ( int voice_idx, float level_db )
 
float get_voice_level_db ( int voice_idx ) const
  The voice's volume. 
float voice/2/pan = 0.5
  void set_voice_pan ( int voice_idx, float pan )
 
float get_voice_pan ( int voice_idx ) const
  The voice's pan level. 
float voice/2/rate_hz = 1.2
  void set_voice_rate_hz ( int voice_idx, float rate_hz )
 
float get_voice_rate_hz ( int voice_idx ) const
  The voice's filter rate. 
float voice/3/cutoff_hz  void set_voice_cutoff_hz ( int voice_idx, float cutoff_hz )
 
float get_voice_cutoff_hz ( int voice_idx ) const
  The voice's cutoff frequency. 
float voice/3/delay_ms  void set_voice_delay_ms ( int voice_idx, float delay_ms )
 
float get_voice_delay_ms ( int voice_idx ) const
  The voice's signal delay. 
float voice/3/depth_ms  void set_voice_depth_ms ( int voice_idx, float depth_ms )
 
float get_voice_depth_ms ( int voice_idx ) const
  The voice filter's depth. 
float voice/3/level_db  void set_voice_level_db ( int voice_idx, float level_db )
 
float get_voice_level_db ( int voice_idx ) const
  The voice's volume. 
float voice/3/pan  void set_voice_pan ( int voice_idx, float pan )
 
float get_voice_pan ( int voice_idx ) const
  The voice's pan level. 
float voice/3/rate_hz  void set_voice_rate_hz ( int voice_idx, float rate_hz )
 
float get_voice_rate_hz ( int voice_idx ) const
  The voice's filter rate. 
float voice/4/cutoff_hz  void set_voice_cutoff_hz ( int voice_idx, float cutoff_hz )
 
float get_voice_cutoff_hz ( int voice_idx ) const
  The voice's cutoff frequency. 
float voice/4/delay_ms  void set_voice_delay_ms ( int voice_idx, float delay_ms )
 
float get_voice_delay_ms ( int voice_idx ) const
  The voice's signal delay. 
float voice/4/depth_ms  void set_voice_depth_ms ( int voice_idx, float depth_ms )
 
float get_voice_depth_ms ( int voice_idx ) const
  The voice filter's depth. 
float voice/4/level_db  void set_voice_level_db ( int voice_idx, float level_db )
 
float get_voice_level_db ( int voice_idx ) const
  The voice's volume. 
float voice/4/pan  void set_voice_pan ( int voice_idx, float pan )
 
float get_voice_pan ( int voice_idx ) const
  The voice's pan level. 
float voice/4/rate_hz  void set_voice_rate_hz ( int voice_idx, float rate_hz )
 
float get_voice_rate_hz ( int voice_idx ) const
  The voice's filter rate. 
int voice_count = 2
  void set_voice_count ( int value )
 
int get_voice_count ( )
  The number of voices in the effect. 
float wet = 0.5
  void set_wet ( float value )
 
float get_wet ( )
  The effect's processed signal.   Method Descriptions 
float get_voice_cutoff_hz ( int voice_idx ) const
  There is currently no description for this method. Please help us by contributing one!  
float get_voice_delay_ms ( int voice_idx ) const
  There is currently no description for this method. Please help us by contributing one!  
float get_voice_depth_ms ( int voice_idx ) const
  There is currently no description for this method. Please help us by contributing one!  
float get_voice_level_db ( int voice_idx ) const
  There is currently no description for this method. Please help us by contributing one!  
float get_voice_pan ( int voice_idx ) const
  There is currently no description for this method. Please help us by contributing one!  
float get_voice_rate_hz ( int voice_idx ) const
  There is currently no description for this method. Please help us by contributing one!  void set_voice_cutoff_hz ( int voice_idx, float cutoff_hz )  There is currently no description for this method. Please help us by contributing one!  void set_voice_delay_ms ( int voice_idx, float delay_ms )  There is currently no description for this method. Please help us by contributing one!  void set_voice_depth_ms ( int voice_idx, float depth_ms )  There is currently no description for this method. Please help us by contributing one!  void set_voice_level_db ( int voice_idx, float level_db )  There is currently no description for this method. Please help us by contributing one!  void set_voice_pan ( int voice_idx, float pan )  There is currently no description for this method. Please help us by contributing one!  void set_voice_rate_hz ( int voice_idx, float rate_hz )  There is currently no description for this method. Please help us by contributing one!   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectchorus.html


classes/class_parallaxlayer
-----------------------------------------------------------
ParallaxLayer Inherits: Node2D < CanvasItem < Node < Object A parallax scrolling layer to be used with ParallaxBackground.  Description A ParallaxLayer must be the child of a ParallaxBackground node. Each ParallaxLayer can be set to move at different speeds relative to the camera movement or the ParallaxBackground.scroll_offset value. This node's children will be affected by its scroll offset. Note: Any changes to this node's position and scale made after it enters the scene will be ignored.   Properties  
Vector2 motion_mirroring Vector2(0, 0)  
Vector2 motion_offset Vector2(0, 0)  
Vector2 motion_scale Vector2(1, 1)     Property Descriptions 
Vector2 motion_mirroring = Vector2(0, 0)
  void set_mirroring ( Vector2 value )
 
Vector2 get_mirroring ( )
  The interval, in pixels, at which the ParallaxLayer is drawn repeatedly. Useful for creating an infinitely scrolling background. If an axis is set to 0, the ParallaxLayer will be drawn only once along that direction. Note: If you want the repetition to pixel-perfect match a Texture2D displayed by a child node, you should account for any scale applied to the texture when defining this interval. For example, if you use a child Sprite2D scaled to 0.5 to display a 600x600 texture, and want this sprite to be repeated continuously horizontally, you should set the mirroring to Vector2(300, 0). Note: If the length of the viewport axis is bigger than twice the repeated axis size, it will not repeat infinitely, as the parallax layer only draws 2 instances of the layer at any given time. The visibility window is calculated from the parent ParallaxBackground's position, not the layer's own position. So, if you use mirroring, do not change the ParallaxLayer position relative to its parent. Instead, if you need to adjust the background's position, set the CanvasLayer.offset property in the parent ParallaxBackground. Note: Despite the name, the layer will not be mirrored, it will only be repeated. 
Vector2 motion_offset = Vector2(0, 0)
  void set_motion_offset ( Vector2 value )
 
Vector2 get_motion_offset ( )
  The ParallaxLayer's offset relative to the parent ParallaxBackground's ParallaxBackground.scroll_offset. 
Vector2 motion_scale = Vector2(1, 1)
  void set_motion_scale ( Vector2 value )
 
Vector2 get_motion_scale ( )
  Multiplies the ParallaxLayer's motion. If an axis is set to 0, it will not scroll.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_parallaxlayer.html


classes/class_visualshadernodecolorfunc
-----------------------------------------------------------
VisualShaderNodeColorFunc Inherits: VisualShaderNode < Resource < RefCounted < Object A Color function to be used within the visual shader graph.  Description Accept a Color to the input port and transform it according to function.   Properties  
Function function 0     Enumerations enum Function: 
Function FUNC_GRAYSCALE = 0
 Converts the color to grayscale using the following formula: vec3 c = input;
float max1 = max(c.r, c.g);
float max2 = max(max1, c.b);
float max3 = max(max1, max2);
return vec3(max3, max3, max3);
 
Function FUNC_HSV2RGB = 1
 Converts HSV vector to RGB equivalent. 
Function FUNC_RGB2HSV = 2
 Converts RGB vector to HSV equivalent. 
Function FUNC_SEPIA = 3
 Applies sepia tone effect using the following formula: vec3 c = input;
float r = (c.r * 0.393) + (c.g * 0.769) + (c.b * 0.189);
float g = (c.r * 0.349) + (c.g * 0.686) + (c.b * 0.168);
float b = (c.r * 0.272) + (c.g * 0.534) + (c.b * 0.131);
return vec3(r, g, b);
 
Function FUNC_MAX = 4
 Represents the size of the Function enum.   Property Descriptions 
Function function = 0
  void set_function ( Function value )
 
Function get_function ( )
  A function to be applied to the input color. See Function for options.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_visualshadernodecolorfunc.html


classes/class_animationnodestatemachineplayback
-----------------------------------------------------------
AnimationNodeStateMachinePlayback Inherits: Resource < RefCounted < Object Provides playback control for an AnimationNodeStateMachine.  Description Allows control of AnimationTree state machines created with AnimationNodeStateMachine. Retrieve with $AnimationTree.get("parameters/playback"). Example:  GDScriptvar state_machine = $AnimationTree.get("parameters/playback")
state_machine.travel("some_state")
 C#var stateMachine = GetNode<AnimationTree>("AnimationTree").Get("parameters/playback").As<AnimationNodeStateMachinePlayback>();
stateMachine.Travel("some_state");
    Tutorials  Using AnimationTree    Properties  
bool resource_local_to_scene true (overrides Resource)     Methods  
float get_current_length ( ) const  
StringName get_current_node ( ) const  
float get_current_play_position ( ) const  
StringName get_fading_from_node ( ) const  
StringName[] get_travel_path ( ) const  
bool is_playing ( ) const  
void next ( )  
void start ( StringName node, bool reset=true )  
void stop ( )  
void travel ( StringName to_node, bool reset_on_teleport=true )     Method Descriptions 
float get_current_length ( ) const
 Returns the current state length. Note: It is possible that any AnimationRootNode can be nodes as well as animations. This means that there can be multiple animations within a single state. Which animation length has priority depends on the nodes connected inside it. Also, if a transition does not reset, the remaining length at that point will be returned. 
StringName get_current_node ( ) const
 Returns the currently playing animation state. Note: When using a cross-fade, the current state changes to the next state immediately after the cross-fade begins. 
float get_current_play_position ( ) const
 Returns the playback position within the current animation state. 
StringName get_fading_from_node ( ) const
 Returns the starting state of currently fading animation. 
StringName[] get_travel_path ( ) const
 Returns the current travel path as computed internally by the A* algorithm. 
bool is_playing ( ) const
 Returns true if an animation is playing. void next ( ) If there is a next path by travel or auto advance, immediately transitions from the current state to the next state. void start ( StringName node, bool reset=true ) Starts playing the given animation. If reset is true, the animation is played from the beginning. void stop ( ) Stops the currently playing animation. void travel ( StringName to_node, bool reset_on_teleport=true ) Transitions from the current state to another one, following the shortest path. If the path does not connect from the current state, the animation will play after the state teleports. If reset_on_teleport is true, the animation is played from the beginning when the travel cause a teleportation.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_animationnodestatemachineplayback.html


classes/class_audioeffectreverb
-----------------------------------------------------------
AudioEffectReverb Inherits: AudioEffect < Resource < RefCounted < Object Adds a reverberation audio effect to an Audio bus.  Description Simulates the sound of acoustic environments such as rooms, concert halls, caverns, or an open spaces.   Tutorials  Audio buses Third Person Shooter Demo    Properties  
float damping 0.5  
float dry 1.0  
float hipass 0.0  
float predelay_feedback 0.4  
float predelay_msec 150.0  
float room_size 0.8  
float spread 1.0  
float wet 0.5     Property Descriptions 
float damping = 0.5
  void set_damping ( float value )
 
float get_damping ( )
  Defines how reflective the imaginary room's walls are. Value can range from 0 to 1. 
float dry = 1.0
  void set_dry ( float value )
 
float get_dry ( )
  Output percent of original sound. At 0, only modified sound is outputted. Value can range from 0 to 1. 
float hipass = 0.0
  void set_hpf ( float value )
 
float get_hpf ( )
  High-pass filter passes signals with a frequency higher than a certain cutoff frequency and attenuates signals with frequencies lower than the cutoff frequency. Value can range from 0 to 1. 
float predelay_feedback = 0.4
  void set_predelay_feedback ( float value )
 
float get_predelay_feedback ( )
  Output percent of predelay. Value can range from 0 to 1. 
float predelay_msec = 150.0
  void set_predelay_msec ( float value )
 
float get_predelay_msec ( )
  Time between the original signal and the early reflections of the reverb signal, in milliseconds. 
float room_size = 0.8
  void set_room_size ( float value )
 
float get_room_size ( )
  Dimensions of simulated room. Bigger means more echoes. Value can range from 0 to 1. 
float spread = 1.0
  void set_spread ( float value )
 
float get_spread ( )
  Widens or narrows the stereo image of the reverb tail. 1 means fully widens. Value can range from 0 to 1. 
float wet = 0.5
  void set_wet ( float value )
 
float get_wet ( )
  Output percent of modified sound. At 0, only original sound is outputted. Value can range from 0 to 1.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_audioeffectreverb.html


classes/class_gpuparticlesattractorvectorfield3d
-----------------------------------------------------------
GPUParticlesAttractorVectorField3D Inherits: GPUParticlesAttractor3D < VisualInstance3D < Node3D < Node < Object A box-shaped attractor with varying directions and strengths defined in it that influences particles from GPUParticles3D nodes.  Description A box-shaped attractor with varying directions and strengths defined in it that influences particles from GPUParticles3D nodes. Unlike GPUParticlesAttractorBox3D, GPUParticlesAttractorVectorField3D uses a texture to affect attraction strength within the box. This can be used to create complex attraction scenarios where particles travel in different directions depending on their location. This can be useful for weather effects such as sandstorms. Particle attractors work in real-time and can be moved, rotated and scaled during gameplay. Unlike collision shapes, non-uniform scaling of attractors is also supported. Note: Particle attractors only affect GPUParticles3D, not CPUParticles3D.   Properties  
Vector3 size Vector3(2, 2, 2)  
Texture3D texture      Property Descriptions 
Vector3 size = Vector3(2, 2, 2)
  void set_size ( Vector3 value )
 
Vector3 get_size ( )
  The size of the vector field box in 3D units. 
Texture3D texture  void set_texture ( Texture3D value )
 
Texture3D get_texture ( )
  The 3D texture to be used. Values are linearly interpolated between the texture's pixels. Note: To get better performance, the 3D texture's resolution should reflect the size of the attractor. Since particle attraction is usually low-frequency data, the texture can be kept at a low resolution such as 64Ã—64Ã—64.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_gpuparticlesattractorvectorfield3d.html


classes/class_pointlight2d
-----------------------------------------------------------
PointLight2D Inherits: Light2D < Node2D < CanvasItem < Node < Object Positional 2D light source.  Description Casts light in a 2D environment. This light's shape is defined by a (usually grayscale) texture.   Tutorials  2D lights and shadows    Properties  
float height 0.0  
Vector2 offset Vector2(0, 0)  
Texture2D texture   
float texture_scale 1.0     Property Descriptions 
float height = 0.0
  void set_height ( float value )
 
float get_height ( )
  The height of the light. Used with 2D normal mapping. The units are in pixels, e.g. if the height is 100, then it will illuminate an object 100 pixels away at a 45Â° angle to the plane. 
Vector2 offset = Vector2(0, 0)
  void set_texture_offset ( Vector2 value )
 
Vector2 get_texture_offset ( )
  The offset of the light's texture. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  Texture2D used for the light's appearance. 
float texture_scale = 1.0
  void set_texture_scale ( float value )
 
float get_texture_scale ( )
  The texture's scale factor.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_pointlight2d.html


classes/class_codehighlighter
-----------------------------------------------------------
CodeHighlighter Inherits: SyntaxHighlighter < Resource < RefCounted < Object A syntax highlighter intended for code.  Description By adjusting various properties of this resource, you can change the colors of strings, comments, numbers, and other text patterns inside a TextEdit control.   Properties  
Dictionary color_regions {}  
Color function_color Color(0, 0, 0, 1)  
Dictionary keyword_colors {}  
Dictionary member_keyword_colors {}  
Color member_variable_color Color(0, 0, 0, 1)  
Color number_color Color(0, 0, 0, 1)  
Color symbol_color Color(0, 0, 0, 1)     Methods  
void add_color_region ( String start_key, String end_key, Color color, bool line_only=false )  
void add_keyword_color ( String keyword, Color color )  
void add_member_keyword_color ( String member_keyword, Color color )  
void clear_color_regions ( )  
void clear_keyword_colors ( )  
void clear_member_keyword_colors ( )  
Color get_keyword_color ( String keyword ) const  
Color get_member_keyword_color ( String member_keyword ) const  
bool has_color_region ( String start_key ) const  
bool has_keyword_color ( String keyword ) const  
bool has_member_keyword_color ( String member_keyword ) const  
void remove_color_region ( String start_key )  
void remove_keyword_color ( String keyword )  
void remove_member_keyword_color ( String member_keyword )     Property Descriptions 
Dictionary color_regions = {}
  void set_color_regions ( Dictionary value )
 
Dictionary get_color_regions ( )
  Sets the color regions. All existing regions will be removed. The Dictionary key is the region start and end key, separated by a space. The value is the region color. 
Color function_color = Color(0, 0, 0, 1)
  void set_function_color ( Color value )
 
Color get_function_color ( )
  Sets color for functions. A function is a non-keyword string followed by a '('. 
Dictionary keyword_colors = {}
  void set_keyword_colors ( Dictionary value )
 
Dictionary get_keyword_colors ( )
  Sets the keyword colors. All existing keywords will be removed. The Dictionary key is the keyword. The value is the keyword color. 
Dictionary member_keyword_colors = {}
  void set_member_keyword_colors ( Dictionary value )
 
Dictionary get_member_keyword_colors ( )
  Sets the member keyword colors. All existing member keyword will be removed. The Dictionary key is the member keyword. The value is the member keyword color. 
Color member_variable_color = Color(0, 0, 0, 1)
  void set_member_variable_color ( Color value )
 
Color get_member_variable_color ( )
  Sets color for member variables. A member variable is non-keyword, non-function string proceeded with a '.'. 
Color number_color = Color(0, 0, 0, 1)
  void set_number_color ( Color value )
 
Color get_number_color ( )
  Sets the color for numbers. 
Color symbol_color = Color(0, 0, 0, 1)
  void set_symbol_color ( Color value )
 
Color get_symbol_color ( )
  Sets the color for symbols.   Method Descriptions void add_color_region ( String start_key, String end_key, Color color, bool line_only=false ) Adds a color region such as comments or strings. Both the start and end keys must be symbols. Only the start key has to be unique. line_only denotes if the region should continue until the end of the line or carry over on to the next line. If the end key is blank this is automatically set to true. void add_keyword_color ( String keyword, Color color ) Sets the color for a keyword. The keyword cannot contain any symbols except '_'. void add_member_keyword_color ( String member_keyword, Color color ) Sets the color for a member keyword. The member keyword cannot contain any symbols except '_'. It will not be highlighted if preceded by a '.'. void clear_color_regions ( ) Removes all color regions. void clear_keyword_colors ( ) Removes all keywords. void clear_member_keyword_colors ( ) Removes all member keywords. 
Color get_keyword_color ( String keyword ) const
 Returns the color for a keyword. 
Color get_member_keyword_color ( String member_keyword ) const
 Returns the color for a member keyword. 
bool has_color_region ( String start_key ) const
 Returns true if the start key exists, else false. 
bool has_keyword_color ( String keyword ) const
 Returns true if the keyword exists, else false. 
bool has_member_keyword_color ( String member_keyword ) const
 Returns true if the member keyword exists, else false. void remove_color_region ( String start_key ) Removes the color region that uses that start key. void remove_keyword_color ( String keyword ) Removes the keyword. void remove_member_keyword_color ( String member_keyword ) Removes the member keyword.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_codehighlighter.html


classes/class_meshinstance2d
-----------------------------------------------------------
MeshInstance2D Inherits: Node2D < CanvasItem < Node < Object Node used for displaying a Mesh in 2D.  Description Node used for displaying a Mesh in 2D. A MeshInstance2D can be automatically created from an existing Sprite2D via a tool in the editor toolbar. Select the Sprite2D node, then choose Sprite2D > Convert to MeshInstance2D at the top of the 2D editor viewport.   Tutorials  2D meshes    Properties  
Mesh mesh  
Texture2D texture     Signals texture_changed ( ) Emitted when the texture is changed.   Property Descriptions 
Mesh mesh  void set_mesh ( Mesh value )
 
Mesh get_mesh ( )
  The Mesh that will be drawn by the MeshInstance2D. 
Texture2D texture  void set_texture ( Texture2D value )
 
Texture2D get_texture ( )
  The Texture2D that will be used if using the default CanvasItemMaterial. Can be accessed as TEXTURE in CanvasItem shader.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_meshinstance2d.html


classes/class_proceduralskymaterial
-----------------------------------------------------------
ProceduralSkyMaterial Inherits: Material < Resource < RefCounted < Object A material that defines a simple sky for a Sky resource.  Description ProceduralSkyMaterial provides a way to create an effective background quickly by defining procedural parameters for the sun, the sky and the ground. The sky and ground are defined by a main color, a color at the horizon, and an easing curve to interpolate between them. Suns are described by a position in the sky, a color, and a max angle from the sun at which the easing curve ends. The max angle therefore defines the size of the sun in the sky. ProceduralSkyMaterial supports up to 4 suns, using the color, and energy, direction, and angular distance of the first four DirectionalLight3D nodes in the scene. This means that the suns are defined individually by the properties of their corresponding DirectionalLight3Ds and globally by sun_angle_max and sun_curve. ProceduralSkyMaterial uses a lightweight shader to draw the sky and is therefore suited for real-time updates. This makes it a great option for a sky that is simple and computationally cheap, but unrealistic. If you need a more realistic procedural option, use PhysicalSkyMaterial.   Properties  
Color ground_bottom_color Color(0.2, 0.169, 0.133, 1)  
float ground_curve 0.02  
float ground_energy_multiplier 1.0  
Color ground_horizon_color Color(0.6463, 0.6558, 0.6708, 1)  
Texture2D sky_cover   
Color sky_cover_modulate Color(1, 1, 1, 1)  
float sky_curve 0.15  
float sky_energy_multiplier 1.0  
Color sky_horizon_color Color(0.6463, 0.6558, 0.6708, 1)  
Color sky_top_color Color(0.385, 0.454, 0.55, 1)  
float sun_angle_max 30.0  
float sun_curve 0.15  
bool use_debanding true     Property Descriptions 
Color ground_bottom_color = Color(0.2, 0.169, 0.133, 1)
  void set_ground_bottom_color ( Color value )
 
Color get_ground_bottom_color ( )
  Color of the ground at the bottom. Blends with ground_horizon_color. 
float ground_curve = 0.02
  void set_ground_curve ( float value )
 
float get_ground_curve ( )
  How quickly the ground_horizon_color fades into the ground_bottom_color. 
float ground_energy_multiplier = 1.0
  void set_ground_energy_multiplier ( float value )
 
float get_ground_energy_multiplier ( )
  Multiplier for ground color. A higher value will make the ground brighter. 
Color ground_horizon_color = Color(0.6463, 0.6558, 0.6708, 1)
  void set_ground_horizon_color ( Color value )
 
Color get_ground_horizon_color ( )
  Color of the ground at the horizon. Blends with ground_bottom_color. 
Texture2D sky_cover  void set_sky_cover ( Texture2D value )
 
Texture2D get_sky_cover ( )
  The sky cover texture to use. This texture must use an equirectangular projection (similar to PanoramaSkyMaterial). The texture's colors will be added to the existing sky color, and will be multiplied by sky_energy_multiplier and sky_cover_modulate. This is mainly suited to displaying stars at night, but it can also be used to display clouds at day or night (with a non-physically-accurate look). 
Color sky_cover_modulate = Color(1, 1, 1, 1)
  void set_sky_cover_modulate ( Color value )
 
Color get_sky_cover_modulate ( )
  The tint to apply to the sky_cover texture. This can be used to change the sky cover's colors or opacity independently of the sky energy, which is useful for day/night or weather transitions. Only effective if a texture is defined in sky_cover. 
float sky_curve = 0.15
  void set_sky_curve ( float value )
 
float get_sky_curve ( )
  How quickly the sky_horizon_color fades into the sky_top_color. 
float sky_energy_multiplier = 1.0
  void set_sky_energy_multiplier ( float value )
 
float get_sky_energy_multiplier ( )
  Multiplier for sky color. A higher value will make the sky brighter. 
Color sky_horizon_color = Color(0.6463, 0.6558, 0.6708, 1)
  void set_sky_horizon_color ( Color value )
 
Color get_sky_horizon_color ( )
  Color of the sky at the horizon. Blends with sky_top_color. 
Color sky_top_color = Color(0.385, 0.454, 0.55, 1)
  void set_sky_top_color ( Color value )
 
Color get_sky_top_color ( )
  Color of the sky at the top. Blends with sky_horizon_color. 
float sun_angle_max = 30.0
  void set_sun_angle_max ( float value )
 
float get_sun_angle_max ( )
  Distance from center of sun where it fades out completely. 
float sun_curve = 0.15
  void set_sun_curve ( float value )
 
float get_sun_curve ( )
  How quickly the sun fades away between the edge of the sun disk and sun_angle_max. 
bool use_debanding = true
  void set_use_debanding ( bool value )
 
bool get_use_debanding ( )
  If true, enables debanding. Debanding adds a small amount of noise which helps reduce banding that appears from the smooth changes in color in the sky.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_proceduralskymaterial.html


classes/class_xrcamera3d
-----------------------------------------------------------
XRCamera3D Inherits: Camera3D < Node3D < Node < Object A camera node with a few overrules for AR/VR applied, such as location tracking.  Description This is a helper spatial node for our camera; note that, if stereoscopic rendering is applicable (VR-HMD), most of the camera properties are ignored, as the HMD information overrides them. The only properties that can be trusted are the near and far planes. The position and orientation of this node is automatically updated by the XR Server to represent the location of the HMD if such tracking is available and can thus be used by game logic. Note that, in contrast to the XR Controller, the render thread has access to the most up-to-date tracking data of the HMD and the location of the XRCamera3D can lag a few milliseconds behind what is used for rendering as a result.   Tutorials  XR documentation index   
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_xrcamera3d.html


classes/class_skeletonmodification2dstackholder
-----------------------------------------------------------
SkeletonModification2DStackHolder Inherits: SkeletonModification2D < Resource < RefCounted < Object A modification that holds and executes a SkeletonModificationStack2D.  Description This SkeletonModification2D holds a reference to a SkeletonModificationStack2D, allowing you to use multiple modification stacks on a single Skeleton2D. Note: The modifications in the held SkeletonModificationStack2D will only be executed if their execution mode matches the execution mode of the SkeletonModification2DStackHolder.   Methods  
SkeletonModificationStack2D get_held_modification_stack ( ) const  
void set_held_modification_stack ( SkeletonModificationStack2D held_modification_stack )     Method Descriptions 
SkeletonModificationStack2D get_held_modification_stack ( ) const
 Returns the SkeletonModificationStack2D that this modification is holding. void set_held_modification_stack ( SkeletonModificationStack2D held_modification_stack ) Sets the SkeletonModificationStack2D that this modification is holding. This modification stack will then be executed when this modification is executed.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_skeletonmodification2dstackholder.html


classes/class_tilemap
-----------------------------------------------------------
TileMap Inherits: Node2D < CanvasItem < Node < Object Node for 2D tile-based maps.  Description Node for 2D tile-based maps. Tilemaps use a TileSet which contain a list of tiles which are used to create grid-based maps. A TileMap may have several layers, layouting tiles on top of each other. For performance reasons, all TileMap updates are batched at the end of a frame. Notably, this means that scene tiles from a TileSetScenesCollectionSource may be initialized after their parent. This is only queued when inside the scene tree. To force an update earlier on, call update_internals.   Tutorials  Using Tilemaps 2D Platformer Demo 2D Isometric Demo 2D Hexagonal Demo 2D Navigation Astar Demo 2D Role Playing Game Demo 2D Kinematic Character Demo    Properties  
bool collision_animatable false  
VisibilityMode collision_visibility_mode 0  
VisibilityMode navigation_visibility_mode 0  
int rendering_quadrant_size 16  
TileSet tile_set      Methods  
void _tile_data_runtime_update ( int layer, Vector2i coords, TileData tile_data ) virtual  
bool _use_tile_data_runtime_update ( int layer, Vector2i coords ) virtual  
void add_layer ( int to_position )  
void clear ( )  
void clear_layer ( int layer )  
void erase_cell ( int layer, Vector2i coords )  
void fix_invalid_tiles ( )  
void force_update ( int layer=-1 )  
int get_cell_alternative_tile ( int layer, Vector2i coords, bool use_proxies=false ) const  
Vector2i get_cell_atlas_coords ( int layer, Vector2i coords, bool use_proxies=false ) const  
int get_cell_source_id ( int layer, Vector2i coords, bool use_proxies=false ) const  
TileData get_cell_tile_data ( int layer, Vector2i coords, bool use_proxies=false ) const  
Vector2i get_coords_for_body_rid ( RID body )  
int get_layer_for_body_rid ( RID body )  
Color get_layer_modulate ( int layer ) const  
String get_layer_name ( int layer ) const  
RID get_layer_navigation_map ( int layer ) const  
int get_layer_y_sort_origin ( int layer ) const  
int get_layer_z_index ( int layer ) const  
int get_layers_count ( ) const  
RID get_navigation_map ( int layer ) const  
Vector2i get_neighbor_cell ( Vector2i coords, CellNeighbor neighbor ) const  
TileMapPattern get_pattern ( int layer, Vector2i[] coords_array )  
Vector2i[] get_surrounding_cells ( Vector2i coords )  
Vector2i[] get_used_cells ( int layer ) const  
Vector2i[] get_used_cells_by_id ( int layer, int source_id=-1, Vector2i atlas_coords=Vector2i(-1, -1), int alternative_tile=-1 ) const  
Rect2i get_used_rect ( ) const  
bool is_layer_enabled ( int layer ) const  
bool is_layer_navigation_enabled ( int layer ) const  
bool is_layer_y_sort_enabled ( int layer ) const  
Vector2i local_to_map ( Vector2 local_position ) const  
Vector2i map_pattern ( Vector2i position_in_tilemap, Vector2i coords_in_pattern, TileMapPattern pattern )  
Vector2 map_to_local ( Vector2i map_position ) const  
void move_layer ( int layer, int to_position )  
void notify_runtime_tile_data_update ( int layer=-1 )  
void remove_layer ( int layer )  
void set_cell ( int layer, Vector2i coords, int source_id=-1, Vector2i atlas_coords=Vector2i(-1, -1), int alternative_tile=0 )  
void set_cells_terrain_connect ( int layer, Vector2i[] cells, int terrain_set, int terrain, bool ignore_empty_terrains=true )  
void set_cells_terrain_path ( int layer, Vector2i[] path, int terrain_set, int terrain, bool ignore_empty_terrains=true )  
void set_layer_enabled ( int layer, bool enabled )  
void set_layer_modulate ( int layer, Color modulate )  
void set_layer_name ( int layer, String name )  
void set_layer_navigation_enabled ( int layer, bool enabled )  
void set_layer_navigation_map ( int layer, RID map )  
void set_layer_y_sort_enabled ( int layer, bool y_sort_enabled )  
void set_layer_y_sort_origin ( int layer, int y_sort_origin )  
void set_layer_z_index ( int layer, int z_index )  
void set_navigation_map ( int layer, RID map )  
void set_pattern ( int layer, Vector2i position, TileMapPattern pattern )  
void update_internals ( )     Signals changed ( ) Emitted when the TileSet of this TileMap changes.   Enumerations enum VisibilityMode: 
VisibilityMode VISIBILITY_MODE_DEFAULT = 0
 Use the debug settings to determine visibility. 
VisibilityMode VISIBILITY_MODE_FORCE_HIDE = 2
 Always hide. 
VisibilityMode VISIBILITY_MODE_FORCE_SHOW = 1
 Always show.   Property Descriptions 
bool collision_animatable = false
  void set_collision_animatable ( bool value )
 
bool is_collision_animatable ( )
  If enabled, the TileMap will see its collisions synced to the physics tick and change its collision type from static to kinematic. This is required to create TileMap-based moving platform. Note: Enabling collision_animatable may have a small performance impact, only do it if the TileMap is moving and has colliding tiles. 
VisibilityMode collision_visibility_mode = 0
  void set_collision_visibility_mode ( VisibilityMode value )
 
VisibilityMode get_collision_visibility_mode ( )
  Show or hide the TileMap's collision shapes. If set to VISIBILITY_MODE_DEFAULT, this depends on the show collision debug settings. 
VisibilityMode navigation_visibility_mode = 0
  void set_navigation_visibility_mode ( VisibilityMode value )
 
VisibilityMode get_navigation_visibility_mode ( )
  Show or hide the TileMap's navigation meshes. If set to VISIBILITY_MODE_DEFAULT, this depends on the show navigation debug settings. 
int rendering_quadrant_size = 16
  void set_rendering_quadrant_size ( int value )
 
int get_rendering_quadrant_size ( )
  The TileMap's quadrant size. A quadrant is a group of tiles to be drawn together on a single canvas item, for optimization purposes. rendering_quadrant_size defines the length of a square's side, in the map's coordinate system, that forms the quadrant. Thus, the default quandrant size groups together 16 * 16 = 256 tiles. The quadrant size does not apply on Y-sorted layers, as tiles are be grouped by Y position instead in that case. Note: As quadrants are created according to the map's coordinate system, the quadrant's "square shape" might not look like square in the TileMap's local coordinate system. 
TileSet tile_set  void set_tileset ( TileSet value )
 
TileSet get_tileset ( )
  The assigned TileSet.   Method Descriptions void _tile_data_runtime_update ( int layer, Vector2i coords, TileData tile_data ) virtual
 Called with a TileData object about to be used internally by the TileMap, allowing its modification at runtime. This method is only called if _use_tile_data_runtime_update is implemented and returns true for the given tile coords and layer. Warning: The tile_data object's sub-resources are the same as the one in the TileSet. Modifying them might impact the whole TileSet. Instead, make sure to duplicate those resources. Note: If the properties of tile_data object should change over time, use notify_runtime_tile_data_update to notify the TileMap it needs an update. 
bool _use_tile_data_runtime_update ( int layer, Vector2i coords ) virtual
 Should return true if the tile at coordinates coords on layer layer requires a runtime update. Warning: Make sure this function only return true when needed. Any tile processed at runtime without a need for it will imply a significant performance penalty. Note: If the result of this function should changed, use notify_runtime_tile_data_update to notify the TileMap it needs an update. void add_layer ( int to_position ) Adds a layer at the given position to_position in the array. If to_position is negative, the position is counted from the end, with -1 adding the layer at the end of the array. void clear ( ) Clears all cells. void clear_layer ( int layer ) Clears all cells on the given layer. If layer is negative, the layers are accessed from the last one. void erase_cell ( int layer, Vector2i coords ) Erases the cell on layer layer at coordinates coords. If layer is negative, the layers are accessed from the last one. void fix_invalid_tiles ( ) Clears cells that do not exist in the tileset. void force_update ( int layer=-1 ) Deprecated. See notify_runtime_tile_data_update and update_internals. 
int get_cell_alternative_tile ( int layer, Vector2i coords, bool use_proxies=false ) const
 Returns the tile alternative ID of the cell on layer layer at coords. If use_proxies is false, ignores the TileSet's tile proxies, returning the raw alternative identifier. See TileSet.map_tile_proxy. If layer is negative, the layers are accessed from the last one. 
Vector2i get_cell_atlas_coords ( int layer, Vector2i coords, bool use_proxies=false ) const
 Returns the tile atlas coordinates ID of the cell on layer layer at coordinates coords. If use_proxies is false, ignores the TileSet's tile proxies, returning the raw alternative identifier. See TileSet.map_tile_proxy. If layer is negative, the layers are accessed from the last one. 
int get_cell_source_id ( int layer, Vector2i coords, bool use_proxies=false ) const
 Returns the tile source ID of the cell on layer layer at coordinates coords. Returns -1 if the cell does not exist. If use_proxies is false, ignores the TileSet's tile proxies, returning the raw alternative identifier. See TileSet.map_tile_proxy. If layer is negative, the layers are accessed from the last one. 
TileData get_cell_tile_data ( int layer, Vector2i coords, bool use_proxies=false ) const
 Returns the TileData object associated with the given cell, or null if the cell does not exist or is not a TileSetAtlasSource. If layer is negative, the layers are accessed from the last one. If use_proxies is false, ignores the TileSet's tile proxies, returning the raw alternative identifier. See TileSet.map_tile_proxy. func get_clicked_tile_power():
    var clicked_cell = tile_map.local_to_map(tile_map.get_local_mouse_position())
    var data = tile_map.get_cell_tile_data(0, clicked_cell)
    if data:
        return data.get_custom_data("power")
    else:
        return 0
 
Vector2i get_coords_for_body_rid ( RID body ) Returns the coordinates of the tile for given physics body RID. Such RID can be retrieved from KinematicCollision2D.get_collider_rid, when colliding with a tile. 
int get_layer_for_body_rid ( RID body ) Returns the tilemap layer of the tile for given physics body RID. Such RID can be retrieved from KinematicCollision2D.get_collider_rid, when colliding with a tile. 
Color get_layer_modulate ( int layer ) const
 Returns a TileMap layer's modulate. If layer is negative, the layers are accessed from the last one. 
String get_layer_name ( int layer ) const
 Returns a TileMap layer's name. If layer is negative, the layers are accessed from the last one. 
RID get_layer_navigation_map ( int layer ) const
 Returns the NavigationServer2D navigation map RID currently assigned to the specified TileMap layer. By default the TileMap uses the default World2D navigation map for the first TileMap layer. For each additional TileMap layer a new navigation map is created for the additional layer. In order to make NavigationAgent2D switch between TileMap layer navigation maps use NavigationAgent2D.set_navigation_map with the navigation map received from get_layer_navigation_map. If layer is negative, the layers are accessed from the last one. 
int get_layer_y_sort_origin ( int layer ) const
 Returns a TileMap layer's Y sort origin. If layer is negative, the layers are accessed from the last one. 
int get_layer_z_index ( int layer ) const
 Returns a TileMap layer's Z-index value. If layer is negative, the layers are accessed from the last one. 
int get_layers_count ( ) const
 Returns the number of layers in the TileMap. 
RID get_navigation_map ( int layer ) const
 See get_layer_navigation_map. 
Vector2i get_neighbor_cell ( Vector2i coords, CellNeighbor neighbor ) const
 Returns the neighboring cell to the one at coordinates coords, identified by the neighbor direction. This method takes into account the different layouts a TileMap can take. 
TileMapPattern get_pattern ( int layer, Vector2i[] coords_array ) Creates a new TileMapPattern from the given layer and set of cells. If layer is negative, the layers are accessed from the last one. 
Vector2i[] get_surrounding_cells ( Vector2i coords ) Returns the list of all neighbourings cells to the one at coords. 
Vector2i[] get_used_cells ( int layer ) const
 Returns a Vector2i array with the positions of all cells containing a tile in the given layer. A cell is considered empty if its source identifier equals -1, its atlas coordinates identifiers is Vector2(-1, -1) and its alternative identifier is -1. If layer is negative, the layers are accessed from the last one. 
Vector2i[] get_used_cells_by_id ( int layer, int source_id=-1, Vector2i atlas_coords=Vector2i(-1, -1), int alternative_tile=-1 ) const
 Returns a Vector2i array with the positions of all cells containing a tile in the given layer. Tiles may be filtered according to their source (source_id), their atlas coordinates (atlas_coords) or alternative id (alternative_tile). If a parameter has its value set to the default one, this parameter is not used to filter a cell. Thus, if all parameters have their respective default value, this method returns the same result as get_used_cells. A cell is considered empty if its source identifier equals -1, its atlas coordinates identifiers is Vector2(-1, -1) and its alternative identifier is -1. If layer is negative, the layers are accessed from the last one. 
Rect2i get_used_rect ( ) const
 Returns a rectangle enclosing the used (non-empty) tiles of the map, including all layers. 
bool is_layer_enabled ( int layer ) const
 Returns if a layer is enabled. If layer is negative, the layers are accessed from the last one. 
bool is_layer_navigation_enabled ( int layer ) const
 Returns if a layer's built-in navigation regions generation is enabled. 
bool is_layer_y_sort_enabled ( int layer ) const
 Returns if a layer Y-sorts its tiles. If layer is negative, the layers are accessed from the last one. 
Vector2i local_to_map ( Vector2 local_position ) const
 Returns the map coordinates of the cell containing the given local_position. If local_position is in global coordinates, consider using Node2D.to_local before passing it to this method. See also map_to_local. 
Vector2i map_pattern ( Vector2i position_in_tilemap, Vector2i coords_in_pattern, TileMapPattern pattern ) Returns for the given coordinate coords_in_pattern in a TileMapPattern the corresponding cell coordinates if the pattern was pasted at the position_in_tilemap coordinates (see set_pattern). This mapping is required as in half-offset tile shapes, the mapping might not work by calculating position_in_tile_map + coords_in_pattern. 
Vector2 map_to_local ( Vector2i map_position ) const
 Returns the centered position of a cell in the TileMap's local coordinate space. To convert the returned value into global coordinates, use Node2D.to_global. See also local_to_map. Note: This may not correspond to the visual position of the tile, i.e. it ignores the TileData.texture_origin property of individual tiles. void move_layer ( int layer, int to_position ) Moves the layer at index layer to the given position to_position in the array. void notify_runtime_tile_data_update ( int layer=-1 ) Notifies the TileMap node that calls to _use_tile_data_runtime_update or _tile_data_runtime_update will lead to different results. This will thus trigger a TileMap update. If layer is provided, only notifies changes for the given layer. Providing the layer argument (when applicable) is usually preferred for performance reasons. Warning: Updating the TileMap is computationally expensive and may impact performance. Try to limit the number of calls to this function to avoid unnecessary update. Note: This does not trigger a direct update of the TileMap, the update will be done at the end of the frame as usual (unless you call update_internals). void remove_layer ( int layer ) Removes the layer at index layer. void set_cell ( int layer, Vector2i coords, int source_id=-1, Vector2i atlas_coords=Vector2i(-1, -1), int alternative_tile=0 ) Sets the tile identifiers for the cell on layer layer at coordinates coords. Each tile of the TileSet is identified using three parts:  The source identifier source_id identifies a TileSetSource identifier. See TileSet.set_source_id, The atlas coordinates identifier atlas_coords identifies a tile coordinates in the atlas (if the source is a TileSetAtlasSource). For TileSetScenesCollectionSource it should always be Vector2i(0, 0)), The alternative tile identifier alternative_tile identifies a tile alternative in the atlas (if the source is a TileSetAtlasSource), and the scene for a TileSetScenesCollectionSource.  If source_id is set to -1, atlas_coords to Vector2i(-1, -1) or alternative_tile to -1, the cell will be erased. An erased cell gets all its identifiers automatically set to their respective invalid values, namely -1, Vector2i(-1, -1) and -1. If layer is negative, the layers are accessed from the last one. void set_cells_terrain_connect ( int layer, Vector2i[] cells, int terrain_set, int terrain, bool ignore_empty_terrains=true ) Update all the cells in the cells coordinates array so that they use the given terrain for the given terrain_set. If an updated cell has the same terrain as one of its neighboring cells, this function tries to join the two. This function might update neighboring tiles if needed to create correct terrain transitions. If ignore_empty_terrains is true, empty terrains will be ignored when trying to find the best fitting tile for the given terrain constraints. If layer is negative, the layers are accessed from the last one. Note: To work correctly, this method requires the TileMap's TileSet to have terrains set up with all required terrain combinations. Otherwise, it may produce unexpected results. void set_cells_terrain_path ( int layer, Vector2i[] path, int terrain_set, int terrain, bool ignore_empty_terrains=true ) Update all the cells in the path coordinates array so that they use the given terrain for the given terrain_set. The function will also connect two successive cell in the path with the same terrain. This function might update neighboring tiles if needed to create correct terrain transitions. If ignore_empty_terrains is true, empty terrains will be ignored when trying to find the best fitting tile for the given terrain constraints. If layer is negative, the layers are accessed from the last one. Note: To work correctly, this method requires the TileMap's TileSet to have terrains set up with all required terrain combinations. Otherwise, it may produce unexpected results. void set_layer_enabled ( int layer, bool enabled ) Enables or disables the layer layer. A disabled layer is not processed at all (no rendering, no physics, etc...). If layer is negative, the layers are accessed from the last one. void set_layer_modulate ( int layer, Color modulate ) Sets a layer's color. It will be multiplied by tile's color and TileMap's modulate. If layer is negative, the layers are accessed from the last one. void set_layer_name ( int layer, String name ) Sets a layer's name. This is mostly useful in the editor. If layer is negative, the layers are accessed from the last one. void set_layer_navigation_enabled ( int layer, bool enabled ) Enables or disables a layer's built-in navigation regions generation. Disable this if you need to bake navigation regions from a TileMap using a NavigationRegion2D node. void set_layer_navigation_map ( int layer, RID map ) Assigns a NavigationServer2D navigation map RID to the specified TileMap layer. By default the TileMap uses the default World2D navigation map for the first TileMap layer. For each additional TileMap layer a new navigation map is created for the additional layer. In order to make NavigationAgent2D switch between TileMap layer navigation maps use NavigationAgent2D.set_navigation_map with the navigation map received from get_layer_navigation_map. If layer is negative, the layers are accessed from the last one. void set_layer_y_sort_enabled ( int layer, bool y_sort_enabled ) Enables or disables a layer's Y-sorting. If a layer is Y-sorted, the layer will behave as a CanvasItem node where each of its tile gets Y-sorted. Y-sorted layers should usually be on different Z-index values than not Y-sorted layers, otherwise, each of those layer will be Y-sorted as whole with the Y-sorted one. This is usually an undesired behavior. If layer is negative, the layers are accessed from the last one. void set_layer_y_sort_origin ( int layer, int y_sort_origin ) Sets a layer's Y-sort origin value. This Y-sort origin value is added to each tile's Y-sort origin value. This allows, for example, to fake a different height level on each layer. This can be useful for top-down view games. If layer is negative, the layers are accessed from the last one. void set_layer_z_index ( int layer, int z_index ) Sets a layers Z-index value. This Z-index is added to each tile's Z-index value. If layer is negative, the layers are accessed from the last one. void set_navigation_map ( int layer, RID map ) See set_layer_navigation_map. void set_pattern ( int layer, Vector2i position, TileMapPattern pattern ) Paste the given TileMapPattern at the given position and layer in the tile map. If layer is negative, the layers are accessed from the last one. void update_internals ( ) Triggers a direct update of the TileMap. Usually, calling this function is not needed, as TileMap node updates automatically when one of its properties or cells is modified. However, for performance reasons, those updates are batched and delayed to the end of the frame. Calling this function will force the TileMap to update right away instead. Warning: Updating the TileMap is computationally expensive and may impact performance. Try to limit the number of updates and how many tiles they impact.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_tilemap.html


classes/class_directionallight2d
-----------------------------------------------------------
DirectionalLight2D Inherits: Light2D < Node2D < CanvasItem < Node < Object Directional 2D light from a distance.  Description A directional light is a type of Light2D node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene (for example: to model sunlight or moonlight). Note: DirectionalLight2D does not support light cull masks (but it supports shadow cull masks). It will always light up 2D nodes, regardless of the 2D node's CanvasItem.light_mask.   Tutorials  2D lights and shadows    Properties  
float height 0.0  
float max_distance 10000.0     Property Descriptions 
float height = 0.0
  void set_height ( float value )
 
float get_height ( )
  The height of the light. Used with 2D normal mapping. Ranges from 0 (parallel to the plane) to 1 (perpendicular to the plane). 
float max_distance = 10000.0
  void set_max_distance ( float value )
 
float get_max_distance ( )
  The maximum distance from the camera center objects can be before their shadows are culled (in pixels). Decreasing this value can prevent objects located outside the camera from casting shadows (while also improving performance). Camera2D.zoom is not taken into account by max_distance, which means that at higher zoom values, shadows will appear to fade out sooner when zooming onto a given point.  
    Â© 2014â€“present Juan Linietsky, Ariel Manzur and the Godot communityLicensed under the Creative Commons Attribution Unported License v3.0.
https://docs.godotengine.org/en/4.2/classes/class_directionallight2d.html